
metux-ahr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000107d0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08010aa0  08010aa0  00011aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010b48  08010b48  00011b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08010b50  08010b50  00011b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010b58  08010b58  00011b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  08010b5c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004740  24000064  08010bc0  00012064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240047a4  08010bc0  000127a4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00012064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002da84  00000000  00000000  00012092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005402  00000000  00000000  0003fb16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d88  00000000  00000000  00044f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000016d0  00000000  00000000  00046ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d761  00000000  00000000  00048370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002aa65  00000000  00000000  00085ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178759  00000000  00000000  000b0536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00228c8f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007f5c  00000000  00000000  00228cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  00230c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000064 	.word	0x24000064
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08010a88 	.word	0x08010a88

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000068 	.word	0x24000068
 800030c:	08010a88 	.word	0x08010a88

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	@ 0x30
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000642:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800064e:	463b      	mov	r3, r7
 8000650:	2224      	movs	r2, #36	@ 0x24
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f010 f934 	bl	80108c2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800065a:	4b50      	ldr	r3, [pc, #320]	@ (800079c <MX_ADC1_Init+0x160>)
 800065c:	4a50      	ldr	r2, [pc, #320]	@ (80007a0 <MX_ADC1_Init+0x164>)
 800065e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000660:	4b4e      	ldr	r3, [pc, #312]	@ (800079c <MX_ADC1_Init+0x160>)
 8000662:	2200      	movs	r2, #0
 8000664:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000666:	4b4d      	ldr	r3, [pc, #308]	@ (800079c <MX_ADC1_Init+0x160>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800066c:	4b4b      	ldr	r3, [pc, #300]	@ (800079c <MX_ADC1_Init+0x160>)
 800066e:	2201      	movs	r2, #1
 8000670:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000672:	4b4a      	ldr	r3, [pc, #296]	@ (800079c <MX_ADC1_Init+0x160>)
 8000674:	2208      	movs	r2, #8
 8000676:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000678:	4b48      	ldr	r3, [pc, #288]	@ (800079c <MX_ADC1_Init+0x160>)
 800067a:	2200      	movs	r2, #0
 800067c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800067e:	4b47      	ldr	r3, [pc, #284]	@ (800079c <MX_ADC1_Init+0x160>)
 8000680:	2200      	movs	r2, #0
 8000682:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 5;
 8000684:	4b45      	ldr	r3, [pc, #276]	@ (800079c <MX_ADC1_Init+0x160>)
 8000686:	2205      	movs	r2, #5
 8000688:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800068a:	4b44      	ldr	r3, [pc, #272]	@ (800079c <MX_ADC1_Init+0x160>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000692:	4b42      	ldr	r3, [pc, #264]	@ (800079c <MX_ADC1_Init+0x160>)
 8000694:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000698:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800069a:	4b40      	ldr	r3, [pc, #256]	@ (800079c <MX_ADC1_Init+0x160>)
 800069c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 80006a2:	4b3e      	ldr	r3, [pc, #248]	@ (800079c <MX_ADC1_Init+0x160>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a8:	4b3c      	ldr	r3, [pc, #240]	@ (800079c <MX_ADC1_Init+0x160>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006ae:	4b3b      	ldr	r3, [pc, #236]	@ (800079c <MX_ADC1_Init+0x160>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80006b4:	4b39      	ldr	r3, [pc, #228]	@ (800079c <MX_ADC1_Init+0x160>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80006bc:	4b37      	ldr	r3, [pc, #220]	@ (800079c <MX_ADC1_Init+0x160>)
 80006be:	2201      	movs	r2, #1
 80006c0:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c2:	4836      	ldr	r0, [pc, #216]	@ (800079c <MX_ADC1_Init+0x160>)
 80006c4:	f001 fd2c 	bl	8002120 <HAL_ADC_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80006ce:	f000 fc25 	bl	8000f1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006d2:	2300      	movs	r3, #0
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006da:	4619      	mov	r1, r3
 80006dc:	482f      	ldr	r0, [pc, #188]	@ (800079c <MX_ADC1_Init+0x160>)
 80006de:	f003 fa8b 	bl	8003bf8 <HAL_ADCEx_MultiModeConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80006e8:	f000 fc18 	bl	8000f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80006ec:	4b2d      	ldr	r3, [pc, #180]	@ (80007a4 <MX_ADC1_Init+0x168>)
 80006ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f0:	2306      	movs	r3, #6
 80006f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80006f4:	2307      	movs	r3, #7
 80006f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006f8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80006fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006fe:	2304      	movs	r3, #4
 8000700:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	4619      	mov	r1, r3
 8000710:	4822      	ldr	r0, [pc, #136]	@ (800079c <MX_ADC1_Init+0x160>)
 8000712:	f002 fa41 	bl	8002b98 <HAL_ADC_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800071c:	f000 fbfe 	bl	8000f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000720:	4b21      	ldr	r3, [pc, #132]	@ (80007a8 <MX_ADC1_Init+0x16c>)
 8000722:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000724:	230c      	movs	r3, #12
 8000726:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000728:	463b      	mov	r3, r7
 800072a:	4619      	mov	r1, r3
 800072c:	481b      	ldr	r0, [pc, #108]	@ (800079c <MX_ADC1_Init+0x160>)
 800072e:	f002 fa33 	bl	8002b98 <HAL_ADC_ConfigChannel>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000738:	f000 fbf0 	bl	8000f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800073c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ac <MX_ADC1_Init+0x170>)
 800073e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000740:	2312      	movs	r3, #18
 8000742:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	4619      	mov	r1, r3
 8000748:	4814      	ldr	r0, [pc, #80]	@ (800079c <MX_ADC1_Init+0x160>)
 800074a:	f002 fa25 	bl	8002b98 <HAL_ADC_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000754:	f000 fbe2 	bl	8000f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_ADC1_Init+0x174>)
 800075a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800075c:	2318      	movs	r3, #24
 800075e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	480d      	ldr	r0, [pc, #52]	@ (800079c <MX_ADC1_Init+0x160>)
 8000766:	f002 fa17 	bl	8002b98 <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000770:	f000 fbd4 	bl	8000f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_ADC1_Init+0x178>)
 8000776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000778:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800077c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	4619      	mov	r1, r3
 8000782:	4806      	ldr	r0, [pc, #24]	@ (800079c <MX_ADC1_Init+0x160>)
 8000784:	f002 fa08 	bl	8002b98 <HAL_ADC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 800078e:	f000 fbc5 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	3730      	adds	r7, #48	@ 0x30
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	24000080 	.word	0x24000080
 80007a0:	40022000 	.word	0x40022000
 80007a4:	43210000 	.word	0x43210000
 80007a8:	47520000 	.word	0x47520000
 80007ac:	3ac04000 	.word	0x3ac04000
 80007b0:	3ef08000 	.word	0x3ef08000
 80007b4:	4b840000 	.word	0x4b840000

080007b8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	@ 0x28
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2224      	movs	r2, #36	@ 0x24
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f010 f87c 	bl	80108c2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007ca:	4b3f      	ldr	r3, [pc, #252]	@ (80008c8 <MX_ADC2_Init+0x110>)
 80007cc:	4a3f      	ldr	r2, [pc, #252]	@ (80008cc <MX_ADC2_Init+0x114>)
 80007ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007d0:	4b3d      	ldr	r3, [pc, #244]	@ (80008c8 <MX_ADC2_Init+0x110>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80007d6:	4b3c      	ldr	r3, [pc, #240]	@ (80008c8 <MX_ADC2_Init+0x110>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007dc:	4b3a      	ldr	r3, [pc, #232]	@ (80008c8 <MX_ADC2_Init+0x110>)
 80007de:	2201      	movs	r2, #1
 80007e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007e2:	4b39      	ldr	r3, [pc, #228]	@ (80008c8 <MX_ADC2_Init+0x110>)
 80007e4:	2208      	movs	r2, #8
 80007e6:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007e8:	4b37      	ldr	r3, [pc, #220]	@ (80008c8 <MX_ADC2_Init+0x110>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007ee:	4b36      	ldr	r3, [pc, #216]	@ (80008c8 <MX_ADC2_Init+0x110>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 4;
 80007f4:	4b34      	ldr	r3, [pc, #208]	@ (80008c8 <MX_ADC2_Init+0x110>)
 80007f6:	2204      	movs	r2, #4
 80007f8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007fa:	4b33      	ldr	r3, [pc, #204]	@ (80008c8 <MX_ADC2_Init+0x110>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000802:	4b31      	ldr	r3, [pc, #196]	@ (80008c8 <MX_ADC2_Init+0x110>)
 8000804:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8000808:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800080a:	4b2f      	ldr	r3, [pc, #188]	@ (80008c8 <MX_ADC2_Init+0x110>)
 800080c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000810:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8000812:	4b2d      	ldr	r3, [pc, #180]	@ (80008c8 <MX_ADC2_Init+0x110>)
 8000814:	2201      	movs	r2, #1
 8000816:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000818:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <MX_ADC2_Init+0x110>)
 800081a:	2200      	movs	r2, #0
 800081c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800081e:	4b2a      	ldr	r3, [pc, #168]	@ (80008c8 <MX_ADC2_Init+0x110>)
 8000820:	2200      	movs	r2, #0
 8000822:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000824:	4b28      	ldr	r3, [pc, #160]	@ (80008c8 <MX_ADC2_Init+0x110>)
 8000826:	2200      	movs	r2, #0
 8000828:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 800082c:	4b26      	ldr	r3, [pc, #152]	@ (80008c8 <MX_ADC2_Init+0x110>)
 800082e:	2201      	movs	r2, #1
 8000830:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000832:	4825      	ldr	r0, [pc, #148]	@ (80008c8 <MX_ADC2_Init+0x110>)
 8000834:	f001 fc74 	bl	8002120 <HAL_ADC_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800083e:	f000 fb6d 	bl	8000f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000842:	4b23      	ldr	r3, [pc, #140]	@ (80008d0 <MX_ADC2_Init+0x118>)
 8000844:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000846:	2306      	movs	r3, #6
 8000848:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800084a:	2307      	movs	r3, #7
 800084c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800084e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000852:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000854:	2304      	movs	r3, #4
 8000856:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4619      	mov	r1, r3
 8000866:	4818      	ldr	r0, [pc, #96]	@ (80008c8 <MX_ADC2_Init+0x110>)
 8000868:	f002 f996 	bl	8002b98 <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 8000872:	f000 fb53 	bl	8000f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000876:	230c      	movs	r3, #12
 8000878:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4619      	mov	r1, r3
 800087e:	4812      	ldr	r0, [pc, #72]	@ (80008c8 <MX_ADC2_Init+0x110>)
 8000880:	f002 f98a 	bl	8002b98 <HAL_ADC_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 800088a:	f000 fb47 	bl	8000f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800088e:	2312      	movs	r3, #18
 8000890:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	4619      	mov	r1, r3
 8000896:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <MX_ADC2_Init+0x110>)
 8000898:	f002 f97e 	bl	8002b98 <HAL_ADC_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 80008a2:	f000 fb3b 	bl	8000f1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80008a6:	2318      	movs	r3, #24
 80008a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	4619      	mov	r1, r3
 80008ae:	4806      	ldr	r0, [pc, #24]	@ (80008c8 <MX_ADC2_Init+0x110>)
 80008b0:	f002 f972 	bl	8002b98 <HAL_ADC_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC2_Init+0x106>
  {
    Error_Handler();
 80008ba:	f000 fb2f 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	@ 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	240000f0 	.word	0x240000f0
 80008cc:	40022100 	.word	0x40022100
 80008d0:	10c00010 	.word	0x10c00010

080008d4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08c      	sub	sp, #48	@ 0x30
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a84      	ldr	r2, [pc, #528]	@ (8000b04 <HAL_ADC_MspInit+0x230>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d176      	bne.n	80009e4 <HAL_ADC_MspInit+0x110>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008f6:	4b84      	ldr	r3, [pc, #528]	@ (8000b08 <HAL_ADC_MspInit+0x234>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	3301      	adds	r3, #1
 80008fc:	4a82      	ldr	r2, [pc, #520]	@ (8000b08 <HAL_ADC_MspInit+0x234>)
 80008fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000900:	4b81      	ldr	r3, [pc, #516]	@ (8000b08 <HAL_ADC_MspInit+0x234>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d10e      	bne.n	8000926 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000908:	4b80      	ldr	r3, [pc, #512]	@ (8000b0c <HAL_ADC_MspInit+0x238>)
 800090a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800090e:	4a7f      	ldr	r2, [pc, #508]	@ (8000b0c <HAL_ADC_MspInit+0x238>)
 8000910:	f043 0320 	orr.w	r3, r3, #32
 8000914:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000918:	4b7c      	ldr	r3, [pc, #496]	@ (8000b0c <HAL_ADC_MspInit+0x238>)
 800091a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800091e:	f003 0320 	and.w	r3, r3, #32
 8000922:	61bb      	str	r3, [r7, #24]
 8000924:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b79      	ldr	r3, [pc, #484]	@ (8000b0c <HAL_ADC_MspInit+0x238>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092c:	4a77      	ldr	r2, [pc, #476]	@ (8000b0c <HAL_ADC_MspInit+0x238>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000936:	4b75      	ldr	r3, [pc, #468]	@ (8000b0c <HAL_ADC_MspInit+0x238>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	697b      	ldr	r3, [r7, #20]
    PA1     ------> ADC1_INP17
    PA2     ------> ADC1_INP14
    PA3     ------> ADC1_INP15
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000944:	230f      	movs	r3, #15
 8000946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000948:	2303      	movs	r3, #3
 800094a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800094c:	2302      	movs	r3, #2
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	486e      	ldr	r0, [pc, #440]	@ (8000b10 <HAL_ADC_MspInit+0x23c>)
 8000958:	f006 f948 	bl	8006bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800095c:	2310      	movs	r3, #16
 800095e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000960:	2303      	movs	r3, #3
 8000962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4868      	ldr	r0, [pc, #416]	@ (8000b10 <HAL_ADC_MspInit+0x23c>)
 8000970:	f006 f93c 	bl	8006bec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000974:	4b67      	ldr	r3, [pc, #412]	@ (8000b14 <HAL_ADC_MspInit+0x240>)
 8000976:	4a68      	ldr	r2, [pc, #416]	@ (8000b18 <HAL_ADC_MspInit+0x244>)
 8000978:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800097a:	4b66      	ldr	r3, [pc, #408]	@ (8000b14 <HAL_ADC_MspInit+0x240>)
 800097c:	2209      	movs	r2, #9
 800097e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000980:	4b64      	ldr	r3, [pc, #400]	@ (8000b14 <HAL_ADC_MspInit+0x240>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000986:	4b63      	ldr	r3, [pc, #396]	@ (8000b14 <HAL_ADC_MspInit+0x240>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800098c:	4b61      	ldr	r3, [pc, #388]	@ (8000b14 <HAL_ADC_MspInit+0x240>)
 800098e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000992:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000994:	4b5f      	ldr	r3, [pc, #380]	@ (8000b14 <HAL_ADC_MspInit+0x240>)
 8000996:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800099a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800099c:	4b5d      	ldr	r3, [pc, #372]	@ (8000b14 <HAL_ADC_MspInit+0x240>)
 800099e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009a2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80009a4:	4b5b      	ldr	r3, [pc, #364]	@ (8000b14 <HAL_ADC_MspInit+0x240>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009aa:	4b5a      	ldr	r3, [pc, #360]	@ (8000b14 <HAL_ADC_MspInit+0x240>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009b0:	4b58      	ldr	r3, [pc, #352]	@ (8000b14 <HAL_ADC_MspInit+0x240>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009b6:	4857      	ldr	r0, [pc, #348]	@ (8000b14 <HAL_ADC_MspInit+0x240>)
 80009b8:	f003 fae0 	bl	8003f7c <HAL_DMA_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 80009c2:	f000 faab 	bl	8000f1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a52      	ldr	r2, [pc, #328]	@ (8000b14 <HAL_ADC_MspInit+0x240>)
 80009ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80009cc:	4a51      	ldr	r2, [pc, #324]	@ (8000b14 <HAL_ADC_MspInit+0x240>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2105      	movs	r1, #5
 80009d6:	2012      	movs	r0, #18
 80009d8:	f003 faa8 	bl	8003f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009dc:	2012      	movs	r0, #18
 80009de:	f003 fabf 	bl	8003f60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80009e2:	e08a      	b.n	8000afa <HAL_ADC_MspInit+0x226>
  else if(adcHandle->Instance==ADC2)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a4c      	ldr	r2, [pc, #304]	@ (8000b1c <HAL_ADC_MspInit+0x248>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	f040 8085 	bne.w	8000afa <HAL_ADC_MspInit+0x226>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80009f0:	4b45      	ldr	r3, [pc, #276]	@ (8000b08 <HAL_ADC_MspInit+0x234>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	4a44      	ldr	r2, [pc, #272]	@ (8000b08 <HAL_ADC_MspInit+0x234>)
 80009f8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80009fa:	4b43      	ldr	r3, [pc, #268]	@ (8000b08 <HAL_ADC_MspInit+0x234>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d10e      	bne.n	8000a20 <HAL_ADC_MspInit+0x14c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a02:	4b42      	ldr	r3, [pc, #264]	@ (8000b0c <HAL_ADC_MspInit+0x238>)
 8000a04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a08:	4a40      	ldr	r2, [pc, #256]	@ (8000b0c <HAL_ADC_MspInit+0x238>)
 8000a0a:	f043 0320 	orr.w	r3, r3, #32
 8000a0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a12:	4b3e      	ldr	r3, [pc, #248]	@ (8000b0c <HAL_ADC_MspInit+0x238>)
 8000a14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a18:	f003 0320 	and.w	r3, r3, #32
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a20:	4b3a      	ldr	r3, [pc, #232]	@ (8000b0c <HAL_ADC_MspInit+0x238>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a26:	4a39      	ldr	r2, [pc, #228]	@ (8000b0c <HAL_ADC_MspInit+0x238>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a30:	4b36      	ldr	r3, [pc, #216]	@ (8000b0c <HAL_ADC_MspInit+0x238>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	4b33      	ldr	r3, [pc, #204]	@ (8000b0c <HAL_ADC_MspInit+0x238>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a44:	4a31      	ldr	r2, [pc, #196]	@ (8000b0c <HAL_ADC_MspInit+0x238>)
 8000a46:	f043 0302 	orr.w	r3, r3, #2
 8000a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b0c <HAL_ADC_MspInit+0x238>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a54:	f003 0302 	and.w	r3, r3, #2
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a5c:	2330      	movs	r3, #48	@ 0x30
 8000a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a60:	2303      	movs	r3, #3
 8000a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	482c      	ldr	r0, [pc, #176]	@ (8000b20 <HAL_ADC_MspInit+0x24c>)
 8000a70:	f006 f8bc 	bl	8006bec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a74:	2303      	movs	r3, #3
 8000a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4827      	ldr	r0, [pc, #156]	@ (8000b24 <HAL_ADC_MspInit+0x250>)
 8000a88:	f006 f8b0 	bl	8006bec <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8000a8c:	4b26      	ldr	r3, [pc, #152]	@ (8000b28 <HAL_ADC_MspInit+0x254>)
 8000a8e:	4a27      	ldr	r2, [pc, #156]	@ (8000b2c <HAL_ADC_MspInit+0x258>)
 8000a90:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000a92:	4b25      	ldr	r3, [pc, #148]	@ (8000b28 <HAL_ADC_MspInit+0x254>)
 8000a94:	220a      	movs	r2, #10
 8000a96:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a98:	4b23      	ldr	r3, [pc, #140]	@ (8000b28 <HAL_ADC_MspInit+0x254>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a9e:	4b22      	ldr	r3, [pc, #136]	@ (8000b28 <HAL_ADC_MspInit+0x254>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000aa4:	4b20      	ldr	r3, [pc, #128]	@ (8000b28 <HAL_ADC_MspInit+0x254>)
 8000aa6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aaa:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <HAL_ADC_MspInit+0x254>)
 8000aae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ab2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <HAL_ADC_MspInit+0x254>)
 8000ab6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aba:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <HAL_ADC_MspInit+0x254>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <HAL_ADC_MspInit+0x254>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <HAL_ADC_MspInit+0x254>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000ace:	4816      	ldr	r0, [pc, #88]	@ (8000b28 <HAL_ADC_MspInit+0x254>)
 8000ad0:	f003 fa54 	bl	8003f7c <HAL_DMA_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_ADC_MspInit+0x20a>
      Error_Handler();
 8000ada:	f000 fa1f 	bl	8000f1c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a11      	ldr	r2, [pc, #68]	@ (8000b28 <HAL_ADC_MspInit+0x254>)
 8000ae2:	659a      	str	r2, [r3, #88]	@ 0x58
 8000ae4:	4a10      	ldr	r2, [pc, #64]	@ (8000b28 <HAL_ADC_MspInit+0x254>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2105      	movs	r1, #5
 8000aee:	2012      	movs	r0, #18
 8000af0:	f003 fa1c 	bl	8003f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000af4:	2012      	movs	r0, #18
 8000af6:	f003 fa33 	bl	8003f60 <HAL_NVIC_EnableIRQ>
}
 8000afa:	bf00      	nop
 8000afc:	3730      	adds	r7, #48	@ 0x30
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40022000 	.word	0x40022000
 8000b08:	24000250 	.word	0x24000250
 8000b0c:	58024400 	.word	0x58024400
 8000b10:	58020000 	.word	0x58020000
 8000b14:	24000160 	.word	0x24000160
 8000b18:	40020010 	.word	0x40020010
 8000b1c:	40022100 	.word	0x40022100
 8000b20:	58020800 	.word	0x58020800
 8000b24:	58020400 	.word	0x58020400
 8000b28:	240001d8 	.word	0x240001d8
 8000b2c:	40020028 	.word	0x40020028

08000b30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <MX_DMA_Init+0x5c>)
 8000b38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b3c:	4a13      	ldr	r2, [pc, #76]	@ (8000b8c <MX_DMA_Init+0x5c>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b46:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <MX_DMA_Init+0x5c>)
 8000b48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2105      	movs	r1, #5
 8000b58:	200b      	movs	r0, #11
 8000b5a:	f003 f9e7 	bl	8003f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b5e:	200b      	movs	r0, #11
 8000b60:	f003 f9fe 	bl	8003f60 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2105      	movs	r1, #5
 8000b68:	200c      	movs	r0, #12
 8000b6a:	f003 f9df 	bl	8003f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b6e:	200c      	movs	r0, #12
 8000b70:	f003 f9f6 	bl	8003f60 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2105      	movs	r1, #5
 8000b78:	200d      	movs	r0, #13
 8000b7a:	f003 f9d7 	bl	8003f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b7e:	200d      	movs	r0, #13
 8000b80:	f003 f9ee 	bl	8003f60 <HAL_NVIC_EnableIRQ>

}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	58024400 	.word	0x58024400

08000b90 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4a07      	ldr	r2, [pc, #28]	@ (8000bbc <vApplicationGetIdleTaskMemory+0x2c>)
 8000ba0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	4a06      	ldr	r2, [pc, #24]	@ (8000bc0 <vApplicationGetIdleTaskMemory+0x30>)
 8000ba6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2280      	movs	r2, #128	@ 0x80
 8000bac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bae:	bf00      	nop
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	24000258 	.word	0x24000258
 8000bc0:	240002f8 	.word	0x240002f8

08000bc4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000bc4:	b5b0      	push	{r4, r5, r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000bca:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <MX_FREERTOS_Init+0x30>)
 8000bcc:	1d3c      	adds	r4, r7, #4
 8000bce:	461d      	mov	r5, r3
 8000bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f00d fe9c 	bl	800e91e <osThreadCreate>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4a03      	ldr	r2, [pc, #12]	@ (8000bf8 <MX_FREERTOS_Init+0x34>)
 8000bea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8000bf4:	08010aac 	.word	0x08010aac
 8000bf8:	24000254 	.word	0x24000254

08000bfc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f00d fed6 	bl	800e9b6 <osDelay>
 8000c0a:	e7fb      	b.n	8000c04 <StartDefaultTask+0x8>

08000c0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	@ 0x28
 8000c10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c22:	4b51      	ldr	r3, [pc, #324]	@ (8000d68 <MX_GPIO_Init+0x15c>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c28:	4a4f      	ldr	r2, [pc, #316]	@ (8000d68 <MX_GPIO_Init+0x15c>)
 8000c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c32:	4b4d      	ldr	r3, [pc, #308]	@ (8000d68 <MX_GPIO_Init+0x15c>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c40:	4b49      	ldr	r3, [pc, #292]	@ (8000d68 <MX_GPIO_Init+0x15c>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c46:	4a48      	ldr	r2, [pc, #288]	@ (8000d68 <MX_GPIO_Init+0x15c>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c50:	4b45      	ldr	r3, [pc, #276]	@ (8000d68 <MX_GPIO_Init+0x15c>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	4b42      	ldr	r3, [pc, #264]	@ (8000d68 <MX_GPIO_Init+0x15c>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c64:	4a40      	ldr	r2, [pc, #256]	@ (8000d68 <MX_GPIO_Init+0x15c>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8000d68 <MX_GPIO_Init+0x15c>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d68 <MX_GPIO_Init+0x15c>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c82:	4a39      	ldr	r2, [pc, #228]	@ (8000d68 <MX_GPIO_Init+0x15c>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c8c:	4b36      	ldr	r3, [pc, #216]	@ (8000d68 <MX_GPIO_Init+0x15c>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9a:	4b33      	ldr	r3, [pc, #204]	@ (8000d68 <MX_GPIO_Init+0x15c>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca0:	4a31      	ldr	r2, [pc, #196]	@ (8000d68 <MX_GPIO_Init+0x15c>)
 8000ca2:	f043 0308 	orr.w	r3, r3, #8
 8000ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000caa:	4b2f      	ldr	r3, [pc, #188]	@ (8000d68 <MX_GPIO_Init+0x15c>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb0:	f003 0308 	and.w	r3, r3, #8
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMU_WAKE_Pin|IMU_RST_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f248 0180 	movw	r1, #32896	@ 0x8080
 8000cbe:	482b      	ldr	r0, [pc, #172]	@ (8000d6c <MX_GPIO_Init+0x160>)
 8000cc0:	f006 f93c 	bl	8006f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RIGHT_EN_1_Pin|LEFT_EN_1_Pin|RIGHT_EN_2_Pin|LEFT_EN_2_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8000cca:	4829      	ldr	r0, [pc, #164]	@ (8000d70 <MX_GPIO_Init+0x164>)
 8000ccc:	f006 f936 	bl	8006f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RIGHT_EN_3_Pin|LEFT_EN_3_Pin|RIGHT_EN_4_Pin|LEFT_EN_4_Pin
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 61f8 	mov.w	r1, #1984	@ 0x7c0
 8000cd6:	4827      	ldr	r0, [pc, #156]	@ (8000d74 <MX_GPIO_Init+0x168>)
 8000cd8:	f006 f930 	bl	8006f3c <HAL_GPIO_WritePin>
                          |IMU_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : IMU_WAKE_Pin IMU_RST_Pin */
  GPIO_InitStruct.Pin = IMU_WAKE_Pin|IMU_RST_Pin;
 8000cdc:	f248 0380 	movw	r3, #32896	@ 0x8080
 8000ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	481d      	ldr	r0, [pc, #116]	@ (8000d6c <MX_GPIO_Init+0x160>)
 8000cf6:	f005 ff79 	bl	8006bec <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_EN_1_Pin LEFT_EN_1_Pin RIGHT_EN_2_Pin LEFT_EN_2_Pin */
  GPIO_InitStruct.Pin = RIGHT_EN_1_Pin|LEFT_EN_1_Pin|RIGHT_EN_2_Pin|LEFT_EN_2_Pin;
 8000cfa:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4817      	ldr	r0, [pc, #92]	@ (8000d70 <MX_GPIO_Init+0x164>)
 8000d14:	f005 ff6a 	bl	8006bec <HAL_GPIO_Init>

  /*Configure GPIO pins : RIGHT_EN_3_Pin LEFT_EN_3_Pin RIGHT_EN_4_Pin LEFT_EN_4_Pin
                           IMU_CS_Pin */
  GPIO_InitStruct.Pin = RIGHT_EN_3_Pin|LEFT_EN_3_Pin|RIGHT_EN_4_Pin|LEFT_EN_4_Pin
 8000d18:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000d1c:	617b      	str	r3, [r7, #20]
                          |IMU_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4810      	ldr	r0, [pc, #64]	@ (8000d74 <MX_GPIO_Init+0x168>)
 8000d32:	f005 ff5b 	bl	8006bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d36:	2320      	movs	r3, #32
 8000d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d3a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480b      	ldr	r0, [pc, #44]	@ (8000d78 <MX_GPIO_Init+0x16c>)
 8000d4c:	f005 ff4e 	bl	8006bec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2105      	movs	r1, #5
 8000d54:	2017      	movs	r0, #23
 8000d56:	f003 f8e9 	bl	8003f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d5a:	2017      	movs	r0, #23
 8000d5c:	f003 f900 	bl	8003f60 <HAL_NVIC_EnableIRQ>

}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	@ 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	58020000 	.word	0x58020000
 8000d70:	58020c00 	.word	0x58020c00
 8000d74:	58020800 	.word	0x58020800
 8000d78:	58020400 	.word	0x58020400

08000d7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d80:	f000 fe26 	bl	80019d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d84:	f000 f81a 	bl	8000dbc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d88:	f000 f886 	bl	8000e98 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8c:	f7ff ff3e 	bl	8000c0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d90:	f7ff fece 	bl	8000b30 <MX_DMA_Init>
  MX_SPI1_Init();
 8000d94:	f000 f8c8 	bl	8000f28 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000d98:	f000 fd00 	bl	800179c <MX_USART2_UART_Init>
  MX_TIM23_Init();
 8000d9c:	f000 fc16 	bl	80015cc <MX_TIM23_Init>
  MX_ADC1_Init();
 8000da0:	f7ff fc4c 	bl	800063c <MX_ADC1_Init>
  MX_TIM6_Init();
 8000da4:	f000 fbda 	bl	800155c <MX_TIM6_Init>
  MX_ADC2_Init();
 8000da8:	f7ff fd06 	bl	80007b8 <MX_ADC2_Init>
  MX_TIM4_Init();
 8000dac:	f000 fb3e 	bl	800142c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000db0:	f7ff ff08 	bl	8000bc4 <MX_FREERTOS_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_start();
 8000db4:	f00f fc16 	bl	80105e4 <app_start>
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <main+0x3c>

08000dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b09c      	sub	sp, #112	@ 0x70
 8000dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc6:	224c      	movs	r2, #76	@ 0x4c
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f00f fd79 	bl	80108c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2220      	movs	r2, #32
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f00f fd73 	bl	80108c2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f006 f8eb 	bl	8006fb8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e94 <SystemClock_Config+0xd8>)
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	4a2a      	ldr	r2, [pc, #168]	@ (8000e94 <SystemClock_Config+0xd8>)
 8000dec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000df0:	6193      	str	r3, [r2, #24]
 8000df2:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <SystemClock_Config+0xd8>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dfe:	bf00      	nop
 8000e00:	4b24      	ldr	r3, [pc, #144]	@ (8000e94 <SystemClock_Config+0xd8>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e0c:	d1f8      	bne.n	8000e00 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e12:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000e24:	232c      	movs	r3, #44	@ 0x2c
 8000e26:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 55;
 8000e2c:	2337      	movs	r3, #55	@ 0x37
 8000e2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e34:	230c      	movs	r3, #12
 8000e36:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e44:	4618      	mov	r0, r3
 8000e46:	f006 f8f1 	bl	800702c <HAL_RCC_OscConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e50:	f000 f864 	bl	8000f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e54:	233f      	movs	r3, #63	@ 0x3f
 8000e56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e60:	2308      	movs	r3, #8
 8000e62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e64:	2340      	movs	r3, #64	@ 0x40
 8000e66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e68:	2340      	movs	r3, #64	@ 0x40
 8000e6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e70:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e72:	2340      	movs	r3, #64	@ 0x40
 8000e74:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2103      	movs	r1, #3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f006 fcb0 	bl	80077e0 <HAL_RCC_ClockConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000e86:	f000 f849 	bl	8000f1c <Error_Handler>
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	3770      	adds	r7, #112	@ 0x70
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	58024800 	.word	0x58024800

08000e98 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b0ae      	sub	sp, #184	@ 0xb8
 8000e9c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	22b8      	movs	r2, #184	@ 0xb8
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f00f fd0c 	bl	80108c2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000eaa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 16;
 8000eb6:	2310      	movs	r3, #16
 8000eb8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 8000eba:	2380      	movs	r3, #128	@ 0x80
 8000ebc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000ece:	2320      	movs	r3, #32
 8000ed0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000edc:	463b      	mov	r3, r7
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f007 f84c 	bl	8007f7c <HAL_RCCEx_PeriphCLKConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000eea:	f000 f817 	bl	8000f1c <Error_Handler>
  }
}
 8000eee:	bf00      	nop
 8000ef0:	37b8      	adds	r7, #184	@ 0xb8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a04      	ldr	r2, [pc, #16]	@ (8000f18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d101      	bne.n	8000f0e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f0a:	f000 fd9d 	bl	8001a48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40014800 	.word	0x40014800

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f20:	b672      	cpsid	i
}
 8000f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <Error_Handler+0x8>

08000f28 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f2c:	4b27      	ldr	r3, [pc, #156]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000f2e:	4a28      	ldr	r2, [pc, #160]	@ (8000fd0 <MX_SPI1_Init+0xa8>)
 8000f30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f32:	4b26      	ldr	r3, [pc, #152]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000f34:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f3a:	4b24      	ldr	r3, [pc, #144]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f40:	4b22      	ldr	r3, [pc, #136]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000f42:	2203      	movs	r2, #3
 8000f44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f46:	4b21      	ldr	r3, [pc, #132]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f52:	4b1e      	ldr	r3, [pc, #120]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000f54:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f60:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f66:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f6c:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f72:	4b16      	ldr	r3, [pc, #88]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f78:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000f7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f7e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f80:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f86:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <MX_SPI1_Init+0xa4>)
 8000fb8:	f009 fbc6 	bl	800a748 <HAL_SPI_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000fc2:	f7ff ffab 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	240004f8 	.word	0x240004f8
 8000fd0:	40013000 	.word	0x40013000

08000fd4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b0ba      	sub	sp, #232	@ 0xe8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fec:	f107 0318 	add.w	r3, r7, #24
 8000ff0:	22b8      	movs	r2, #184	@ 0xb8
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f00f fc64 	bl	80108c2 <memset>
  if(spiHandle->Instance==SPI1)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a3c      	ldr	r2, [pc, #240]	@ (80010f0 <HAL_SPI_MspInit+0x11c>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d170      	bne.n	80010e6 <HAL_SPI_MspInit+0x112>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001004:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001010:	2300      	movs	r3, #0
 8001012:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001014:	f107 0318 	add.w	r3, r7, #24
 8001018:	4618      	mov	r0, r3
 800101a:	f006 ffaf 	bl	8007f7c <HAL_RCCEx_PeriphCLKConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001024:	f7ff ff7a 	bl	8000f1c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001028:	4b32      	ldr	r3, [pc, #200]	@ (80010f4 <HAL_SPI_MspInit+0x120>)
 800102a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800102e:	4a31      	ldr	r2, [pc, #196]	@ (80010f4 <HAL_SPI_MspInit+0x120>)
 8001030:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001034:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001038:	4b2e      	ldr	r3, [pc, #184]	@ (80010f4 <HAL_SPI_MspInit+0x120>)
 800103a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800103e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001046:	4b2b      	ldr	r3, [pc, #172]	@ (80010f4 <HAL_SPI_MspInit+0x120>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104c:	4a29      	ldr	r2, [pc, #164]	@ (80010f4 <HAL_SPI_MspInit+0x120>)
 800104e:	f043 0308 	orr.w	r3, r3, #8
 8001052:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001056:	4b27      	ldr	r3, [pc, #156]	@ (80010f4 <HAL_SPI_MspInit+0x120>)
 8001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105c:	f003 0308 	and.w	r3, r3, #8
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001064:	4b23      	ldr	r3, [pc, #140]	@ (80010f4 <HAL_SPI_MspInit+0x120>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106a:	4a22      	ldr	r2, [pc, #136]	@ (80010f4 <HAL_SPI_MspInit+0x120>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001074:	4b1f      	ldr	r3, [pc, #124]	@ (80010f4 <HAL_SPI_MspInit+0x120>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PB4(NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001082:	2380      	movs	r3, #128	@ 0x80
 8001084:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800109a:	2305      	movs	r3, #5
 800109c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010a4:	4619      	mov	r1, r3
 80010a6:	4814      	ldr	r0, [pc, #80]	@ (80010f8 <HAL_SPI_MspInit+0x124>)
 80010a8:	f005 fda0 	bl	8006bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80010ac:	2318      	movs	r3, #24
 80010ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010c4:	2305      	movs	r3, #5
 80010c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010ce:	4619      	mov	r1, r3
 80010d0:	480a      	ldr	r0, [pc, #40]	@ (80010fc <HAL_SPI_MspInit+0x128>)
 80010d2:	f005 fd8b 	bl	8006bec <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2105      	movs	r1, #5
 80010da:	2023      	movs	r0, #35	@ 0x23
 80010dc:	f002 ff26 	bl	8003f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80010e0:	2023      	movs	r0, #35	@ 0x23
 80010e2:	f002 ff3d 	bl	8003f60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010e6:	bf00      	nop
 80010e8:	37e8      	adds	r7, #232	@ 0xe8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40013000 	.word	0x40013000
 80010f4:	58024400 	.word	0x58024400
 80010f8:	58020c00 	.word	0x58020c00
 80010fc:	58020400 	.word	0x58020400

08001100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <HAL_MspInit+0x38>)
 8001108:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800110c:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <HAL_MspInit+0x38>)
 800110e:	f043 0302 	orr.w	r3, r3, #2
 8001112:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001116:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <HAL_MspInit+0x38>)
 8001118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	210f      	movs	r1, #15
 8001128:	f06f 0001 	mvn.w	r0, #1
 800112c:	f002 fefe 	bl	8003f2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	58024400 	.word	0x58024400

0800113c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	@ 0x38
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b0f      	cmp	r3, #15
 8001148:	d844      	bhi.n	80011d4 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 800114a:	2200      	movs	r2, #0
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	2076      	movs	r0, #118	@ 0x76
 8001150:	f002 feec 	bl	8003f2c <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001154:	2076      	movs	r0, #118	@ 0x76
 8001156:	f002 ff03 	bl	8003f60 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800115a:	4a24      	ldr	r2, [pc, #144]	@ (80011ec <HAL_InitTick+0xb0>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001160:	4b23      	ldr	r3, [pc, #140]	@ (80011f0 <HAL_InitTick+0xb4>)
 8001162:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001166:	4a22      	ldr	r2, [pc, #136]	@ (80011f0 <HAL_InitTick+0xb4>)
 8001168:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800116c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001170:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <HAL_InitTick+0xb4>)
 8001172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001176:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800117e:	f107 020c 	add.w	r2, r7, #12
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f006 feb5 	bl	8007ef8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800118e:	f006 fe9d 	bl	8007ecc <HAL_RCC_GetPCLK2Freq>
 8001192:	4603      	mov	r3, r0
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800119a:	4a16      	ldr	r2, [pc, #88]	@ (80011f4 <HAL_InitTick+0xb8>)
 800119c:	fba2 2303 	umull	r2, r3, r2, r3
 80011a0:	0c9b      	lsrs	r3, r3, #18
 80011a2:	3b01      	subs	r3, #1
 80011a4:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80011a6:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <HAL_InitTick+0xbc>)
 80011a8:	4a14      	ldr	r2, [pc, #80]	@ (80011fc <HAL_InitTick+0xc0>)
 80011aa:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <HAL_InitTick+0xbc>)
 80011ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011b2:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80011b4:	4a10      	ldr	r2, [pc, #64]	@ (80011f8 <HAL_InitTick+0xbc>)
 80011b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011b8:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <HAL_InitTick+0xbc>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c0:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <HAL_InitTick+0xbc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80011c6:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <HAL_InitTick+0xbc>)
 80011c8:	f009 feb7 	bl	800af3a <HAL_TIM_Base_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d107      	bne.n	80011e2 <HAL_InitTick+0xa6>
 80011d2:	e001      	b.n	80011d8 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e005      	b.n	80011e4 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80011d8:	4807      	ldr	r0, [pc, #28]	@ (80011f8 <HAL_InitTick+0xbc>)
 80011da:	f009 ff83 	bl	800b0e4 <HAL_TIM_Base_Start_IT>
 80011de:	4603      	mov	r3, r0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3738      	adds	r7, #56	@ 0x38
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	24000008 	.word	0x24000008
 80011f0:	58024400 	.word	0x58024400
 80011f4:	431bde83 	.word	0x431bde83
 80011f8:	24000580 	.word	0x24000580
 80011fc:	40014800 	.word	0x40014800

08001200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <NMI_Handler+0x4>

08001208 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <MemManage_Handler+0x4>

08001218 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <BusFault_Handler+0x4>

08001220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <UsageFault_Handler+0x4>

08001228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800123c:	4802      	ldr	r0, [pc, #8]	@ (8001248 <DMA1_Stream0_IRQHandler+0x10>)
 800123e:	f004 f9c3 	bl	80055c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	24000160 	.word	0x24000160

0800124c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001250:	4802      	ldr	r0, [pc, #8]	@ (800125c <DMA1_Stream1_IRQHandler+0x10>)
 8001252:	f004 f9b9 	bl	80055c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	240001d8 	.word	0x240001d8

08001260 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001264:	4802      	ldr	r0, [pc, #8]	@ (8001270 <DMA1_Stream2_IRQHandler+0x10>)
 8001266:	f004 f9af 	bl	80055c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	24000744 	.word	0x24000744

08001274 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001278:	4803      	ldr	r0, [pc, #12]	@ (8001288 <ADC_IRQHandler+0x14>)
 800127a:	f001 fa35 	bl	80026e8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800127e:	4803      	ldr	r0, [pc, #12]	@ (800128c <ADC_IRQHandler+0x18>)
 8001280:	f001 fa32 	bl	80026e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	24000080 	.word	0x24000080
 800128c:	240000f0 	.word	0x240000f0

08001290 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001294:	2020      	movs	r0, #32
 8001296:	f005 fe6a 	bl	8006f6e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80012a4:	4802      	ldr	r0, [pc, #8]	@ (80012b0 <SPI1_IRQHandler+0x10>)
 80012a6:	f009 fb73 	bl	800a990 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	240004f8 	.word	0x240004f8

080012b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012b8:	4802      	ldr	r0, [pc, #8]	@ (80012c4 <USART2_IRQHandler+0x10>)
 80012ba:	f00b faf9 	bl	800c8b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	240006b0 	.word	0x240006b0

080012c8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <TIM17_IRQHandler+0x10>)
 80012ce:	f00a f90d 	bl	800b4ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	24000580 	.word	0x24000580

080012dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012e0:	4b3e      	ldr	r3, [pc, #248]	@ (80013dc <SystemInit+0x100>)
 80012e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012e6:	4a3d      	ldr	r2, [pc, #244]	@ (80013dc <SystemInit+0x100>)
 80012e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012f0:	4b3b      	ldr	r3, [pc, #236]	@ (80013e0 <SystemInit+0x104>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 030f 	and.w	r3, r3, #15
 80012f8:	2b06      	cmp	r3, #6
 80012fa:	d807      	bhi.n	800130c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012fc:	4b38      	ldr	r3, [pc, #224]	@ (80013e0 <SystemInit+0x104>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f023 030f 	bic.w	r3, r3, #15
 8001304:	4a36      	ldr	r2, [pc, #216]	@ (80013e0 <SystemInit+0x104>)
 8001306:	f043 0307 	orr.w	r3, r3, #7
 800130a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800130c:	4b35      	ldr	r3, [pc, #212]	@ (80013e4 <SystemInit+0x108>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a34      	ldr	r2, [pc, #208]	@ (80013e4 <SystemInit+0x108>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001318:	4b32      	ldr	r3, [pc, #200]	@ (80013e4 <SystemInit+0x108>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800131e:	4b31      	ldr	r3, [pc, #196]	@ (80013e4 <SystemInit+0x108>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4930      	ldr	r1, [pc, #192]	@ (80013e4 <SystemInit+0x108>)
 8001324:	4b30      	ldr	r3, [pc, #192]	@ (80013e8 <SystemInit+0x10c>)
 8001326:	4013      	ands	r3, r2
 8001328:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800132a:	4b2d      	ldr	r3, [pc, #180]	@ (80013e0 <SystemInit+0x104>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001336:	4b2a      	ldr	r3, [pc, #168]	@ (80013e0 <SystemInit+0x104>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f023 030f 	bic.w	r3, r3, #15
 800133e:	4a28      	ldr	r2, [pc, #160]	@ (80013e0 <SystemInit+0x104>)
 8001340:	f043 0307 	orr.w	r3, r3, #7
 8001344:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001346:	4b27      	ldr	r3, [pc, #156]	@ (80013e4 <SystemInit+0x108>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800134c:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <SystemInit+0x108>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001352:	4b24      	ldr	r3, [pc, #144]	@ (80013e4 <SystemInit+0x108>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001358:	4b22      	ldr	r3, [pc, #136]	@ (80013e4 <SystemInit+0x108>)
 800135a:	4a24      	ldr	r2, [pc, #144]	@ (80013ec <SystemInit+0x110>)
 800135c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800135e:	4b21      	ldr	r3, [pc, #132]	@ (80013e4 <SystemInit+0x108>)
 8001360:	4a23      	ldr	r2, [pc, #140]	@ (80013f0 <SystemInit+0x114>)
 8001362:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001364:	4b1f      	ldr	r3, [pc, #124]	@ (80013e4 <SystemInit+0x108>)
 8001366:	4a23      	ldr	r2, [pc, #140]	@ (80013f4 <SystemInit+0x118>)
 8001368:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800136a:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <SystemInit+0x108>)
 800136c:	2200      	movs	r2, #0
 800136e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001370:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <SystemInit+0x108>)
 8001372:	4a20      	ldr	r2, [pc, #128]	@ (80013f4 <SystemInit+0x118>)
 8001374:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001376:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <SystemInit+0x108>)
 8001378:	2200      	movs	r2, #0
 800137a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800137c:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <SystemInit+0x108>)
 800137e:	4a1d      	ldr	r2, [pc, #116]	@ (80013f4 <SystemInit+0x118>)
 8001380:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001382:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <SystemInit+0x108>)
 8001384:	2200      	movs	r2, #0
 8001386:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001388:	4b16      	ldr	r3, [pc, #88]	@ (80013e4 <SystemInit+0x108>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a15      	ldr	r2, [pc, #84]	@ (80013e4 <SystemInit+0x108>)
 800138e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001392:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001394:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <SystemInit+0x108>)
 8001396:	2200      	movs	r2, #0
 8001398:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800139a:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <SystemInit+0x108>)
 800139c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d113      	bne.n	80013d0 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80013a8:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <SystemInit+0x108>)
 80013aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013ae:	4a0d      	ldr	r2, [pc, #52]	@ (80013e4 <SystemInit+0x108>)
 80013b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013b4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <SystemInit+0x11c>)
 80013ba:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013be:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80013c0:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <SystemInit+0x108>)
 80013c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013c6:	4a07      	ldr	r2, [pc, #28]	@ (80013e4 <SystemInit+0x108>)
 80013c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80013cc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00
 80013e0:	52002000 	.word	0x52002000
 80013e4:	58024400 	.word	0x58024400
 80013e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80013ec:	02020200 	.word	0x02020200
 80013f0:	01ff0000 	.word	0x01ff0000
 80013f4:	01010280 	.word	0x01010280
 80013f8:	52004000 	.word	0x52004000

080013fc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001400:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <ExitRun0Mode+0x2c>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	4a08      	ldr	r2, [pc, #32]	@ (8001428 <ExitRun0Mode+0x2c>)
 8001406:	f043 0302 	orr.w	r3, r3, #2
 800140a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800140c:	bf00      	nop
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <ExitRun0Mode+0x2c>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f9      	beq.n	800140e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800141a:	bf00      	nop
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	58024800 	.word	0x58024800

0800142c <MX_TIM4_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim23;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08e      	sub	sp, #56	@ 0x38
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001432:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]
 800145a:	615a      	str	r2, [r3, #20]
 800145c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800145e:	4b3d      	ldr	r3, [pc, #244]	@ (8001554 <MX_TIM4_Init+0x128>)
 8001460:	4a3d      	ldr	r2, [pc, #244]	@ (8001558 <MX_TIM4_Init+0x12c>)
 8001462:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4-1;
 8001464:	4b3b      	ldr	r3, [pc, #236]	@ (8001554 <MX_TIM4_Init+0x128>)
 8001466:	2203      	movs	r2, #3
 8001468:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b3a      	ldr	r3, [pc, #232]	@ (8001554 <MX_TIM4_Init+0x128>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4096-1;
 8001470:	4b38      	ldr	r3, [pc, #224]	@ (8001554 <MX_TIM4_Init+0x128>)
 8001472:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001476:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001478:	4b36      	ldr	r3, [pc, #216]	@ (8001554 <MX_TIM4_Init+0x128>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147e:	4b35      	ldr	r3, [pc, #212]	@ (8001554 <MX_TIM4_Init+0x128>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001484:	4833      	ldr	r0, [pc, #204]	@ (8001554 <MX_TIM4_Init+0x128>)
 8001486:	f009 fd58 	bl	800af3a <HAL_TIM_Base_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001490:	f7ff fd44 	bl	8000f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001494:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001498:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800149a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800149e:	4619      	mov	r1, r3
 80014a0:	482c      	ldr	r0, [pc, #176]	@ (8001554 <MX_TIM4_Init+0x128>)
 80014a2:	f00a fa3f 	bl	800b924 <HAL_TIM_ConfigClockSource>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80014ac:	f7ff fd36 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014b0:	4828      	ldr	r0, [pc, #160]	@ (8001554 <MX_TIM4_Init+0x128>)
 80014b2:	f009 fe9d 	bl	800b1f0 <HAL_TIM_PWM_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80014bc:	f7ff fd2e 	bl	8000f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	4821      	ldr	r0, [pc, #132]	@ (8001554 <MX_TIM4_Init+0x128>)
 80014d0:	f00a ff8e 	bl	800c3f0 <HAL_TIMEx_MasterConfigSynchronization>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80014da:	f7ff fd1f 	bl	8000f1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014de:	2360      	movs	r3, #96	@ 0x60
 80014e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ee:	463b      	mov	r3, r7
 80014f0:	2200      	movs	r2, #0
 80014f2:	4619      	mov	r1, r3
 80014f4:	4817      	ldr	r0, [pc, #92]	@ (8001554 <MX_TIM4_Init+0x128>)
 80014f6:	f00a f901 	bl	800b6fc <HAL_TIM_PWM_ConfigChannel>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001500:	f7ff fd0c 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	2204      	movs	r2, #4
 8001508:	4619      	mov	r1, r3
 800150a:	4812      	ldr	r0, [pc, #72]	@ (8001554 <MX_TIM4_Init+0x128>)
 800150c:	f00a f8f6 	bl	800b6fc <HAL_TIM_PWM_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001516:	f7ff fd01 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800151a:	463b      	mov	r3, r7
 800151c:	2208      	movs	r2, #8
 800151e:	4619      	mov	r1, r3
 8001520:	480c      	ldr	r0, [pc, #48]	@ (8001554 <MX_TIM4_Init+0x128>)
 8001522:	f00a f8eb 	bl	800b6fc <HAL_TIM_PWM_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 800152c:	f7ff fcf6 	bl	8000f1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001530:	463b      	mov	r3, r7
 8001532:	220c      	movs	r2, #12
 8001534:	4619      	mov	r1, r3
 8001536:	4807      	ldr	r0, [pc, #28]	@ (8001554 <MX_TIM4_Init+0x128>)
 8001538:	f00a f8e0 	bl	800b6fc <HAL_TIM_PWM_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8001542:	f7ff fceb 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001546:	4803      	ldr	r0, [pc, #12]	@ (8001554 <MX_TIM4_Init+0x128>)
 8001548:	f000 f8e0 	bl	800170c <HAL_TIM_MspPostInit>

}
 800154c:	bf00      	nop
 800154e:	3738      	adds	r7, #56	@ 0x38
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	240005cc 	.word	0x240005cc
 8001558:	40000800 	.word	0x40000800

0800155c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800156c:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <MX_TIM6_Init+0x68>)
 800156e:	4a16      	ldr	r2, [pc, #88]	@ (80015c8 <MX_TIM6_Init+0x6c>)
 8001570:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 8001572:	4b14      	ldr	r3, [pc, #80]	@ (80015c4 <MX_TIM6_Init+0x68>)
 8001574:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8001578:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157a:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <MX_TIM6_Init+0x68>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001580:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <MX_TIM6_Init+0x68>)
 8001582:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001586:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001588:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <MX_TIM6_Init+0x68>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800158e:	480d      	ldr	r0, [pc, #52]	@ (80015c4 <MX_TIM6_Init+0x68>)
 8001590:	f009 fcd3 	bl	800af3a <HAL_TIM_Base_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800159a:	f7ff fcbf 	bl	8000f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800159e:	2320      	movs	r3, #32
 80015a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	4619      	mov	r1, r3
 80015aa:	4806      	ldr	r0, [pc, #24]	@ (80015c4 <MX_TIM6_Init+0x68>)
 80015ac:	f00a ff20 	bl	800c3f0 <HAL_TIMEx_MasterConfigSynchronization>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80015b6:	f7ff fcb1 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	24000618 	.word	0x24000618
 80015c8:	40001000 	.word	0x40001000

080015cc <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80015ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001664 <MX_TIM23_Init+0x98>)
 80015ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001668 <MX_TIM23_Init+0x9c>)
 80015ee:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 80015f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <MX_TIM23_Init+0x98>)
 80015f2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80015f6:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <MX_TIM23_Init+0x98>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 80015fe:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <MX_TIM23_Init+0x98>)
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001606:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <MX_TIM23_Init+0x98>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160c:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <MX_TIM23_Init+0x98>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8001612:	4814      	ldr	r0, [pc, #80]	@ (8001664 <MX_TIM23_Init+0x98>)
 8001614:	f009 fc91 	bl	800af3a <HAL_TIM_Base_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 800161e:	f7ff fc7d 	bl	8000f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001622:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001626:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8001628:	f107 0310 	add.w	r3, r7, #16
 800162c:	4619      	mov	r1, r3
 800162e:	480d      	ldr	r0, [pc, #52]	@ (8001664 <MX_TIM23_Init+0x98>)
 8001630:	f00a f978 	bl	800b924 <HAL_TIM_ConfigClockSource>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 800163a:	f7ff fc6f 	bl	8000f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	@ (8001664 <MX_TIM23_Init+0x98>)
 800164c:	f00a fed0 	bl	800c3f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8001656:	f7ff fc61 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	3720      	adds	r7, #32
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	24000664 	.word	0x24000664
 8001668:	4000e000 	.word	0x4000e000

0800166c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a20      	ldr	r2, [pc, #128]	@ (80016fc <HAL_TIM_Base_MspInit+0x90>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d10f      	bne.n	800169e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800167e:	4b20      	ldr	r3, [pc, #128]	@ (8001700 <HAL_TIM_Base_MspInit+0x94>)
 8001680:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001684:	4a1e      	ldr	r2, [pc, #120]	@ (8001700 <HAL_TIM_Base_MspInit+0x94>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800168e:	4b1c      	ldr	r3, [pc, #112]	@ (8001700 <HAL_TIM_Base_MspInit+0x94>)
 8001690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM23_CLK_ENABLE();
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }
}
 800169c:	e028      	b.n	80016f0 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM6)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a18      	ldr	r2, [pc, #96]	@ (8001704 <HAL_TIM_Base_MspInit+0x98>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d10f      	bne.n	80016c8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016a8:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <HAL_TIM_Base_MspInit+0x94>)
 80016aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016ae:	4a14      	ldr	r2, [pc, #80]	@ (8001700 <HAL_TIM_Base_MspInit+0x94>)
 80016b0:	f043 0310 	orr.w	r3, r3, #16
 80016b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <HAL_TIM_Base_MspInit+0x94>)
 80016ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
}
 80016c6:	e013      	b.n	80016f0 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM23)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001708 <HAL_TIM_Base_MspInit+0x9c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d10e      	bne.n	80016f0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80016d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <HAL_TIM_Base_MspInit+0x94>)
 80016d4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80016d8:	4a09      	ldr	r2, [pc, #36]	@ (8001700 <HAL_TIM_Base_MspInit+0x94>)
 80016da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016de:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80016e2:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <HAL_TIM_Base_MspInit+0x94>)
 80016e4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80016e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	bf00      	nop
 80016f2:	371c      	adds	r7, #28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	40000800 	.word	0x40000800
 8001700:	58024400 	.word	0x58024400
 8001704:	40001000 	.word	0x40001000
 8001708:	4000e000 	.word	0x4000e000

0800170c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a13      	ldr	r2, [pc, #76]	@ (8001778 <HAL_TIM_MspPostInit+0x6c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d11f      	bne.n	800176e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800172e:	4b13      	ldr	r3, [pc, #76]	@ (800177c <HAL_TIM_MspPostInit+0x70>)
 8001730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001734:	4a11      	ldr	r2, [pc, #68]	@ (800177c <HAL_TIM_MspPostInit+0x70>)
 8001736:	f043 0308 	orr.w	r3, r3, #8
 800173a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800173e:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <HAL_TIM_MspPostInit+0x70>)
 8001740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800174c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001750:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800175e:	2302      	movs	r3, #2
 8001760:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	4619      	mov	r1, r3
 8001768:	4805      	ldr	r0, [pc, #20]	@ (8001780 <HAL_TIM_MspPostInit+0x74>)
 800176a:	f005 fa3f 	bl	8006bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800176e:	bf00      	nop
 8001770:	3720      	adds	r7, #32
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40000800 	.word	0x40000800
 800177c:	58024400 	.word	0x58024400
 8001780:	58020c00 	.word	0x58020c00

08001784 <micros>:
  /* USER CODE END TIM23_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
uint32_t micros(void){
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim23);
 8001788:	4b03      	ldr	r3, [pc, #12]	@ (8001798 <micros+0x14>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 800178e:	4618      	mov	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	24000664 	.word	0x24000664

0800179c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017a0:	4b22      	ldr	r3, [pc, #136]	@ (800182c <MX_USART2_UART_Init+0x90>)
 80017a2:	4a23      	ldr	r2, [pc, #140]	@ (8001830 <MX_USART2_UART_Init+0x94>)
 80017a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017a6:	4b21      	ldr	r3, [pc, #132]	@ (800182c <MX_USART2_UART_Init+0x90>)
 80017a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ae:	4b1f      	ldr	r3, [pc, #124]	@ (800182c <MX_USART2_UART_Init+0x90>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b4:	4b1d      	ldr	r3, [pc, #116]	@ (800182c <MX_USART2_UART_Init+0x90>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ba:	4b1c      	ldr	r3, [pc, #112]	@ (800182c <MX_USART2_UART_Init+0x90>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <MX_USART2_UART_Init+0x90>)
 80017c2:	220c      	movs	r2, #12
 80017c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c6:	4b19      	ldr	r3, [pc, #100]	@ (800182c <MX_USART2_UART_Init+0x90>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017cc:	4b17      	ldr	r3, [pc, #92]	@ (800182c <MX_USART2_UART_Init+0x90>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d2:	4b16      	ldr	r3, [pc, #88]	@ (800182c <MX_USART2_UART_Init+0x90>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017d8:	4b14      	ldr	r3, [pc, #80]	@ (800182c <MX_USART2_UART_Init+0x90>)
 80017da:	2200      	movs	r2, #0
 80017dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017de:	4b13      	ldr	r3, [pc, #76]	@ (800182c <MX_USART2_UART_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017e4:	4811      	ldr	r0, [pc, #68]	@ (800182c <MX_USART2_UART_Init+0x90>)
 80017e6:	f00a febd 	bl	800c564 <HAL_UART_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80017f0:	f7ff fb94 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017f4:	2100      	movs	r1, #0
 80017f6:	480d      	ldr	r0, [pc, #52]	@ (800182c <MX_USART2_UART_Init+0x90>)
 80017f8:	f00c ff53 	bl	800e6a2 <HAL_UARTEx_SetTxFifoThreshold>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001802:	f7ff fb8b 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001806:	2100      	movs	r1, #0
 8001808:	4808      	ldr	r0, [pc, #32]	@ (800182c <MX_USART2_UART_Init+0x90>)
 800180a:	f00c ff88 	bl	800e71e <HAL_UARTEx_SetRxFifoThreshold>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001814:	f7ff fb82 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001818:	4804      	ldr	r0, [pc, #16]	@ (800182c <MX_USART2_UART_Init+0x90>)
 800181a:	f00c ff09 	bl	800e630 <HAL_UARTEx_DisableFifoMode>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001824:	f7ff fb7a 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	240006b0 	.word	0x240006b0
 8001830:	40004400 	.word	0x40004400

08001834 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b0b8      	sub	sp, #224	@ 0xe0
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	22b8      	movs	r2, #184	@ 0xb8
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f00f f834 	bl	80108c2 <memset>
  if(uartHandle->Instance==USART2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a41      	ldr	r2, [pc, #260]	@ (8001964 <HAL_UART_MspInit+0x130>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d17b      	bne.n	800195c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001864:	f04f 0202 	mov.w	r2, #2
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001870:	2300      	movs	r3, #0
 8001872:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	4618      	mov	r0, r3
 800187c:	f006 fb7e 	bl	8007f7c <HAL_RCCEx_PeriphCLKConfig>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001886:	f7ff fb49 	bl	8000f1c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800188a:	4b37      	ldr	r3, [pc, #220]	@ (8001968 <HAL_UART_MspInit+0x134>)
 800188c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001890:	4a35      	ldr	r2, [pc, #212]	@ (8001968 <HAL_UART_MspInit+0x134>)
 8001892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001896:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800189a:	4b33      	ldr	r3, [pc, #204]	@ (8001968 <HAL_UART_MspInit+0x134>)
 800189c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001968 <HAL_UART_MspInit+0x134>)
 80018aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ae:	4a2e      	ldr	r2, [pc, #184]	@ (8001968 <HAL_UART_MspInit+0x134>)
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001968 <HAL_UART_MspInit+0x134>)
 80018ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018c6:	2360      	movs	r3, #96	@ 0x60
 80018c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018de:	2307      	movs	r3, #7
 80018e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80018e8:	4619      	mov	r1, r3
 80018ea:	4820      	ldr	r0, [pc, #128]	@ (800196c <HAL_UART_MspInit+0x138>)
 80018ec:	f005 f97e 	bl	8006bec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream2;
 80018f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <HAL_UART_MspInit+0x13c>)
 80018f2:	4a20      	ldr	r2, [pc, #128]	@ (8001974 <HAL_UART_MspInit+0x140>)
 80018f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80018f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001970 <HAL_UART_MspInit+0x13c>)
 80018f8:	222b      	movs	r2, #43	@ 0x2b
 80018fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001970 <HAL_UART_MspInit+0x13c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001902:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <HAL_UART_MspInit+0x13c>)
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001908:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <HAL_UART_MspInit+0x13c>)
 800190a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800190e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001910:	4b17      	ldr	r3, [pc, #92]	@ (8001970 <HAL_UART_MspInit+0x13c>)
 8001912:	2200      	movs	r2, #0
 8001914:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001916:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <HAL_UART_MspInit+0x13c>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800191c:	4b14      	ldr	r3, [pc, #80]	@ (8001970 <HAL_UART_MspInit+0x13c>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001922:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <HAL_UART_MspInit+0x13c>)
 8001924:	2200      	movs	r2, #0
 8001926:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001928:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <HAL_UART_MspInit+0x13c>)
 800192a:	2200      	movs	r2, #0
 800192c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800192e:	4810      	ldr	r0, [pc, #64]	@ (8001970 <HAL_UART_MspInit+0x13c>)
 8001930:	f002 fb24 	bl	8003f7c <HAL_DMA_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800193a:	f7ff faef 	bl	8000f1c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a0b      	ldr	r2, [pc, #44]	@ (8001970 <HAL_UART_MspInit+0x13c>)
 8001942:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001946:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <HAL_UART_MspInit+0x13c>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	2105      	movs	r1, #5
 8001950:	2026      	movs	r0, #38	@ 0x26
 8001952:	f002 faeb 	bl	8003f2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001956:	2026      	movs	r0, #38	@ 0x26
 8001958:	f002 fb02 	bl	8003f60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800195c:	bf00      	nop
 800195e:	37e0      	adds	r7, #224	@ 0xe0
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40004400 	.word	0x40004400
 8001968:	58024400 	.word	0x58024400
 800196c:	58020c00 	.word	0x58020c00
 8001970:	24000744 	.word	0x24000744
 8001974:	40020040 	.word	0x40020040

08001978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001978:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80019b4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800197c:	f7ff fd3e 	bl	80013fc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001980:	f7ff fcac 	bl	80012dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001984:	480c      	ldr	r0, [pc, #48]	@ (80019b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001986:	490d      	ldr	r1, [pc, #52]	@ (80019bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001988:	4a0d      	ldr	r2, [pc, #52]	@ (80019c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a0a      	ldr	r2, [pc, #40]	@ (80019c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800199c:	4c0a      	ldr	r4, [pc, #40]	@ (80019c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019aa:	f00e fff1 	bl	8010990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ae:	f7ff f9e5 	bl	8000d7c <main>
  bx  lr
 80019b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019b4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80019b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019bc:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80019c0:	08010b5c 	.word	0x08010b5c
  ldr r2, =_sbss
 80019c4:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 80019c8:	240047a4 	.word	0x240047a4

080019cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC3_IRQHandler>
	...

080019d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d6:	2003      	movs	r0, #3
 80019d8:	f002 fa9d 	bl	8003f16 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019dc:	f006 f8b6 	bl	8007b4c <HAL_RCC_GetSysClockFreq>
 80019e0:	4602      	mov	r2, r0
 80019e2:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <HAL_Init+0x68>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	0a1b      	lsrs	r3, r3, #8
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	4913      	ldr	r1, [pc, #76]	@ (8001a3c <HAL_Init+0x6c>)
 80019ee:	5ccb      	ldrb	r3, [r1, r3]
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
 80019f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001a38 <HAL_Init+0x68>)
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	4a0e      	ldr	r2, [pc, #56]	@ (8001a3c <HAL_Init+0x6c>)
 8001a04:	5cd3      	ldrb	r3, [r2, r3]
 8001a06:	f003 031f 	and.w	r3, r3, #31
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a10:	4a0b      	ldr	r2, [pc, #44]	@ (8001a40 <HAL_Init+0x70>)
 8001a12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a14:	4a0b      	ldr	r2, [pc, #44]	@ (8001a44 <HAL_Init+0x74>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a1a:	200f      	movs	r0, #15
 8001a1c:	f7ff fb8e 	bl	800113c <HAL_InitTick>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e002      	b.n	8001a30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a2a:	f7ff fb69 	bl	8001100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	58024400 	.word	0x58024400
 8001a3c:	08010b08 	.word	0x08010b08
 8001a40:	24000004 	.word	0x24000004
 8001a44:	24000000 	.word	0x24000000

08001a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_IncTick+0x20>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_IncTick+0x24>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	4a04      	ldr	r2, [pc, #16]	@ (8001a6c <HAL_IncTick+0x24>)
 8001a5a:	6013      	str	r3, [r2, #0]
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	2400000c 	.word	0x2400000c
 8001a6c:	240007bc 	.word	0x240007bc

08001a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return uwTick;
 8001a74:	4b03      	ldr	r3, [pc, #12]	@ (8001a84 <HAL_GetTick+0x14>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	240007bc 	.word	0x240007bc

08001a88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a18      	ldr	r2, [pc, #96]	@ (8001b60 <LL_ADC_SetChannelPreselection+0x70>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d027      	beq.n	8001b52 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d107      	bne.n	8001b1c <LL_ADC_SetChannelPreselection+0x2c>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	0e9b      	lsrs	r3, r3, #26
 8001b10:	f003 031f 	and.w	r3, r3, #31
 8001b14:	2201      	movs	r2, #1
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	e015      	b.n	8001b48 <LL_ADC_SetChannelPreselection+0x58>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8001b32:	2320      	movs	r3, #32
 8001b34:	e003      	b.n	8001b3e <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	2201      	movs	r2, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	69d2      	ldr	r2, [r2, #28]
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8001b52:	bf00      	nop
 8001b54:	371c      	adds	r7, #28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	58026000 	.word	0x58026000

08001b64 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3360      	adds	r3, #96	@ 0x60
 8001b76:	461a      	mov	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4a10      	ldr	r2, [pc, #64]	@ (8001bc4 <LL_ADC_SetOffset+0x60>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d10b      	bne.n	8001ba0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001b9e:	e00b      	b.n	8001bb8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	601a      	str	r2, [r3, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	371c      	adds	r7, #28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	58026000 	.word	0x58026000

08001bc8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3360      	adds	r3, #96	@ 0x60
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	431a      	orrs	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	611a      	str	r2, [r3, #16]
}
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4a0c      	ldr	r2, [pc, #48]	@ (8001c68 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d00e      	beq.n	8001c5a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	3360      	adds	r3, #96	@ 0x60
 8001c40:	461a      	mov	r2, r3
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	431a      	orrs	r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	601a      	str	r2, [r3, #0]
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	371c      	adds	r7, #28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	58026000 	.word	0x58026000

08001c6c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001cac <LL_ADC_SetOffsetSaturation+0x40>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d10e      	bne.n	8001c9e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3360      	adds	r3, #96	@ 0x60
 8001c84:	461a      	mov	r2, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	371c      	adds	r7, #28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	58026000 	.word	0x58026000

08001cb0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf0 <LL_ADC_SetOffsetSign+0x40>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d10e      	bne.n	8001ce2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3360      	adds	r3, #96	@ 0x60
 8001cc8:	461a      	mov	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	371c      	adds	r7, #28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	58026000 	.word	0x58026000

08001cf4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	3360      	adds	r3, #96	@ 0x60
 8001d04:	461a      	mov	r2, r3
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4a0c      	ldr	r2, [pc, #48]	@ (8001d44 <LL_ADC_SetOffsetState+0x50>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d108      	bne.n	8001d28 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	431a      	orrs	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001d26:	e007      	b.n	8001d38 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	601a      	str	r2, [r3, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	371c      	adds	r7, #28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	58026000 	.word	0x58026000

08001d48 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b087      	sub	sp, #28
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3330      	adds	r3, #48	@ 0x30
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	0a1b      	lsrs	r3, r3, #8
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	4413      	add	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	211f      	movs	r1, #31
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	401a      	ands	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	0e9b      	lsrs	r3, r3, #26
 8001da6:	f003 011f 	and.w	r1, r3, #31
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	431a      	orrs	r2, r3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dba:	bf00      	nop
 8001dbc:	371c      	adds	r7, #28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f023 0203 	bic.w	r2, r3, #3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	60da      	str	r2, [r3, #12]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	60da      	str	r2, [r3, #12]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a08      	ldr	r2, [pc, #32]	@ (8001e3c <LL_ADC_REG_SetDMATransferMode+0x30>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d107      	bne.n	8001e2e <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f023 0203 	bic.w	r2, r3, #3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	60da      	str	r2, [r3, #12]
  }
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	58026000 	.word	0x58026000

08001e40 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b087      	sub	sp, #28
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3314      	adds	r3, #20
 8001e76:	461a      	mov	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	0e5b      	lsrs	r3, r3, #25
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	4413      	add	r3, r2
 8001e84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	0d1b      	lsrs	r3, r3, #20
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2107      	movs	r1, #7
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	0d1b      	lsrs	r3, r3, #20
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001eb0:	bf00      	nop
 8001eb2:	371c      	adds	r7, #28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4a1a      	ldr	r2, [pc, #104]	@ (8001f34 <LL_ADC_SetChannelSingleDiff+0x78>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d115      	bne.n	8001efc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001edc:	43db      	mvns	r3, r3
 8001ede:	401a      	ands	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f003 0318 	and.w	r3, r3, #24
 8001ee6:	4914      	ldr	r1, [pc, #80]	@ (8001f38 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001ee8:	40d9      	lsrs	r1, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	400b      	ands	r3, r1
 8001eee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001efa:	e014      	b.n	8001f26 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0318 	and.w	r3, r3, #24
 8001f12:	4909      	ldr	r1, [pc, #36]	@ (8001f38 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001f14:	40d9      	lsrs	r1, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	400b      	ands	r3, r1
 8001f1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	58026000 	.word	0x58026000
 8001f38:	000fffff 	.word	0x000fffff

08001f3c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 031f 	and.w	r3, r3, #31
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6093      	str	r3, [r2, #8]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	5fffffc0 	.word	0x5fffffc0

08001f98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fac:	d101      	bne.n	8001fb2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <LL_ADC_EnableInternalRegulator+0x24>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	6fffffc0 	.word	0x6fffffc0

08001fe8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ffc:	d101      	bne.n	8002002 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	4b05      	ldr	r3, [pc, #20]	@ (8002034 <LL_ADC_Enable+0x24>)
 800201e:	4013      	ands	r3, r2
 8002020:	f043 0201 	orr.w	r2, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	7fffffc0 	.word	0x7fffffc0

08002038 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <LL_ADC_Disable+0x24>)
 8002046:	4013      	ands	r3, r2
 8002048:	f043 0202 	orr.w	r2, r3, #2
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	7fffffc0 	.word	0x7fffffc0

08002060 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <LL_ADC_IsEnabled+0x18>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <LL_ADC_IsEnabled+0x1a>
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b02      	cmp	r3, #2
 8002098:	d101      	bne.n	800209e <LL_ADC_IsDisableOngoing+0x18>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <LL_ADC_IsDisableOngoing+0x1a>
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <LL_ADC_REG_StartConversion+0x24>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	f043 0204 	orr.w	r2, r3, #4
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	7fffffc0 	.word	0x7fffffc0

080020d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d101      	bne.n	80020ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b08      	cmp	r3, #8
 800210c:	d101      	bne.n	8002112 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b089      	sub	sp, #36	@ 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e1ee      	b.n	8002518 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002144:	2b00      	cmp	r3, #0
 8002146:	d109      	bne.n	800215c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7fe fbc3 	bl	80008d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff19 	bl	8001f98 <LL_ADC_IsDeepPowerDownEnabled>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d004      	beq.n	8002176 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff feff 	bl	8001f74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ff34 	bl	8001fe8 <LL_ADC_IsInternalRegulatorEnabled>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d114      	bne.n	80021b0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff18 	bl	8001fc0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002190:	4b8e      	ldr	r3, [pc, #568]	@ (80023cc <HAL_ADC_Init+0x2ac>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	099b      	lsrs	r3, r3, #6
 8002196:	4a8e      	ldr	r2, [pc, #568]	@ (80023d0 <HAL_ADC_Init+0x2b0>)
 8002198:	fba2 2303 	umull	r2, r3, r2, r3
 800219c:	099b      	lsrs	r3, r3, #6
 800219e:	3301      	adds	r3, #1
 80021a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021a2:	e002      	b.n	80021aa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f9      	bne.n	80021a4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff17 	bl	8001fe8 <LL_ADC_IsInternalRegulatorEnabled>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10d      	bne.n	80021dc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c4:	f043 0210 	orr.w	r2, r3, #16
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff77 	bl	80020d4 <LL_ADC_REG_IsConversionOngoing>
 80021e6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f040 8188 	bne.w	8002506 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f040 8184 	bne.w	8002506 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002202:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002206:	f043 0202 	orr.w	r2, r3, #2
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff24 	bl	8002060 <LL_ADC_IsEnabled>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d136      	bne.n	800228c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a6c      	ldr	r2, [pc, #432]	@ (80023d4 <HAL_ADC_Init+0x2b4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d004      	beq.n	8002232 <HAL_ADC_Init+0x112>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a6a      	ldr	r2, [pc, #424]	@ (80023d8 <HAL_ADC_Init+0x2b8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d10e      	bne.n	8002250 <HAL_ADC_Init+0x130>
 8002232:	4868      	ldr	r0, [pc, #416]	@ (80023d4 <HAL_ADC_Init+0x2b4>)
 8002234:	f7ff ff14 	bl	8002060 <LL_ADC_IsEnabled>
 8002238:	4604      	mov	r4, r0
 800223a:	4867      	ldr	r0, [pc, #412]	@ (80023d8 <HAL_ADC_Init+0x2b8>)
 800223c:	f7ff ff10 	bl	8002060 <LL_ADC_IsEnabled>
 8002240:	4603      	mov	r3, r0
 8002242:	4323      	orrs	r3, r4
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf0c      	ite	eq
 8002248:	2301      	moveq	r3, #1
 800224a:	2300      	movne	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	e008      	b.n	8002262 <HAL_ADC_Init+0x142>
 8002250:	4862      	ldr	r0, [pc, #392]	@ (80023dc <HAL_ADC_Init+0x2bc>)
 8002252:	f7ff ff05 	bl	8002060 <LL_ADC_IsEnabled>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf0c      	ite	eq
 800225c:	2301      	moveq	r3, #1
 800225e:	2300      	movne	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d012      	beq.n	800228c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a5a      	ldr	r2, [pc, #360]	@ (80023d4 <HAL_ADC_Init+0x2b4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d004      	beq.n	800227a <HAL_ADC_Init+0x15a>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a58      	ldr	r2, [pc, #352]	@ (80023d8 <HAL_ADC_Init+0x2b8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_ADC_Init+0x15e>
 800227a:	4a59      	ldr	r2, [pc, #356]	@ (80023e0 <HAL_ADC_Init+0x2c0>)
 800227c:	e000      	b.n	8002280 <HAL_ADC_Init+0x160>
 800227e:	4a59      	ldr	r2, [pc, #356]	@ (80023e4 <HAL_ADC_Init+0x2c4>)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4619      	mov	r1, r3
 8002286:	4610      	mov	r0, r2
 8002288:	f7ff fbfe 	bl	8001a88 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a52      	ldr	r2, [pc, #328]	@ (80023dc <HAL_ADC_Init+0x2bc>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d129      	bne.n	80022ea <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7e5b      	ldrb	r3, [r3, #25]
 800229a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80022a0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80022a6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d013      	beq.n	80022d8 <HAL_ADC_Init+0x1b8>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b0c      	cmp	r3, #12
 80022b6:	d00d      	beq.n	80022d4 <HAL_ADC_Init+0x1b4>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b1c      	cmp	r3, #28
 80022be:	d007      	beq.n	80022d0 <HAL_ADC_Init+0x1b0>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b18      	cmp	r3, #24
 80022c6:	d101      	bne.n	80022cc <HAL_ADC_Init+0x1ac>
 80022c8:	2318      	movs	r3, #24
 80022ca:	e006      	b.n	80022da <HAL_ADC_Init+0x1ba>
 80022cc:	2300      	movs	r3, #0
 80022ce:	e004      	b.n	80022da <HAL_ADC_Init+0x1ba>
 80022d0:	2310      	movs	r3, #16
 80022d2:	e002      	b.n	80022da <HAL_ADC_Init+0x1ba>
 80022d4:	2308      	movs	r3, #8
 80022d6:	e000      	b.n	80022da <HAL_ADC_Init+0x1ba>
 80022d8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80022da:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
 80022e8:	e00e      	b.n	8002308 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	7e5b      	ldrb	r3, [r3, #25]
 80022ee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022f4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80022fa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002302:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d106      	bne.n	8002320 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002316:	3b01      	subs	r3, #1
 8002318:	045b      	lsls	r3, r3, #17
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002324:	2b00      	cmp	r3, #0
 8002326:	d009      	beq.n	800233c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002334:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a26      	ldr	r2, [pc, #152]	@ (80023dc <HAL_ADC_Init+0x2bc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d115      	bne.n	8002372 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	4b26      	ldr	r3, [pc, #152]	@ (80023e8 <HAL_ADC_Init+0x2c8>)
 800234e:	4013      	ands	r3, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	69b9      	ldr	r1, [r7, #24]
 8002356:	430b      	orrs	r3, r1
 8002358:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	611a      	str	r2, [r3, #16]
 8002370:	e009      	b.n	8002386 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	4b1c      	ldr	r3, [pc, #112]	@ (80023ec <HAL_ADC_Init+0x2cc>)
 800237a:	4013      	ands	r3, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	69b9      	ldr	r1, [r7, #24]
 8002382:	430b      	orrs	r3, r1
 8002384:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fea2 	bl	80020d4 <LL_ADC_REG_IsConversionOngoing>
 8002390:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff feaf 	bl	80020fa <LL_ADC_INJ_IsConversionOngoing>
 800239c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 808e 	bne.w	80024c2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f040 808a 	bne.w	80024c2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a0a      	ldr	r2, [pc, #40]	@ (80023dc <HAL_ADC_Init+0x2bc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d11b      	bne.n	80023f0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7e1b      	ldrb	r3, [r3, #24]
 80023bc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023c4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	e018      	b.n	80023fe <HAL_ADC_Init+0x2de>
 80023cc:	24000000 	.word	0x24000000
 80023d0:	053e2d63 	.word	0x053e2d63
 80023d4:	40022000 	.word	0x40022000
 80023d8:	40022100 	.word	0x40022100
 80023dc:	58026000 	.word	0x58026000
 80023e0:	40022300 	.word	0x40022300
 80023e4:	58026300 	.word	0x58026300
 80023e8:	fff04007 	.word	0xfff04007
 80023ec:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	7e1b      	ldrb	r3, [r3, #24]
 80023f4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	4b46      	ldr	r3, [pc, #280]	@ (8002520 <HAL_ADC_Init+0x400>)
 8002406:	4013      	ands	r3, r2
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	69b9      	ldr	r1, [r7, #24]
 800240e:	430b      	orrs	r3, r1
 8002410:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002418:	2b01      	cmp	r3, #1
 800241a:	d137      	bne.n	800248c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002420:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a3f      	ldr	r2, [pc, #252]	@ (8002524 <HAL_ADC_Init+0x404>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d116      	bne.n	800245a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	4b3d      	ldr	r3, [pc, #244]	@ (8002528 <HAL_ADC_Init+0x408>)
 8002434:	4013      	ands	r3, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800243e:	4311      	orrs	r1, r2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002444:	4311      	orrs	r1, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800244a:	430a      	orrs	r2, r1
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	611a      	str	r2, [r3, #16]
 8002458:	e020      	b.n	800249c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	4b32      	ldr	r3, [pc, #200]	@ (800252c <HAL_ADC_Init+0x40c>)
 8002462:	4013      	ands	r3, r2
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002468:	3a01      	subs	r2, #1
 800246a:	0411      	lsls	r1, r2, #16
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002470:	4311      	orrs	r1, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002476:	4311      	orrs	r1, r2
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800247c:	430a      	orrs	r2, r1
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0201 	orr.w	r2, r2, #1
 8002488:	611a      	str	r2, [r3, #16]
 800248a:	e007      	b.n	800249c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002524 <HAL_ADC_Init+0x404>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d002      	beq.n	80024c2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f001 f9bd 	bl	800383c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d10c      	bne.n	80024e4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d0:	f023 010f 	bic.w	r1, r3, #15
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	1e5a      	subs	r2, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80024e2:	e007      	b.n	80024f4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 020f 	bic.w	r2, r2, #15
 80024f2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f8:	f023 0303 	bic.w	r3, r3, #3
 80024fc:	f043 0201 	orr.w	r2, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	661a      	str	r2, [r3, #96]	@ 0x60
 8002504:	e007      	b.n	8002516 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800250a:	f043 0210 	orr.w	r2, r3, #16
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002516:	7ffb      	ldrb	r3, [r7, #31]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3724      	adds	r7, #36	@ 0x24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd90      	pop	{r4, r7, pc}
 8002520:	ffffbffc 	.word	0xffffbffc
 8002524:	58026000 	.word	0x58026000
 8002528:	fc00f81f 	.word	0xfc00f81f
 800252c:	fc00f81e 	.word	0xfc00f81e

08002530 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a60      	ldr	r2, [pc, #384]	@ (80026c4 <HAL_ADC_Start_DMA+0x194>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d004      	beq.n	8002550 <HAL_ADC_Start_DMA+0x20>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a5f      	ldr	r2, [pc, #380]	@ (80026c8 <HAL_ADC_Start_DMA+0x198>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d101      	bne.n	8002554 <HAL_ADC_Start_DMA+0x24>
 8002550:	4b5e      	ldr	r3, [pc, #376]	@ (80026cc <HAL_ADC_Start_DMA+0x19c>)
 8002552:	e000      	b.n	8002556 <HAL_ADC_Start_DMA+0x26>
 8002554:	4b5e      	ldr	r3, [pc, #376]	@ (80026d0 <HAL_ADC_Start_DMA+0x1a0>)
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fcf0 	bl	8001f3c <LL_ADC_GetMultimode>
 800255c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fdb6 	bl	80020d4 <LL_ADC_REG_IsConversionOngoing>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	f040 80a2 	bne.w	80026b4 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_ADC_Start_DMA+0x4e>
 800257a:	2302      	movs	r3, #2
 800257c:	e09d      	b.n	80026ba <HAL_ADC_Start_DMA+0x18a>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d006      	beq.n	800259a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	2b05      	cmp	r3, #5
 8002590:	d003      	beq.n	800259a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	2b09      	cmp	r3, #9
 8002596:	f040 8086 	bne.w	80026a6 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 ffd0 	bl	8003540 <ADC_Enable>
 80025a0:	4603      	mov	r3, r0
 80025a2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80025a4:	7dfb      	ldrb	r3, [r7, #23]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d178      	bne.n	800269c <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80025ae:	4b49      	ldr	r3, [pc, #292]	@ (80026d4 <HAL_ADC_Start_DMA+0x1a4>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a42      	ldr	r2, [pc, #264]	@ (80026c8 <HAL_ADC_Start_DMA+0x198>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d002      	beq.n	80025ca <HAL_ADC_Start_DMA+0x9a>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	e000      	b.n	80025cc <HAL_ADC_Start_DMA+0x9c>
 80025ca:	4b3e      	ldr	r3, [pc, #248]	@ (80026c4 <HAL_ADC_Start_DMA+0x194>)
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d002      	beq.n	80025da <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025de:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d006      	beq.n	8002600 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025f6:	f023 0206 	bic.w	r2, r3, #6
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	665a      	str	r2, [r3, #100]	@ 0x64
 80025fe:	e002      	b.n	8002606 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260a:	4a33      	ldr	r2, [pc, #204]	@ (80026d8 <HAL_ADC_Start_DMA+0x1a8>)
 800260c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002612:	4a32      	ldr	r2, [pc, #200]	@ (80026dc <HAL_ADC_Start_DMA+0x1ac>)
 8002614:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261a:	4a31      	ldr	r2, [pc, #196]	@ (80026e0 <HAL_ADC_Start_DMA+0x1b0>)
 800261c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	221c      	movs	r2, #28
 8002624:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0210 	orr.w	r2, r2, #16
 800263c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a28      	ldr	r2, [pc, #160]	@ (80026e4 <HAL_ADC_Start_DMA+0x1b4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d10f      	bne.n	8002668 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4619      	mov	r1, r3
 8002656:	4610      	mov	r0, r2
 8002658:	f7ff fbd8 	bl	8001e0c <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fbc3 	bl	8001dec <LL_ADC_EnableDMAReq>
 8002666:	e007      	b.n	8002678 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002670:	4619      	mov	r1, r3
 8002672:	4610      	mov	r0, r2
 8002674:	f7ff fba7 	bl	8001dc6 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3340      	adds	r3, #64	@ 0x40
 8002682:	4619      	mov	r1, r3
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f001 ffd0 	bl	800462c <HAL_DMA_Start_IT>
 800268c:	4603      	mov	r3, r0
 800268e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fd09 	bl	80020ac <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800269a:	e00d      	b.n	80026b8 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80026a4:	e008      	b.n	80026b8 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80026b2:	e001      	b.n	80026b8 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026b4:	2302      	movs	r3, #2
 80026b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80026b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40022000 	.word	0x40022000
 80026c8:	40022100 	.word	0x40022100
 80026cc:	40022300 	.word	0x40022300
 80026d0:	58026300 	.word	0x58026300
 80026d4:	fffff0fe 	.word	0xfffff0fe
 80026d8:	08003713 	.word	0x08003713
 80026dc:	080037eb 	.word	0x080037eb
 80026e0:	08003807 	.word	0x08003807
 80026e4:	58026000 	.word	0x58026000

080026e8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	@ 0x28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80026f0:	2300      	movs	r3, #0
 80026f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a87      	ldr	r2, [pc, #540]	@ (8002928 <HAL_ADC_IRQHandler+0x240>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d004      	beq.n	8002718 <HAL_ADC_IRQHandler+0x30>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a86      	ldr	r2, [pc, #536]	@ (800292c <HAL_ADC_IRQHandler+0x244>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d101      	bne.n	800271c <HAL_ADC_IRQHandler+0x34>
 8002718:	4b85      	ldr	r3, [pc, #532]	@ (8002930 <HAL_ADC_IRQHandler+0x248>)
 800271a:	e000      	b.n	800271e <HAL_ADC_IRQHandler+0x36>
 800271c:	4b85      	ldr	r3, [pc, #532]	@ (8002934 <HAL_ADC_IRQHandler+0x24c>)
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fc0c 	bl	8001f3c <LL_ADC_GetMultimode>
 8002724:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d017      	beq.n	8002760 <HAL_ADC_IRQHandler+0x78>
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d012      	beq.n	8002760 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	d105      	bne.n	8002752 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800274a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f001 fa46 	bl	8003be4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2202      	movs	r2, #2
 800275e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0304 	and.w	r3, r3, #4
 8002766:	2b00      	cmp	r3, #0
 8002768:	d004      	beq.n	8002774 <HAL_ADC_IRQHandler+0x8c>
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 8083 	beq.w	8002886 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d07d      	beq.n	8002886 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800278e:	f003 0310 	and.w	r3, r3, #16
 8002792:	2b00      	cmp	r3, #0
 8002794:	d105      	bne.n	80027a2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800279a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff face 	bl	8001d48 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d062      	beq.n	8002878 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a5d      	ldr	r2, [pc, #372]	@ (800292c <HAL_ADC_IRQHandler+0x244>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d002      	beq.n	80027c2 <HAL_ADC_IRQHandler+0xda>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	e000      	b.n	80027c4 <HAL_ADC_IRQHandler+0xdc>
 80027c2:	4b59      	ldr	r3, [pc, #356]	@ (8002928 <HAL_ADC_IRQHandler+0x240>)
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d008      	beq.n	80027de <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2b05      	cmp	r3, #5
 80027d6:	d002      	beq.n	80027de <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2b09      	cmp	r3, #9
 80027dc:	d104      	bne.n	80027e8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	623b      	str	r3, [r7, #32]
 80027e6:	e00c      	b.n	8002802 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a4f      	ldr	r2, [pc, #316]	@ (800292c <HAL_ADC_IRQHandler+0x244>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d002      	beq.n	80027f8 <HAL_ADC_IRQHandler+0x110>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	e000      	b.n	80027fa <HAL_ADC_IRQHandler+0x112>
 80027f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002928 <HAL_ADC_IRQHandler+0x240>)
 80027fa:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d135      	bne.n	8002878 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b08      	cmp	r3, #8
 8002818:	d12e      	bne.n	8002878 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fc58 	bl	80020d4 <LL_ADC_REG_IsConversionOngoing>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d11a      	bne.n	8002860 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 020c 	bic.w	r2, r2, #12
 8002838:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800283e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800284a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d112      	bne.n	8002878 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002856:	f043 0201 	orr.w	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	661a      	str	r2, [r3, #96]	@ 0x60
 800285e:	e00b      	b.n	8002878 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002864:	f043 0210 	orr.w	r2, r3, #16
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002870:	f043 0201 	orr.w	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f00d ff79 	bl	8010770 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	220c      	movs	r2, #12
 8002884:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b00      	cmp	r3, #0
 800288e:	d004      	beq.n	800289a <HAL_ADC_IRQHandler+0x1b2>
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10b      	bne.n	80028b2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80a0 	beq.w	80029e6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 809a 	beq.w	80029e6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d105      	bne.n	80028ca <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028c2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fab6 	bl	8001e40 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80028d4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fa34 	bl	8001d48 <LL_ADC_REG_IsTriggerSourceSWStart>
 80028e0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a11      	ldr	r2, [pc, #68]	@ (800292c <HAL_ADC_IRQHandler+0x244>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d002      	beq.n	80028f2 <HAL_ADC_IRQHandler+0x20a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	e000      	b.n	80028f4 <HAL_ADC_IRQHandler+0x20c>
 80028f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002928 <HAL_ADC_IRQHandler+0x240>)
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d008      	beq.n	800290e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b06      	cmp	r3, #6
 8002906:	d002      	beq.n	800290e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b07      	cmp	r3, #7
 800290c:	d104      	bne.n	8002918 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	623b      	str	r3, [r7, #32]
 8002916:	e014      	b.n	8002942 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a03      	ldr	r2, [pc, #12]	@ (800292c <HAL_ADC_IRQHandler+0x244>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00a      	beq.n	8002938 <HAL_ADC_IRQHandler+0x250>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	e008      	b.n	800293a <HAL_ADC_IRQHandler+0x252>
 8002928:	40022000 	.word	0x40022000
 800292c:	40022100 	.word	0x40022100
 8002930:	40022300 	.word	0x40022300
 8002934:	58026300 	.word	0x58026300
 8002938:	4b84      	ldr	r3, [pc, #528]	@ (8002b4c <HAL_ADC_IRQHandler+0x464>)
 800293a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d047      	beq.n	80029d8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d007      	beq.n	8002962 <HAL_ADC_IRQHandler+0x27a>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d03f      	beq.n	80029d8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800295e:	2b00      	cmp	r3, #0
 8002960:	d13a      	bne.n	80029d8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296c:	2b40      	cmp	r3, #64	@ 0x40
 800296e:	d133      	bne.n	80029d8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d12e      	bne.n	80029d8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fbbb 	bl	80020fa <LL_ADC_INJ_IsConversionOngoing>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d11a      	bne.n	80029c0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002998:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800299e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d112      	bne.n	80029d8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b6:	f043 0201 	orr.w	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	661a      	str	r2, [r3, #96]	@ 0x60
 80029be:	e00b      	b.n	80029d8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c4:	f043 0210 	orr.w	r2, r3, #16
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029d0:	f043 0201 	orr.w	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f001 f8db 	bl	8003b94 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2260      	movs	r2, #96	@ 0x60
 80029e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d011      	beq.n	8002a14 <HAL_ADC_IRQHandler+0x32c>
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00c      	beq.n	8002a14 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f8b2 	bl	8002b70 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2280      	movs	r2, #128	@ 0x80
 8002a12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d012      	beq.n	8002a44 <HAL_ADC_IRQHandler+0x35c>
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00d      	beq.n	8002a44 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a2c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f001 f8c1 	bl	8003bbc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d012      	beq.n	8002a74 <HAL_ADC_IRQHandler+0x38c>
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00d      	beq.n	8002a74 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a5c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f001 f8b3 	bl	8003bd0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d043      	beq.n	8002b06 <HAL_ADC_IRQHandler+0x41e>
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d03e      	beq.n	8002b06 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d102      	bne.n	8002a96 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002a90:	2301      	movs	r3, #1
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a94:	e021      	b.n	8002ada <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d015      	beq.n	8002ac8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a2a      	ldr	r2, [pc, #168]	@ (8002b4c <HAL_ADC_IRQHandler+0x464>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d004      	beq.n	8002ab0 <HAL_ADC_IRQHandler+0x3c8>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a29      	ldr	r2, [pc, #164]	@ (8002b50 <HAL_ADC_IRQHandler+0x468>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_IRQHandler+0x3cc>
 8002ab0:	4b28      	ldr	r3, [pc, #160]	@ (8002b54 <HAL_ADC_IRQHandler+0x46c>)
 8002ab2:	e000      	b.n	8002ab6 <HAL_ADC_IRQHandler+0x3ce>
 8002ab4:	4b28      	ldr	r3, [pc, #160]	@ (8002b58 <HAL_ADC_IRQHandler+0x470>)
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fa4e 	bl	8001f58 <LL_ADC_GetMultiDMATransfer>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00b      	beq.n	8002ada <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac6:	e008      	b.n	8002ada <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d10e      	bne.n	8002afe <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002af0:	f043 0202 	orr.w	r2, r3, #2
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f843 	bl	8002b84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2210      	movs	r2, #16
 8002b04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d018      	beq.n	8002b42 <HAL_ADC_IRQHandler+0x45a>
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d013      	beq.n	8002b42 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b1e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b2a:	f043 0208 	orr.w	r2, r3, #8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b3a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f001 f833 	bl	8003ba8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002b42:	bf00      	nop
 8002b44:	3728      	adds	r7, #40	@ 0x28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40022000 	.word	0x40022000
 8002b50:	40022100 	.word	0x40022100
 8002b54:	40022300 	.word	0x40022300
 8002b58:	58026300 	.word	0x58026300

08002b5c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b0a5      	sub	sp, #148	@ 0x94
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002bb2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4aa4      	ldr	r2, [pc, #656]	@ (8002e4c <HAL_ADC_ConfigChannel+0x2b4>)
 8002bba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d102      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x34>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	f000 bca2 	b.w	8003510 <HAL_ADC_ConfigChannel+0x978>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fa7b 	bl	80020d4 <LL_ADC_REG_IsConversionOngoing>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f040 8486 	bne.w	80034f2 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	db31      	blt.n	8002c52 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a97      	ldr	r2, [pc, #604]	@ (8002e50 <HAL_ADC_ConfigChannel+0x2b8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d02c      	beq.n	8002c52 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d108      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x7e>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0e9b      	lsrs	r3, r3, #26
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	2201      	movs	r2, #1
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	e016      	b.n	8002c44 <HAL_ADC_ConfigChannel+0xac>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002c24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c26:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002c28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8002c2e:	2320      	movs	r3, #32
 8002c30:	e003      	b.n	8002c3a <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8002c32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c34:	fab3 f383 	clz	r3, r3
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	2201      	movs	r2, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	69d1      	ldr	r1, [r2, #28]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6812      	ldr	r2, [r2, #0]
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	6859      	ldr	r1, [r3, #4]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f7ff f885 	bl	8001d6e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fa33 	bl	80020d4 <LL_ADC_REG_IsConversionOngoing>
 8002c6e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fa3f 	bl	80020fa <LL_ADC_INJ_IsConversionOngoing>
 8002c7c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f040 824a 	bne.w	800311e <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 8245 	bne.w	800311e <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	6819      	ldr	r1, [r3, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f7ff f8e0 	bl	8001e66 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a69      	ldr	r2, [pc, #420]	@ (8002e50 <HAL_ADC_ConfigChannel+0x2b8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d10d      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	695a      	ldr	r2, [r3, #20]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	08db      	lsrs	r3, r3, #3
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cca:	e032      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ccc:	4b61      	ldr	r3, [pc, #388]	@ (8002e54 <HAL_ADC_ConfigChannel+0x2bc>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002cd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cd8:	d10b      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x15a>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	089b      	lsrs	r3, r3, #2
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	e01d      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x196>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x180>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	089b      	lsrs	r3, r3, #2
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	e00a      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x196>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	089b      	lsrs	r3, r3, #2
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d048      	beq.n	8002dcc <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	6919      	ldr	r1, [r3, #16]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d4a:	f7fe ff0b 	bl	8001b64 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a3f      	ldr	r2, [pc, #252]	@ (8002e50 <HAL_ADC_ConfigChannel+0x2b8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d119      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	6919      	ldr	r1, [r3, #16]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	461a      	mov	r2, r3
 8002d66:	f7fe ffa3 	bl	8001cb0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6919      	ldr	r1, [r3, #16]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d102      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x1ea>
 8002d7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d80:	e000      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x1ec>
 8002d82:	2300      	movs	r3, #0
 8002d84:	461a      	mov	r2, r3
 8002d86:	f7fe ff71 	bl	8001c6c <LL_ADC_SetOffsetSaturation>
 8002d8a:	e1c8      	b.n	800311e <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	6919      	ldr	r1, [r3, #16]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d102      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x20c>
 8002d9e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002da2:	e000      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x20e>
 8002da4:	2300      	movs	r3, #0
 8002da6:	461a      	mov	r2, r3
 8002da8:	f7fe ff3e 	bl	8001c28 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6919      	ldr	r1, [r3, #16]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	7e1b      	ldrb	r3, [r3, #24]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d102      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x22a>
 8002dbc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002dc0:	e000      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x22c>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f7fe ff15 	bl	8001bf4 <LL_ADC_SetDataRightShift>
 8002dca:	e1a8      	b.n	800311e <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8002e50 <HAL_ADC_ConfigChannel+0x2b8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	f040 815b 	bne.w	800308e <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe fef2 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10a      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x26c>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2100      	movs	r1, #0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fe fee7 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	0e9b      	lsrs	r3, r3, #26
 8002dfe:	f003 021f 	and.w	r2, r3, #31
 8002e02:	e017      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x29c>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe fedc 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8002e10:	4603      	mov	r3, r0
 8002e12:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002e1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002e20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002e26:	2320      	movs	r3, #32
 8002e28:	e003      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8002e2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10b      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x2c0>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	0e9b      	lsrs	r3, r3, #26
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	e017      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x2e4>
 8002e4c:	47ff0000 	.word	0x47ff0000
 8002e50:	58026000 	.word	0x58026000
 8002e54:	5c001000 	.word	0x5c001000
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002e66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e68:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002e6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002e70:	2320      	movs	r3, #32
 8002e72:	e003      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002e74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d106      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2200      	movs	r2, #0
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fe ff33 	bl	8001cf4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2101      	movs	r1, #1
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe fe97 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10a      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x322>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe fe8c 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	0e9b      	lsrs	r3, r3, #26
 8002eb4:	f003 021f 	and.w	r2, r3, #31
 8002eb8:	e017      	b.n	8002eea <HAL_ADC_ConfigChannel+0x352>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe fe81 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ed4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8002edc:	2320      	movs	r3, #32
 8002ede:	e003      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8002ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee2:	fab3 f383 	clz	r3, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d105      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x36a>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	0e9b      	lsrs	r3, r3, #26
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	e011      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x38e>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f12:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002f14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002f1a:	2320      	movs	r3, #32
 8002f1c:	e003      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002f1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f20:	fab3 f383 	clz	r3, r3
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d106      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2101      	movs	r1, #1
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe fede 	bl	8001cf4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2102      	movs	r1, #2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe fe42 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10a      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x3cc>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2102      	movs	r1, #2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe fe37 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	0e9b      	lsrs	r3, r3, #26
 8002f5e:	f003 021f 	and.w	r2, r3, #31
 8002f62:	e017      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x3fc>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2102      	movs	r1, #2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fe2c 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8002f70:	4603      	mov	r3, r0
 8002f72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002f86:	2320      	movs	r3, #32
 8002f88:	e003      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f8c:	fab3 f383 	clz	r3, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d105      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x414>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0e9b      	lsrs	r3, r3, #26
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	e011      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x438>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fbc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002fc4:	2320      	movs	r3, #32
 8002fc6:	e003      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d106      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2102      	movs	r1, #2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fe fe89 	bl	8001cf4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2103      	movs	r1, #3
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe fded 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10a      	bne.n	800300e <HAL_ADC_ConfigChannel+0x476>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2103      	movs	r1, #3
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe fde2 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8003004:	4603      	mov	r3, r0
 8003006:	0e9b      	lsrs	r3, r3, #26
 8003008:	f003 021f 	and.w	r2, r3, #31
 800300c:	e017      	b.n	800303e <HAL_ADC_ConfigChannel+0x4a6>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2103      	movs	r1, #3
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe fdd7 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 800301a:	4603      	mov	r3, r0
 800301c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	fa93 f3a3 	rbit	r3, r3
 8003024:	61fb      	str	r3, [r7, #28]
  return result;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003030:	2320      	movs	r3, #32
 8003032:	e003      	b.n	800303c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003036:	fab3 f383 	clz	r3, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003046:	2b00      	cmp	r3, #0
 8003048:	d105      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x4be>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	0e9b      	lsrs	r3, r3, #26
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	e011      	b.n	800307a <HAL_ADC_ConfigChannel+0x4e2>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	613b      	str	r3, [r7, #16]
  return result;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800306e:	2320      	movs	r3, #32
 8003070:	e003      	b.n	800307a <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	fab3 f383 	clz	r3, r3
 8003078:	b2db      	uxtb	r3, r3
 800307a:	429a      	cmp	r2, r3
 800307c:	d14f      	bne.n	800311e <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2200      	movs	r2, #0
 8003084:	2103      	movs	r1, #3
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fe34 	bl	8001cf4 <LL_ADC_SetOffsetState>
 800308c:	e047      	b.n	800311e <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003094:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	069b      	lsls	r3, r3, #26
 800309e:	429a      	cmp	r2, r3
 80030a0:	d107      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030b0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	069b      	lsls	r3, r3, #26
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d107      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030d4:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	069b      	lsls	r3, r3, #26
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d107      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80030f8:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003100:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	069b      	lsls	r3, r3, #26
 800310a:	429a      	cmp	r2, r3
 800310c:	d107      	bne.n	800311e <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800311c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe ff9c 	bl	8002060 <LL_ADC_IsEnabled>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 81ea 	bne.w	8003504 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6819      	ldr	r1, [r3, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	461a      	mov	r2, r3
 800313e:	f7fe febd 	bl	8001ebc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	4a7a      	ldr	r2, [pc, #488]	@ (8003330 <HAL_ADC_ConfigChannel+0x798>)
 8003148:	4293      	cmp	r3, r2
 800314a:	f040 80e0 	bne.w	800330e <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4977      	ldr	r1, [pc, #476]	@ (8003334 <HAL_ADC_ConfigChannel+0x79c>)
 8003158:	428b      	cmp	r3, r1
 800315a:	d147      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x654>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4975      	ldr	r1, [pc, #468]	@ (8003338 <HAL_ADC_ConfigChannel+0x7a0>)
 8003162:	428b      	cmp	r3, r1
 8003164:	d040      	beq.n	80031e8 <HAL_ADC_ConfigChannel+0x650>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4974      	ldr	r1, [pc, #464]	@ (800333c <HAL_ADC_ConfigChannel+0x7a4>)
 800316c:	428b      	cmp	r3, r1
 800316e:	d039      	beq.n	80031e4 <HAL_ADC_ConfigChannel+0x64c>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4972      	ldr	r1, [pc, #456]	@ (8003340 <HAL_ADC_ConfigChannel+0x7a8>)
 8003176:	428b      	cmp	r3, r1
 8003178:	d032      	beq.n	80031e0 <HAL_ADC_ConfigChannel+0x648>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4971      	ldr	r1, [pc, #452]	@ (8003344 <HAL_ADC_ConfigChannel+0x7ac>)
 8003180:	428b      	cmp	r3, r1
 8003182:	d02b      	beq.n	80031dc <HAL_ADC_ConfigChannel+0x644>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	496f      	ldr	r1, [pc, #444]	@ (8003348 <HAL_ADC_ConfigChannel+0x7b0>)
 800318a:	428b      	cmp	r3, r1
 800318c:	d024      	beq.n	80031d8 <HAL_ADC_ConfigChannel+0x640>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	496e      	ldr	r1, [pc, #440]	@ (800334c <HAL_ADC_ConfigChannel+0x7b4>)
 8003194:	428b      	cmp	r3, r1
 8003196:	d01d      	beq.n	80031d4 <HAL_ADC_ConfigChannel+0x63c>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	496c      	ldr	r1, [pc, #432]	@ (8003350 <HAL_ADC_ConfigChannel+0x7b8>)
 800319e:	428b      	cmp	r3, r1
 80031a0:	d016      	beq.n	80031d0 <HAL_ADC_ConfigChannel+0x638>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	496b      	ldr	r1, [pc, #428]	@ (8003354 <HAL_ADC_ConfigChannel+0x7bc>)
 80031a8:	428b      	cmp	r3, r1
 80031aa:	d00f      	beq.n	80031cc <HAL_ADC_ConfigChannel+0x634>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4969      	ldr	r1, [pc, #420]	@ (8003358 <HAL_ADC_ConfigChannel+0x7c0>)
 80031b2:	428b      	cmp	r3, r1
 80031b4:	d008      	beq.n	80031c8 <HAL_ADC_ConfigChannel+0x630>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4968      	ldr	r1, [pc, #416]	@ (800335c <HAL_ADC_ConfigChannel+0x7c4>)
 80031bc:	428b      	cmp	r3, r1
 80031be:	d101      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x62c>
 80031c0:	4b67      	ldr	r3, [pc, #412]	@ (8003360 <HAL_ADC_ConfigChannel+0x7c8>)
 80031c2:	e0a0      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 80031c4:	2300      	movs	r3, #0
 80031c6:	e09e      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 80031c8:	4b66      	ldr	r3, [pc, #408]	@ (8003364 <HAL_ADC_ConfigChannel+0x7cc>)
 80031ca:	e09c      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 80031cc:	4b66      	ldr	r3, [pc, #408]	@ (8003368 <HAL_ADC_ConfigChannel+0x7d0>)
 80031ce:	e09a      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 80031d0:	4b60      	ldr	r3, [pc, #384]	@ (8003354 <HAL_ADC_ConfigChannel+0x7bc>)
 80031d2:	e098      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 80031d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003350 <HAL_ADC_ConfigChannel+0x7b8>)
 80031d6:	e096      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 80031d8:	4b64      	ldr	r3, [pc, #400]	@ (800336c <HAL_ADC_ConfigChannel+0x7d4>)
 80031da:	e094      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 80031dc:	4b64      	ldr	r3, [pc, #400]	@ (8003370 <HAL_ADC_ConfigChannel+0x7d8>)
 80031de:	e092      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 80031e0:	4b64      	ldr	r3, [pc, #400]	@ (8003374 <HAL_ADC_ConfigChannel+0x7dc>)
 80031e2:	e090      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 80031e4:	4b64      	ldr	r3, [pc, #400]	@ (8003378 <HAL_ADC_ConfigChannel+0x7e0>)
 80031e6:	e08e      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 80031e8:	2301      	movs	r3, #1
 80031ea:	e08c      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4962      	ldr	r1, [pc, #392]	@ (800337c <HAL_ADC_ConfigChannel+0x7e4>)
 80031f2:	428b      	cmp	r3, r1
 80031f4:	d140      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x6e0>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	494f      	ldr	r1, [pc, #316]	@ (8003338 <HAL_ADC_ConfigChannel+0x7a0>)
 80031fc:	428b      	cmp	r3, r1
 80031fe:	d039      	beq.n	8003274 <HAL_ADC_ConfigChannel+0x6dc>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	494d      	ldr	r1, [pc, #308]	@ (800333c <HAL_ADC_ConfigChannel+0x7a4>)
 8003206:	428b      	cmp	r3, r1
 8003208:	d032      	beq.n	8003270 <HAL_ADC_ConfigChannel+0x6d8>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	494c      	ldr	r1, [pc, #304]	@ (8003340 <HAL_ADC_ConfigChannel+0x7a8>)
 8003210:	428b      	cmp	r3, r1
 8003212:	d02b      	beq.n	800326c <HAL_ADC_ConfigChannel+0x6d4>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	494a      	ldr	r1, [pc, #296]	@ (8003344 <HAL_ADC_ConfigChannel+0x7ac>)
 800321a:	428b      	cmp	r3, r1
 800321c:	d024      	beq.n	8003268 <HAL_ADC_ConfigChannel+0x6d0>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4949      	ldr	r1, [pc, #292]	@ (8003348 <HAL_ADC_ConfigChannel+0x7b0>)
 8003224:	428b      	cmp	r3, r1
 8003226:	d01d      	beq.n	8003264 <HAL_ADC_ConfigChannel+0x6cc>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4947      	ldr	r1, [pc, #284]	@ (800334c <HAL_ADC_ConfigChannel+0x7b4>)
 800322e:	428b      	cmp	r3, r1
 8003230:	d016      	beq.n	8003260 <HAL_ADC_ConfigChannel+0x6c8>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4946      	ldr	r1, [pc, #280]	@ (8003350 <HAL_ADC_ConfigChannel+0x7b8>)
 8003238:	428b      	cmp	r3, r1
 800323a:	d00f      	beq.n	800325c <HAL_ADC_ConfigChannel+0x6c4>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4944      	ldr	r1, [pc, #272]	@ (8003354 <HAL_ADC_ConfigChannel+0x7bc>)
 8003242:	428b      	cmp	r3, r1
 8003244:	d008      	beq.n	8003258 <HAL_ADC_ConfigChannel+0x6c0>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4944      	ldr	r1, [pc, #272]	@ (800335c <HAL_ADC_ConfigChannel+0x7c4>)
 800324c:	428b      	cmp	r3, r1
 800324e:	d101      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x6bc>
 8003250:	4b43      	ldr	r3, [pc, #268]	@ (8003360 <HAL_ADC_ConfigChannel+0x7c8>)
 8003252:	e058      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 8003254:	2300      	movs	r3, #0
 8003256:	e056      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 8003258:	4b43      	ldr	r3, [pc, #268]	@ (8003368 <HAL_ADC_ConfigChannel+0x7d0>)
 800325a:	e054      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 800325c:	4b3d      	ldr	r3, [pc, #244]	@ (8003354 <HAL_ADC_ConfigChannel+0x7bc>)
 800325e:	e052      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 8003260:	4b3b      	ldr	r3, [pc, #236]	@ (8003350 <HAL_ADC_ConfigChannel+0x7b8>)
 8003262:	e050      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 8003264:	4b41      	ldr	r3, [pc, #260]	@ (800336c <HAL_ADC_ConfigChannel+0x7d4>)
 8003266:	e04e      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 8003268:	4b41      	ldr	r3, [pc, #260]	@ (8003370 <HAL_ADC_ConfigChannel+0x7d8>)
 800326a:	e04c      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 800326c:	4b41      	ldr	r3, [pc, #260]	@ (8003374 <HAL_ADC_ConfigChannel+0x7dc>)
 800326e:	e04a      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 8003270:	4b41      	ldr	r3, [pc, #260]	@ (8003378 <HAL_ADC_ConfigChannel+0x7e0>)
 8003272:	e048      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 8003274:	2301      	movs	r3, #1
 8003276:	e046      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4940      	ldr	r1, [pc, #256]	@ (8003380 <HAL_ADC_ConfigChannel+0x7e8>)
 800327e:	428b      	cmp	r3, r1
 8003280:	d140      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x76c>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	492c      	ldr	r1, [pc, #176]	@ (8003338 <HAL_ADC_ConfigChannel+0x7a0>)
 8003288:	428b      	cmp	r3, r1
 800328a:	d039      	beq.n	8003300 <HAL_ADC_ConfigChannel+0x768>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	492a      	ldr	r1, [pc, #168]	@ (800333c <HAL_ADC_ConfigChannel+0x7a4>)
 8003292:	428b      	cmp	r3, r1
 8003294:	d032      	beq.n	80032fc <HAL_ADC_ConfigChannel+0x764>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4929      	ldr	r1, [pc, #164]	@ (8003340 <HAL_ADC_ConfigChannel+0x7a8>)
 800329c:	428b      	cmp	r3, r1
 800329e:	d02b      	beq.n	80032f8 <HAL_ADC_ConfigChannel+0x760>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4927      	ldr	r1, [pc, #156]	@ (8003344 <HAL_ADC_ConfigChannel+0x7ac>)
 80032a6:	428b      	cmp	r3, r1
 80032a8:	d024      	beq.n	80032f4 <HAL_ADC_ConfigChannel+0x75c>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4926      	ldr	r1, [pc, #152]	@ (8003348 <HAL_ADC_ConfigChannel+0x7b0>)
 80032b0:	428b      	cmp	r3, r1
 80032b2:	d01d      	beq.n	80032f0 <HAL_ADC_ConfigChannel+0x758>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4924      	ldr	r1, [pc, #144]	@ (800334c <HAL_ADC_ConfigChannel+0x7b4>)
 80032ba:	428b      	cmp	r3, r1
 80032bc:	d016      	beq.n	80032ec <HAL_ADC_ConfigChannel+0x754>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4923      	ldr	r1, [pc, #140]	@ (8003350 <HAL_ADC_ConfigChannel+0x7b8>)
 80032c4:	428b      	cmp	r3, r1
 80032c6:	d00f      	beq.n	80032e8 <HAL_ADC_ConfigChannel+0x750>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4926      	ldr	r1, [pc, #152]	@ (8003368 <HAL_ADC_ConfigChannel+0x7d0>)
 80032ce:	428b      	cmp	r3, r1
 80032d0:	d008      	beq.n	80032e4 <HAL_ADC_ConfigChannel+0x74c>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	492b      	ldr	r1, [pc, #172]	@ (8003384 <HAL_ADC_ConfigChannel+0x7ec>)
 80032d8:	428b      	cmp	r3, r1
 80032da:	d101      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x748>
 80032dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003388 <HAL_ADC_ConfigChannel+0x7f0>)
 80032de:	e012      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 80032e0:	2300      	movs	r3, #0
 80032e2:	e010      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 80032e4:	4b27      	ldr	r3, [pc, #156]	@ (8003384 <HAL_ADC_ConfigChannel+0x7ec>)
 80032e6:	e00e      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 80032e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003354 <HAL_ADC_ConfigChannel+0x7bc>)
 80032ea:	e00c      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 80032ec:	4b18      	ldr	r3, [pc, #96]	@ (8003350 <HAL_ADC_ConfigChannel+0x7b8>)
 80032ee:	e00a      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 80032f0:	4b1e      	ldr	r3, [pc, #120]	@ (800336c <HAL_ADC_ConfigChannel+0x7d4>)
 80032f2:	e008      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 80032f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003370 <HAL_ADC_ConfigChannel+0x7d8>)
 80032f6:	e006      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 80032f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003374 <HAL_ADC_ConfigChannel+0x7dc>)
 80032fa:	e004      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 80032fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003378 <HAL_ADC_ConfigChannel+0x7e0>)
 80032fe:	e002      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_ADC_ConfigChannel+0x76e>
 8003304:	2300      	movs	r3, #0
 8003306:	4619      	mov	r1, r3
 8003308:	4610      	mov	r0, r2
 800330a:	f7fe fbf1 	bl	8001af0 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f280 80f6 	bge.w	8003504 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a05      	ldr	r2, [pc, #20]	@ (8003334 <HAL_ADC_ConfigChannel+0x79c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d004      	beq.n	800332c <HAL_ADC_ConfigChannel+0x794>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a15      	ldr	r2, [pc, #84]	@ (800337c <HAL_ADC_ConfigChannel+0x7e4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d131      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x7f8>
 800332c:	4b17      	ldr	r3, [pc, #92]	@ (800338c <HAL_ADC_ConfigChannel+0x7f4>)
 800332e:	e030      	b.n	8003392 <HAL_ADC_ConfigChannel+0x7fa>
 8003330:	47ff0000 	.word	0x47ff0000
 8003334:	40022000 	.word	0x40022000
 8003338:	04300002 	.word	0x04300002
 800333c:	08600004 	.word	0x08600004
 8003340:	0c900008 	.word	0x0c900008
 8003344:	10c00010 	.word	0x10c00010
 8003348:	14f00020 	.word	0x14f00020
 800334c:	2a000400 	.word	0x2a000400
 8003350:	2e300800 	.word	0x2e300800
 8003354:	32601000 	.word	0x32601000
 8003358:	43210000 	.word	0x43210000
 800335c:	4b840000 	.word	0x4b840000
 8003360:	4fb80000 	.word	0x4fb80000
 8003364:	47520000 	.word	0x47520000
 8003368:	36902000 	.word	0x36902000
 800336c:	25b00200 	.word	0x25b00200
 8003370:	21800100 	.word	0x21800100
 8003374:	1d500080 	.word	0x1d500080
 8003378:	19200040 	.word	0x19200040
 800337c:	40022100 	.word	0x40022100
 8003380:	58026000 	.word	0x58026000
 8003384:	3ac04000 	.word	0x3ac04000
 8003388:	3ef08000 	.word	0x3ef08000
 800338c:	40022300 	.word	0x40022300
 8003390:	4b61      	ldr	r3, [pc, #388]	@ (8003518 <HAL_ADC_ConfigChannel+0x980>)
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe fb9e 	bl	8001ad4 <LL_ADC_GetCommonPathInternalCh>
 8003398:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a5f      	ldr	r2, [pc, #380]	@ (800351c <HAL_ADC_ConfigChannel+0x984>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d004      	beq.n	80033ae <HAL_ADC_ConfigChannel+0x816>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a5d      	ldr	r2, [pc, #372]	@ (8003520 <HAL_ADC_ConfigChannel+0x988>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d10e      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x834>
 80033ae:	485b      	ldr	r0, [pc, #364]	@ (800351c <HAL_ADC_ConfigChannel+0x984>)
 80033b0:	f7fe fe56 	bl	8002060 <LL_ADC_IsEnabled>
 80033b4:	4604      	mov	r4, r0
 80033b6:	485a      	ldr	r0, [pc, #360]	@ (8003520 <HAL_ADC_ConfigChannel+0x988>)
 80033b8:	f7fe fe52 	bl	8002060 <LL_ADC_IsEnabled>
 80033bc:	4603      	mov	r3, r0
 80033be:	4323      	orrs	r3, r4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf0c      	ite	eq
 80033c4:	2301      	moveq	r3, #1
 80033c6:	2300      	movne	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	e008      	b.n	80033de <HAL_ADC_ConfigChannel+0x846>
 80033cc:	4855      	ldr	r0, [pc, #340]	@ (8003524 <HAL_ADC_ConfigChannel+0x98c>)
 80033ce:	f7fe fe47 	bl	8002060 <LL_ADC_IsEnabled>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	bf0c      	ite	eq
 80033d8:	2301      	moveq	r3, #1
 80033da:	2300      	movne	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d07d      	beq.n	80034de <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a50      	ldr	r2, [pc, #320]	@ (8003528 <HAL_ADC_ConfigChannel+0x990>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d130      	bne.n	800344e <HAL_ADC_ConfigChannel+0x8b6>
 80033ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d12b      	bne.n	800344e <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003524 <HAL_ADC_ConfigChannel+0x98c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	f040 8081 	bne.w	8003504 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a45      	ldr	r2, [pc, #276]	@ (800351c <HAL_ADC_ConfigChannel+0x984>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d004      	beq.n	8003416 <HAL_ADC_ConfigChannel+0x87e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a43      	ldr	r2, [pc, #268]	@ (8003520 <HAL_ADC_ConfigChannel+0x988>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d101      	bne.n	800341a <HAL_ADC_ConfigChannel+0x882>
 8003416:	4a45      	ldr	r2, [pc, #276]	@ (800352c <HAL_ADC_ConfigChannel+0x994>)
 8003418:	e000      	b.n	800341c <HAL_ADC_ConfigChannel+0x884>
 800341a:	4a3f      	ldr	r2, [pc, #252]	@ (8003518 <HAL_ADC_ConfigChannel+0x980>)
 800341c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800341e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	f7fe fb42 	bl	8001aae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800342a:	4b41      	ldr	r3, [pc, #260]	@ (8003530 <HAL_ADC_ConfigChannel+0x998>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	099b      	lsrs	r3, r3, #6
 8003430:	4a40      	ldr	r2, [pc, #256]	@ (8003534 <HAL_ADC_ConfigChannel+0x99c>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	099b      	lsrs	r3, r3, #6
 8003438:	3301      	adds	r3, #1
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800343e:	e002      	b.n	8003446 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3b01      	subs	r3, #1
 8003444:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f9      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800344c:	e05a      	b.n	8003504 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a39      	ldr	r2, [pc, #228]	@ (8003538 <HAL_ADC_ConfigChannel+0x9a0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d11e      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x8fe>
 8003458:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800345a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d119      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2f      	ldr	r2, [pc, #188]	@ (8003524 <HAL_ADC_ConfigChannel+0x98c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d14b      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a2a      	ldr	r2, [pc, #168]	@ (800351c <HAL_ADC_ConfigChannel+0x984>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d004      	beq.n	8003480 <HAL_ADC_ConfigChannel+0x8e8>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a29      	ldr	r2, [pc, #164]	@ (8003520 <HAL_ADC_ConfigChannel+0x988>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d101      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x8ec>
 8003480:	4a2a      	ldr	r2, [pc, #168]	@ (800352c <HAL_ADC_ConfigChannel+0x994>)
 8003482:	e000      	b.n	8003486 <HAL_ADC_ConfigChannel+0x8ee>
 8003484:	4a24      	ldr	r2, [pc, #144]	@ (8003518 <HAL_ADC_ConfigChannel+0x980>)
 8003486:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003488:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800348c:	4619      	mov	r1, r3
 800348e:	4610      	mov	r0, r2
 8003490:	f7fe fb0d 	bl	8001aae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003494:	e036      	b.n	8003504 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a28      	ldr	r2, [pc, #160]	@ (800353c <HAL_ADC_ConfigChannel+0x9a4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d131      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x96c>
 80034a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d12c      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003524 <HAL_ADC_ConfigChannel+0x98c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d127      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a18      	ldr	r2, [pc, #96]	@ (800351c <HAL_ADC_ConfigChannel+0x984>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <HAL_ADC_ConfigChannel+0x930>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a17      	ldr	r2, [pc, #92]	@ (8003520 <HAL_ADC_ConfigChannel+0x988>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d101      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x934>
 80034c8:	4a18      	ldr	r2, [pc, #96]	@ (800352c <HAL_ADC_ConfigChannel+0x994>)
 80034ca:	e000      	b.n	80034ce <HAL_ADC_ConfigChannel+0x936>
 80034cc:	4a12      	ldr	r2, [pc, #72]	@ (8003518 <HAL_ADC_ConfigChannel+0x980>)
 80034ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034d4:	4619      	mov	r1, r3
 80034d6:	4610      	mov	r0, r2
 80034d8:	f7fe fae9 	bl	8001aae <LL_ADC_SetCommonPathInternalCh>
 80034dc:	e012      	b.n	8003504 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e2:	f043 0220 	orr.w	r2, r3, #32
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80034f0:	e008      	b.n	8003504 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f6:	f043 0220 	orr.w	r2, r3, #32
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800350c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8003510:	4618      	mov	r0, r3
 8003512:	3794      	adds	r7, #148	@ 0x94
 8003514:	46bd      	mov	sp, r7
 8003516:	bd90      	pop	{r4, r7, pc}
 8003518:	58026300 	.word	0x58026300
 800351c:	40022000 	.word	0x40022000
 8003520:	40022100 	.word	0x40022100
 8003524:	58026000 	.word	0x58026000
 8003528:	c7520000 	.word	0xc7520000
 800352c:	40022300 	.word	0x40022300
 8003530:	24000000 	.word	0x24000000
 8003534:	053e2d63 	.word	0x053e2d63
 8003538:	c3210000 	.word	0xc3210000
 800353c:	cb840000 	.word	0xcb840000

08003540 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f7fe fd87 	bl	8002060 <LL_ADC_IsEnabled>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d16e      	bne.n	8003636 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	4b38      	ldr	r3, [pc, #224]	@ (8003640 <ADC_Enable+0x100>)
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00d      	beq.n	8003582 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356a:	f043 0210 	orr.w	r2, r3, #16
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003576:	f043 0201 	orr.w	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e05a      	b.n	8003638 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe fd42 	bl	8002010 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800358c:	f7fe fa70 	bl	8001a70 <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2b      	ldr	r2, [pc, #172]	@ (8003644 <ADC_Enable+0x104>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d004      	beq.n	80035a6 <ADC_Enable+0x66>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a29      	ldr	r2, [pc, #164]	@ (8003648 <ADC_Enable+0x108>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d101      	bne.n	80035aa <ADC_Enable+0x6a>
 80035a6:	4b29      	ldr	r3, [pc, #164]	@ (800364c <ADC_Enable+0x10c>)
 80035a8:	e000      	b.n	80035ac <ADC_Enable+0x6c>
 80035aa:	4b29      	ldr	r3, [pc, #164]	@ (8003650 <ADC_Enable+0x110>)
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fe fcc5 	bl	8001f3c <LL_ADC_GetMultimode>
 80035b2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a23      	ldr	r2, [pc, #140]	@ (8003648 <ADC_Enable+0x108>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d002      	beq.n	80035c4 <ADC_Enable+0x84>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	e000      	b.n	80035c6 <ADC_Enable+0x86>
 80035c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003644 <ADC_Enable+0x104>)
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d02c      	beq.n	8003628 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d130      	bne.n	8003636 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035d4:	e028      	b.n	8003628 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fe fd40 	bl	8002060 <LL_ADC_IsEnabled>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d104      	bne.n	80035f0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe fd10 	bl	8002010 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035f0:	f7fe fa3e 	bl	8001a70 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d914      	bls.n	8003628 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b01      	cmp	r3, #1
 800360a:	d00d      	beq.n	8003628 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003610:	f043 0210 	orr.w	r2, r3, #16
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800361c:	f043 0201 	orr.w	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e007      	b.n	8003638 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b01      	cmp	r3, #1
 8003634:	d1cf      	bne.n	80035d6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	8000003f 	.word	0x8000003f
 8003644:	40022000 	.word	0x40022000
 8003648:	40022100 	.word	0x40022100
 800364c:	40022300 	.word	0x40022300
 8003650:	58026300 	.word	0x58026300

08003654 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f7fe fd10 	bl	8002086 <LL_ADC_IsDisableOngoing>
 8003666:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe fcf7 	bl	8002060 <LL_ADC_IsEnabled>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d047      	beq.n	8003708 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d144      	bne.n	8003708 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 030d 	and.w	r3, r3, #13
 8003688:	2b01      	cmp	r3, #1
 800368a:	d10c      	bne.n	80036a6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7fe fcd1 	bl	8002038 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2203      	movs	r2, #3
 800369c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800369e:	f7fe f9e7 	bl	8001a70 <HAL_GetTick>
 80036a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036a4:	e029      	b.n	80036fa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036aa:	f043 0210 	orr.w	r2, r3, #16
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036b6:	f043 0201 	orr.w	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e023      	b.n	800370a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036c2:	f7fe f9d5 	bl	8001a70 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d914      	bls.n	80036fa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00d      	beq.n	80036fa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e2:	f043 0210 	orr.w	r2, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036ee:	f043 0201 	orr.w	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e007      	b.n	800370a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1dc      	bne.n	80036c2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003724:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003728:	2b00      	cmp	r3, #0
 800372a:	d14b      	bne.n	80037c4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003730:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d021      	beq.n	800378a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe fafc 	bl	8001d48 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d032      	beq.n	80037bc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d12b      	bne.n	80037bc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003768:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003774:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d11f      	bne.n	80037bc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003780:	f043 0201 	orr.w	r2, r3, #1
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	661a      	str	r2, [r3, #96]	@ 0x60
 8003788:	e018      	b.n	80037bc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d111      	bne.n	80037bc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800379c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d105      	bne.n	80037bc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b4:	f043 0201 	orr.w	r2, r3, #1
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f00c ffd7 	bl	8010770 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037c2:	e00e      	b.n	80037e2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f7ff f9d7 	bl	8002b84 <HAL_ADC_ErrorCallback>
}
 80037d6:	e004      	b.n	80037e2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	4798      	blx	r3
}
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f7ff f9af 	bl	8002b5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003812:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003818:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003824:	f043 0204 	orr.w	r2, r3, #4
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f7ff f9a9 	bl	8002b84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a6c      	ldr	r2, [pc, #432]	@ (80039fc <ADC_ConfigureBoostMode+0x1c0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d004      	beq.n	8003858 <ADC_ConfigureBoostMode+0x1c>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a6b      	ldr	r2, [pc, #428]	@ (8003a00 <ADC_ConfigureBoostMode+0x1c4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d109      	bne.n	800386c <ADC_ConfigureBoostMode+0x30>
 8003858:	4b6a      	ldr	r3, [pc, #424]	@ (8003a04 <ADC_ConfigureBoostMode+0x1c8>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003860:	2b00      	cmp	r3, #0
 8003862:	bf14      	ite	ne
 8003864:	2301      	movne	r3, #1
 8003866:	2300      	moveq	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	e008      	b.n	800387e <ADC_ConfigureBoostMode+0x42>
 800386c:	4b66      	ldr	r3, [pc, #408]	@ (8003a08 <ADC_ConfigureBoostMode+0x1cc>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003874:	2b00      	cmp	r3, #0
 8003876:	bf14      	ite	ne
 8003878:	2301      	movne	r3, #1
 800387a:	2300      	moveq	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d01c      	beq.n	80038bc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003882:	f004 fadd 	bl	8007e40 <HAL_RCC_GetHCLKFreq>
 8003886:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003890:	d010      	beq.n	80038b4 <ADC_ConfigureBoostMode+0x78>
 8003892:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003896:	d873      	bhi.n	8003980 <ADC_ConfigureBoostMode+0x144>
 8003898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800389c:	d002      	beq.n	80038a4 <ADC_ConfigureBoostMode+0x68>
 800389e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038a2:	d16d      	bne.n	8003980 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	0c1b      	lsrs	r3, r3, #16
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	60fb      	str	r3, [r7, #12]
        break;
 80038b2:	e068      	b.n	8003986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	089b      	lsrs	r3, r3, #2
 80038b8:	60fb      	str	r3, [r7, #12]
        break;
 80038ba:	e064      	b.n	8003986 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80038bc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80038c0:	f04f 0100 	mov.w	r1, #0
 80038c4:	f005 fcfa 	bl	80092bc <HAL_RCCEx_GetPeriphCLKFreq>
 80038c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80038d2:	d051      	beq.n	8003978 <ADC_ConfigureBoostMode+0x13c>
 80038d4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80038d8:	d854      	bhi.n	8003984 <ADC_ConfigureBoostMode+0x148>
 80038da:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80038de:	d047      	beq.n	8003970 <ADC_ConfigureBoostMode+0x134>
 80038e0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80038e4:	d84e      	bhi.n	8003984 <ADC_ConfigureBoostMode+0x148>
 80038e6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80038ea:	d03d      	beq.n	8003968 <ADC_ConfigureBoostMode+0x12c>
 80038ec:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80038f0:	d848      	bhi.n	8003984 <ADC_ConfigureBoostMode+0x148>
 80038f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038f6:	d033      	beq.n	8003960 <ADC_ConfigureBoostMode+0x124>
 80038f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038fc:	d842      	bhi.n	8003984 <ADC_ConfigureBoostMode+0x148>
 80038fe:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003902:	d029      	beq.n	8003958 <ADC_ConfigureBoostMode+0x11c>
 8003904:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003908:	d83c      	bhi.n	8003984 <ADC_ConfigureBoostMode+0x148>
 800390a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800390e:	d01a      	beq.n	8003946 <ADC_ConfigureBoostMode+0x10a>
 8003910:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003914:	d836      	bhi.n	8003984 <ADC_ConfigureBoostMode+0x148>
 8003916:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800391a:	d014      	beq.n	8003946 <ADC_ConfigureBoostMode+0x10a>
 800391c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003920:	d830      	bhi.n	8003984 <ADC_ConfigureBoostMode+0x148>
 8003922:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003926:	d00e      	beq.n	8003946 <ADC_ConfigureBoostMode+0x10a>
 8003928:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800392c:	d82a      	bhi.n	8003984 <ADC_ConfigureBoostMode+0x148>
 800392e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003932:	d008      	beq.n	8003946 <ADC_ConfigureBoostMode+0x10a>
 8003934:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003938:	d824      	bhi.n	8003984 <ADC_ConfigureBoostMode+0x148>
 800393a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800393e:	d002      	beq.n	8003946 <ADC_ConfigureBoostMode+0x10a>
 8003940:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003944:	d11e      	bne.n	8003984 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	0c9b      	lsrs	r3, r3, #18
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	60fb      	str	r3, [r7, #12]
        break;
 8003956:	e016      	b.n	8003986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	091b      	lsrs	r3, r3, #4
 800395c:	60fb      	str	r3, [r7, #12]
        break;
 800395e:	e012      	b.n	8003986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	60fb      	str	r3, [r7, #12]
        break;
 8003966:	e00e      	b.n	8003986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	099b      	lsrs	r3, r3, #6
 800396c:	60fb      	str	r3, [r7, #12]
        break;
 800396e:	e00a      	b.n	8003986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	09db      	lsrs	r3, r3, #7
 8003974:	60fb      	str	r3, [r7, #12]
        break;
 8003976:	e006      	b.n	8003986 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	0a1b      	lsrs	r3, r3, #8
 800397c:	60fb      	str	r3, [r7, #12]
        break;
 800397e:	e002      	b.n	8003986 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003980:	bf00      	nop
 8003982:	e000      	b.n	8003986 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003984:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	085b      	lsrs	r3, r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4a1f      	ldr	r2, [pc, #124]	@ (8003a0c <ADC_ConfigureBoostMode+0x1d0>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d808      	bhi.n	80039a6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80039a2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80039a4:	e025      	b.n	80039f2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4a19      	ldr	r2, [pc, #100]	@ (8003a10 <ADC_ConfigureBoostMode+0x1d4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d80a      	bhi.n	80039c4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039c0:	609a      	str	r2, [r3, #8]
}
 80039c2:	e016      	b.n	80039f2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4a13      	ldr	r2, [pc, #76]	@ (8003a14 <ADC_ConfigureBoostMode+0x1d8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d80a      	bhi.n	80039e2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039de:	609a      	str	r2, [r3, #8]
}
 80039e0:	e007      	b.n	80039f2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80039f0:	609a      	str	r2, [r3, #8]
}
 80039f2:	bf00      	nop
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40022000 	.word	0x40022000
 8003a00:	40022100 	.word	0x40022100
 8003a04:	40022300 	.word	0x40022300
 8003a08:	58026300 	.word	0x58026300
 8003a0c:	005f5e10 	.word	0x005f5e10
 8003a10:	00bebc20 	.word	0x00bebc20
 8003a14:	017d7840 	.word	0x017d7840

08003a18 <LL_ADC_IsEnabled>:
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <LL_ADC_IsEnabled+0x18>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <LL_ADC_IsEnabled+0x1a>
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <LL_ADC_StartCalibration>:
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	4b09      	ldr	r3, [pc, #36]	@ (8003a78 <LL_ADC_StartCalibration+0x38>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003a60:	430a      	orrs	r2, r1
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	609a      	str	r2, [r3, #8]
}
 8003a6c:	bf00      	nop
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	3ffeffc0 	.word	0x3ffeffc0

08003a7c <LL_ADC_IsCalibrationOnGoing>:
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a90:	d101      	bne.n	8003a96 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <LL_ADC_REG_IsConversionOngoing>:
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d101      	bne.n	8003abc <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_ADCEx_Calibration_Start+0x1e>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e04c      	b.n	8003b84 <HAL_ADCEx_Calibration_Start+0xb8>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f7ff fdae 	bl	8003654 <ADC_Disable>
 8003af8:	4603      	mov	r3, r0
 8003afa:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d135      	bne.n	8003b6e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b06:	4b21      	ldr	r3, [pc, #132]	@ (8003b8c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	f043 0202 	orr.w	r2, r3, #2
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff ff90 	bl	8003a40 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b20:	e014      	b.n	8003b4c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	3301      	adds	r3, #1
 8003b26:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	4a19      	ldr	r2, [pc, #100]	@ (8003b90 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d30d      	bcc.n	8003b4c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b34:	f023 0312 	bic.w	r3, r3, #18
 8003b38:	f043 0210 	orr.w	r2, r3, #16
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e01b      	b.n	8003b84 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff ff93 	bl	8003a7c <LL_ADC_IsCalibrationOnGoing>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e2      	bne.n	8003b22 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b60:	f023 0303 	bic.w	r3, r3, #3
 8003b64:	f043 0201 	orr.w	r2, r3, #1
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	661a      	str	r2, [r3, #96]	@ 0x60
 8003b6c:	e005      	b.n	8003b7a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b72:	f043 0210 	orr.w	r2, r3, #16
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	ffffeefd 	.word	0xffffeefd
 8003b90:	25c3f800 	.word	0x25c3f800

08003b94 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003bf8:	b590      	push	{r4, r7, lr}
 8003bfa:	b0a3      	sub	sp, #140	@ 0x8c
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e0c1      	b.n	8003d9a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003c22:	2300      	movs	r3, #0
 8003c24:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a5e      	ldr	r2, [pc, #376]	@ (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d102      	bne.n	8003c36 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c30:	4b5d      	ldr	r3, [pc, #372]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	e001      	b.n	8003c3a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10b      	bne.n	8003c58 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c44:	f043 0220 	orr.w	r2, r3, #32
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0a0      	b.n	8003d9a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff ff22 	bl	8003aa4 <LL_ADC_REG_IsConversionOngoing>
 8003c60:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff ff1b 	bl	8003aa4 <LL_ADC_REG_IsConversionOngoing>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f040 8081 	bne.w	8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d17c      	bne.n	8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a48      	ldr	r2, [pc, #288]	@ (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d004      	beq.n	8003c92 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a46      	ldr	r2, [pc, #280]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d101      	bne.n	8003c96 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003c92:	4b46      	ldr	r3, [pc, #280]	@ (8003dac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003c94:	e000      	b.n	8003c98 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003c96:	4b46      	ldr	r3, [pc, #280]	@ (8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003c98:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d039      	beq.n	8003d16 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003ca2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cb2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a3a      	ldr	r2, [pc, #232]	@ (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d004      	beq.n	8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a39      	ldr	r2, [pc, #228]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d10e      	bne.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003cc8:	4836      	ldr	r0, [pc, #216]	@ (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003cca:	f7ff fea5 	bl	8003a18 <LL_ADC_IsEnabled>
 8003cce:	4604      	mov	r4, r0
 8003cd0:	4835      	ldr	r0, [pc, #212]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003cd2:	f7ff fea1 	bl	8003a18 <LL_ADC_IsEnabled>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4323      	orrs	r3, r4
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bf0c      	ite	eq
 8003cde:	2301      	moveq	r3, #1
 8003ce0:	2300      	movne	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	e008      	b.n	8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003ce6:	4833      	ldr	r0, [pc, #204]	@ (8003db4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003ce8:	f7ff fe96 	bl	8003a18 <LL_ADC_IsEnabled>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	bf0c      	ite	eq
 8003cf2:	2301      	moveq	r3, #1
 8003cf4:	2300      	movne	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d047      	beq.n	8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003cfc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	4b2d      	ldr	r3, [pc, #180]	@ (8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	6811      	ldr	r1, [r2, #0]
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	6892      	ldr	r2, [r2, #8]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d12:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d14:	e03a      	b.n	8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003d16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d20:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a1f      	ldr	r2, [pc, #124]	@ (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a1d      	ldr	r2, [pc, #116]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d10e      	bne.n	8003d54 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003d36:	481b      	ldr	r0, [pc, #108]	@ (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d38:	f7ff fe6e 	bl	8003a18 <LL_ADC_IsEnabled>
 8003d3c:	4604      	mov	r4, r0
 8003d3e:	481a      	ldr	r0, [pc, #104]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d40:	f7ff fe6a 	bl	8003a18 <LL_ADC_IsEnabled>
 8003d44:	4603      	mov	r3, r0
 8003d46:	4323      	orrs	r3, r4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf0c      	ite	eq
 8003d4c:	2301      	moveq	r3, #1
 8003d4e:	2300      	movne	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e008      	b.n	8003d66 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003d54:	4817      	ldr	r0, [pc, #92]	@ (8003db4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003d56:	f7ff fe5f 	bl	8003a18 <LL_ADC_IsEnabled>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d010      	beq.n	8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	4b12      	ldr	r3, [pc, #72]	@ (8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003d74:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d76:	e009      	b.n	8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d7c:	f043 0220 	orr.w	r2, r3, #32
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003d8a:	e000      	b.n	8003d8e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003d96:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	378c      	adds	r7, #140	@ 0x8c
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd90      	pop	{r4, r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40022000 	.word	0x40022000
 8003da8:	40022100 	.word	0x40022100
 8003dac:	40022300 	.word	0x40022300
 8003db0:	58026300 	.word	0x58026300
 8003db4:	58026000 	.word	0x58026000
 8003db8:	fffff0e0 	.word	0xfffff0e0

08003dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <__NVIC_SetPriorityGrouping+0x40>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dd8:	4013      	ands	r3, r2
 8003dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003de4:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <__NVIC_SetPriorityGrouping+0x44>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dea:	4a04      	ldr	r2, [pc, #16]	@ (8003dfc <__NVIC_SetPriorityGrouping+0x40>)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	60d3      	str	r3, [r2, #12]
}
 8003df0:	bf00      	nop
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	e000ed00 	.word	0xe000ed00
 8003e00:	05fa0000 	.word	0x05fa0000

08003e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e08:	4b04      	ldr	r3, [pc, #16]	@ (8003e1c <__NVIC_GetPriorityGrouping+0x18>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	0a1b      	lsrs	r3, r3, #8
 8003e0e:	f003 0307 	and.w	r3, r3, #7
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	db0b      	blt.n	8003e4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	f003 021f 	and.w	r2, r3, #31
 8003e38:	4907      	ldr	r1, [pc, #28]	@ (8003e58 <__NVIC_EnableIRQ+0x38>)
 8003e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	2001      	movs	r0, #1
 8003e42:	fa00 f202 	lsl.w	r2, r0, r2
 8003e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	e000e100 	.word	0xe000e100

08003e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	6039      	str	r1, [r7, #0]
 8003e66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	db0a      	blt.n	8003e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	490c      	ldr	r1, [pc, #48]	@ (8003ea8 <__NVIC_SetPriority+0x4c>)
 8003e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e7a:	0112      	lsls	r2, r2, #4
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	440b      	add	r3, r1
 8003e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e84:	e00a      	b.n	8003e9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	4908      	ldr	r1, [pc, #32]	@ (8003eac <__NVIC_SetPriority+0x50>)
 8003e8c:	88fb      	ldrh	r3, [r7, #6]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	3b04      	subs	r3, #4
 8003e94:	0112      	lsls	r2, r2, #4
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	440b      	add	r3, r1
 8003e9a:	761a      	strb	r2, [r3, #24]
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	e000e100 	.word	0xe000e100
 8003eac:	e000ed00 	.word	0xe000ed00

08003eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b089      	sub	sp, #36	@ 0x24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f1c3 0307 	rsb	r3, r3, #7
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	bf28      	it	cs
 8003ece:	2304      	movcs	r3, #4
 8003ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	2b06      	cmp	r3, #6
 8003ed8:	d902      	bls.n	8003ee0 <NVIC_EncodePriority+0x30>
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	3b03      	subs	r3, #3
 8003ede:	e000      	b.n	8003ee2 <NVIC_EncodePriority+0x32>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43da      	mvns	r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	401a      	ands	r2, r3
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	fa01 f303 	lsl.w	r3, r1, r3
 8003f02:	43d9      	mvns	r1, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f08:	4313      	orrs	r3, r2
         );
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3724      	adds	r7, #36	@ 0x24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b082      	sub	sp, #8
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff ff4c 	bl	8003dbc <__NVIC_SetPriorityGrouping>
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f3a:	f7ff ff63 	bl	8003e04 <__NVIC_GetPriorityGrouping>
 8003f3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	68b9      	ldr	r1, [r7, #8]
 8003f44:	6978      	ldr	r0, [r7, #20]
 8003f46:	f7ff ffb3 	bl	8003eb0 <NVIC_EncodePriority>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f50:	4611      	mov	r1, r2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff ff82 	bl	8003e5c <__NVIC_SetPriority>
}
 8003f58:	bf00      	nop
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff ff56 	bl	8003e20 <__NVIC_EnableIRQ>
}
 8003f74:	bf00      	nop
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003f84:	f7fd fd74 	bl	8001a70 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e312      	b.n	80045ba <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a66      	ldr	r2, [pc, #408]	@ (8004134 <HAL_DMA_Init+0x1b8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d04a      	beq.n	8004034 <HAL_DMA_Init+0xb8>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a65      	ldr	r2, [pc, #404]	@ (8004138 <HAL_DMA_Init+0x1bc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d045      	beq.n	8004034 <HAL_DMA_Init+0xb8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a63      	ldr	r2, [pc, #396]	@ (800413c <HAL_DMA_Init+0x1c0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d040      	beq.n	8004034 <HAL_DMA_Init+0xb8>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a62      	ldr	r2, [pc, #392]	@ (8004140 <HAL_DMA_Init+0x1c4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d03b      	beq.n	8004034 <HAL_DMA_Init+0xb8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a60      	ldr	r2, [pc, #384]	@ (8004144 <HAL_DMA_Init+0x1c8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d036      	beq.n	8004034 <HAL_DMA_Init+0xb8>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a5f      	ldr	r2, [pc, #380]	@ (8004148 <HAL_DMA_Init+0x1cc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d031      	beq.n	8004034 <HAL_DMA_Init+0xb8>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a5d      	ldr	r2, [pc, #372]	@ (800414c <HAL_DMA_Init+0x1d0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d02c      	beq.n	8004034 <HAL_DMA_Init+0xb8>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a5c      	ldr	r2, [pc, #368]	@ (8004150 <HAL_DMA_Init+0x1d4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d027      	beq.n	8004034 <HAL_DMA_Init+0xb8>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a5a      	ldr	r2, [pc, #360]	@ (8004154 <HAL_DMA_Init+0x1d8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d022      	beq.n	8004034 <HAL_DMA_Init+0xb8>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a59      	ldr	r2, [pc, #356]	@ (8004158 <HAL_DMA_Init+0x1dc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d01d      	beq.n	8004034 <HAL_DMA_Init+0xb8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a57      	ldr	r2, [pc, #348]	@ (800415c <HAL_DMA_Init+0x1e0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d018      	beq.n	8004034 <HAL_DMA_Init+0xb8>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a56      	ldr	r2, [pc, #344]	@ (8004160 <HAL_DMA_Init+0x1e4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d013      	beq.n	8004034 <HAL_DMA_Init+0xb8>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a54      	ldr	r2, [pc, #336]	@ (8004164 <HAL_DMA_Init+0x1e8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00e      	beq.n	8004034 <HAL_DMA_Init+0xb8>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a53      	ldr	r2, [pc, #332]	@ (8004168 <HAL_DMA_Init+0x1ec>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d009      	beq.n	8004034 <HAL_DMA_Init+0xb8>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a51      	ldr	r2, [pc, #324]	@ (800416c <HAL_DMA_Init+0x1f0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d004      	beq.n	8004034 <HAL_DMA_Init+0xb8>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a50      	ldr	r2, [pc, #320]	@ (8004170 <HAL_DMA_Init+0x1f4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d101      	bne.n	8004038 <HAL_DMA_Init+0xbc>
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <HAL_DMA_Init+0xbe>
 8004038:	2300      	movs	r3, #0
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 813c 	beq.w	80042b8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a37      	ldr	r2, [pc, #220]	@ (8004134 <HAL_DMA_Init+0x1b8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d04a      	beq.n	80040f0 <HAL_DMA_Init+0x174>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a36      	ldr	r2, [pc, #216]	@ (8004138 <HAL_DMA_Init+0x1bc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d045      	beq.n	80040f0 <HAL_DMA_Init+0x174>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a34      	ldr	r2, [pc, #208]	@ (800413c <HAL_DMA_Init+0x1c0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d040      	beq.n	80040f0 <HAL_DMA_Init+0x174>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a33      	ldr	r2, [pc, #204]	@ (8004140 <HAL_DMA_Init+0x1c4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d03b      	beq.n	80040f0 <HAL_DMA_Init+0x174>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a31      	ldr	r2, [pc, #196]	@ (8004144 <HAL_DMA_Init+0x1c8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d036      	beq.n	80040f0 <HAL_DMA_Init+0x174>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a30      	ldr	r2, [pc, #192]	@ (8004148 <HAL_DMA_Init+0x1cc>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d031      	beq.n	80040f0 <HAL_DMA_Init+0x174>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a2e      	ldr	r2, [pc, #184]	@ (800414c <HAL_DMA_Init+0x1d0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d02c      	beq.n	80040f0 <HAL_DMA_Init+0x174>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a2d      	ldr	r2, [pc, #180]	@ (8004150 <HAL_DMA_Init+0x1d4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d027      	beq.n	80040f0 <HAL_DMA_Init+0x174>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004154 <HAL_DMA_Init+0x1d8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d022      	beq.n	80040f0 <HAL_DMA_Init+0x174>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004158 <HAL_DMA_Init+0x1dc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d01d      	beq.n	80040f0 <HAL_DMA_Init+0x174>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a28      	ldr	r2, [pc, #160]	@ (800415c <HAL_DMA_Init+0x1e0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d018      	beq.n	80040f0 <HAL_DMA_Init+0x174>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a27      	ldr	r2, [pc, #156]	@ (8004160 <HAL_DMA_Init+0x1e4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d013      	beq.n	80040f0 <HAL_DMA_Init+0x174>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a25      	ldr	r2, [pc, #148]	@ (8004164 <HAL_DMA_Init+0x1e8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00e      	beq.n	80040f0 <HAL_DMA_Init+0x174>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a24      	ldr	r2, [pc, #144]	@ (8004168 <HAL_DMA_Init+0x1ec>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d009      	beq.n	80040f0 <HAL_DMA_Init+0x174>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a22      	ldr	r2, [pc, #136]	@ (800416c <HAL_DMA_Init+0x1f0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d004      	beq.n	80040f0 <HAL_DMA_Init+0x174>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a21      	ldr	r2, [pc, #132]	@ (8004170 <HAL_DMA_Init+0x1f4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d108      	bne.n	8004102 <HAL_DMA_Init+0x186>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0201 	bic.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	e007      	b.n	8004112 <HAL_DMA_Init+0x196>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0201 	bic.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004112:	e02f      	b.n	8004174 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004114:	f7fd fcac 	bl	8001a70 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b05      	cmp	r3, #5
 8004120:	d928      	bls.n	8004174 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2203      	movs	r2, #3
 800412c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e242      	b.n	80045ba <HAL_DMA_Init+0x63e>
 8004134:	40020010 	.word	0x40020010
 8004138:	40020028 	.word	0x40020028
 800413c:	40020040 	.word	0x40020040
 8004140:	40020058 	.word	0x40020058
 8004144:	40020070 	.word	0x40020070
 8004148:	40020088 	.word	0x40020088
 800414c:	400200a0 	.word	0x400200a0
 8004150:	400200b8 	.word	0x400200b8
 8004154:	40020410 	.word	0x40020410
 8004158:	40020428 	.word	0x40020428
 800415c:	40020440 	.word	0x40020440
 8004160:	40020458 	.word	0x40020458
 8004164:	40020470 	.word	0x40020470
 8004168:	40020488 	.word	0x40020488
 800416c:	400204a0 	.word	0x400204a0
 8004170:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1c8      	bne.n	8004114 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4b83      	ldr	r3, [pc, #524]	@ (800439c <HAL_DMA_Init+0x420>)
 800418e:	4013      	ands	r3, r2
 8004190:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800419a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d107      	bne.n	80041d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d0:	4313      	orrs	r3, r2
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b28      	cmp	r3, #40	@ 0x28
 80041de:	d903      	bls.n	80041e8 <HAL_DMA_Init+0x26c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80041e6:	d91f      	bls.n	8004228 <HAL_DMA_Init+0x2ac>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80041ee:	d903      	bls.n	80041f8 <HAL_DMA_Init+0x27c>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b42      	cmp	r3, #66	@ 0x42
 80041f6:	d917      	bls.n	8004228 <HAL_DMA_Init+0x2ac>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b46      	cmp	r3, #70	@ 0x46
 80041fe:	d903      	bls.n	8004208 <HAL_DMA_Init+0x28c>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b48      	cmp	r3, #72	@ 0x48
 8004206:	d90f      	bls.n	8004228 <HAL_DMA_Init+0x2ac>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b4e      	cmp	r3, #78	@ 0x4e
 800420e:	d903      	bls.n	8004218 <HAL_DMA_Init+0x29c>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b52      	cmp	r3, #82	@ 0x52
 8004216:	d907      	bls.n	8004228 <HAL_DMA_Init+0x2ac>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b73      	cmp	r3, #115	@ 0x73
 800421e:	d905      	bls.n	800422c <HAL_DMA_Init+0x2b0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b77      	cmp	r3, #119	@ 0x77
 8004226:	d801      	bhi.n	800422c <HAL_DMA_Init+0x2b0>
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <HAL_DMA_Init+0x2b2>
 800422c:	2300      	movs	r3, #0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004238:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f023 0307 	bic.w	r3, r3, #7
 8004250:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	2b04      	cmp	r3, #4
 8004262:	d117      	bne.n	8004294 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00e      	beq.n	8004294 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f002 fb2e 	bl	80068d8 <DMA_CheckFifoParam>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2240      	movs	r2, #64	@ 0x40
 8004286:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e192      	b.n	80045ba <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f002 fa69 	bl	8006774 <DMA_CalcBaseAndBitshift>
 80042a2:	4603      	mov	r3, r0
 80042a4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	223f      	movs	r2, #63	@ 0x3f
 80042b0:	409a      	lsls	r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	609a      	str	r2, [r3, #8]
 80042b6:	e0c8      	b.n	800444a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a38      	ldr	r2, [pc, #224]	@ (80043a0 <HAL_DMA_Init+0x424>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d022      	beq.n	8004308 <HAL_DMA_Init+0x38c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a37      	ldr	r2, [pc, #220]	@ (80043a4 <HAL_DMA_Init+0x428>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d01d      	beq.n	8004308 <HAL_DMA_Init+0x38c>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a35      	ldr	r2, [pc, #212]	@ (80043a8 <HAL_DMA_Init+0x42c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d018      	beq.n	8004308 <HAL_DMA_Init+0x38c>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a34      	ldr	r2, [pc, #208]	@ (80043ac <HAL_DMA_Init+0x430>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d013      	beq.n	8004308 <HAL_DMA_Init+0x38c>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a32      	ldr	r2, [pc, #200]	@ (80043b0 <HAL_DMA_Init+0x434>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00e      	beq.n	8004308 <HAL_DMA_Init+0x38c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a31      	ldr	r2, [pc, #196]	@ (80043b4 <HAL_DMA_Init+0x438>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d009      	beq.n	8004308 <HAL_DMA_Init+0x38c>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a2f      	ldr	r2, [pc, #188]	@ (80043b8 <HAL_DMA_Init+0x43c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d004      	beq.n	8004308 <HAL_DMA_Init+0x38c>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a2e      	ldr	r2, [pc, #184]	@ (80043bc <HAL_DMA_Init+0x440>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d101      	bne.n	800430c <HAL_DMA_Init+0x390>
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <HAL_DMA_Init+0x392>
 800430c:	2300      	movs	r3, #0
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 8092 	beq.w	8004438 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a21      	ldr	r2, [pc, #132]	@ (80043a0 <HAL_DMA_Init+0x424>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d021      	beq.n	8004362 <HAL_DMA_Init+0x3e6>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a20      	ldr	r2, [pc, #128]	@ (80043a4 <HAL_DMA_Init+0x428>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d01c      	beq.n	8004362 <HAL_DMA_Init+0x3e6>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a1e      	ldr	r2, [pc, #120]	@ (80043a8 <HAL_DMA_Init+0x42c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d017      	beq.n	8004362 <HAL_DMA_Init+0x3e6>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a1d      	ldr	r2, [pc, #116]	@ (80043ac <HAL_DMA_Init+0x430>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d012      	beq.n	8004362 <HAL_DMA_Init+0x3e6>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a1b      	ldr	r2, [pc, #108]	@ (80043b0 <HAL_DMA_Init+0x434>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d00d      	beq.n	8004362 <HAL_DMA_Init+0x3e6>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a1a      	ldr	r2, [pc, #104]	@ (80043b4 <HAL_DMA_Init+0x438>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d008      	beq.n	8004362 <HAL_DMA_Init+0x3e6>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a18      	ldr	r2, [pc, #96]	@ (80043b8 <HAL_DMA_Init+0x43c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d003      	beq.n	8004362 <HAL_DMA_Init+0x3e6>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a17      	ldr	r2, [pc, #92]	@ (80043bc <HAL_DMA_Init+0x440>)
 8004360:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2202      	movs	r2, #2
 8004366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4b10      	ldr	r3, [pc, #64]	@ (80043c0 <HAL_DMA_Init+0x444>)
 800437e:	4013      	ands	r3, r2
 8004380:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2b40      	cmp	r3, #64	@ 0x40
 8004388:	d01c      	beq.n	80043c4 <HAL_DMA_Init+0x448>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b80      	cmp	r3, #128	@ 0x80
 8004390:	d102      	bne.n	8004398 <HAL_DMA_Init+0x41c>
 8004392:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004396:	e016      	b.n	80043c6 <HAL_DMA_Init+0x44a>
 8004398:	2300      	movs	r3, #0
 800439a:	e014      	b.n	80043c6 <HAL_DMA_Init+0x44a>
 800439c:	fe10803f 	.word	0xfe10803f
 80043a0:	58025408 	.word	0x58025408
 80043a4:	5802541c 	.word	0x5802541c
 80043a8:	58025430 	.word	0x58025430
 80043ac:	58025444 	.word	0x58025444
 80043b0:	58025458 	.word	0x58025458
 80043b4:	5802546c 	.word	0x5802546c
 80043b8:	58025480 	.word	0x58025480
 80043bc:	58025494 	.word	0x58025494
 80043c0:	fffe000f 	.word	0xfffe000f
 80043c4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	68d2      	ldr	r2, [r2, #12]
 80043ca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80043d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80043dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80043e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80043ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80043f4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	4b6e      	ldr	r3, [pc, #440]	@ (80045c4 <HAL_DMA_Init+0x648>)
 800440c:	4413      	add	r3, r2
 800440e:	4a6e      	ldr	r2, [pc, #440]	@ (80045c8 <HAL_DMA_Init+0x64c>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	009a      	lsls	r2, r3, #2
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f002 f9a9 	bl	8006774 <DMA_CalcBaseAndBitshift>
 8004422:	4603      	mov	r3, r0
 8004424:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	2201      	movs	r2, #1
 8004430:	409a      	lsls	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	605a      	str	r2, [r3, #4]
 8004436:	e008      	b.n	800444a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2240      	movs	r2, #64	@ 0x40
 800443c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2203      	movs	r2, #3
 8004442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e0b7      	b.n	80045ba <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a5f      	ldr	r2, [pc, #380]	@ (80045cc <HAL_DMA_Init+0x650>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d072      	beq.n	800453a <HAL_DMA_Init+0x5be>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a5d      	ldr	r2, [pc, #372]	@ (80045d0 <HAL_DMA_Init+0x654>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d06d      	beq.n	800453a <HAL_DMA_Init+0x5be>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a5c      	ldr	r2, [pc, #368]	@ (80045d4 <HAL_DMA_Init+0x658>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d068      	beq.n	800453a <HAL_DMA_Init+0x5be>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a5a      	ldr	r2, [pc, #360]	@ (80045d8 <HAL_DMA_Init+0x65c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d063      	beq.n	800453a <HAL_DMA_Init+0x5be>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a59      	ldr	r2, [pc, #356]	@ (80045dc <HAL_DMA_Init+0x660>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d05e      	beq.n	800453a <HAL_DMA_Init+0x5be>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a57      	ldr	r2, [pc, #348]	@ (80045e0 <HAL_DMA_Init+0x664>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d059      	beq.n	800453a <HAL_DMA_Init+0x5be>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a56      	ldr	r2, [pc, #344]	@ (80045e4 <HAL_DMA_Init+0x668>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d054      	beq.n	800453a <HAL_DMA_Init+0x5be>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a54      	ldr	r2, [pc, #336]	@ (80045e8 <HAL_DMA_Init+0x66c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d04f      	beq.n	800453a <HAL_DMA_Init+0x5be>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a53      	ldr	r2, [pc, #332]	@ (80045ec <HAL_DMA_Init+0x670>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d04a      	beq.n	800453a <HAL_DMA_Init+0x5be>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a51      	ldr	r2, [pc, #324]	@ (80045f0 <HAL_DMA_Init+0x674>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d045      	beq.n	800453a <HAL_DMA_Init+0x5be>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a50      	ldr	r2, [pc, #320]	@ (80045f4 <HAL_DMA_Init+0x678>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d040      	beq.n	800453a <HAL_DMA_Init+0x5be>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a4e      	ldr	r2, [pc, #312]	@ (80045f8 <HAL_DMA_Init+0x67c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d03b      	beq.n	800453a <HAL_DMA_Init+0x5be>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a4d      	ldr	r2, [pc, #308]	@ (80045fc <HAL_DMA_Init+0x680>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d036      	beq.n	800453a <HAL_DMA_Init+0x5be>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a4b      	ldr	r2, [pc, #300]	@ (8004600 <HAL_DMA_Init+0x684>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d031      	beq.n	800453a <HAL_DMA_Init+0x5be>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a4a      	ldr	r2, [pc, #296]	@ (8004604 <HAL_DMA_Init+0x688>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d02c      	beq.n	800453a <HAL_DMA_Init+0x5be>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a48      	ldr	r2, [pc, #288]	@ (8004608 <HAL_DMA_Init+0x68c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d027      	beq.n	800453a <HAL_DMA_Init+0x5be>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a47      	ldr	r2, [pc, #284]	@ (800460c <HAL_DMA_Init+0x690>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d022      	beq.n	800453a <HAL_DMA_Init+0x5be>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a45      	ldr	r2, [pc, #276]	@ (8004610 <HAL_DMA_Init+0x694>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d01d      	beq.n	800453a <HAL_DMA_Init+0x5be>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a44      	ldr	r2, [pc, #272]	@ (8004614 <HAL_DMA_Init+0x698>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d018      	beq.n	800453a <HAL_DMA_Init+0x5be>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a42      	ldr	r2, [pc, #264]	@ (8004618 <HAL_DMA_Init+0x69c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d013      	beq.n	800453a <HAL_DMA_Init+0x5be>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a41      	ldr	r2, [pc, #260]	@ (800461c <HAL_DMA_Init+0x6a0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00e      	beq.n	800453a <HAL_DMA_Init+0x5be>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a3f      	ldr	r2, [pc, #252]	@ (8004620 <HAL_DMA_Init+0x6a4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d009      	beq.n	800453a <HAL_DMA_Init+0x5be>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a3e      	ldr	r2, [pc, #248]	@ (8004624 <HAL_DMA_Init+0x6a8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d004      	beq.n	800453a <HAL_DMA_Init+0x5be>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a3c      	ldr	r2, [pc, #240]	@ (8004628 <HAL_DMA_Init+0x6ac>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d101      	bne.n	800453e <HAL_DMA_Init+0x5c2>
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <HAL_DMA_Init+0x5c4>
 800453e:	2300      	movs	r3, #0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d032      	beq.n	80045aa <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f002 fa43 	bl	80069d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b80      	cmp	r3, #128	@ 0x80
 8004550:	d102      	bne.n	8004558 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800456c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d010      	beq.n	8004598 <HAL_DMA_Init+0x61c>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b08      	cmp	r3, #8
 800457c:	d80c      	bhi.n	8004598 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f002 fac0 	bl	8006b04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004594:	605a      	str	r2, [r3, #4]
 8004596:	e008      	b.n	80045aa <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	a7fdabf8 	.word	0xa7fdabf8
 80045c8:	cccccccd 	.word	0xcccccccd
 80045cc:	40020010 	.word	0x40020010
 80045d0:	40020028 	.word	0x40020028
 80045d4:	40020040 	.word	0x40020040
 80045d8:	40020058 	.word	0x40020058
 80045dc:	40020070 	.word	0x40020070
 80045e0:	40020088 	.word	0x40020088
 80045e4:	400200a0 	.word	0x400200a0
 80045e8:	400200b8 	.word	0x400200b8
 80045ec:	40020410 	.word	0x40020410
 80045f0:	40020428 	.word	0x40020428
 80045f4:	40020440 	.word	0x40020440
 80045f8:	40020458 	.word	0x40020458
 80045fc:	40020470 	.word	0x40020470
 8004600:	40020488 	.word	0x40020488
 8004604:	400204a0 	.word	0x400204a0
 8004608:	400204b8 	.word	0x400204b8
 800460c:	58025408 	.word	0x58025408
 8004610:	5802541c 	.word	0x5802541c
 8004614:	58025430 	.word	0x58025430
 8004618:	58025444 	.word	0x58025444
 800461c:	58025458 	.word	0x58025458
 8004620:	5802546c 	.word	0x5802546c
 8004624:	58025480 	.word	0x58025480
 8004628:	58025494 	.word	0x58025494

0800462c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e226      	b.n	8004a96 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_DMA_Start_IT+0x2a>
 8004652:	2302      	movs	r3, #2
 8004654:	e21f      	b.n	8004a96 <HAL_DMA_Start_IT+0x46a>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b01      	cmp	r3, #1
 8004668:	f040 820a 	bne.w	8004a80 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a68      	ldr	r2, [pc, #416]	@ (8004820 <HAL_DMA_Start_IT+0x1f4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d04a      	beq.n	800471a <HAL_DMA_Start_IT+0xee>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a66      	ldr	r2, [pc, #408]	@ (8004824 <HAL_DMA_Start_IT+0x1f8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d045      	beq.n	800471a <HAL_DMA_Start_IT+0xee>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a65      	ldr	r2, [pc, #404]	@ (8004828 <HAL_DMA_Start_IT+0x1fc>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d040      	beq.n	800471a <HAL_DMA_Start_IT+0xee>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a63      	ldr	r2, [pc, #396]	@ (800482c <HAL_DMA_Start_IT+0x200>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d03b      	beq.n	800471a <HAL_DMA_Start_IT+0xee>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a62      	ldr	r2, [pc, #392]	@ (8004830 <HAL_DMA_Start_IT+0x204>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d036      	beq.n	800471a <HAL_DMA_Start_IT+0xee>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a60      	ldr	r2, [pc, #384]	@ (8004834 <HAL_DMA_Start_IT+0x208>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d031      	beq.n	800471a <HAL_DMA_Start_IT+0xee>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a5f      	ldr	r2, [pc, #380]	@ (8004838 <HAL_DMA_Start_IT+0x20c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d02c      	beq.n	800471a <HAL_DMA_Start_IT+0xee>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a5d      	ldr	r2, [pc, #372]	@ (800483c <HAL_DMA_Start_IT+0x210>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d027      	beq.n	800471a <HAL_DMA_Start_IT+0xee>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a5c      	ldr	r2, [pc, #368]	@ (8004840 <HAL_DMA_Start_IT+0x214>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d022      	beq.n	800471a <HAL_DMA_Start_IT+0xee>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a5a      	ldr	r2, [pc, #360]	@ (8004844 <HAL_DMA_Start_IT+0x218>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d01d      	beq.n	800471a <HAL_DMA_Start_IT+0xee>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a59      	ldr	r2, [pc, #356]	@ (8004848 <HAL_DMA_Start_IT+0x21c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d018      	beq.n	800471a <HAL_DMA_Start_IT+0xee>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a57      	ldr	r2, [pc, #348]	@ (800484c <HAL_DMA_Start_IT+0x220>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d013      	beq.n	800471a <HAL_DMA_Start_IT+0xee>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a56      	ldr	r2, [pc, #344]	@ (8004850 <HAL_DMA_Start_IT+0x224>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00e      	beq.n	800471a <HAL_DMA_Start_IT+0xee>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a54      	ldr	r2, [pc, #336]	@ (8004854 <HAL_DMA_Start_IT+0x228>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d009      	beq.n	800471a <HAL_DMA_Start_IT+0xee>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a53      	ldr	r2, [pc, #332]	@ (8004858 <HAL_DMA_Start_IT+0x22c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d004      	beq.n	800471a <HAL_DMA_Start_IT+0xee>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a51      	ldr	r2, [pc, #324]	@ (800485c <HAL_DMA_Start_IT+0x230>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d108      	bne.n	800472c <HAL_DMA_Start_IT+0x100>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0201 	bic.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	e007      	b.n	800473c <HAL_DMA_Start_IT+0x110>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0201 	bic.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f001 fe6a 	bl	800641c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a34      	ldr	r2, [pc, #208]	@ (8004820 <HAL_DMA_Start_IT+0x1f4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d04a      	beq.n	80047e8 <HAL_DMA_Start_IT+0x1bc>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a33      	ldr	r2, [pc, #204]	@ (8004824 <HAL_DMA_Start_IT+0x1f8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d045      	beq.n	80047e8 <HAL_DMA_Start_IT+0x1bc>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a31      	ldr	r2, [pc, #196]	@ (8004828 <HAL_DMA_Start_IT+0x1fc>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d040      	beq.n	80047e8 <HAL_DMA_Start_IT+0x1bc>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a30      	ldr	r2, [pc, #192]	@ (800482c <HAL_DMA_Start_IT+0x200>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d03b      	beq.n	80047e8 <HAL_DMA_Start_IT+0x1bc>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a2e      	ldr	r2, [pc, #184]	@ (8004830 <HAL_DMA_Start_IT+0x204>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d036      	beq.n	80047e8 <HAL_DMA_Start_IT+0x1bc>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a2d      	ldr	r2, [pc, #180]	@ (8004834 <HAL_DMA_Start_IT+0x208>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d031      	beq.n	80047e8 <HAL_DMA_Start_IT+0x1bc>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a2b      	ldr	r2, [pc, #172]	@ (8004838 <HAL_DMA_Start_IT+0x20c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d02c      	beq.n	80047e8 <HAL_DMA_Start_IT+0x1bc>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a2a      	ldr	r2, [pc, #168]	@ (800483c <HAL_DMA_Start_IT+0x210>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d027      	beq.n	80047e8 <HAL_DMA_Start_IT+0x1bc>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a28      	ldr	r2, [pc, #160]	@ (8004840 <HAL_DMA_Start_IT+0x214>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d022      	beq.n	80047e8 <HAL_DMA_Start_IT+0x1bc>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a27      	ldr	r2, [pc, #156]	@ (8004844 <HAL_DMA_Start_IT+0x218>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d01d      	beq.n	80047e8 <HAL_DMA_Start_IT+0x1bc>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a25      	ldr	r2, [pc, #148]	@ (8004848 <HAL_DMA_Start_IT+0x21c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d018      	beq.n	80047e8 <HAL_DMA_Start_IT+0x1bc>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a24      	ldr	r2, [pc, #144]	@ (800484c <HAL_DMA_Start_IT+0x220>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d013      	beq.n	80047e8 <HAL_DMA_Start_IT+0x1bc>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a22      	ldr	r2, [pc, #136]	@ (8004850 <HAL_DMA_Start_IT+0x224>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00e      	beq.n	80047e8 <HAL_DMA_Start_IT+0x1bc>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a21      	ldr	r2, [pc, #132]	@ (8004854 <HAL_DMA_Start_IT+0x228>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d009      	beq.n	80047e8 <HAL_DMA_Start_IT+0x1bc>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004858 <HAL_DMA_Start_IT+0x22c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d004      	beq.n	80047e8 <HAL_DMA_Start_IT+0x1bc>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a1e      	ldr	r2, [pc, #120]	@ (800485c <HAL_DMA_Start_IT+0x230>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d101      	bne.n	80047ec <HAL_DMA_Start_IT+0x1c0>
 80047e8:	2301      	movs	r3, #1
 80047ea:	e000      	b.n	80047ee <HAL_DMA_Start_IT+0x1c2>
 80047ec:	2300      	movs	r3, #0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d036      	beq.n	8004860 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f023 021e 	bic.w	r2, r3, #30
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0216 	orr.w	r2, r2, #22
 8004804:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	d03e      	beq.n	800488c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f042 0208 	orr.w	r2, r2, #8
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	e035      	b.n	800488c <HAL_DMA_Start_IT+0x260>
 8004820:	40020010 	.word	0x40020010
 8004824:	40020028 	.word	0x40020028
 8004828:	40020040 	.word	0x40020040
 800482c:	40020058 	.word	0x40020058
 8004830:	40020070 	.word	0x40020070
 8004834:	40020088 	.word	0x40020088
 8004838:	400200a0 	.word	0x400200a0
 800483c:	400200b8 	.word	0x400200b8
 8004840:	40020410 	.word	0x40020410
 8004844:	40020428 	.word	0x40020428
 8004848:	40020440 	.word	0x40020440
 800484c:	40020458 	.word	0x40020458
 8004850:	40020470 	.word	0x40020470
 8004854:	40020488 	.word	0x40020488
 8004858:	400204a0 	.word	0x400204a0
 800485c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f023 020e 	bic.w	r2, r3, #14
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 020a 	orr.w	r2, r2, #10
 8004872:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004878:	2b00      	cmp	r3, #0
 800487a:	d007      	beq.n	800488c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0204 	orr.w	r2, r2, #4
 800488a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a83      	ldr	r2, [pc, #524]	@ (8004aa0 <HAL_DMA_Start_IT+0x474>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d072      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a82      	ldr	r2, [pc, #520]	@ (8004aa4 <HAL_DMA_Start_IT+0x478>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d06d      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a80      	ldr	r2, [pc, #512]	@ (8004aa8 <HAL_DMA_Start_IT+0x47c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d068      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a7f      	ldr	r2, [pc, #508]	@ (8004aac <HAL_DMA_Start_IT+0x480>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d063      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a7d      	ldr	r2, [pc, #500]	@ (8004ab0 <HAL_DMA_Start_IT+0x484>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d05e      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a7c      	ldr	r2, [pc, #496]	@ (8004ab4 <HAL_DMA_Start_IT+0x488>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d059      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a7a      	ldr	r2, [pc, #488]	@ (8004ab8 <HAL_DMA_Start_IT+0x48c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d054      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a79      	ldr	r2, [pc, #484]	@ (8004abc <HAL_DMA_Start_IT+0x490>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d04f      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a77      	ldr	r2, [pc, #476]	@ (8004ac0 <HAL_DMA_Start_IT+0x494>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d04a      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a76      	ldr	r2, [pc, #472]	@ (8004ac4 <HAL_DMA_Start_IT+0x498>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d045      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a74      	ldr	r2, [pc, #464]	@ (8004ac8 <HAL_DMA_Start_IT+0x49c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d040      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a73      	ldr	r2, [pc, #460]	@ (8004acc <HAL_DMA_Start_IT+0x4a0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d03b      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a71      	ldr	r2, [pc, #452]	@ (8004ad0 <HAL_DMA_Start_IT+0x4a4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d036      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a70      	ldr	r2, [pc, #448]	@ (8004ad4 <HAL_DMA_Start_IT+0x4a8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d031      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a6e      	ldr	r2, [pc, #440]	@ (8004ad8 <HAL_DMA_Start_IT+0x4ac>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d02c      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a6d      	ldr	r2, [pc, #436]	@ (8004adc <HAL_DMA_Start_IT+0x4b0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d027      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a6b      	ldr	r2, [pc, #428]	@ (8004ae0 <HAL_DMA_Start_IT+0x4b4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d022      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a6a      	ldr	r2, [pc, #424]	@ (8004ae4 <HAL_DMA_Start_IT+0x4b8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d01d      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a68      	ldr	r2, [pc, #416]	@ (8004ae8 <HAL_DMA_Start_IT+0x4bc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d018      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a67      	ldr	r2, [pc, #412]	@ (8004aec <HAL_DMA_Start_IT+0x4c0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d013      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a65      	ldr	r2, [pc, #404]	@ (8004af0 <HAL_DMA_Start_IT+0x4c4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00e      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a64      	ldr	r2, [pc, #400]	@ (8004af4 <HAL_DMA_Start_IT+0x4c8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d009      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a62      	ldr	r2, [pc, #392]	@ (8004af8 <HAL_DMA_Start_IT+0x4cc>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d004      	beq.n	800497c <HAL_DMA_Start_IT+0x350>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a61      	ldr	r2, [pc, #388]	@ (8004afc <HAL_DMA_Start_IT+0x4d0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d101      	bne.n	8004980 <HAL_DMA_Start_IT+0x354>
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <HAL_DMA_Start_IT+0x356>
 8004980:	2300      	movs	r3, #0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01a      	beq.n	80049bc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800499e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049a2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d007      	beq.n	80049bc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049ba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a37      	ldr	r2, [pc, #220]	@ (8004aa0 <HAL_DMA_Start_IT+0x474>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d04a      	beq.n	8004a5c <HAL_DMA_Start_IT+0x430>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a36      	ldr	r2, [pc, #216]	@ (8004aa4 <HAL_DMA_Start_IT+0x478>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d045      	beq.n	8004a5c <HAL_DMA_Start_IT+0x430>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a34      	ldr	r2, [pc, #208]	@ (8004aa8 <HAL_DMA_Start_IT+0x47c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d040      	beq.n	8004a5c <HAL_DMA_Start_IT+0x430>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a33      	ldr	r2, [pc, #204]	@ (8004aac <HAL_DMA_Start_IT+0x480>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d03b      	beq.n	8004a5c <HAL_DMA_Start_IT+0x430>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a31      	ldr	r2, [pc, #196]	@ (8004ab0 <HAL_DMA_Start_IT+0x484>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d036      	beq.n	8004a5c <HAL_DMA_Start_IT+0x430>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a30      	ldr	r2, [pc, #192]	@ (8004ab4 <HAL_DMA_Start_IT+0x488>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d031      	beq.n	8004a5c <HAL_DMA_Start_IT+0x430>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a2e      	ldr	r2, [pc, #184]	@ (8004ab8 <HAL_DMA_Start_IT+0x48c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d02c      	beq.n	8004a5c <HAL_DMA_Start_IT+0x430>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a2d      	ldr	r2, [pc, #180]	@ (8004abc <HAL_DMA_Start_IT+0x490>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d027      	beq.n	8004a5c <HAL_DMA_Start_IT+0x430>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a2b      	ldr	r2, [pc, #172]	@ (8004ac0 <HAL_DMA_Start_IT+0x494>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d022      	beq.n	8004a5c <HAL_DMA_Start_IT+0x430>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ac4 <HAL_DMA_Start_IT+0x498>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d01d      	beq.n	8004a5c <HAL_DMA_Start_IT+0x430>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a28      	ldr	r2, [pc, #160]	@ (8004ac8 <HAL_DMA_Start_IT+0x49c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d018      	beq.n	8004a5c <HAL_DMA_Start_IT+0x430>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a27      	ldr	r2, [pc, #156]	@ (8004acc <HAL_DMA_Start_IT+0x4a0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d013      	beq.n	8004a5c <HAL_DMA_Start_IT+0x430>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a25      	ldr	r2, [pc, #148]	@ (8004ad0 <HAL_DMA_Start_IT+0x4a4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00e      	beq.n	8004a5c <HAL_DMA_Start_IT+0x430>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a24      	ldr	r2, [pc, #144]	@ (8004ad4 <HAL_DMA_Start_IT+0x4a8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d009      	beq.n	8004a5c <HAL_DMA_Start_IT+0x430>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a22      	ldr	r2, [pc, #136]	@ (8004ad8 <HAL_DMA_Start_IT+0x4ac>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d004      	beq.n	8004a5c <HAL_DMA_Start_IT+0x430>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a21      	ldr	r2, [pc, #132]	@ (8004adc <HAL_DMA_Start_IT+0x4b0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d108      	bne.n	8004a6e <HAL_DMA_Start_IT+0x442>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	e012      	b.n	8004a94 <HAL_DMA_Start_IT+0x468>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0201 	orr.w	r2, r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	e009      	b.n	8004a94 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40020010 	.word	0x40020010
 8004aa4:	40020028 	.word	0x40020028
 8004aa8:	40020040 	.word	0x40020040
 8004aac:	40020058 	.word	0x40020058
 8004ab0:	40020070 	.word	0x40020070
 8004ab4:	40020088 	.word	0x40020088
 8004ab8:	400200a0 	.word	0x400200a0
 8004abc:	400200b8 	.word	0x400200b8
 8004ac0:	40020410 	.word	0x40020410
 8004ac4:	40020428 	.word	0x40020428
 8004ac8:	40020440 	.word	0x40020440
 8004acc:	40020458 	.word	0x40020458
 8004ad0:	40020470 	.word	0x40020470
 8004ad4:	40020488 	.word	0x40020488
 8004ad8:	400204a0 	.word	0x400204a0
 8004adc:	400204b8 	.word	0x400204b8
 8004ae0:	58025408 	.word	0x58025408
 8004ae4:	5802541c 	.word	0x5802541c
 8004ae8:	58025430 	.word	0x58025430
 8004aec:	58025444 	.word	0x58025444
 8004af0:	58025458 	.word	0x58025458
 8004af4:	5802546c 	.word	0x5802546c
 8004af8:	58025480 	.word	0x58025480
 8004afc:	58025494 	.word	0x58025494

08004b00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004b08:	f7fc ffb2 	bl	8001a70 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e2dc      	b.n	80050d2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d008      	beq.n	8004b36 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2280      	movs	r2, #128	@ 0x80
 8004b28:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e2cd      	b.n	80050d2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a76      	ldr	r2, [pc, #472]	@ (8004d14 <HAL_DMA_Abort+0x214>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d04a      	beq.n	8004bd6 <HAL_DMA_Abort+0xd6>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a74      	ldr	r2, [pc, #464]	@ (8004d18 <HAL_DMA_Abort+0x218>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d045      	beq.n	8004bd6 <HAL_DMA_Abort+0xd6>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a73      	ldr	r2, [pc, #460]	@ (8004d1c <HAL_DMA_Abort+0x21c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d040      	beq.n	8004bd6 <HAL_DMA_Abort+0xd6>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a71      	ldr	r2, [pc, #452]	@ (8004d20 <HAL_DMA_Abort+0x220>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d03b      	beq.n	8004bd6 <HAL_DMA_Abort+0xd6>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a70      	ldr	r2, [pc, #448]	@ (8004d24 <HAL_DMA_Abort+0x224>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d036      	beq.n	8004bd6 <HAL_DMA_Abort+0xd6>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a6e      	ldr	r2, [pc, #440]	@ (8004d28 <HAL_DMA_Abort+0x228>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d031      	beq.n	8004bd6 <HAL_DMA_Abort+0xd6>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a6d      	ldr	r2, [pc, #436]	@ (8004d2c <HAL_DMA_Abort+0x22c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d02c      	beq.n	8004bd6 <HAL_DMA_Abort+0xd6>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a6b      	ldr	r2, [pc, #428]	@ (8004d30 <HAL_DMA_Abort+0x230>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d027      	beq.n	8004bd6 <HAL_DMA_Abort+0xd6>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a6a      	ldr	r2, [pc, #424]	@ (8004d34 <HAL_DMA_Abort+0x234>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d022      	beq.n	8004bd6 <HAL_DMA_Abort+0xd6>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a68      	ldr	r2, [pc, #416]	@ (8004d38 <HAL_DMA_Abort+0x238>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d01d      	beq.n	8004bd6 <HAL_DMA_Abort+0xd6>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a67      	ldr	r2, [pc, #412]	@ (8004d3c <HAL_DMA_Abort+0x23c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d018      	beq.n	8004bd6 <HAL_DMA_Abort+0xd6>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a65      	ldr	r2, [pc, #404]	@ (8004d40 <HAL_DMA_Abort+0x240>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d013      	beq.n	8004bd6 <HAL_DMA_Abort+0xd6>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a64      	ldr	r2, [pc, #400]	@ (8004d44 <HAL_DMA_Abort+0x244>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00e      	beq.n	8004bd6 <HAL_DMA_Abort+0xd6>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a62      	ldr	r2, [pc, #392]	@ (8004d48 <HAL_DMA_Abort+0x248>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d009      	beq.n	8004bd6 <HAL_DMA_Abort+0xd6>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a61      	ldr	r2, [pc, #388]	@ (8004d4c <HAL_DMA_Abort+0x24c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d004      	beq.n	8004bd6 <HAL_DMA_Abort+0xd6>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a5f      	ldr	r2, [pc, #380]	@ (8004d50 <HAL_DMA_Abort+0x250>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d101      	bne.n	8004bda <HAL_DMA_Abort+0xda>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <HAL_DMA_Abort+0xdc>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d013      	beq.n	8004c08 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 021e 	bic.w	r2, r2, #30
 8004bee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695a      	ldr	r2, [r3, #20]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bfe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	e00a      	b.n	8004c1e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 020e 	bic.w	r2, r2, #14
 8004c16:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a3c      	ldr	r2, [pc, #240]	@ (8004d14 <HAL_DMA_Abort+0x214>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d072      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a3a      	ldr	r2, [pc, #232]	@ (8004d18 <HAL_DMA_Abort+0x218>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d06d      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a39      	ldr	r2, [pc, #228]	@ (8004d1c <HAL_DMA_Abort+0x21c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d068      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a37      	ldr	r2, [pc, #220]	@ (8004d20 <HAL_DMA_Abort+0x220>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d063      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a36      	ldr	r2, [pc, #216]	@ (8004d24 <HAL_DMA_Abort+0x224>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d05e      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a34      	ldr	r2, [pc, #208]	@ (8004d28 <HAL_DMA_Abort+0x228>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d059      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a33      	ldr	r2, [pc, #204]	@ (8004d2c <HAL_DMA_Abort+0x22c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d054      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a31      	ldr	r2, [pc, #196]	@ (8004d30 <HAL_DMA_Abort+0x230>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d04f      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a30      	ldr	r2, [pc, #192]	@ (8004d34 <HAL_DMA_Abort+0x234>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d04a      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a2e      	ldr	r2, [pc, #184]	@ (8004d38 <HAL_DMA_Abort+0x238>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d045      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a2d      	ldr	r2, [pc, #180]	@ (8004d3c <HAL_DMA_Abort+0x23c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d040      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a2b      	ldr	r2, [pc, #172]	@ (8004d40 <HAL_DMA_Abort+0x240>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d03b      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a2a      	ldr	r2, [pc, #168]	@ (8004d44 <HAL_DMA_Abort+0x244>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d036      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a28      	ldr	r2, [pc, #160]	@ (8004d48 <HAL_DMA_Abort+0x248>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d031      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a27      	ldr	r2, [pc, #156]	@ (8004d4c <HAL_DMA_Abort+0x24c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d02c      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a25      	ldr	r2, [pc, #148]	@ (8004d50 <HAL_DMA_Abort+0x250>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d027      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a24      	ldr	r2, [pc, #144]	@ (8004d54 <HAL_DMA_Abort+0x254>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d022      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a22      	ldr	r2, [pc, #136]	@ (8004d58 <HAL_DMA_Abort+0x258>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01d      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a21      	ldr	r2, [pc, #132]	@ (8004d5c <HAL_DMA_Abort+0x25c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d018      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d60 <HAL_DMA_Abort+0x260>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d013      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a1e      	ldr	r2, [pc, #120]	@ (8004d64 <HAL_DMA_Abort+0x264>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00e      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d68 <HAL_DMA_Abort+0x268>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d009      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8004d6c <HAL_DMA_Abort+0x26c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d004      	beq.n	8004d0e <HAL_DMA_Abort+0x20e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a19      	ldr	r2, [pc, #100]	@ (8004d70 <HAL_DMA_Abort+0x270>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d132      	bne.n	8004d74 <HAL_DMA_Abort+0x274>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e031      	b.n	8004d76 <HAL_DMA_Abort+0x276>
 8004d12:	bf00      	nop
 8004d14:	40020010 	.word	0x40020010
 8004d18:	40020028 	.word	0x40020028
 8004d1c:	40020040 	.word	0x40020040
 8004d20:	40020058 	.word	0x40020058
 8004d24:	40020070 	.word	0x40020070
 8004d28:	40020088 	.word	0x40020088
 8004d2c:	400200a0 	.word	0x400200a0
 8004d30:	400200b8 	.word	0x400200b8
 8004d34:	40020410 	.word	0x40020410
 8004d38:	40020428 	.word	0x40020428
 8004d3c:	40020440 	.word	0x40020440
 8004d40:	40020458 	.word	0x40020458
 8004d44:	40020470 	.word	0x40020470
 8004d48:	40020488 	.word	0x40020488
 8004d4c:	400204a0 	.word	0x400204a0
 8004d50:	400204b8 	.word	0x400204b8
 8004d54:	58025408 	.word	0x58025408
 8004d58:	5802541c 	.word	0x5802541c
 8004d5c:	58025430 	.word	0x58025430
 8004d60:	58025444 	.word	0x58025444
 8004d64:	58025458 	.word	0x58025458
 8004d68:	5802546c 	.word	0x5802546c
 8004d6c:	58025480 	.word	0x58025480
 8004d70:	58025494 	.word	0x58025494
 8004d74:	2300      	movs	r3, #0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d007      	beq.n	8004d8a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d88:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a6d      	ldr	r2, [pc, #436]	@ (8004f44 <HAL_DMA_Abort+0x444>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d04a      	beq.n	8004e2a <HAL_DMA_Abort+0x32a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a6b      	ldr	r2, [pc, #428]	@ (8004f48 <HAL_DMA_Abort+0x448>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d045      	beq.n	8004e2a <HAL_DMA_Abort+0x32a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a6a      	ldr	r2, [pc, #424]	@ (8004f4c <HAL_DMA_Abort+0x44c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d040      	beq.n	8004e2a <HAL_DMA_Abort+0x32a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a68      	ldr	r2, [pc, #416]	@ (8004f50 <HAL_DMA_Abort+0x450>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d03b      	beq.n	8004e2a <HAL_DMA_Abort+0x32a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a67      	ldr	r2, [pc, #412]	@ (8004f54 <HAL_DMA_Abort+0x454>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d036      	beq.n	8004e2a <HAL_DMA_Abort+0x32a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a65      	ldr	r2, [pc, #404]	@ (8004f58 <HAL_DMA_Abort+0x458>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d031      	beq.n	8004e2a <HAL_DMA_Abort+0x32a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a64      	ldr	r2, [pc, #400]	@ (8004f5c <HAL_DMA_Abort+0x45c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d02c      	beq.n	8004e2a <HAL_DMA_Abort+0x32a>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a62      	ldr	r2, [pc, #392]	@ (8004f60 <HAL_DMA_Abort+0x460>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d027      	beq.n	8004e2a <HAL_DMA_Abort+0x32a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a61      	ldr	r2, [pc, #388]	@ (8004f64 <HAL_DMA_Abort+0x464>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d022      	beq.n	8004e2a <HAL_DMA_Abort+0x32a>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a5f      	ldr	r2, [pc, #380]	@ (8004f68 <HAL_DMA_Abort+0x468>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01d      	beq.n	8004e2a <HAL_DMA_Abort+0x32a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a5e      	ldr	r2, [pc, #376]	@ (8004f6c <HAL_DMA_Abort+0x46c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d018      	beq.n	8004e2a <HAL_DMA_Abort+0x32a>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a5c      	ldr	r2, [pc, #368]	@ (8004f70 <HAL_DMA_Abort+0x470>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <HAL_DMA_Abort+0x32a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a5b      	ldr	r2, [pc, #364]	@ (8004f74 <HAL_DMA_Abort+0x474>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00e      	beq.n	8004e2a <HAL_DMA_Abort+0x32a>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a59      	ldr	r2, [pc, #356]	@ (8004f78 <HAL_DMA_Abort+0x478>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d009      	beq.n	8004e2a <HAL_DMA_Abort+0x32a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a58      	ldr	r2, [pc, #352]	@ (8004f7c <HAL_DMA_Abort+0x47c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <HAL_DMA_Abort+0x32a>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a56      	ldr	r2, [pc, #344]	@ (8004f80 <HAL_DMA_Abort+0x480>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d108      	bne.n	8004e3c <HAL_DMA_Abort+0x33c>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0201 	bic.w	r2, r2, #1
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	e007      	b.n	8004e4c <HAL_DMA_Abort+0x34c>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0201 	bic.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004e4c:	e013      	b.n	8004e76 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e4e:	f7fc fe0f 	bl	8001a70 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b05      	cmp	r3, #5
 8004e5a:	d90c      	bls.n	8004e76 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2203      	movs	r2, #3
 8004e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e12d      	b.n	80050d2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e5      	bne.n	8004e4e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a2f      	ldr	r2, [pc, #188]	@ (8004f44 <HAL_DMA_Abort+0x444>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d04a      	beq.n	8004f22 <HAL_DMA_Abort+0x422>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a2d      	ldr	r2, [pc, #180]	@ (8004f48 <HAL_DMA_Abort+0x448>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d045      	beq.n	8004f22 <HAL_DMA_Abort+0x422>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8004f4c <HAL_DMA_Abort+0x44c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d040      	beq.n	8004f22 <HAL_DMA_Abort+0x422>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a2a      	ldr	r2, [pc, #168]	@ (8004f50 <HAL_DMA_Abort+0x450>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d03b      	beq.n	8004f22 <HAL_DMA_Abort+0x422>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a29      	ldr	r2, [pc, #164]	@ (8004f54 <HAL_DMA_Abort+0x454>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d036      	beq.n	8004f22 <HAL_DMA_Abort+0x422>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a27      	ldr	r2, [pc, #156]	@ (8004f58 <HAL_DMA_Abort+0x458>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d031      	beq.n	8004f22 <HAL_DMA_Abort+0x422>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a26      	ldr	r2, [pc, #152]	@ (8004f5c <HAL_DMA_Abort+0x45c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d02c      	beq.n	8004f22 <HAL_DMA_Abort+0x422>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a24      	ldr	r2, [pc, #144]	@ (8004f60 <HAL_DMA_Abort+0x460>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d027      	beq.n	8004f22 <HAL_DMA_Abort+0x422>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a23      	ldr	r2, [pc, #140]	@ (8004f64 <HAL_DMA_Abort+0x464>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d022      	beq.n	8004f22 <HAL_DMA_Abort+0x422>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a21      	ldr	r2, [pc, #132]	@ (8004f68 <HAL_DMA_Abort+0x468>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d01d      	beq.n	8004f22 <HAL_DMA_Abort+0x422>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a20      	ldr	r2, [pc, #128]	@ (8004f6c <HAL_DMA_Abort+0x46c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d018      	beq.n	8004f22 <HAL_DMA_Abort+0x422>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8004f70 <HAL_DMA_Abort+0x470>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d013      	beq.n	8004f22 <HAL_DMA_Abort+0x422>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1d      	ldr	r2, [pc, #116]	@ (8004f74 <HAL_DMA_Abort+0x474>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00e      	beq.n	8004f22 <HAL_DMA_Abort+0x422>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a1b      	ldr	r2, [pc, #108]	@ (8004f78 <HAL_DMA_Abort+0x478>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d009      	beq.n	8004f22 <HAL_DMA_Abort+0x422>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a1a      	ldr	r2, [pc, #104]	@ (8004f7c <HAL_DMA_Abort+0x47c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d004      	beq.n	8004f22 <HAL_DMA_Abort+0x422>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a18      	ldr	r2, [pc, #96]	@ (8004f80 <HAL_DMA_Abort+0x480>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d101      	bne.n	8004f26 <HAL_DMA_Abort+0x426>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <HAL_DMA_Abort+0x428>
 8004f26:	2300      	movs	r3, #0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d02b      	beq.n	8004f84 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f30:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f36:	f003 031f 	and.w	r3, r3, #31
 8004f3a:	223f      	movs	r2, #63	@ 0x3f
 8004f3c:	409a      	lsls	r2, r3
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	609a      	str	r2, [r3, #8]
 8004f42:	e02a      	b.n	8004f9a <HAL_DMA_Abort+0x49a>
 8004f44:	40020010 	.word	0x40020010
 8004f48:	40020028 	.word	0x40020028
 8004f4c:	40020040 	.word	0x40020040
 8004f50:	40020058 	.word	0x40020058
 8004f54:	40020070 	.word	0x40020070
 8004f58:	40020088 	.word	0x40020088
 8004f5c:	400200a0 	.word	0x400200a0
 8004f60:	400200b8 	.word	0x400200b8
 8004f64:	40020410 	.word	0x40020410
 8004f68:	40020428 	.word	0x40020428
 8004f6c:	40020440 	.word	0x40020440
 8004f70:	40020458 	.word	0x40020458
 8004f74:	40020470 	.word	0x40020470
 8004f78:	40020488 	.word	0x40020488
 8004f7c:	400204a0 	.word	0x400204a0
 8004f80:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f88:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f8e:	f003 031f 	and.w	r3, r3, #31
 8004f92:	2201      	movs	r2, #1
 8004f94:	409a      	lsls	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a4f      	ldr	r2, [pc, #316]	@ (80050dc <HAL_DMA_Abort+0x5dc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d072      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a4d      	ldr	r2, [pc, #308]	@ (80050e0 <HAL_DMA_Abort+0x5e0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d06d      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a4c      	ldr	r2, [pc, #304]	@ (80050e4 <HAL_DMA_Abort+0x5e4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d068      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a4a      	ldr	r2, [pc, #296]	@ (80050e8 <HAL_DMA_Abort+0x5e8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d063      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a49      	ldr	r2, [pc, #292]	@ (80050ec <HAL_DMA_Abort+0x5ec>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d05e      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a47      	ldr	r2, [pc, #284]	@ (80050f0 <HAL_DMA_Abort+0x5f0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d059      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a46      	ldr	r2, [pc, #280]	@ (80050f4 <HAL_DMA_Abort+0x5f4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d054      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a44      	ldr	r2, [pc, #272]	@ (80050f8 <HAL_DMA_Abort+0x5f8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d04f      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a43      	ldr	r2, [pc, #268]	@ (80050fc <HAL_DMA_Abort+0x5fc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d04a      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a41      	ldr	r2, [pc, #260]	@ (8005100 <HAL_DMA_Abort+0x600>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d045      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a40      	ldr	r2, [pc, #256]	@ (8005104 <HAL_DMA_Abort+0x604>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d040      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a3e      	ldr	r2, [pc, #248]	@ (8005108 <HAL_DMA_Abort+0x608>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d03b      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a3d      	ldr	r2, [pc, #244]	@ (800510c <HAL_DMA_Abort+0x60c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d036      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a3b      	ldr	r2, [pc, #236]	@ (8005110 <HAL_DMA_Abort+0x610>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d031      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a3a      	ldr	r2, [pc, #232]	@ (8005114 <HAL_DMA_Abort+0x614>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d02c      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a38      	ldr	r2, [pc, #224]	@ (8005118 <HAL_DMA_Abort+0x618>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d027      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a37      	ldr	r2, [pc, #220]	@ (800511c <HAL_DMA_Abort+0x61c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d022      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a35      	ldr	r2, [pc, #212]	@ (8005120 <HAL_DMA_Abort+0x620>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d01d      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a34      	ldr	r2, [pc, #208]	@ (8005124 <HAL_DMA_Abort+0x624>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d018      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a32      	ldr	r2, [pc, #200]	@ (8005128 <HAL_DMA_Abort+0x628>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d013      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a31      	ldr	r2, [pc, #196]	@ (800512c <HAL_DMA_Abort+0x62c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00e      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a2f      	ldr	r2, [pc, #188]	@ (8005130 <HAL_DMA_Abort+0x630>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d009      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a2e      	ldr	r2, [pc, #184]	@ (8005134 <HAL_DMA_Abort+0x634>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d004      	beq.n	800508a <HAL_DMA_Abort+0x58a>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a2c      	ldr	r2, [pc, #176]	@ (8005138 <HAL_DMA_Abort+0x638>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d101      	bne.n	800508e <HAL_DMA_Abort+0x58e>
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <HAL_DMA_Abort+0x590>
 800508e:	2300      	movs	r3, #0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d015      	beq.n	80050c0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800509c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00c      	beq.n	80050c0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050b4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80050be:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40020010 	.word	0x40020010
 80050e0:	40020028 	.word	0x40020028
 80050e4:	40020040 	.word	0x40020040
 80050e8:	40020058 	.word	0x40020058
 80050ec:	40020070 	.word	0x40020070
 80050f0:	40020088 	.word	0x40020088
 80050f4:	400200a0 	.word	0x400200a0
 80050f8:	400200b8 	.word	0x400200b8
 80050fc:	40020410 	.word	0x40020410
 8005100:	40020428 	.word	0x40020428
 8005104:	40020440 	.word	0x40020440
 8005108:	40020458 	.word	0x40020458
 800510c:	40020470 	.word	0x40020470
 8005110:	40020488 	.word	0x40020488
 8005114:	400204a0 	.word	0x400204a0
 8005118:	400204b8 	.word	0x400204b8
 800511c:	58025408 	.word	0x58025408
 8005120:	5802541c 	.word	0x5802541c
 8005124:	58025430 	.word	0x58025430
 8005128:	58025444 	.word	0x58025444
 800512c:	58025458 	.word	0x58025458
 8005130:	5802546c 	.word	0x5802546c
 8005134:	58025480 	.word	0x58025480
 8005138:	58025494 	.word	0x58025494

0800513c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e237      	b.n	80055be <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d004      	beq.n	8005164 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2280      	movs	r2, #128	@ 0x80
 800515e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e22c      	b.n	80055be <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a5c      	ldr	r2, [pc, #368]	@ (80052dc <HAL_DMA_Abort_IT+0x1a0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d04a      	beq.n	8005204 <HAL_DMA_Abort_IT+0xc8>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a5b      	ldr	r2, [pc, #364]	@ (80052e0 <HAL_DMA_Abort_IT+0x1a4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d045      	beq.n	8005204 <HAL_DMA_Abort_IT+0xc8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a59      	ldr	r2, [pc, #356]	@ (80052e4 <HAL_DMA_Abort_IT+0x1a8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d040      	beq.n	8005204 <HAL_DMA_Abort_IT+0xc8>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a58      	ldr	r2, [pc, #352]	@ (80052e8 <HAL_DMA_Abort_IT+0x1ac>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d03b      	beq.n	8005204 <HAL_DMA_Abort_IT+0xc8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a56      	ldr	r2, [pc, #344]	@ (80052ec <HAL_DMA_Abort_IT+0x1b0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d036      	beq.n	8005204 <HAL_DMA_Abort_IT+0xc8>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a55      	ldr	r2, [pc, #340]	@ (80052f0 <HAL_DMA_Abort_IT+0x1b4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d031      	beq.n	8005204 <HAL_DMA_Abort_IT+0xc8>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a53      	ldr	r2, [pc, #332]	@ (80052f4 <HAL_DMA_Abort_IT+0x1b8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d02c      	beq.n	8005204 <HAL_DMA_Abort_IT+0xc8>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a52      	ldr	r2, [pc, #328]	@ (80052f8 <HAL_DMA_Abort_IT+0x1bc>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d027      	beq.n	8005204 <HAL_DMA_Abort_IT+0xc8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a50      	ldr	r2, [pc, #320]	@ (80052fc <HAL_DMA_Abort_IT+0x1c0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d022      	beq.n	8005204 <HAL_DMA_Abort_IT+0xc8>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a4f      	ldr	r2, [pc, #316]	@ (8005300 <HAL_DMA_Abort_IT+0x1c4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d01d      	beq.n	8005204 <HAL_DMA_Abort_IT+0xc8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a4d      	ldr	r2, [pc, #308]	@ (8005304 <HAL_DMA_Abort_IT+0x1c8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d018      	beq.n	8005204 <HAL_DMA_Abort_IT+0xc8>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a4c      	ldr	r2, [pc, #304]	@ (8005308 <HAL_DMA_Abort_IT+0x1cc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d013      	beq.n	8005204 <HAL_DMA_Abort_IT+0xc8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a4a      	ldr	r2, [pc, #296]	@ (800530c <HAL_DMA_Abort_IT+0x1d0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00e      	beq.n	8005204 <HAL_DMA_Abort_IT+0xc8>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a49      	ldr	r2, [pc, #292]	@ (8005310 <HAL_DMA_Abort_IT+0x1d4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d009      	beq.n	8005204 <HAL_DMA_Abort_IT+0xc8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a47      	ldr	r2, [pc, #284]	@ (8005314 <HAL_DMA_Abort_IT+0x1d8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d004      	beq.n	8005204 <HAL_DMA_Abort_IT+0xc8>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a46      	ldr	r2, [pc, #280]	@ (8005318 <HAL_DMA_Abort_IT+0x1dc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d101      	bne.n	8005208 <HAL_DMA_Abort_IT+0xcc>
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <HAL_DMA_Abort_IT+0xce>
 8005208:	2300      	movs	r3, #0
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 8086 	beq.w	800531c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2204      	movs	r2, #4
 8005214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a2f      	ldr	r2, [pc, #188]	@ (80052dc <HAL_DMA_Abort_IT+0x1a0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d04a      	beq.n	80052b8 <HAL_DMA_Abort_IT+0x17c>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a2e      	ldr	r2, [pc, #184]	@ (80052e0 <HAL_DMA_Abort_IT+0x1a4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d045      	beq.n	80052b8 <HAL_DMA_Abort_IT+0x17c>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a2c      	ldr	r2, [pc, #176]	@ (80052e4 <HAL_DMA_Abort_IT+0x1a8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d040      	beq.n	80052b8 <HAL_DMA_Abort_IT+0x17c>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a2b      	ldr	r2, [pc, #172]	@ (80052e8 <HAL_DMA_Abort_IT+0x1ac>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d03b      	beq.n	80052b8 <HAL_DMA_Abort_IT+0x17c>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a29      	ldr	r2, [pc, #164]	@ (80052ec <HAL_DMA_Abort_IT+0x1b0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d036      	beq.n	80052b8 <HAL_DMA_Abort_IT+0x17c>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a28      	ldr	r2, [pc, #160]	@ (80052f0 <HAL_DMA_Abort_IT+0x1b4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d031      	beq.n	80052b8 <HAL_DMA_Abort_IT+0x17c>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a26      	ldr	r2, [pc, #152]	@ (80052f4 <HAL_DMA_Abort_IT+0x1b8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d02c      	beq.n	80052b8 <HAL_DMA_Abort_IT+0x17c>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a25      	ldr	r2, [pc, #148]	@ (80052f8 <HAL_DMA_Abort_IT+0x1bc>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d027      	beq.n	80052b8 <HAL_DMA_Abort_IT+0x17c>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a23      	ldr	r2, [pc, #140]	@ (80052fc <HAL_DMA_Abort_IT+0x1c0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d022      	beq.n	80052b8 <HAL_DMA_Abort_IT+0x17c>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a22      	ldr	r2, [pc, #136]	@ (8005300 <HAL_DMA_Abort_IT+0x1c4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d01d      	beq.n	80052b8 <HAL_DMA_Abort_IT+0x17c>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a20      	ldr	r2, [pc, #128]	@ (8005304 <HAL_DMA_Abort_IT+0x1c8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d018      	beq.n	80052b8 <HAL_DMA_Abort_IT+0x17c>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1f      	ldr	r2, [pc, #124]	@ (8005308 <HAL_DMA_Abort_IT+0x1cc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d013      	beq.n	80052b8 <HAL_DMA_Abort_IT+0x17c>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a1d      	ldr	r2, [pc, #116]	@ (800530c <HAL_DMA_Abort_IT+0x1d0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00e      	beq.n	80052b8 <HAL_DMA_Abort_IT+0x17c>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a1c      	ldr	r2, [pc, #112]	@ (8005310 <HAL_DMA_Abort_IT+0x1d4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d009      	beq.n	80052b8 <HAL_DMA_Abort_IT+0x17c>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005314 <HAL_DMA_Abort_IT+0x1d8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d004      	beq.n	80052b8 <HAL_DMA_Abort_IT+0x17c>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a19      	ldr	r2, [pc, #100]	@ (8005318 <HAL_DMA_Abort_IT+0x1dc>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d108      	bne.n	80052ca <HAL_DMA_Abort_IT+0x18e>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0201 	bic.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	e178      	b.n	80055bc <HAL_DMA_Abort_IT+0x480>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0201 	bic.w	r2, r2, #1
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	e16f      	b.n	80055bc <HAL_DMA_Abort_IT+0x480>
 80052dc:	40020010 	.word	0x40020010
 80052e0:	40020028 	.word	0x40020028
 80052e4:	40020040 	.word	0x40020040
 80052e8:	40020058 	.word	0x40020058
 80052ec:	40020070 	.word	0x40020070
 80052f0:	40020088 	.word	0x40020088
 80052f4:	400200a0 	.word	0x400200a0
 80052f8:	400200b8 	.word	0x400200b8
 80052fc:	40020410 	.word	0x40020410
 8005300:	40020428 	.word	0x40020428
 8005304:	40020440 	.word	0x40020440
 8005308:	40020458 	.word	0x40020458
 800530c:	40020470 	.word	0x40020470
 8005310:	40020488 	.word	0x40020488
 8005314:	400204a0 	.word	0x400204a0
 8005318:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 020e 	bic.w	r2, r2, #14
 800532a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a6c      	ldr	r2, [pc, #432]	@ (80054e4 <HAL_DMA_Abort_IT+0x3a8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d04a      	beq.n	80053cc <HAL_DMA_Abort_IT+0x290>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a6b      	ldr	r2, [pc, #428]	@ (80054e8 <HAL_DMA_Abort_IT+0x3ac>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d045      	beq.n	80053cc <HAL_DMA_Abort_IT+0x290>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a69      	ldr	r2, [pc, #420]	@ (80054ec <HAL_DMA_Abort_IT+0x3b0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d040      	beq.n	80053cc <HAL_DMA_Abort_IT+0x290>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a68      	ldr	r2, [pc, #416]	@ (80054f0 <HAL_DMA_Abort_IT+0x3b4>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d03b      	beq.n	80053cc <HAL_DMA_Abort_IT+0x290>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a66      	ldr	r2, [pc, #408]	@ (80054f4 <HAL_DMA_Abort_IT+0x3b8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d036      	beq.n	80053cc <HAL_DMA_Abort_IT+0x290>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a65      	ldr	r2, [pc, #404]	@ (80054f8 <HAL_DMA_Abort_IT+0x3bc>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d031      	beq.n	80053cc <HAL_DMA_Abort_IT+0x290>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a63      	ldr	r2, [pc, #396]	@ (80054fc <HAL_DMA_Abort_IT+0x3c0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d02c      	beq.n	80053cc <HAL_DMA_Abort_IT+0x290>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a62      	ldr	r2, [pc, #392]	@ (8005500 <HAL_DMA_Abort_IT+0x3c4>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d027      	beq.n	80053cc <HAL_DMA_Abort_IT+0x290>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a60      	ldr	r2, [pc, #384]	@ (8005504 <HAL_DMA_Abort_IT+0x3c8>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d022      	beq.n	80053cc <HAL_DMA_Abort_IT+0x290>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a5f      	ldr	r2, [pc, #380]	@ (8005508 <HAL_DMA_Abort_IT+0x3cc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d01d      	beq.n	80053cc <HAL_DMA_Abort_IT+0x290>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a5d      	ldr	r2, [pc, #372]	@ (800550c <HAL_DMA_Abort_IT+0x3d0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d018      	beq.n	80053cc <HAL_DMA_Abort_IT+0x290>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a5c      	ldr	r2, [pc, #368]	@ (8005510 <HAL_DMA_Abort_IT+0x3d4>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d013      	beq.n	80053cc <HAL_DMA_Abort_IT+0x290>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a5a      	ldr	r2, [pc, #360]	@ (8005514 <HAL_DMA_Abort_IT+0x3d8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00e      	beq.n	80053cc <HAL_DMA_Abort_IT+0x290>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a59      	ldr	r2, [pc, #356]	@ (8005518 <HAL_DMA_Abort_IT+0x3dc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d009      	beq.n	80053cc <HAL_DMA_Abort_IT+0x290>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a57      	ldr	r2, [pc, #348]	@ (800551c <HAL_DMA_Abort_IT+0x3e0>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d004      	beq.n	80053cc <HAL_DMA_Abort_IT+0x290>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a56      	ldr	r2, [pc, #344]	@ (8005520 <HAL_DMA_Abort_IT+0x3e4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d108      	bne.n	80053de <HAL_DMA_Abort_IT+0x2a2>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0201 	bic.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	e007      	b.n	80053ee <HAL_DMA_Abort_IT+0x2b2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0201 	bic.w	r2, r2, #1
 80053ec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a3c      	ldr	r2, [pc, #240]	@ (80054e4 <HAL_DMA_Abort_IT+0x3a8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d072      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a3a      	ldr	r2, [pc, #232]	@ (80054e8 <HAL_DMA_Abort_IT+0x3ac>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d06d      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a39      	ldr	r2, [pc, #228]	@ (80054ec <HAL_DMA_Abort_IT+0x3b0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d068      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a37      	ldr	r2, [pc, #220]	@ (80054f0 <HAL_DMA_Abort_IT+0x3b4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d063      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a36      	ldr	r2, [pc, #216]	@ (80054f4 <HAL_DMA_Abort_IT+0x3b8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d05e      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a34      	ldr	r2, [pc, #208]	@ (80054f8 <HAL_DMA_Abort_IT+0x3bc>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d059      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a33      	ldr	r2, [pc, #204]	@ (80054fc <HAL_DMA_Abort_IT+0x3c0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d054      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a31      	ldr	r2, [pc, #196]	@ (8005500 <HAL_DMA_Abort_IT+0x3c4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d04f      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a30      	ldr	r2, [pc, #192]	@ (8005504 <HAL_DMA_Abort_IT+0x3c8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d04a      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a2e      	ldr	r2, [pc, #184]	@ (8005508 <HAL_DMA_Abort_IT+0x3cc>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d045      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a2d      	ldr	r2, [pc, #180]	@ (800550c <HAL_DMA_Abort_IT+0x3d0>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d040      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a2b      	ldr	r2, [pc, #172]	@ (8005510 <HAL_DMA_Abort_IT+0x3d4>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d03b      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a2a      	ldr	r2, [pc, #168]	@ (8005514 <HAL_DMA_Abort_IT+0x3d8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d036      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a28      	ldr	r2, [pc, #160]	@ (8005518 <HAL_DMA_Abort_IT+0x3dc>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d031      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a27      	ldr	r2, [pc, #156]	@ (800551c <HAL_DMA_Abort_IT+0x3e0>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d02c      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a25      	ldr	r2, [pc, #148]	@ (8005520 <HAL_DMA_Abort_IT+0x3e4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d027      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a24      	ldr	r2, [pc, #144]	@ (8005524 <HAL_DMA_Abort_IT+0x3e8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d022      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a22      	ldr	r2, [pc, #136]	@ (8005528 <HAL_DMA_Abort_IT+0x3ec>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d01d      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a21      	ldr	r2, [pc, #132]	@ (800552c <HAL_DMA_Abort_IT+0x3f0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d018      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005530 <HAL_DMA_Abort_IT+0x3f4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d013      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005534 <HAL_DMA_Abort_IT+0x3f8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00e      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005538 <HAL_DMA_Abort_IT+0x3fc>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d009      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1b      	ldr	r2, [pc, #108]	@ (800553c <HAL_DMA_Abort_IT+0x400>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d004      	beq.n	80054de <HAL_DMA_Abort_IT+0x3a2>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a19      	ldr	r2, [pc, #100]	@ (8005540 <HAL_DMA_Abort_IT+0x404>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d132      	bne.n	8005544 <HAL_DMA_Abort_IT+0x408>
 80054de:	2301      	movs	r3, #1
 80054e0:	e031      	b.n	8005546 <HAL_DMA_Abort_IT+0x40a>
 80054e2:	bf00      	nop
 80054e4:	40020010 	.word	0x40020010
 80054e8:	40020028 	.word	0x40020028
 80054ec:	40020040 	.word	0x40020040
 80054f0:	40020058 	.word	0x40020058
 80054f4:	40020070 	.word	0x40020070
 80054f8:	40020088 	.word	0x40020088
 80054fc:	400200a0 	.word	0x400200a0
 8005500:	400200b8 	.word	0x400200b8
 8005504:	40020410 	.word	0x40020410
 8005508:	40020428 	.word	0x40020428
 800550c:	40020440 	.word	0x40020440
 8005510:	40020458 	.word	0x40020458
 8005514:	40020470 	.word	0x40020470
 8005518:	40020488 	.word	0x40020488
 800551c:	400204a0 	.word	0x400204a0
 8005520:	400204b8 	.word	0x400204b8
 8005524:	58025408 	.word	0x58025408
 8005528:	5802541c 	.word	0x5802541c
 800552c:	58025430 	.word	0x58025430
 8005530:	58025444 	.word	0x58025444
 8005534:	58025458 	.word	0x58025458
 8005538:	5802546c 	.word	0x5802546c
 800553c:	58025480 	.word	0x58025480
 8005540:	58025494 	.word	0x58025494
 8005544:	2300      	movs	r3, #0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d028      	beq.n	800559c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005554:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005558:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800555e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005564:	f003 031f 	and.w	r3, r3, #31
 8005568:	2201      	movs	r2, #1
 800556a:	409a      	lsls	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005578:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00c      	beq.n	800559c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800558c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005590:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800559a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop

080055c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	@ 0x28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80055d4:	4b67      	ldr	r3, [pc, #412]	@ (8005774 <HAL_DMA_IRQHandler+0x1ac>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a67      	ldr	r2, [pc, #412]	@ (8005778 <HAL_DMA_IRQHandler+0x1b0>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	0a9b      	lsrs	r3, r3, #10
 80055e0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055e6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a5f      	ldr	r2, [pc, #380]	@ (800577c <HAL_DMA_IRQHandler+0x1b4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d04a      	beq.n	800569a <HAL_DMA_IRQHandler+0xd2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a5d      	ldr	r2, [pc, #372]	@ (8005780 <HAL_DMA_IRQHandler+0x1b8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d045      	beq.n	800569a <HAL_DMA_IRQHandler+0xd2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a5c      	ldr	r2, [pc, #368]	@ (8005784 <HAL_DMA_IRQHandler+0x1bc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d040      	beq.n	800569a <HAL_DMA_IRQHandler+0xd2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a5a      	ldr	r2, [pc, #360]	@ (8005788 <HAL_DMA_IRQHandler+0x1c0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d03b      	beq.n	800569a <HAL_DMA_IRQHandler+0xd2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a59      	ldr	r2, [pc, #356]	@ (800578c <HAL_DMA_IRQHandler+0x1c4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d036      	beq.n	800569a <HAL_DMA_IRQHandler+0xd2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a57      	ldr	r2, [pc, #348]	@ (8005790 <HAL_DMA_IRQHandler+0x1c8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d031      	beq.n	800569a <HAL_DMA_IRQHandler+0xd2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a56      	ldr	r2, [pc, #344]	@ (8005794 <HAL_DMA_IRQHandler+0x1cc>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d02c      	beq.n	800569a <HAL_DMA_IRQHandler+0xd2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a54      	ldr	r2, [pc, #336]	@ (8005798 <HAL_DMA_IRQHandler+0x1d0>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d027      	beq.n	800569a <HAL_DMA_IRQHandler+0xd2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a53      	ldr	r2, [pc, #332]	@ (800579c <HAL_DMA_IRQHandler+0x1d4>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d022      	beq.n	800569a <HAL_DMA_IRQHandler+0xd2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a51      	ldr	r2, [pc, #324]	@ (80057a0 <HAL_DMA_IRQHandler+0x1d8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d01d      	beq.n	800569a <HAL_DMA_IRQHandler+0xd2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a50      	ldr	r2, [pc, #320]	@ (80057a4 <HAL_DMA_IRQHandler+0x1dc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d018      	beq.n	800569a <HAL_DMA_IRQHandler+0xd2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a4e      	ldr	r2, [pc, #312]	@ (80057a8 <HAL_DMA_IRQHandler+0x1e0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d013      	beq.n	800569a <HAL_DMA_IRQHandler+0xd2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a4d      	ldr	r2, [pc, #308]	@ (80057ac <HAL_DMA_IRQHandler+0x1e4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00e      	beq.n	800569a <HAL_DMA_IRQHandler+0xd2>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a4b      	ldr	r2, [pc, #300]	@ (80057b0 <HAL_DMA_IRQHandler+0x1e8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d009      	beq.n	800569a <HAL_DMA_IRQHandler+0xd2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a4a      	ldr	r2, [pc, #296]	@ (80057b4 <HAL_DMA_IRQHandler+0x1ec>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d004      	beq.n	800569a <HAL_DMA_IRQHandler+0xd2>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a48      	ldr	r2, [pc, #288]	@ (80057b8 <HAL_DMA_IRQHandler+0x1f0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d101      	bne.n	800569e <HAL_DMA_IRQHandler+0xd6>
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <HAL_DMA_IRQHandler+0xd8>
 800569e:	2300      	movs	r3, #0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 842b 	beq.w	8005efc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056aa:	f003 031f 	and.w	r3, r3, #31
 80056ae:	2208      	movs	r2, #8
 80056b0:	409a      	lsls	r2, r3
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	4013      	ands	r3, r2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 80a2 	beq.w	8005800 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a2e      	ldr	r2, [pc, #184]	@ (800577c <HAL_DMA_IRQHandler+0x1b4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d04a      	beq.n	800575c <HAL_DMA_IRQHandler+0x194>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a2d      	ldr	r2, [pc, #180]	@ (8005780 <HAL_DMA_IRQHandler+0x1b8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d045      	beq.n	800575c <HAL_DMA_IRQHandler+0x194>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005784 <HAL_DMA_IRQHandler+0x1bc>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d040      	beq.n	800575c <HAL_DMA_IRQHandler+0x194>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a2a      	ldr	r2, [pc, #168]	@ (8005788 <HAL_DMA_IRQHandler+0x1c0>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d03b      	beq.n	800575c <HAL_DMA_IRQHandler+0x194>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a28      	ldr	r2, [pc, #160]	@ (800578c <HAL_DMA_IRQHandler+0x1c4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d036      	beq.n	800575c <HAL_DMA_IRQHandler+0x194>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a27      	ldr	r2, [pc, #156]	@ (8005790 <HAL_DMA_IRQHandler+0x1c8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d031      	beq.n	800575c <HAL_DMA_IRQHandler+0x194>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a25      	ldr	r2, [pc, #148]	@ (8005794 <HAL_DMA_IRQHandler+0x1cc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d02c      	beq.n	800575c <HAL_DMA_IRQHandler+0x194>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a24      	ldr	r2, [pc, #144]	@ (8005798 <HAL_DMA_IRQHandler+0x1d0>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d027      	beq.n	800575c <HAL_DMA_IRQHandler+0x194>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a22      	ldr	r2, [pc, #136]	@ (800579c <HAL_DMA_IRQHandler+0x1d4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d022      	beq.n	800575c <HAL_DMA_IRQHandler+0x194>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a21      	ldr	r2, [pc, #132]	@ (80057a0 <HAL_DMA_IRQHandler+0x1d8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d01d      	beq.n	800575c <HAL_DMA_IRQHandler+0x194>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1f      	ldr	r2, [pc, #124]	@ (80057a4 <HAL_DMA_IRQHandler+0x1dc>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d018      	beq.n	800575c <HAL_DMA_IRQHandler+0x194>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a1e      	ldr	r2, [pc, #120]	@ (80057a8 <HAL_DMA_IRQHandler+0x1e0>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <HAL_DMA_IRQHandler+0x194>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a1c      	ldr	r2, [pc, #112]	@ (80057ac <HAL_DMA_IRQHandler+0x1e4>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00e      	beq.n	800575c <HAL_DMA_IRQHandler+0x194>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1b      	ldr	r2, [pc, #108]	@ (80057b0 <HAL_DMA_IRQHandler+0x1e8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d009      	beq.n	800575c <HAL_DMA_IRQHandler+0x194>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a19      	ldr	r2, [pc, #100]	@ (80057b4 <HAL_DMA_IRQHandler+0x1ec>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d004      	beq.n	800575c <HAL_DMA_IRQHandler+0x194>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a18      	ldr	r2, [pc, #96]	@ (80057b8 <HAL_DMA_IRQHandler+0x1f0>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d12f      	bne.n	80057bc <HAL_DMA_IRQHandler+0x1f4>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0304 	and.w	r3, r3, #4
 8005766:	2b00      	cmp	r3, #0
 8005768:	bf14      	ite	ne
 800576a:	2301      	movne	r3, #1
 800576c:	2300      	moveq	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	e02e      	b.n	80057d0 <HAL_DMA_IRQHandler+0x208>
 8005772:	bf00      	nop
 8005774:	24000000 	.word	0x24000000
 8005778:	1b4e81b5 	.word	0x1b4e81b5
 800577c:	40020010 	.word	0x40020010
 8005780:	40020028 	.word	0x40020028
 8005784:	40020040 	.word	0x40020040
 8005788:	40020058 	.word	0x40020058
 800578c:	40020070 	.word	0x40020070
 8005790:	40020088 	.word	0x40020088
 8005794:	400200a0 	.word	0x400200a0
 8005798:	400200b8 	.word	0x400200b8
 800579c:	40020410 	.word	0x40020410
 80057a0:	40020428 	.word	0x40020428
 80057a4:	40020440 	.word	0x40020440
 80057a8:	40020458 	.word	0x40020458
 80057ac:	40020470 	.word	0x40020470
 80057b0:	40020488 	.word	0x40020488
 80057b4:	400204a0 	.word	0x400204a0
 80057b8:	400204b8 	.word	0x400204b8
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	bf14      	ite	ne
 80057ca:	2301      	movne	r3, #1
 80057cc:	2300      	moveq	r3, #0
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d015      	beq.n	8005800 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0204 	bic.w	r2, r2, #4
 80057e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e8:	f003 031f 	and.w	r3, r3, #31
 80057ec:	2208      	movs	r2, #8
 80057ee:	409a      	lsls	r2, r3
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f8:	f043 0201 	orr.w	r2, r3, #1
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005804:	f003 031f 	and.w	r3, r3, #31
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	fa22 f303 	lsr.w	r3, r2, r3
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d06e      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a69      	ldr	r2, [pc, #420]	@ (80059c0 <HAL_DMA_IRQHandler+0x3f8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d04a      	beq.n	80058b6 <HAL_DMA_IRQHandler+0x2ee>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a67      	ldr	r2, [pc, #412]	@ (80059c4 <HAL_DMA_IRQHandler+0x3fc>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d045      	beq.n	80058b6 <HAL_DMA_IRQHandler+0x2ee>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a66      	ldr	r2, [pc, #408]	@ (80059c8 <HAL_DMA_IRQHandler+0x400>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d040      	beq.n	80058b6 <HAL_DMA_IRQHandler+0x2ee>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a64      	ldr	r2, [pc, #400]	@ (80059cc <HAL_DMA_IRQHandler+0x404>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d03b      	beq.n	80058b6 <HAL_DMA_IRQHandler+0x2ee>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a63      	ldr	r2, [pc, #396]	@ (80059d0 <HAL_DMA_IRQHandler+0x408>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d036      	beq.n	80058b6 <HAL_DMA_IRQHandler+0x2ee>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a61      	ldr	r2, [pc, #388]	@ (80059d4 <HAL_DMA_IRQHandler+0x40c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d031      	beq.n	80058b6 <HAL_DMA_IRQHandler+0x2ee>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a60      	ldr	r2, [pc, #384]	@ (80059d8 <HAL_DMA_IRQHandler+0x410>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d02c      	beq.n	80058b6 <HAL_DMA_IRQHandler+0x2ee>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a5e      	ldr	r2, [pc, #376]	@ (80059dc <HAL_DMA_IRQHandler+0x414>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d027      	beq.n	80058b6 <HAL_DMA_IRQHandler+0x2ee>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a5d      	ldr	r2, [pc, #372]	@ (80059e0 <HAL_DMA_IRQHandler+0x418>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d022      	beq.n	80058b6 <HAL_DMA_IRQHandler+0x2ee>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a5b      	ldr	r2, [pc, #364]	@ (80059e4 <HAL_DMA_IRQHandler+0x41c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d01d      	beq.n	80058b6 <HAL_DMA_IRQHandler+0x2ee>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a5a      	ldr	r2, [pc, #360]	@ (80059e8 <HAL_DMA_IRQHandler+0x420>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d018      	beq.n	80058b6 <HAL_DMA_IRQHandler+0x2ee>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a58      	ldr	r2, [pc, #352]	@ (80059ec <HAL_DMA_IRQHandler+0x424>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d013      	beq.n	80058b6 <HAL_DMA_IRQHandler+0x2ee>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a57      	ldr	r2, [pc, #348]	@ (80059f0 <HAL_DMA_IRQHandler+0x428>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00e      	beq.n	80058b6 <HAL_DMA_IRQHandler+0x2ee>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a55      	ldr	r2, [pc, #340]	@ (80059f4 <HAL_DMA_IRQHandler+0x42c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d009      	beq.n	80058b6 <HAL_DMA_IRQHandler+0x2ee>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a54      	ldr	r2, [pc, #336]	@ (80059f8 <HAL_DMA_IRQHandler+0x430>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d004      	beq.n	80058b6 <HAL_DMA_IRQHandler+0x2ee>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a52      	ldr	r2, [pc, #328]	@ (80059fc <HAL_DMA_IRQHandler+0x434>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d10a      	bne.n	80058cc <HAL_DMA_IRQHandler+0x304>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	bf14      	ite	ne
 80058c4:	2301      	movne	r3, #1
 80058c6:	2300      	moveq	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	e003      	b.n	80058d4 <HAL_DMA_IRQHandler+0x30c>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2300      	movs	r3, #0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00d      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058dc:	f003 031f 	and.w	r3, r3, #31
 80058e0:	2201      	movs	r2, #1
 80058e2:	409a      	lsls	r2, r3
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ec:	f043 0202 	orr.w	r2, r3, #2
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058f8:	f003 031f 	and.w	r3, r3, #31
 80058fc:	2204      	movs	r2, #4
 80058fe:	409a      	lsls	r2, r3
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	4013      	ands	r3, r2
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 808f 	beq.w	8005a28 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a2c      	ldr	r2, [pc, #176]	@ (80059c0 <HAL_DMA_IRQHandler+0x3f8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d04a      	beq.n	80059aa <HAL_DMA_IRQHandler+0x3e2>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a2a      	ldr	r2, [pc, #168]	@ (80059c4 <HAL_DMA_IRQHandler+0x3fc>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d045      	beq.n	80059aa <HAL_DMA_IRQHandler+0x3e2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a29      	ldr	r2, [pc, #164]	@ (80059c8 <HAL_DMA_IRQHandler+0x400>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d040      	beq.n	80059aa <HAL_DMA_IRQHandler+0x3e2>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a27      	ldr	r2, [pc, #156]	@ (80059cc <HAL_DMA_IRQHandler+0x404>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d03b      	beq.n	80059aa <HAL_DMA_IRQHandler+0x3e2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a26      	ldr	r2, [pc, #152]	@ (80059d0 <HAL_DMA_IRQHandler+0x408>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d036      	beq.n	80059aa <HAL_DMA_IRQHandler+0x3e2>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a24      	ldr	r2, [pc, #144]	@ (80059d4 <HAL_DMA_IRQHandler+0x40c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d031      	beq.n	80059aa <HAL_DMA_IRQHandler+0x3e2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a23      	ldr	r2, [pc, #140]	@ (80059d8 <HAL_DMA_IRQHandler+0x410>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d02c      	beq.n	80059aa <HAL_DMA_IRQHandler+0x3e2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a21      	ldr	r2, [pc, #132]	@ (80059dc <HAL_DMA_IRQHandler+0x414>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d027      	beq.n	80059aa <HAL_DMA_IRQHandler+0x3e2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a20      	ldr	r2, [pc, #128]	@ (80059e0 <HAL_DMA_IRQHandler+0x418>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d022      	beq.n	80059aa <HAL_DMA_IRQHandler+0x3e2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1e      	ldr	r2, [pc, #120]	@ (80059e4 <HAL_DMA_IRQHandler+0x41c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d01d      	beq.n	80059aa <HAL_DMA_IRQHandler+0x3e2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1d      	ldr	r2, [pc, #116]	@ (80059e8 <HAL_DMA_IRQHandler+0x420>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d018      	beq.n	80059aa <HAL_DMA_IRQHandler+0x3e2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1b      	ldr	r2, [pc, #108]	@ (80059ec <HAL_DMA_IRQHandler+0x424>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d013      	beq.n	80059aa <HAL_DMA_IRQHandler+0x3e2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1a      	ldr	r2, [pc, #104]	@ (80059f0 <HAL_DMA_IRQHandler+0x428>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00e      	beq.n	80059aa <HAL_DMA_IRQHandler+0x3e2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a18      	ldr	r2, [pc, #96]	@ (80059f4 <HAL_DMA_IRQHandler+0x42c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d009      	beq.n	80059aa <HAL_DMA_IRQHandler+0x3e2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a17      	ldr	r2, [pc, #92]	@ (80059f8 <HAL_DMA_IRQHandler+0x430>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d004      	beq.n	80059aa <HAL_DMA_IRQHandler+0x3e2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a15      	ldr	r2, [pc, #84]	@ (80059fc <HAL_DMA_IRQHandler+0x434>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d12a      	bne.n	8005a00 <HAL_DMA_IRQHandler+0x438>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	bf14      	ite	ne
 80059b8:	2301      	movne	r3, #1
 80059ba:	2300      	moveq	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	e023      	b.n	8005a08 <HAL_DMA_IRQHandler+0x440>
 80059c0:	40020010 	.word	0x40020010
 80059c4:	40020028 	.word	0x40020028
 80059c8:	40020040 	.word	0x40020040
 80059cc:	40020058 	.word	0x40020058
 80059d0:	40020070 	.word	0x40020070
 80059d4:	40020088 	.word	0x40020088
 80059d8:	400200a0 	.word	0x400200a0
 80059dc:	400200b8 	.word	0x400200b8
 80059e0:	40020410 	.word	0x40020410
 80059e4:	40020428 	.word	0x40020428
 80059e8:	40020440 	.word	0x40020440
 80059ec:	40020458 	.word	0x40020458
 80059f0:	40020470 	.word	0x40020470
 80059f4:	40020488 	.word	0x40020488
 80059f8:	400204a0 	.word	0x400204a0
 80059fc:	400204b8 	.word	0x400204b8
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2300      	movs	r3, #0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00d      	beq.n	8005a28 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a10:	f003 031f 	and.w	r3, r3, #31
 8005a14:	2204      	movs	r2, #4
 8005a16:	409a      	lsls	r2, r3
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a20:	f043 0204 	orr.w	r2, r3, #4
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a2c:	f003 031f 	and.w	r3, r3, #31
 8005a30:	2210      	movs	r2, #16
 8005a32:	409a      	lsls	r2, r3
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	4013      	ands	r3, r2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 80a6 	beq.w	8005b8a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a85      	ldr	r2, [pc, #532]	@ (8005c58 <HAL_DMA_IRQHandler+0x690>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d04a      	beq.n	8005ade <HAL_DMA_IRQHandler+0x516>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a83      	ldr	r2, [pc, #524]	@ (8005c5c <HAL_DMA_IRQHandler+0x694>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d045      	beq.n	8005ade <HAL_DMA_IRQHandler+0x516>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a82      	ldr	r2, [pc, #520]	@ (8005c60 <HAL_DMA_IRQHandler+0x698>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d040      	beq.n	8005ade <HAL_DMA_IRQHandler+0x516>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a80      	ldr	r2, [pc, #512]	@ (8005c64 <HAL_DMA_IRQHandler+0x69c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d03b      	beq.n	8005ade <HAL_DMA_IRQHandler+0x516>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a7f      	ldr	r2, [pc, #508]	@ (8005c68 <HAL_DMA_IRQHandler+0x6a0>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d036      	beq.n	8005ade <HAL_DMA_IRQHandler+0x516>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a7d      	ldr	r2, [pc, #500]	@ (8005c6c <HAL_DMA_IRQHandler+0x6a4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d031      	beq.n	8005ade <HAL_DMA_IRQHandler+0x516>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a7c      	ldr	r2, [pc, #496]	@ (8005c70 <HAL_DMA_IRQHandler+0x6a8>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d02c      	beq.n	8005ade <HAL_DMA_IRQHandler+0x516>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a7a      	ldr	r2, [pc, #488]	@ (8005c74 <HAL_DMA_IRQHandler+0x6ac>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d027      	beq.n	8005ade <HAL_DMA_IRQHandler+0x516>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a79      	ldr	r2, [pc, #484]	@ (8005c78 <HAL_DMA_IRQHandler+0x6b0>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d022      	beq.n	8005ade <HAL_DMA_IRQHandler+0x516>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a77      	ldr	r2, [pc, #476]	@ (8005c7c <HAL_DMA_IRQHandler+0x6b4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d01d      	beq.n	8005ade <HAL_DMA_IRQHandler+0x516>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a76      	ldr	r2, [pc, #472]	@ (8005c80 <HAL_DMA_IRQHandler+0x6b8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d018      	beq.n	8005ade <HAL_DMA_IRQHandler+0x516>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a74      	ldr	r2, [pc, #464]	@ (8005c84 <HAL_DMA_IRQHandler+0x6bc>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d013      	beq.n	8005ade <HAL_DMA_IRQHandler+0x516>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a73      	ldr	r2, [pc, #460]	@ (8005c88 <HAL_DMA_IRQHandler+0x6c0>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00e      	beq.n	8005ade <HAL_DMA_IRQHandler+0x516>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a71      	ldr	r2, [pc, #452]	@ (8005c8c <HAL_DMA_IRQHandler+0x6c4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d009      	beq.n	8005ade <HAL_DMA_IRQHandler+0x516>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a70      	ldr	r2, [pc, #448]	@ (8005c90 <HAL_DMA_IRQHandler+0x6c8>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d004      	beq.n	8005ade <HAL_DMA_IRQHandler+0x516>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a6e      	ldr	r2, [pc, #440]	@ (8005c94 <HAL_DMA_IRQHandler+0x6cc>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d10a      	bne.n	8005af4 <HAL_DMA_IRQHandler+0x52c>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0308 	and.w	r3, r3, #8
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	bf14      	ite	ne
 8005aec:	2301      	movne	r3, #1
 8005aee:	2300      	moveq	r3, #0
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	e009      	b.n	8005b08 <HAL_DMA_IRQHandler+0x540>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0304 	and.w	r3, r3, #4
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	bf14      	ite	ne
 8005b02:	2301      	movne	r3, #1
 8005b04:	2300      	moveq	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d03e      	beq.n	8005b8a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b10:	f003 031f 	and.w	r3, r3, #31
 8005b14:	2210      	movs	r2, #16
 8005b16:	409a      	lsls	r2, r3
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d018      	beq.n	8005b5c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d108      	bne.n	8005b4a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d024      	beq.n	8005b8a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	4798      	blx	r3
 8005b48:	e01f      	b.n	8005b8a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d01b      	beq.n	8005b8a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	4798      	blx	r3
 8005b5a:	e016      	b.n	8005b8a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d107      	bne.n	8005b7a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0208 	bic.w	r2, r2, #8
 8005b78:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d003      	beq.n	8005b8a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	2220      	movs	r2, #32
 8005b94:	409a      	lsls	r2, r3
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 8110 	beq.w	8005dc0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a2c      	ldr	r2, [pc, #176]	@ (8005c58 <HAL_DMA_IRQHandler+0x690>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d04a      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x678>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a2b      	ldr	r2, [pc, #172]	@ (8005c5c <HAL_DMA_IRQHandler+0x694>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d045      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x678>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a29      	ldr	r2, [pc, #164]	@ (8005c60 <HAL_DMA_IRQHandler+0x698>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d040      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x678>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a28      	ldr	r2, [pc, #160]	@ (8005c64 <HAL_DMA_IRQHandler+0x69c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d03b      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x678>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a26      	ldr	r2, [pc, #152]	@ (8005c68 <HAL_DMA_IRQHandler+0x6a0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d036      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x678>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a25      	ldr	r2, [pc, #148]	@ (8005c6c <HAL_DMA_IRQHandler+0x6a4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d031      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x678>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a23      	ldr	r2, [pc, #140]	@ (8005c70 <HAL_DMA_IRQHandler+0x6a8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d02c      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x678>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a22      	ldr	r2, [pc, #136]	@ (8005c74 <HAL_DMA_IRQHandler+0x6ac>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d027      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x678>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a20      	ldr	r2, [pc, #128]	@ (8005c78 <HAL_DMA_IRQHandler+0x6b0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d022      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x678>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8005c7c <HAL_DMA_IRQHandler+0x6b4>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d01d      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x678>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a1d      	ldr	r2, [pc, #116]	@ (8005c80 <HAL_DMA_IRQHandler+0x6b8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d018      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x678>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1c      	ldr	r2, [pc, #112]	@ (8005c84 <HAL_DMA_IRQHandler+0x6bc>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d013      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x678>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1a      	ldr	r2, [pc, #104]	@ (8005c88 <HAL_DMA_IRQHandler+0x6c0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00e      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x678>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a19      	ldr	r2, [pc, #100]	@ (8005c8c <HAL_DMA_IRQHandler+0x6c4>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d009      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x678>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a17      	ldr	r2, [pc, #92]	@ (8005c90 <HAL_DMA_IRQHandler+0x6c8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d004      	beq.n	8005c40 <HAL_DMA_IRQHandler+0x678>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a16      	ldr	r2, [pc, #88]	@ (8005c94 <HAL_DMA_IRQHandler+0x6cc>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d12b      	bne.n	8005c98 <HAL_DMA_IRQHandler+0x6d0>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0310 	and.w	r3, r3, #16
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	bf14      	ite	ne
 8005c4e:	2301      	movne	r3, #1
 8005c50:	2300      	moveq	r3, #0
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	e02a      	b.n	8005cac <HAL_DMA_IRQHandler+0x6e4>
 8005c56:	bf00      	nop
 8005c58:	40020010 	.word	0x40020010
 8005c5c:	40020028 	.word	0x40020028
 8005c60:	40020040 	.word	0x40020040
 8005c64:	40020058 	.word	0x40020058
 8005c68:	40020070 	.word	0x40020070
 8005c6c:	40020088 	.word	0x40020088
 8005c70:	400200a0 	.word	0x400200a0
 8005c74:	400200b8 	.word	0x400200b8
 8005c78:	40020410 	.word	0x40020410
 8005c7c:	40020428 	.word	0x40020428
 8005c80:	40020440 	.word	0x40020440
 8005c84:	40020458 	.word	0x40020458
 8005c88:	40020470 	.word	0x40020470
 8005c8c:	40020488 	.word	0x40020488
 8005c90:	400204a0 	.word	0x400204a0
 8005c94:	400204b8 	.word	0x400204b8
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	bf14      	ite	ne
 8005ca6:	2301      	movne	r3, #1
 8005ca8:	2300      	moveq	r3, #0
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 8087 	beq.w	8005dc0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb6:	f003 031f 	and.w	r3, r3, #31
 8005cba:	2220      	movs	r2, #32
 8005cbc:	409a      	lsls	r2, r3
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d139      	bne.n	8005d42 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0216 	bic.w	r2, r2, #22
 8005cdc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695a      	ldr	r2, [r3, #20]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d103      	bne.n	8005cfe <HAL_DMA_IRQHandler+0x736>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d007      	beq.n	8005d0e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0208 	bic.w	r2, r2, #8
 8005d0c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d12:	f003 031f 	and.w	r3, r3, #31
 8005d16:	223f      	movs	r2, #63	@ 0x3f
 8005d18:	409a      	lsls	r2, r3
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 834a 	beq.w	80063cc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	4798      	blx	r3
          }
          return;
 8005d40:	e344      	b.n	80063cc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d018      	beq.n	8005d82 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d108      	bne.n	8005d70 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d02c      	beq.n	8005dc0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	4798      	blx	r3
 8005d6e:	e027      	b.n	8005dc0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d023      	beq.n	8005dc0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	4798      	blx	r3
 8005d80:	e01e      	b.n	8005dc0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10f      	bne.n	8005db0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0210 	bic.w	r2, r2, #16
 8005d9e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 8306 	beq.w	80063d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 8088 	beq.w	8005ee8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2204      	movs	r2, #4
 8005ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a7a      	ldr	r2, [pc, #488]	@ (8005fd0 <HAL_DMA_IRQHandler+0xa08>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d04a      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x8b8>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a79      	ldr	r2, [pc, #484]	@ (8005fd4 <HAL_DMA_IRQHandler+0xa0c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d045      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x8b8>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a77      	ldr	r2, [pc, #476]	@ (8005fd8 <HAL_DMA_IRQHandler+0xa10>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d040      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x8b8>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a76      	ldr	r2, [pc, #472]	@ (8005fdc <HAL_DMA_IRQHandler+0xa14>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d03b      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x8b8>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a74      	ldr	r2, [pc, #464]	@ (8005fe0 <HAL_DMA_IRQHandler+0xa18>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d036      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x8b8>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a73      	ldr	r2, [pc, #460]	@ (8005fe4 <HAL_DMA_IRQHandler+0xa1c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d031      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x8b8>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a71      	ldr	r2, [pc, #452]	@ (8005fe8 <HAL_DMA_IRQHandler+0xa20>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d02c      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x8b8>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a70      	ldr	r2, [pc, #448]	@ (8005fec <HAL_DMA_IRQHandler+0xa24>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d027      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x8b8>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a6e      	ldr	r2, [pc, #440]	@ (8005ff0 <HAL_DMA_IRQHandler+0xa28>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d022      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x8b8>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a6d      	ldr	r2, [pc, #436]	@ (8005ff4 <HAL_DMA_IRQHandler+0xa2c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d01d      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x8b8>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a6b      	ldr	r2, [pc, #428]	@ (8005ff8 <HAL_DMA_IRQHandler+0xa30>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d018      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x8b8>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a6a      	ldr	r2, [pc, #424]	@ (8005ffc <HAL_DMA_IRQHandler+0xa34>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d013      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x8b8>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a68      	ldr	r2, [pc, #416]	@ (8006000 <HAL_DMA_IRQHandler+0xa38>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d00e      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x8b8>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a67      	ldr	r2, [pc, #412]	@ (8006004 <HAL_DMA_IRQHandler+0xa3c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d009      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x8b8>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a65      	ldr	r2, [pc, #404]	@ (8006008 <HAL_DMA_IRQHandler+0xa40>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d004      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x8b8>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a64      	ldr	r2, [pc, #400]	@ (800600c <HAL_DMA_IRQHandler+0xa44>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d108      	bne.n	8005e92 <HAL_DMA_IRQHandler+0x8ca>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0201 	bic.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	e007      	b.n	8005ea2 <HAL_DMA_IRQHandler+0x8da>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0201 	bic.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d307      	bcc.n	8005ebe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1f2      	bne.n	8005ea2 <HAL_DMA_IRQHandler+0x8da>
 8005ebc:	e000      	b.n	8005ec0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005ebe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d004      	beq.n	8005ed8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2203      	movs	r2, #3
 8005ed2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005ed6:	e003      	b.n	8005ee0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8272 	beq.w	80063d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	4798      	blx	r3
 8005efa:	e26c      	b.n	80063d6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a43      	ldr	r2, [pc, #268]	@ (8006010 <HAL_DMA_IRQHandler+0xa48>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d022      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x984>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a42      	ldr	r2, [pc, #264]	@ (8006014 <HAL_DMA_IRQHandler+0xa4c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d01d      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x984>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a40      	ldr	r2, [pc, #256]	@ (8006018 <HAL_DMA_IRQHandler+0xa50>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d018      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x984>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a3f      	ldr	r2, [pc, #252]	@ (800601c <HAL_DMA_IRQHandler+0xa54>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d013      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x984>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a3d      	ldr	r2, [pc, #244]	@ (8006020 <HAL_DMA_IRQHandler+0xa58>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00e      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x984>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a3c      	ldr	r2, [pc, #240]	@ (8006024 <HAL_DMA_IRQHandler+0xa5c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d009      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x984>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a3a      	ldr	r2, [pc, #232]	@ (8006028 <HAL_DMA_IRQHandler+0xa60>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d004      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x984>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a39      	ldr	r2, [pc, #228]	@ (800602c <HAL_DMA_IRQHandler+0xa64>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d101      	bne.n	8005f50 <HAL_DMA_IRQHandler+0x988>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e000      	b.n	8005f52 <HAL_DMA_IRQHandler+0x98a>
 8005f50:	2300      	movs	r3, #0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 823f 	beq.w	80063d6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f64:	f003 031f 	and.w	r3, r3, #31
 8005f68:	2204      	movs	r2, #4
 8005f6a:	409a      	lsls	r2, r3
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 80cd 	beq.w	8006110 <HAL_DMA_IRQHandler+0xb48>
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 80c7 	beq.w	8006110 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f86:	f003 031f 	and.w	r3, r3, #31
 8005f8a:	2204      	movs	r2, #4
 8005f8c:	409a      	lsls	r2, r3
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d049      	beq.n	8006030 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 8210 	beq.w	80063d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fb8:	e20a      	b.n	80063d0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 8206 	beq.w	80063d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fcc:	e200      	b.n	80063d0 <HAL_DMA_IRQHandler+0xe08>
 8005fce:	bf00      	nop
 8005fd0:	40020010 	.word	0x40020010
 8005fd4:	40020028 	.word	0x40020028
 8005fd8:	40020040 	.word	0x40020040
 8005fdc:	40020058 	.word	0x40020058
 8005fe0:	40020070 	.word	0x40020070
 8005fe4:	40020088 	.word	0x40020088
 8005fe8:	400200a0 	.word	0x400200a0
 8005fec:	400200b8 	.word	0x400200b8
 8005ff0:	40020410 	.word	0x40020410
 8005ff4:	40020428 	.word	0x40020428
 8005ff8:	40020440 	.word	0x40020440
 8005ffc:	40020458 	.word	0x40020458
 8006000:	40020470 	.word	0x40020470
 8006004:	40020488 	.word	0x40020488
 8006008:	400204a0 	.word	0x400204a0
 800600c:	400204b8 	.word	0x400204b8
 8006010:	58025408 	.word	0x58025408
 8006014:	5802541c 	.word	0x5802541c
 8006018:	58025430 	.word	0x58025430
 800601c:	58025444 	.word	0x58025444
 8006020:	58025458 	.word	0x58025458
 8006024:	5802546c 	.word	0x5802546c
 8006028:	58025480 	.word	0x58025480
 800602c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f003 0320 	and.w	r3, r3, #32
 8006036:	2b00      	cmp	r3, #0
 8006038:	d160      	bne.n	80060fc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a7f      	ldr	r2, [pc, #508]	@ (800623c <HAL_DMA_IRQHandler+0xc74>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d04a      	beq.n	80060da <HAL_DMA_IRQHandler+0xb12>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a7d      	ldr	r2, [pc, #500]	@ (8006240 <HAL_DMA_IRQHandler+0xc78>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d045      	beq.n	80060da <HAL_DMA_IRQHandler+0xb12>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a7c      	ldr	r2, [pc, #496]	@ (8006244 <HAL_DMA_IRQHandler+0xc7c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d040      	beq.n	80060da <HAL_DMA_IRQHandler+0xb12>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a7a      	ldr	r2, [pc, #488]	@ (8006248 <HAL_DMA_IRQHandler+0xc80>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d03b      	beq.n	80060da <HAL_DMA_IRQHandler+0xb12>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a79      	ldr	r2, [pc, #484]	@ (800624c <HAL_DMA_IRQHandler+0xc84>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d036      	beq.n	80060da <HAL_DMA_IRQHandler+0xb12>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a77      	ldr	r2, [pc, #476]	@ (8006250 <HAL_DMA_IRQHandler+0xc88>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d031      	beq.n	80060da <HAL_DMA_IRQHandler+0xb12>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a76      	ldr	r2, [pc, #472]	@ (8006254 <HAL_DMA_IRQHandler+0xc8c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d02c      	beq.n	80060da <HAL_DMA_IRQHandler+0xb12>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a74      	ldr	r2, [pc, #464]	@ (8006258 <HAL_DMA_IRQHandler+0xc90>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d027      	beq.n	80060da <HAL_DMA_IRQHandler+0xb12>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a73      	ldr	r2, [pc, #460]	@ (800625c <HAL_DMA_IRQHandler+0xc94>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d022      	beq.n	80060da <HAL_DMA_IRQHandler+0xb12>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a71      	ldr	r2, [pc, #452]	@ (8006260 <HAL_DMA_IRQHandler+0xc98>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d01d      	beq.n	80060da <HAL_DMA_IRQHandler+0xb12>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a70      	ldr	r2, [pc, #448]	@ (8006264 <HAL_DMA_IRQHandler+0xc9c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d018      	beq.n	80060da <HAL_DMA_IRQHandler+0xb12>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a6e      	ldr	r2, [pc, #440]	@ (8006268 <HAL_DMA_IRQHandler+0xca0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d013      	beq.n	80060da <HAL_DMA_IRQHandler+0xb12>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a6d      	ldr	r2, [pc, #436]	@ (800626c <HAL_DMA_IRQHandler+0xca4>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00e      	beq.n	80060da <HAL_DMA_IRQHandler+0xb12>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a6b      	ldr	r2, [pc, #428]	@ (8006270 <HAL_DMA_IRQHandler+0xca8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d009      	beq.n	80060da <HAL_DMA_IRQHandler+0xb12>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a6a      	ldr	r2, [pc, #424]	@ (8006274 <HAL_DMA_IRQHandler+0xcac>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d004      	beq.n	80060da <HAL_DMA_IRQHandler+0xb12>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a68      	ldr	r2, [pc, #416]	@ (8006278 <HAL_DMA_IRQHandler+0xcb0>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d108      	bne.n	80060ec <HAL_DMA_IRQHandler+0xb24>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0208 	bic.w	r2, r2, #8
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	e007      	b.n	80060fc <HAL_DMA_IRQHandler+0xb34>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0204 	bic.w	r2, r2, #4
 80060fa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 8165 	beq.w	80063d0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800610e:	e15f      	b.n	80063d0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006114:	f003 031f 	and.w	r3, r3, #31
 8006118:	2202      	movs	r2, #2
 800611a:	409a      	lsls	r2, r3
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	4013      	ands	r3, r2
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 80c5 	beq.w	80062b0 <HAL_DMA_IRQHandler+0xce8>
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 80bf 	beq.w	80062b0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006136:	f003 031f 	and.w	r3, r3, #31
 800613a:	2202      	movs	r2, #2
 800613c:	409a      	lsls	r2, r3
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d018      	beq.n	800617e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d109      	bne.n	800616a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 813a 	beq.w	80063d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006168:	e134      	b.n	80063d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 8130 	beq.w	80063d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800617c:	e12a      	b.n	80063d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f003 0320 	and.w	r3, r3, #32
 8006184:	2b00      	cmp	r3, #0
 8006186:	f040 8089 	bne.w	800629c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a2b      	ldr	r2, [pc, #172]	@ (800623c <HAL_DMA_IRQHandler+0xc74>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d04a      	beq.n	800622a <HAL_DMA_IRQHandler+0xc62>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a29      	ldr	r2, [pc, #164]	@ (8006240 <HAL_DMA_IRQHandler+0xc78>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d045      	beq.n	800622a <HAL_DMA_IRQHandler+0xc62>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a28      	ldr	r2, [pc, #160]	@ (8006244 <HAL_DMA_IRQHandler+0xc7c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d040      	beq.n	800622a <HAL_DMA_IRQHandler+0xc62>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a26      	ldr	r2, [pc, #152]	@ (8006248 <HAL_DMA_IRQHandler+0xc80>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d03b      	beq.n	800622a <HAL_DMA_IRQHandler+0xc62>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a25      	ldr	r2, [pc, #148]	@ (800624c <HAL_DMA_IRQHandler+0xc84>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d036      	beq.n	800622a <HAL_DMA_IRQHandler+0xc62>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a23      	ldr	r2, [pc, #140]	@ (8006250 <HAL_DMA_IRQHandler+0xc88>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d031      	beq.n	800622a <HAL_DMA_IRQHandler+0xc62>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a22      	ldr	r2, [pc, #136]	@ (8006254 <HAL_DMA_IRQHandler+0xc8c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d02c      	beq.n	800622a <HAL_DMA_IRQHandler+0xc62>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a20      	ldr	r2, [pc, #128]	@ (8006258 <HAL_DMA_IRQHandler+0xc90>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d027      	beq.n	800622a <HAL_DMA_IRQHandler+0xc62>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a1f      	ldr	r2, [pc, #124]	@ (800625c <HAL_DMA_IRQHandler+0xc94>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d022      	beq.n	800622a <HAL_DMA_IRQHandler+0xc62>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006260 <HAL_DMA_IRQHandler+0xc98>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d01d      	beq.n	800622a <HAL_DMA_IRQHandler+0xc62>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006264 <HAL_DMA_IRQHandler+0xc9c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d018      	beq.n	800622a <HAL_DMA_IRQHandler+0xc62>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a1a      	ldr	r2, [pc, #104]	@ (8006268 <HAL_DMA_IRQHandler+0xca0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d013      	beq.n	800622a <HAL_DMA_IRQHandler+0xc62>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a19      	ldr	r2, [pc, #100]	@ (800626c <HAL_DMA_IRQHandler+0xca4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d00e      	beq.n	800622a <HAL_DMA_IRQHandler+0xc62>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a17      	ldr	r2, [pc, #92]	@ (8006270 <HAL_DMA_IRQHandler+0xca8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d009      	beq.n	800622a <HAL_DMA_IRQHandler+0xc62>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a16      	ldr	r2, [pc, #88]	@ (8006274 <HAL_DMA_IRQHandler+0xcac>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d004      	beq.n	800622a <HAL_DMA_IRQHandler+0xc62>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a14      	ldr	r2, [pc, #80]	@ (8006278 <HAL_DMA_IRQHandler+0xcb0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d128      	bne.n	800627c <HAL_DMA_IRQHandler+0xcb4>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0214 	bic.w	r2, r2, #20
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	e027      	b.n	800628c <HAL_DMA_IRQHandler+0xcc4>
 800623c:	40020010 	.word	0x40020010
 8006240:	40020028 	.word	0x40020028
 8006244:	40020040 	.word	0x40020040
 8006248:	40020058 	.word	0x40020058
 800624c:	40020070 	.word	0x40020070
 8006250:	40020088 	.word	0x40020088
 8006254:	400200a0 	.word	0x400200a0
 8006258:	400200b8 	.word	0x400200b8
 800625c:	40020410 	.word	0x40020410
 8006260:	40020428 	.word	0x40020428
 8006264:	40020440 	.word	0x40020440
 8006268:	40020458 	.word	0x40020458
 800626c:	40020470 	.word	0x40020470
 8006270:	40020488 	.word	0x40020488
 8006274:	400204a0 	.word	0x400204a0
 8006278:	400204b8 	.word	0x400204b8
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 020a 	bic.w	r2, r2, #10
 800628a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 8097 	beq.w	80063d4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062ae:	e091      	b.n	80063d4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062b4:	f003 031f 	and.w	r3, r3, #31
 80062b8:	2208      	movs	r2, #8
 80062ba:	409a      	lsls	r2, r3
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	4013      	ands	r3, r2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 8088 	beq.w	80063d6 <HAL_DMA_IRQHandler+0xe0e>
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f003 0308 	and.w	r3, r3, #8
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 8082 	beq.w	80063d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a41      	ldr	r2, [pc, #260]	@ (80063dc <HAL_DMA_IRQHandler+0xe14>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d04a      	beq.n	8006372 <HAL_DMA_IRQHandler+0xdaa>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a3f      	ldr	r2, [pc, #252]	@ (80063e0 <HAL_DMA_IRQHandler+0xe18>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d045      	beq.n	8006372 <HAL_DMA_IRQHandler+0xdaa>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a3e      	ldr	r2, [pc, #248]	@ (80063e4 <HAL_DMA_IRQHandler+0xe1c>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d040      	beq.n	8006372 <HAL_DMA_IRQHandler+0xdaa>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a3c      	ldr	r2, [pc, #240]	@ (80063e8 <HAL_DMA_IRQHandler+0xe20>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d03b      	beq.n	8006372 <HAL_DMA_IRQHandler+0xdaa>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a3b      	ldr	r2, [pc, #236]	@ (80063ec <HAL_DMA_IRQHandler+0xe24>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d036      	beq.n	8006372 <HAL_DMA_IRQHandler+0xdaa>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a39      	ldr	r2, [pc, #228]	@ (80063f0 <HAL_DMA_IRQHandler+0xe28>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d031      	beq.n	8006372 <HAL_DMA_IRQHandler+0xdaa>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a38      	ldr	r2, [pc, #224]	@ (80063f4 <HAL_DMA_IRQHandler+0xe2c>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d02c      	beq.n	8006372 <HAL_DMA_IRQHandler+0xdaa>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a36      	ldr	r2, [pc, #216]	@ (80063f8 <HAL_DMA_IRQHandler+0xe30>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d027      	beq.n	8006372 <HAL_DMA_IRQHandler+0xdaa>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a35      	ldr	r2, [pc, #212]	@ (80063fc <HAL_DMA_IRQHandler+0xe34>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d022      	beq.n	8006372 <HAL_DMA_IRQHandler+0xdaa>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a33      	ldr	r2, [pc, #204]	@ (8006400 <HAL_DMA_IRQHandler+0xe38>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d01d      	beq.n	8006372 <HAL_DMA_IRQHandler+0xdaa>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a32      	ldr	r2, [pc, #200]	@ (8006404 <HAL_DMA_IRQHandler+0xe3c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d018      	beq.n	8006372 <HAL_DMA_IRQHandler+0xdaa>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a30      	ldr	r2, [pc, #192]	@ (8006408 <HAL_DMA_IRQHandler+0xe40>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d013      	beq.n	8006372 <HAL_DMA_IRQHandler+0xdaa>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a2f      	ldr	r2, [pc, #188]	@ (800640c <HAL_DMA_IRQHandler+0xe44>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00e      	beq.n	8006372 <HAL_DMA_IRQHandler+0xdaa>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a2d      	ldr	r2, [pc, #180]	@ (8006410 <HAL_DMA_IRQHandler+0xe48>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d009      	beq.n	8006372 <HAL_DMA_IRQHandler+0xdaa>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a2c      	ldr	r2, [pc, #176]	@ (8006414 <HAL_DMA_IRQHandler+0xe4c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d004      	beq.n	8006372 <HAL_DMA_IRQHandler+0xdaa>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a2a      	ldr	r2, [pc, #168]	@ (8006418 <HAL_DMA_IRQHandler+0xe50>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d108      	bne.n	8006384 <HAL_DMA_IRQHandler+0xdbc>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 021c 	bic.w	r2, r2, #28
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	e007      	b.n	8006394 <HAL_DMA_IRQHandler+0xdcc>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 020e 	bic.w	r2, r2, #14
 8006392:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006398:	f003 031f 	and.w	r3, r3, #31
 800639c:	2201      	movs	r2, #1
 800639e:	409a      	lsls	r2, r3
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d009      	beq.n	80063d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	4798      	blx	r3
 80063ca:	e004      	b.n	80063d6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80063cc:	bf00      	nop
 80063ce:	e002      	b.n	80063d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063d0:	bf00      	nop
 80063d2:	e000      	b.n	80063d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063d4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80063d6:	3728      	adds	r7, #40	@ 0x28
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	40020010 	.word	0x40020010
 80063e0:	40020028 	.word	0x40020028
 80063e4:	40020040 	.word	0x40020040
 80063e8:	40020058 	.word	0x40020058
 80063ec:	40020070 	.word	0x40020070
 80063f0:	40020088 	.word	0x40020088
 80063f4:	400200a0 	.word	0x400200a0
 80063f8:	400200b8 	.word	0x400200b8
 80063fc:	40020410 	.word	0x40020410
 8006400:	40020428 	.word	0x40020428
 8006404:	40020440 	.word	0x40020440
 8006408:	40020458 	.word	0x40020458
 800640c:	40020470 	.word	0x40020470
 8006410:	40020488 	.word	0x40020488
 8006414:	400204a0 	.word	0x400204a0
 8006418:	400204b8 	.word	0x400204b8

0800641c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800642e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006434:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a7f      	ldr	r2, [pc, #508]	@ (8006638 <DMA_SetConfig+0x21c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d072      	beq.n	8006526 <DMA_SetConfig+0x10a>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a7d      	ldr	r2, [pc, #500]	@ (800663c <DMA_SetConfig+0x220>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d06d      	beq.n	8006526 <DMA_SetConfig+0x10a>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a7c      	ldr	r2, [pc, #496]	@ (8006640 <DMA_SetConfig+0x224>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d068      	beq.n	8006526 <DMA_SetConfig+0x10a>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a7a      	ldr	r2, [pc, #488]	@ (8006644 <DMA_SetConfig+0x228>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d063      	beq.n	8006526 <DMA_SetConfig+0x10a>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a79      	ldr	r2, [pc, #484]	@ (8006648 <DMA_SetConfig+0x22c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d05e      	beq.n	8006526 <DMA_SetConfig+0x10a>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a77      	ldr	r2, [pc, #476]	@ (800664c <DMA_SetConfig+0x230>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d059      	beq.n	8006526 <DMA_SetConfig+0x10a>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a76      	ldr	r2, [pc, #472]	@ (8006650 <DMA_SetConfig+0x234>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d054      	beq.n	8006526 <DMA_SetConfig+0x10a>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a74      	ldr	r2, [pc, #464]	@ (8006654 <DMA_SetConfig+0x238>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d04f      	beq.n	8006526 <DMA_SetConfig+0x10a>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a73      	ldr	r2, [pc, #460]	@ (8006658 <DMA_SetConfig+0x23c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d04a      	beq.n	8006526 <DMA_SetConfig+0x10a>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a71      	ldr	r2, [pc, #452]	@ (800665c <DMA_SetConfig+0x240>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d045      	beq.n	8006526 <DMA_SetConfig+0x10a>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a70      	ldr	r2, [pc, #448]	@ (8006660 <DMA_SetConfig+0x244>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d040      	beq.n	8006526 <DMA_SetConfig+0x10a>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a6e      	ldr	r2, [pc, #440]	@ (8006664 <DMA_SetConfig+0x248>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d03b      	beq.n	8006526 <DMA_SetConfig+0x10a>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a6d      	ldr	r2, [pc, #436]	@ (8006668 <DMA_SetConfig+0x24c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d036      	beq.n	8006526 <DMA_SetConfig+0x10a>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a6b      	ldr	r2, [pc, #428]	@ (800666c <DMA_SetConfig+0x250>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d031      	beq.n	8006526 <DMA_SetConfig+0x10a>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a6a      	ldr	r2, [pc, #424]	@ (8006670 <DMA_SetConfig+0x254>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d02c      	beq.n	8006526 <DMA_SetConfig+0x10a>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a68      	ldr	r2, [pc, #416]	@ (8006674 <DMA_SetConfig+0x258>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d027      	beq.n	8006526 <DMA_SetConfig+0x10a>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a67      	ldr	r2, [pc, #412]	@ (8006678 <DMA_SetConfig+0x25c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d022      	beq.n	8006526 <DMA_SetConfig+0x10a>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a65      	ldr	r2, [pc, #404]	@ (800667c <DMA_SetConfig+0x260>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d01d      	beq.n	8006526 <DMA_SetConfig+0x10a>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a64      	ldr	r2, [pc, #400]	@ (8006680 <DMA_SetConfig+0x264>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d018      	beq.n	8006526 <DMA_SetConfig+0x10a>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a62      	ldr	r2, [pc, #392]	@ (8006684 <DMA_SetConfig+0x268>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <DMA_SetConfig+0x10a>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a61      	ldr	r2, [pc, #388]	@ (8006688 <DMA_SetConfig+0x26c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d00e      	beq.n	8006526 <DMA_SetConfig+0x10a>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a5f      	ldr	r2, [pc, #380]	@ (800668c <DMA_SetConfig+0x270>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d009      	beq.n	8006526 <DMA_SetConfig+0x10a>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a5e      	ldr	r2, [pc, #376]	@ (8006690 <DMA_SetConfig+0x274>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d004      	beq.n	8006526 <DMA_SetConfig+0x10a>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a5c      	ldr	r2, [pc, #368]	@ (8006694 <DMA_SetConfig+0x278>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d101      	bne.n	800652a <DMA_SetConfig+0x10e>
 8006526:	2301      	movs	r3, #1
 8006528:	e000      	b.n	800652c <DMA_SetConfig+0x110>
 800652a:	2300      	movs	r3, #0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00d      	beq.n	800654c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006538:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800653e:	2b00      	cmp	r3, #0
 8006540:	d004      	beq.n	800654c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800654a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a39      	ldr	r2, [pc, #228]	@ (8006638 <DMA_SetConfig+0x21c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d04a      	beq.n	80065ec <DMA_SetConfig+0x1d0>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a38      	ldr	r2, [pc, #224]	@ (800663c <DMA_SetConfig+0x220>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d045      	beq.n	80065ec <DMA_SetConfig+0x1d0>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a36      	ldr	r2, [pc, #216]	@ (8006640 <DMA_SetConfig+0x224>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d040      	beq.n	80065ec <DMA_SetConfig+0x1d0>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a35      	ldr	r2, [pc, #212]	@ (8006644 <DMA_SetConfig+0x228>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d03b      	beq.n	80065ec <DMA_SetConfig+0x1d0>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a33      	ldr	r2, [pc, #204]	@ (8006648 <DMA_SetConfig+0x22c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d036      	beq.n	80065ec <DMA_SetConfig+0x1d0>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a32      	ldr	r2, [pc, #200]	@ (800664c <DMA_SetConfig+0x230>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d031      	beq.n	80065ec <DMA_SetConfig+0x1d0>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a30      	ldr	r2, [pc, #192]	@ (8006650 <DMA_SetConfig+0x234>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d02c      	beq.n	80065ec <DMA_SetConfig+0x1d0>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a2f      	ldr	r2, [pc, #188]	@ (8006654 <DMA_SetConfig+0x238>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d027      	beq.n	80065ec <DMA_SetConfig+0x1d0>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a2d      	ldr	r2, [pc, #180]	@ (8006658 <DMA_SetConfig+0x23c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d022      	beq.n	80065ec <DMA_SetConfig+0x1d0>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a2c      	ldr	r2, [pc, #176]	@ (800665c <DMA_SetConfig+0x240>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d01d      	beq.n	80065ec <DMA_SetConfig+0x1d0>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a2a      	ldr	r2, [pc, #168]	@ (8006660 <DMA_SetConfig+0x244>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d018      	beq.n	80065ec <DMA_SetConfig+0x1d0>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a29      	ldr	r2, [pc, #164]	@ (8006664 <DMA_SetConfig+0x248>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d013      	beq.n	80065ec <DMA_SetConfig+0x1d0>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a27      	ldr	r2, [pc, #156]	@ (8006668 <DMA_SetConfig+0x24c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00e      	beq.n	80065ec <DMA_SetConfig+0x1d0>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a26      	ldr	r2, [pc, #152]	@ (800666c <DMA_SetConfig+0x250>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d009      	beq.n	80065ec <DMA_SetConfig+0x1d0>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a24      	ldr	r2, [pc, #144]	@ (8006670 <DMA_SetConfig+0x254>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d004      	beq.n	80065ec <DMA_SetConfig+0x1d0>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a23      	ldr	r2, [pc, #140]	@ (8006674 <DMA_SetConfig+0x258>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d101      	bne.n	80065f0 <DMA_SetConfig+0x1d4>
 80065ec:	2301      	movs	r3, #1
 80065ee:	e000      	b.n	80065f2 <DMA_SetConfig+0x1d6>
 80065f0:	2300      	movs	r3, #0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d059      	beq.n	80066aa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065fa:	f003 031f 	and.w	r3, r3, #31
 80065fe:	223f      	movs	r2, #63	@ 0x3f
 8006600:	409a      	lsls	r2, r3
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006614:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b40      	cmp	r3, #64	@ 0x40
 8006624:	d138      	bne.n	8006698 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006636:	e086      	b.n	8006746 <DMA_SetConfig+0x32a>
 8006638:	40020010 	.word	0x40020010
 800663c:	40020028 	.word	0x40020028
 8006640:	40020040 	.word	0x40020040
 8006644:	40020058 	.word	0x40020058
 8006648:	40020070 	.word	0x40020070
 800664c:	40020088 	.word	0x40020088
 8006650:	400200a0 	.word	0x400200a0
 8006654:	400200b8 	.word	0x400200b8
 8006658:	40020410 	.word	0x40020410
 800665c:	40020428 	.word	0x40020428
 8006660:	40020440 	.word	0x40020440
 8006664:	40020458 	.word	0x40020458
 8006668:	40020470 	.word	0x40020470
 800666c:	40020488 	.word	0x40020488
 8006670:	400204a0 	.word	0x400204a0
 8006674:	400204b8 	.word	0x400204b8
 8006678:	58025408 	.word	0x58025408
 800667c:	5802541c 	.word	0x5802541c
 8006680:	58025430 	.word	0x58025430
 8006684:	58025444 	.word	0x58025444
 8006688:	58025458 	.word	0x58025458
 800668c:	5802546c 	.word	0x5802546c
 8006690:	58025480 	.word	0x58025480
 8006694:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	60da      	str	r2, [r3, #12]
}
 80066a8:	e04d      	b.n	8006746 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a29      	ldr	r2, [pc, #164]	@ (8006754 <DMA_SetConfig+0x338>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d022      	beq.n	80066fa <DMA_SetConfig+0x2de>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a27      	ldr	r2, [pc, #156]	@ (8006758 <DMA_SetConfig+0x33c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d01d      	beq.n	80066fa <DMA_SetConfig+0x2de>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a26      	ldr	r2, [pc, #152]	@ (800675c <DMA_SetConfig+0x340>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d018      	beq.n	80066fa <DMA_SetConfig+0x2de>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a24      	ldr	r2, [pc, #144]	@ (8006760 <DMA_SetConfig+0x344>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d013      	beq.n	80066fa <DMA_SetConfig+0x2de>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a23      	ldr	r2, [pc, #140]	@ (8006764 <DMA_SetConfig+0x348>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00e      	beq.n	80066fa <DMA_SetConfig+0x2de>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a21      	ldr	r2, [pc, #132]	@ (8006768 <DMA_SetConfig+0x34c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d009      	beq.n	80066fa <DMA_SetConfig+0x2de>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a20      	ldr	r2, [pc, #128]	@ (800676c <DMA_SetConfig+0x350>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d004      	beq.n	80066fa <DMA_SetConfig+0x2de>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a1e      	ldr	r2, [pc, #120]	@ (8006770 <DMA_SetConfig+0x354>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d101      	bne.n	80066fe <DMA_SetConfig+0x2e2>
 80066fa:	2301      	movs	r3, #1
 80066fc:	e000      	b.n	8006700 <DMA_SetConfig+0x2e4>
 80066fe:	2300      	movs	r3, #0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d020      	beq.n	8006746 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006708:	f003 031f 	and.w	r3, r3, #31
 800670c:	2201      	movs	r2, #1
 800670e:	409a      	lsls	r2, r3
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	2b40      	cmp	r3, #64	@ 0x40
 8006722:	d108      	bne.n	8006736 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	60da      	str	r2, [r3, #12]
}
 8006734:	e007      	b.n	8006746 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	60da      	str	r2, [r3, #12]
}
 8006746:	bf00      	nop
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	58025408 	.word	0x58025408
 8006758:	5802541c 	.word	0x5802541c
 800675c:	58025430 	.word	0x58025430
 8006760:	58025444 	.word	0x58025444
 8006764:	58025458 	.word	0x58025458
 8006768:	5802546c 	.word	0x5802546c
 800676c:	58025480 	.word	0x58025480
 8006770:	58025494 	.word	0x58025494

08006774 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a42      	ldr	r2, [pc, #264]	@ (800688c <DMA_CalcBaseAndBitshift+0x118>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d04a      	beq.n	800681c <DMA_CalcBaseAndBitshift+0xa8>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a41      	ldr	r2, [pc, #260]	@ (8006890 <DMA_CalcBaseAndBitshift+0x11c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d045      	beq.n	800681c <DMA_CalcBaseAndBitshift+0xa8>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a3f      	ldr	r2, [pc, #252]	@ (8006894 <DMA_CalcBaseAndBitshift+0x120>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d040      	beq.n	800681c <DMA_CalcBaseAndBitshift+0xa8>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a3e      	ldr	r2, [pc, #248]	@ (8006898 <DMA_CalcBaseAndBitshift+0x124>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d03b      	beq.n	800681c <DMA_CalcBaseAndBitshift+0xa8>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a3c      	ldr	r2, [pc, #240]	@ (800689c <DMA_CalcBaseAndBitshift+0x128>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d036      	beq.n	800681c <DMA_CalcBaseAndBitshift+0xa8>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a3b      	ldr	r2, [pc, #236]	@ (80068a0 <DMA_CalcBaseAndBitshift+0x12c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d031      	beq.n	800681c <DMA_CalcBaseAndBitshift+0xa8>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a39      	ldr	r2, [pc, #228]	@ (80068a4 <DMA_CalcBaseAndBitshift+0x130>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d02c      	beq.n	800681c <DMA_CalcBaseAndBitshift+0xa8>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a38      	ldr	r2, [pc, #224]	@ (80068a8 <DMA_CalcBaseAndBitshift+0x134>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d027      	beq.n	800681c <DMA_CalcBaseAndBitshift+0xa8>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a36      	ldr	r2, [pc, #216]	@ (80068ac <DMA_CalcBaseAndBitshift+0x138>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d022      	beq.n	800681c <DMA_CalcBaseAndBitshift+0xa8>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a35      	ldr	r2, [pc, #212]	@ (80068b0 <DMA_CalcBaseAndBitshift+0x13c>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d01d      	beq.n	800681c <DMA_CalcBaseAndBitshift+0xa8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a33      	ldr	r2, [pc, #204]	@ (80068b4 <DMA_CalcBaseAndBitshift+0x140>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d018      	beq.n	800681c <DMA_CalcBaseAndBitshift+0xa8>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a32      	ldr	r2, [pc, #200]	@ (80068b8 <DMA_CalcBaseAndBitshift+0x144>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d013      	beq.n	800681c <DMA_CalcBaseAndBitshift+0xa8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a30      	ldr	r2, [pc, #192]	@ (80068bc <DMA_CalcBaseAndBitshift+0x148>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d00e      	beq.n	800681c <DMA_CalcBaseAndBitshift+0xa8>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a2f      	ldr	r2, [pc, #188]	@ (80068c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d009      	beq.n	800681c <DMA_CalcBaseAndBitshift+0xa8>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a2d      	ldr	r2, [pc, #180]	@ (80068c4 <DMA_CalcBaseAndBitshift+0x150>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d004      	beq.n	800681c <DMA_CalcBaseAndBitshift+0xa8>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a2c      	ldr	r2, [pc, #176]	@ (80068c8 <DMA_CalcBaseAndBitshift+0x154>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d101      	bne.n	8006820 <DMA_CalcBaseAndBitshift+0xac>
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <DMA_CalcBaseAndBitshift+0xae>
 8006820:	2300      	movs	r3, #0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d024      	beq.n	8006870 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	b2db      	uxtb	r3, r3
 800682c:	3b10      	subs	r3, #16
 800682e:	4a27      	ldr	r2, [pc, #156]	@ (80068cc <DMA_CalcBaseAndBitshift+0x158>)
 8006830:	fba2 2303 	umull	r2, r3, r2, r3
 8006834:	091b      	lsrs	r3, r3, #4
 8006836:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f003 0307 	and.w	r3, r3, #7
 800683e:	4a24      	ldr	r2, [pc, #144]	@ (80068d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8006840:	5cd3      	ldrb	r3, [r2, r3]
 8006842:	461a      	mov	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b03      	cmp	r3, #3
 800684c:	d908      	bls.n	8006860 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	4b1f      	ldr	r3, [pc, #124]	@ (80068d4 <DMA_CalcBaseAndBitshift+0x160>)
 8006856:	4013      	ands	r3, r2
 8006858:	1d1a      	adds	r2, r3, #4
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	659a      	str	r2, [r3, #88]	@ 0x58
 800685e:	e00d      	b.n	800687c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	461a      	mov	r2, r3
 8006866:	4b1b      	ldr	r3, [pc, #108]	@ (80068d4 <DMA_CalcBaseAndBitshift+0x160>)
 8006868:	4013      	ands	r3, r2
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6593      	str	r3, [r2, #88]	@ 0x58
 800686e:	e005      	b.n	800687c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006880:	4618      	mov	r0, r3
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	40020010 	.word	0x40020010
 8006890:	40020028 	.word	0x40020028
 8006894:	40020040 	.word	0x40020040
 8006898:	40020058 	.word	0x40020058
 800689c:	40020070 	.word	0x40020070
 80068a0:	40020088 	.word	0x40020088
 80068a4:	400200a0 	.word	0x400200a0
 80068a8:	400200b8 	.word	0x400200b8
 80068ac:	40020410 	.word	0x40020410
 80068b0:	40020428 	.word	0x40020428
 80068b4:	40020440 	.word	0x40020440
 80068b8:	40020458 	.word	0x40020458
 80068bc:	40020470 	.word	0x40020470
 80068c0:	40020488 	.word	0x40020488
 80068c4:	400204a0 	.word	0x400204a0
 80068c8:	400204b8 	.word	0x400204b8
 80068cc:	aaaaaaab 	.word	0xaaaaaaab
 80068d0:	08010b18 	.word	0x08010b18
 80068d4:	fffffc00 	.word	0xfffffc00

080068d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d120      	bne.n	800692e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f0:	2b03      	cmp	r3, #3
 80068f2:	d858      	bhi.n	80069a6 <DMA_CheckFifoParam+0xce>
 80068f4:	a201      	add	r2, pc, #4	@ (adr r2, 80068fc <DMA_CheckFifoParam+0x24>)
 80068f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fa:	bf00      	nop
 80068fc:	0800690d 	.word	0x0800690d
 8006900:	0800691f 	.word	0x0800691f
 8006904:	0800690d 	.word	0x0800690d
 8006908:	080069a7 	.word	0x080069a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006910:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d048      	beq.n	80069aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800691c:	e045      	b.n	80069aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006922:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006926:	d142      	bne.n	80069ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800692c:	e03f      	b.n	80069ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006936:	d123      	bne.n	8006980 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693c:	2b03      	cmp	r3, #3
 800693e:	d838      	bhi.n	80069b2 <DMA_CheckFifoParam+0xda>
 8006940:	a201      	add	r2, pc, #4	@ (adr r2, 8006948 <DMA_CheckFifoParam+0x70>)
 8006942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006946:	bf00      	nop
 8006948:	08006959 	.word	0x08006959
 800694c:	0800695f 	.word	0x0800695f
 8006950:	08006959 	.word	0x08006959
 8006954:	08006971 	.word	0x08006971
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	73fb      	strb	r3, [r7, #15]
        break;
 800695c:	e030      	b.n	80069c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006962:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d025      	beq.n	80069b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800696e:	e022      	b.n	80069b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006974:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006978:	d11f      	bne.n	80069ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800697e:	e01c      	b.n	80069ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006984:	2b02      	cmp	r3, #2
 8006986:	d902      	bls.n	800698e <DMA_CheckFifoParam+0xb6>
 8006988:	2b03      	cmp	r3, #3
 800698a:	d003      	beq.n	8006994 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800698c:	e018      	b.n	80069c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	73fb      	strb	r3, [r7, #15]
        break;
 8006992:	e015      	b.n	80069c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00e      	beq.n	80069be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	73fb      	strb	r3, [r7, #15]
    break;
 80069a4:	e00b      	b.n	80069be <DMA_CheckFifoParam+0xe6>
        break;
 80069a6:	bf00      	nop
 80069a8:	e00a      	b.n	80069c0 <DMA_CheckFifoParam+0xe8>
        break;
 80069aa:	bf00      	nop
 80069ac:	e008      	b.n	80069c0 <DMA_CheckFifoParam+0xe8>
        break;
 80069ae:	bf00      	nop
 80069b0:	e006      	b.n	80069c0 <DMA_CheckFifoParam+0xe8>
        break;
 80069b2:	bf00      	nop
 80069b4:	e004      	b.n	80069c0 <DMA_CheckFifoParam+0xe8>
        break;
 80069b6:	bf00      	nop
 80069b8:	e002      	b.n	80069c0 <DMA_CheckFifoParam+0xe8>
        break;
 80069ba:	bf00      	nop
 80069bc:	e000      	b.n	80069c0 <DMA_CheckFifoParam+0xe8>
    break;
 80069be:	bf00      	nop
    }
  }

  return status;
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop

080069d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a38      	ldr	r2, [pc, #224]	@ (8006ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d022      	beq.n	8006a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a36      	ldr	r2, [pc, #216]	@ (8006ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d01d      	beq.n	8006a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a35      	ldr	r2, [pc, #212]	@ (8006acc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d018      	beq.n	8006a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a33      	ldr	r2, [pc, #204]	@ (8006ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d013      	beq.n	8006a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a32      	ldr	r2, [pc, #200]	@ (8006ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d00e      	beq.n	8006a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a30      	ldr	r2, [pc, #192]	@ (8006ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d009      	beq.n	8006a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a2f      	ldr	r2, [pc, #188]	@ (8006adc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d004      	beq.n	8006a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a2d      	ldr	r2, [pc, #180]	@ (8006ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d101      	bne.n	8006a32 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e000      	b.n	8006a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006a32:	2300      	movs	r3, #0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01a      	beq.n	8006a6e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	3b08      	subs	r3, #8
 8006a40:	4a28      	ldr	r2, [pc, #160]	@ (8006ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006a42:	fba2 2303 	umull	r2, r3, r2, r3
 8006a46:	091b      	lsrs	r3, r3, #4
 8006a48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4b26      	ldr	r3, [pc, #152]	@ (8006ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	461a      	mov	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a24      	ldr	r2, [pc, #144]	@ (8006aec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006a5c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f003 031f 	and.w	r3, r3, #31
 8006a64:	2201      	movs	r2, #1
 8006a66:	409a      	lsls	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006a6c:	e024      	b.n	8006ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	3b10      	subs	r3, #16
 8006a76:	4a1e      	ldr	r2, [pc, #120]	@ (8006af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006a78:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7c:	091b      	lsrs	r3, r3, #4
 8006a7e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4a1c      	ldr	r2, [pc, #112]	@ (8006af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d806      	bhi.n	8006a96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d902      	bls.n	8006a96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	3308      	adds	r3, #8
 8006a94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	4b18      	ldr	r3, [pc, #96]	@ (8006afc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006a9a:	4413      	add	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a16      	ldr	r2, [pc, #88]	@ (8006b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006aa8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	409a      	lsls	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006ab8:	bf00      	nop
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	58025408 	.word	0x58025408
 8006ac8:	5802541c 	.word	0x5802541c
 8006acc:	58025430 	.word	0x58025430
 8006ad0:	58025444 	.word	0x58025444
 8006ad4:	58025458 	.word	0x58025458
 8006ad8:	5802546c 	.word	0x5802546c
 8006adc:	58025480 	.word	0x58025480
 8006ae0:	58025494 	.word	0x58025494
 8006ae4:	cccccccd 	.word	0xcccccccd
 8006ae8:	16009600 	.word	0x16009600
 8006aec:	58025880 	.word	0x58025880
 8006af0:	aaaaaaab 	.word	0xaaaaaaab
 8006af4:	400204b8 	.word	0x400204b8
 8006af8:	4002040f 	.word	0x4002040f
 8006afc:	10008200 	.word	0x10008200
 8006b00:	40020880 	.word	0x40020880

08006b04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d04a      	beq.n	8006bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d847      	bhi.n	8006bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a25      	ldr	r2, [pc, #148]	@ (8006bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d022      	beq.n	8006b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a24      	ldr	r2, [pc, #144]	@ (8006bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d01d      	beq.n	8006b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a22      	ldr	r2, [pc, #136]	@ (8006bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d018      	beq.n	8006b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a21      	ldr	r2, [pc, #132]	@ (8006bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d013      	beq.n	8006b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8006bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d00e      	beq.n	8006b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1e      	ldr	r2, [pc, #120]	@ (8006bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d009      	beq.n	8006b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a1c      	ldr	r2, [pc, #112]	@ (8006bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d004      	beq.n	8006b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d101      	bne.n	8006b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006b70:	2301      	movs	r3, #1
 8006b72:	e000      	b.n	8006b76 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006b74:	2300      	movs	r3, #0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4b17      	ldr	r3, [pc, #92]	@ (8006bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	461a      	mov	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a15      	ldr	r2, [pc, #84]	@ (8006be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006b8c:	671a      	str	r2, [r3, #112]	@ 0x70
 8006b8e:	e009      	b.n	8006ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4b14      	ldr	r3, [pc, #80]	@ (8006be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006b94:	4413      	add	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	461a      	mov	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a11      	ldr	r2, [pc, #68]	@ (8006be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006ba2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	2201      	movs	r2, #1
 8006baa:	409a      	lsls	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006bb0:	bf00      	nop
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	58025408 	.word	0x58025408
 8006bc0:	5802541c 	.word	0x5802541c
 8006bc4:	58025430 	.word	0x58025430
 8006bc8:	58025444 	.word	0x58025444
 8006bcc:	58025458 	.word	0x58025458
 8006bd0:	5802546c 	.word	0x5802546c
 8006bd4:	58025480 	.word	0x58025480
 8006bd8:	58025494 	.word	0x58025494
 8006bdc:	1600963f 	.word	0x1600963f
 8006be0:	58025940 	.word	0x58025940
 8006be4:	1000823f 	.word	0x1000823f
 8006be8:	40020940 	.word	0x40020940

08006bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b089      	sub	sp, #36	@ 0x24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006bfa:	4b86      	ldr	r3, [pc, #536]	@ (8006e14 <HAL_GPIO_Init+0x228>)
 8006bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006bfe:	e18c      	b.n	8006f1a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	2101      	movs	r1, #1
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 817e 	beq.w	8006f14 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f003 0303 	and.w	r3, r3, #3
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d005      	beq.n	8006c30 <HAL_GPIO_Init+0x44>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f003 0303 	and.w	r3, r3, #3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d130      	bne.n	8006c92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	2203      	movs	r2, #3
 8006c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c40:	43db      	mvns	r3, r3
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	4013      	ands	r3, r2
 8006c46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	fa02 f303 	lsl.w	r3, r2, r3
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c66:	2201      	movs	r2, #1
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6e:	43db      	mvns	r3, r3
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	4013      	ands	r3, r2
 8006c74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	091b      	lsrs	r3, r3, #4
 8006c7c:	f003 0201 	and.w	r2, r3, #1
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	fa02 f303 	lsl.w	r3, r2, r3
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f003 0303 	and.w	r3, r3, #3
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d017      	beq.n	8006cce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	2203      	movs	r2, #3
 8006caa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cae:	43db      	mvns	r3, r3
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	689a      	ldr	r2, [r3, #8]
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f003 0303 	and.w	r3, r3, #3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d123      	bne.n	8006d22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	08da      	lsrs	r2, r3, #3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3208      	adds	r2, #8
 8006ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	220f      	movs	r2, #15
 8006cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf6:	43db      	mvns	r3, r3
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	691a      	ldr	r2, [r3, #16]
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	f003 0307 	and.w	r3, r3, #7
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	08da      	lsrs	r2, r3, #3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3208      	adds	r2, #8
 8006d1c:	69b9      	ldr	r1, [r7, #24]
 8006d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	2203      	movs	r2, #3
 8006d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d32:	43db      	mvns	r3, r3
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	4013      	ands	r3, r2
 8006d38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f003 0203 	and.w	r2, r3, #3
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 80d8 	beq.w	8006f14 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d64:	4b2c      	ldr	r3, [pc, #176]	@ (8006e18 <HAL_GPIO_Init+0x22c>)
 8006d66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d6a:	4a2b      	ldr	r2, [pc, #172]	@ (8006e18 <HAL_GPIO_Init+0x22c>)
 8006d6c:	f043 0302 	orr.w	r3, r3, #2
 8006d70:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006d74:	4b28      	ldr	r3, [pc, #160]	@ (8006e18 <HAL_GPIO_Init+0x22c>)
 8006d76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d82:	4a26      	ldr	r2, [pc, #152]	@ (8006e1c <HAL_GPIO_Init+0x230>)
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	089b      	lsrs	r3, r3, #2
 8006d88:	3302      	adds	r3, #2
 8006d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	220f      	movs	r2, #15
 8006d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9e:	43db      	mvns	r3, r3
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	4013      	ands	r3, r2
 8006da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a1d      	ldr	r2, [pc, #116]	@ (8006e20 <HAL_GPIO_Init+0x234>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d04a      	beq.n	8006e44 <HAL_GPIO_Init+0x258>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a1c      	ldr	r2, [pc, #112]	@ (8006e24 <HAL_GPIO_Init+0x238>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d02b      	beq.n	8006e0e <HAL_GPIO_Init+0x222>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a1b      	ldr	r2, [pc, #108]	@ (8006e28 <HAL_GPIO_Init+0x23c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d025      	beq.n	8006e0a <HAL_GPIO_Init+0x21e>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8006e2c <HAL_GPIO_Init+0x240>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d01f      	beq.n	8006e06 <HAL_GPIO_Init+0x21a>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a19      	ldr	r2, [pc, #100]	@ (8006e30 <HAL_GPIO_Init+0x244>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d019      	beq.n	8006e02 <HAL_GPIO_Init+0x216>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a18      	ldr	r2, [pc, #96]	@ (8006e34 <HAL_GPIO_Init+0x248>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d013      	beq.n	8006dfe <HAL_GPIO_Init+0x212>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a17      	ldr	r2, [pc, #92]	@ (8006e38 <HAL_GPIO_Init+0x24c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00d      	beq.n	8006dfa <HAL_GPIO_Init+0x20e>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a16      	ldr	r2, [pc, #88]	@ (8006e3c <HAL_GPIO_Init+0x250>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d007      	beq.n	8006df6 <HAL_GPIO_Init+0x20a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a15      	ldr	r2, [pc, #84]	@ (8006e40 <HAL_GPIO_Init+0x254>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d101      	bne.n	8006df2 <HAL_GPIO_Init+0x206>
 8006dee:	2309      	movs	r3, #9
 8006df0:	e029      	b.n	8006e46 <HAL_GPIO_Init+0x25a>
 8006df2:	230a      	movs	r3, #10
 8006df4:	e027      	b.n	8006e46 <HAL_GPIO_Init+0x25a>
 8006df6:	2307      	movs	r3, #7
 8006df8:	e025      	b.n	8006e46 <HAL_GPIO_Init+0x25a>
 8006dfa:	2306      	movs	r3, #6
 8006dfc:	e023      	b.n	8006e46 <HAL_GPIO_Init+0x25a>
 8006dfe:	2305      	movs	r3, #5
 8006e00:	e021      	b.n	8006e46 <HAL_GPIO_Init+0x25a>
 8006e02:	2304      	movs	r3, #4
 8006e04:	e01f      	b.n	8006e46 <HAL_GPIO_Init+0x25a>
 8006e06:	2303      	movs	r3, #3
 8006e08:	e01d      	b.n	8006e46 <HAL_GPIO_Init+0x25a>
 8006e0a:	2302      	movs	r3, #2
 8006e0c:	e01b      	b.n	8006e46 <HAL_GPIO_Init+0x25a>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e019      	b.n	8006e46 <HAL_GPIO_Init+0x25a>
 8006e12:	bf00      	nop
 8006e14:	58000080 	.word	0x58000080
 8006e18:	58024400 	.word	0x58024400
 8006e1c:	58000400 	.word	0x58000400
 8006e20:	58020000 	.word	0x58020000
 8006e24:	58020400 	.word	0x58020400
 8006e28:	58020800 	.word	0x58020800
 8006e2c:	58020c00 	.word	0x58020c00
 8006e30:	58021000 	.word	0x58021000
 8006e34:	58021400 	.word	0x58021400
 8006e38:	58021800 	.word	0x58021800
 8006e3c:	58021c00 	.word	0x58021c00
 8006e40:	58022400 	.word	0x58022400
 8006e44:	2300      	movs	r3, #0
 8006e46:	69fa      	ldr	r2, [r7, #28]
 8006e48:	f002 0203 	and.w	r2, r2, #3
 8006e4c:	0092      	lsls	r2, r2, #2
 8006e4e:	4093      	lsls	r3, r2
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e56:	4938      	ldr	r1, [pc, #224]	@ (8006f38 <HAL_GPIO_Init+0x34c>)
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	089b      	lsrs	r3, r3, #2
 8006e5c:	3302      	adds	r3, #2
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	43db      	mvns	r3, r3
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	4013      	ands	r3, r2
 8006e74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006e8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	43db      	mvns	r3, r3
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006eb0:	69ba      	ldr	r2, [r7, #24]
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006eb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	43db      	mvns	r3, r3
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	4013      	ands	r3, r2
 8006ece:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	43db      	mvns	r3, r3
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	3301      	adds	r3, #1
 8006f18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	fa22 f303 	lsr.w	r3, r2, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f47f ae6b 	bne.w	8006c00 <HAL_GPIO_Init+0x14>
  }
}
 8006f2a:	bf00      	nop
 8006f2c:	bf00      	nop
 8006f2e:	3724      	adds	r7, #36	@ 0x24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	58000400 	.word	0x58000400

08006f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	807b      	strh	r3, [r7, #2]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f4c:	787b      	ldrb	r3, [r7, #1]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f52:	887a      	ldrh	r2, [r7, #2]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006f58:	e003      	b.n	8006f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006f5a:	887b      	ldrh	r3, [r7, #2]
 8006f5c:	041a      	lsls	r2, r3, #16
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	619a      	str	r2, [r3, #24]
}
 8006f62:	bf00      	nop
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b082      	sub	sp, #8
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	4603      	mov	r3, r0
 8006f76:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006f80:	88fb      	ldrh	r3, [r7, #6]
 8006f82:	4013      	ands	r3, r2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d008      	beq.n	8006f9a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f8c:	88fb      	ldrh	r3, [r7, #6]
 8006f8e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f92:	88fb      	ldrh	r3, [r7, #6]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 f804 	bl	8006fa2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006f9a:	bf00      	nop
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	4603      	mov	r3, r0
 8006faa:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006fc0:	4b19      	ldr	r3, [pc, #100]	@ (8007028 <HAL_PWREx_ConfigSupply+0x70>)
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f003 0304 	and.w	r3, r3, #4
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d00a      	beq.n	8006fe2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006fcc:	4b16      	ldr	r3, [pc, #88]	@ (8007028 <HAL_PWREx_ConfigSupply+0x70>)
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	f003 0307 	and.w	r3, r3, #7
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d001      	beq.n	8006fde <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e01f      	b.n	800701e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e01d      	b.n	800701e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006fe2:	4b11      	ldr	r3, [pc, #68]	@ (8007028 <HAL_PWREx_ConfigSupply+0x70>)
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f023 0207 	bic.w	r2, r3, #7
 8006fea:	490f      	ldr	r1, [pc, #60]	@ (8007028 <HAL_PWREx_ConfigSupply+0x70>)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006ff2:	f7fa fd3d 	bl	8001a70 <HAL_GetTick>
 8006ff6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006ff8:	e009      	b.n	800700e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006ffa:	f7fa fd39 	bl	8001a70 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007008:	d901      	bls.n	800700e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e007      	b.n	800701e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800700e:	4b06      	ldr	r3, [pc, #24]	@ (8007028 <HAL_PWREx_ConfigSupply+0x70>)
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800701a:	d1ee      	bne.n	8006ffa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	58024800 	.word	0x58024800

0800702c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08c      	sub	sp, #48	@ 0x30
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e3c8      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	f000 8087 	beq.w	800715a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800704c:	4b88      	ldr	r3, [pc, #544]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007054:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007056:	4b86      	ldr	r3, [pc, #536]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 8007058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800705c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705e:	2b10      	cmp	r3, #16
 8007060:	d007      	beq.n	8007072 <HAL_RCC_OscConfig+0x46>
 8007062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007064:	2b18      	cmp	r3, #24
 8007066:	d110      	bne.n	800708a <HAL_RCC_OscConfig+0x5e>
 8007068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706a:	f003 0303 	and.w	r3, r3, #3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d10b      	bne.n	800708a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007072:	4b7f      	ldr	r3, [pc, #508]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d06c      	beq.n	8007158 <HAL_RCC_OscConfig+0x12c>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d168      	bne.n	8007158 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e3a2      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007092:	d106      	bne.n	80070a2 <HAL_RCC_OscConfig+0x76>
 8007094:	4b76      	ldr	r3, [pc, #472]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a75      	ldr	r2, [pc, #468]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 800709a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	e02e      	b.n	8007100 <HAL_RCC_OscConfig+0xd4>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10c      	bne.n	80070c4 <HAL_RCC_OscConfig+0x98>
 80070aa:	4b71      	ldr	r3, [pc, #452]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a70      	ldr	r2, [pc, #448]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 80070b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070b4:	6013      	str	r3, [r2, #0]
 80070b6:	4b6e      	ldr	r3, [pc, #440]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a6d      	ldr	r2, [pc, #436]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 80070bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	e01d      	b.n	8007100 <HAL_RCC_OscConfig+0xd4>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070cc:	d10c      	bne.n	80070e8 <HAL_RCC_OscConfig+0xbc>
 80070ce:	4b68      	ldr	r3, [pc, #416]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a67      	ldr	r2, [pc, #412]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 80070d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	4b65      	ldr	r3, [pc, #404]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a64      	ldr	r2, [pc, #400]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 80070e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	e00b      	b.n	8007100 <HAL_RCC_OscConfig+0xd4>
 80070e8:	4b61      	ldr	r3, [pc, #388]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a60      	ldr	r2, [pc, #384]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 80070ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	4b5e      	ldr	r3, [pc, #376]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a5d      	ldr	r2, [pc, #372]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 80070fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d013      	beq.n	8007130 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007108:	f7fa fcb2 	bl	8001a70 <HAL_GetTick>
 800710c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800710e:	e008      	b.n	8007122 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007110:	f7fa fcae 	bl	8001a70 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b64      	cmp	r3, #100	@ 0x64
 800711c:	d901      	bls.n	8007122 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e356      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007122:	4b53      	ldr	r3, [pc, #332]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0f0      	beq.n	8007110 <HAL_RCC_OscConfig+0xe4>
 800712e:	e014      	b.n	800715a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007130:	f7fa fc9e 	bl	8001a70 <HAL_GetTick>
 8007134:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007136:	e008      	b.n	800714a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007138:	f7fa fc9a 	bl	8001a70 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b64      	cmp	r3, #100	@ 0x64
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e342      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800714a:	4b49      	ldr	r3, [pc, #292]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1f0      	bne.n	8007138 <HAL_RCC_OscConfig+0x10c>
 8007156:	e000      	b.n	800715a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0302 	and.w	r3, r3, #2
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 808c 	beq.w	8007280 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007168:	4b41      	ldr	r3, [pc, #260]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007170:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007172:	4b3f      	ldr	r3, [pc, #252]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 8007174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007176:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d007      	beq.n	800718e <HAL_RCC_OscConfig+0x162>
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	2b18      	cmp	r3, #24
 8007182:	d137      	bne.n	80071f4 <HAL_RCC_OscConfig+0x1c8>
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d132      	bne.n	80071f4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800718e:	4b38      	ldr	r3, [pc, #224]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0304 	and.w	r3, r3, #4
 8007196:	2b00      	cmp	r3, #0
 8007198:	d005      	beq.n	80071a6 <HAL_RCC_OscConfig+0x17a>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e314      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80071a6:	4b32      	ldr	r3, [pc, #200]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f023 0219 	bic.w	r2, r3, #25
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	492f      	ldr	r1, [pc, #188]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b8:	f7fa fc5a 	bl	8001a70 <HAL_GetTick>
 80071bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071c0:	f7fa fc56 	bl	8001a70 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e2fe      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071d2:	4b27      	ldr	r3, [pc, #156]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0304 	and.w	r3, r3, #4
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0f0      	beq.n	80071c0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071de:	4b24      	ldr	r3, [pc, #144]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	061b      	lsls	r3, r3, #24
 80071ec:	4920      	ldr	r1, [pc, #128]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071f2:	e045      	b.n	8007280 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d026      	beq.n	800724a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80071fc:	4b1c      	ldr	r3, [pc, #112]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f023 0219 	bic.w	r2, r3, #25
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	4919      	ldr	r1, [pc, #100]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 800720a:	4313      	orrs	r3, r2
 800720c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800720e:	f7fa fc2f 	bl	8001a70 <HAL_GetTick>
 8007212:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007214:	e008      	b.n	8007228 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007216:	f7fa fc2b 	bl	8001a70 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	2b02      	cmp	r3, #2
 8007222:	d901      	bls.n	8007228 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e2d3      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007228:	4b11      	ldr	r3, [pc, #68]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	2b00      	cmp	r3, #0
 8007232:	d0f0      	beq.n	8007216 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007234:	4b0e      	ldr	r3, [pc, #56]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	061b      	lsls	r3, r3, #24
 8007242:	490b      	ldr	r1, [pc, #44]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 8007244:	4313      	orrs	r3, r2
 8007246:	604b      	str	r3, [r1, #4]
 8007248:	e01a      	b.n	8007280 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800724a:	4b09      	ldr	r3, [pc, #36]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a08      	ldr	r2, [pc, #32]	@ (8007270 <HAL_RCC_OscConfig+0x244>)
 8007250:	f023 0301 	bic.w	r3, r3, #1
 8007254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007256:	f7fa fc0b 	bl	8001a70 <HAL_GetTick>
 800725a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800725c:	e00a      	b.n	8007274 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800725e:	f7fa fc07 	bl	8001a70 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	2b02      	cmp	r3, #2
 800726a:	d903      	bls.n	8007274 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e2af      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
 8007270:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007274:	4b96      	ldr	r3, [pc, #600]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0304 	and.w	r3, r3, #4
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1ee      	bne.n	800725e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0310 	and.w	r3, r3, #16
 8007288:	2b00      	cmp	r3, #0
 800728a:	d06a      	beq.n	8007362 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800728c:	4b90      	ldr	r3, [pc, #576]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007294:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007296:	4b8e      	ldr	r3, [pc, #568]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 8007298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	2b08      	cmp	r3, #8
 80072a0:	d007      	beq.n	80072b2 <HAL_RCC_OscConfig+0x286>
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	2b18      	cmp	r3, #24
 80072a6:	d11b      	bne.n	80072e0 <HAL_RCC_OscConfig+0x2b4>
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f003 0303 	and.w	r3, r3, #3
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d116      	bne.n	80072e0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072b2:	4b87      	ldr	r3, [pc, #540]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d005      	beq.n	80072ca <HAL_RCC_OscConfig+0x29e>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	2b80      	cmp	r3, #128	@ 0x80
 80072c4:	d001      	beq.n	80072ca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e282      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072ca:	4b81      	ldr	r3, [pc, #516]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	061b      	lsls	r3, r3, #24
 80072d8:	497d      	ldr	r1, [pc, #500]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072de:	e040      	b.n	8007362 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	69db      	ldr	r3, [r3, #28]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d023      	beq.n	8007330 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80072e8:	4b79      	ldr	r3, [pc, #484]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a78      	ldr	r2, [pc, #480]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 80072ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f4:	f7fa fbbc 	bl	8001a70 <HAL_GetTick>
 80072f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072fa:	e008      	b.n	800730e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80072fc:	f7fa fbb8 	bl	8001a70 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b02      	cmp	r3, #2
 8007308:	d901      	bls.n	800730e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e260      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800730e:	4b70      	ldr	r3, [pc, #448]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0f0      	beq.n	80072fc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800731a:	4b6d      	ldr	r3, [pc, #436]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	061b      	lsls	r3, r3, #24
 8007328:	4969      	ldr	r1, [pc, #420]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 800732a:	4313      	orrs	r3, r2
 800732c:	60cb      	str	r3, [r1, #12]
 800732e:	e018      	b.n	8007362 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007330:	4b67      	ldr	r3, [pc, #412]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a66      	ldr	r2, [pc, #408]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 8007336:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800733a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733c:	f7fa fb98 	bl	8001a70 <HAL_GetTick>
 8007340:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007342:	e008      	b.n	8007356 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007344:	f7fa fb94 	bl	8001a70 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e23c      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007356:	4b5e      	ldr	r3, [pc, #376]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1f0      	bne.n	8007344 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0308 	and.w	r3, r3, #8
 800736a:	2b00      	cmp	r3, #0
 800736c:	d036      	beq.n	80073dc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d019      	beq.n	80073aa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007376:	4b56      	ldr	r3, [pc, #344]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 8007378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800737a:	4a55      	ldr	r2, [pc, #340]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 800737c:	f043 0301 	orr.w	r3, r3, #1
 8007380:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007382:	f7fa fb75 	bl	8001a70 <HAL_GetTick>
 8007386:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007388:	e008      	b.n	800739c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800738a:	f7fa fb71 	bl	8001a70 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d901      	bls.n	800739c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e219      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800739c:	4b4c      	ldr	r3, [pc, #304]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 800739e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0f0      	beq.n	800738a <HAL_RCC_OscConfig+0x35e>
 80073a8:	e018      	b.n	80073dc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073aa:	4b49      	ldr	r3, [pc, #292]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 80073ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ae:	4a48      	ldr	r2, [pc, #288]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 80073b0:	f023 0301 	bic.w	r3, r3, #1
 80073b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b6:	f7fa fb5b 	bl	8001a70 <HAL_GetTick>
 80073ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80073bc:	e008      	b.n	80073d0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073be:	f7fa fb57 	bl	8001a70 <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d901      	bls.n	80073d0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e1ff      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80073d0:	4b3f      	ldr	r3, [pc, #252]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 80073d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1f0      	bne.n	80073be <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0320 	and.w	r3, r3, #32
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d036      	beq.n	8007456 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d019      	beq.n	8007424 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80073f0:	4b37      	ldr	r3, [pc, #220]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a36      	ldr	r2, [pc, #216]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 80073f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80073fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80073fc:	f7fa fb38 	bl	8001a70 <HAL_GetTick>
 8007400:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007402:	e008      	b.n	8007416 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007404:	f7fa fb34 	bl	8001a70 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b02      	cmp	r3, #2
 8007410:	d901      	bls.n	8007416 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e1dc      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007416:	4b2e      	ldr	r3, [pc, #184]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d0f0      	beq.n	8007404 <HAL_RCC_OscConfig+0x3d8>
 8007422:	e018      	b.n	8007456 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007424:	4b2a      	ldr	r3, [pc, #168]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a29      	ldr	r2, [pc, #164]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 800742a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800742e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007430:	f7fa fb1e 	bl	8001a70 <HAL_GetTick>
 8007434:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007436:	e008      	b.n	800744a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007438:	f7fa fb1a 	bl	8001a70 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b02      	cmp	r3, #2
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e1c2      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800744a:	4b21      	ldr	r3, [pc, #132]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1f0      	bne.n	8007438 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0304 	and.w	r3, r3, #4
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 8086 	beq.w	8007570 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007464:	4b1b      	ldr	r3, [pc, #108]	@ (80074d4 <HAL_RCC_OscConfig+0x4a8>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a1a      	ldr	r2, [pc, #104]	@ (80074d4 <HAL_RCC_OscConfig+0x4a8>)
 800746a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800746e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007470:	f7fa fafe 	bl	8001a70 <HAL_GetTick>
 8007474:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007476:	e008      	b.n	800748a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007478:	f7fa fafa 	bl	8001a70 <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	2b64      	cmp	r3, #100	@ 0x64
 8007484:	d901      	bls.n	800748a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e1a2      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800748a:	4b12      	ldr	r3, [pc, #72]	@ (80074d4 <HAL_RCC_OscConfig+0x4a8>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0f0      	beq.n	8007478 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d106      	bne.n	80074ac <HAL_RCC_OscConfig+0x480>
 800749e:	4b0c      	ldr	r3, [pc, #48]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 80074a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074a2:	4a0b      	ldr	r2, [pc, #44]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 80074a4:	f043 0301 	orr.w	r3, r3, #1
 80074a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80074aa:	e032      	b.n	8007512 <HAL_RCC_OscConfig+0x4e6>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d111      	bne.n	80074d8 <HAL_RCC_OscConfig+0x4ac>
 80074b4:	4b06      	ldr	r3, [pc, #24]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 80074b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b8:	4a05      	ldr	r2, [pc, #20]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 80074ba:	f023 0301 	bic.w	r3, r3, #1
 80074be:	6713      	str	r3, [r2, #112]	@ 0x70
 80074c0:	4b03      	ldr	r3, [pc, #12]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 80074c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074c4:	4a02      	ldr	r2, [pc, #8]	@ (80074d0 <HAL_RCC_OscConfig+0x4a4>)
 80074c6:	f023 0304 	bic.w	r3, r3, #4
 80074ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80074cc:	e021      	b.n	8007512 <HAL_RCC_OscConfig+0x4e6>
 80074ce:	bf00      	nop
 80074d0:	58024400 	.word	0x58024400
 80074d4:	58024800 	.word	0x58024800
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	2b05      	cmp	r3, #5
 80074de:	d10c      	bne.n	80074fa <HAL_RCC_OscConfig+0x4ce>
 80074e0:	4b83      	ldr	r3, [pc, #524]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 80074e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074e4:	4a82      	ldr	r2, [pc, #520]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 80074e6:	f043 0304 	orr.w	r3, r3, #4
 80074ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80074ec:	4b80      	ldr	r3, [pc, #512]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 80074ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074f0:	4a7f      	ldr	r2, [pc, #508]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 80074f2:	f043 0301 	orr.w	r3, r3, #1
 80074f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80074f8:	e00b      	b.n	8007512 <HAL_RCC_OscConfig+0x4e6>
 80074fa:	4b7d      	ldr	r3, [pc, #500]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 80074fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074fe:	4a7c      	ldr	r2, [pc, #496]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 8007500:	f023 0301 	bic.w	r3, r3, #1
 8007504:	6713      	str	r3, [r2, #112]	@ 0x70
 8007506:	4b7a      	ldr	r3, [pc, #488]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 8007508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800750a:	4a79      	ldr	r2, [pc, #484]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 800750c:	f023 0304 	bic.w	r3, r3, #4
 8007510:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d015      	beq.n	8007546 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800751a:	f7fa faa9 	bl	8001a70 <HAL_GetTick>
 800751e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007520:	e00a      	b.n	8007538 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007522:	f7fa faa5 	bl	8001a70 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007530:	4293      	cmp	r3, r2
 8007532:	d901      	bls.n	8007538 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e14b      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007538:	4b6d      	ldr	r3, [pc, #436]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 800753a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800753c:	f003 0302 	and.w	r3, r3, #2
 8007540:	2b00      	cmp	r3, #0
 8007542:	d0ee      	beq.n	8007522 <HAL_RCC_OscConfig+0x4f6>
 8007544:	e014      	b.n	8007570 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007546:	f7fa fa93 	bl	8001a70 <HAL_GetTick>
 800754a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800754c:	e00a      	b.n	8007564 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800754e:	f7fa fa8f 	bl	8001a70 <HAL_GetTick>
 8007552:	4602      	mov	r2, r0
 8007554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800755c:	4293      	cmp	r3, r2
 800755e:	d901      	bls.n	8007564 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e135      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007564:	4b62      	ldr	r3, [pc, #392]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 8007566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1ee      	bne.n	800754e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 812a 	beq.w	80077ce <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800757a:	4b5d      	ldr	r3, [pc, #372]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007582:	2b18      	cmp	r3, #24
 8007584:	f000 80ba 	beq.w	80076fc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800758c:	2b02      	cmp	r3, #2
 800758e:	f040 8095 	bne.w	80076bc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007592:	4b57      	ldr	r3, [pc, #348]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a56      	ldr	r2, [pc, #344]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 8007598:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800759c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800759e:	f7fa fa67 	bl	8001a70 <HAL_GetTick>
 80075a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075a4:	e008      	b.n	80075b8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075a6:	f7fa fa63 	bl	8001a70 <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d901      	bls.n	80075b8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e10b      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075b8:	4b4d      	ldr	r3, [pc, #308]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1f0      	bne.n	80075a6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075c4:	4b4a      	ldr	r3, [pc, #296]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 80075c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075c8:	4b4a      	ldr	r3, [pc, #296]	@ (80076f4 <HAL_RCC_OscConfig+0x6c8>)
 80075ca:	4013      	ands	r3, r2
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80075d4:	0112      	lsls	r2, r2, #4
 80075d6:	430a      	orrs	r2, r1
 80075d8:	4945      	ldr	r1, [pc, #276]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	628b      	str	r3, [r1, #40]	@ 0x28
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e2:	3b01      	subs	r3, #1
 80075e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ec:	3b01      	subs	r3, #1
 80075ee:	025b      	lsls	r3, r3, #9
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	431a      	orrs	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f8:	3b01      	subs	r3, #1
 80075fa:	041b      	lsls	r3, r3, #16
 80075fc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007600:	431a      	orrs	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007606:	3b01      	subs	r3, #1
 8007608:	061b      	lsls	r3, r3, #24
 800760a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800760e:	4938      	ldr	r1, [pc, #224]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 8007610:	4313      	orrs	r3, r2
 8007612:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007614:	4b36      	ldr	r3, [pc, #216]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 8007616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007618:	4a35      	ldr	r2, [pc, #212]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 800761a:	f023 0301 	bic.w	r3, r3, #1
 800761e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007620:	4b33      	ldr	r3, [pc, #204]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 8007622:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007624:	4b34      	ldr	r3, [pc, #208]	@ (80076f8 <HAL_RCC_OscConfig+0x6cc>)
 8007626:	4013      	ands	r3, r2
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800762c:	00d2      	lsls	r2, r2, #3
 800762e:	4930      	ldr	r1, [pc, #192]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 8007630:	4313      	orrs	r3, r2
 8007632:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007634:	4b2e      	ldr	r3, [pc, #184]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 8007636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007638:	f023 020c 	bic.w	r2, r3, #12
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007640:	492b      	ldr	r1, [pc, #172]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 8007642:	4313      	orrs	r3, r2
 8007644:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007646:	4b2a      	ldr	r3, [pc, #168]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 8007648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764a:	f023 0202 	bic.w	r2, r3, #2
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007652:	4927      	ldr	r1, [pc, #156]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 8007654:	4313      	orrs	r3, r2
 8007656:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007658:	4b25      	ldr	r3, [pc, #148]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 800765a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765c:	4a24      	ldr	r2, [pc, #144]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 800765e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007664:	4b22      	ldr	r3, [pc, #136]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 8007666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007668:	4a21      	ldr	r2, [pc, #132]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 800766a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800766e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007670:	4b1f      	ldr	r3, [pc, #124]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 8007672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007674:	4a1e      	ldr	r2, [pc, #120]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 8007676:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800767a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800767c:	4b1c      	ldr	r3, [pc, #112]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 800767e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007680:	4a1b      	ldr	r2, [pc, #108]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 8007682:	f043 0301 	orr.w	r3, r3, #1
 8007686:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007688:	4b19      	ldr	r3, [pc, #100]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a18      	ldr	r2, [pc, #96]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 800768e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007694:	f7fa f9ec 	bl	8001a70 <HAL_GetTick>
 8007698:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800769a:	e008      	b.n	80076ae <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800769c:	f7fa f9e8 	bl	8001a70 <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d901      	bls.n	80076ae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e090      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076ae:	4b10      	ldr	r3, [pc, #64]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d0f0      	beq.n	800769c <HAL_RCC_OscConfig+0x670>
 80076ba:	e088      	b.n	80077ce <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076bc:	4b0c      	ldr	r3, [pc, #48]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a0b      	ldr	r2, [pc, #44]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 80076c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076c8:	f7fa f9d2 	bl	8001a70 <HAL_GetTick>
 80076cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80076ce:	e008      	b.n	80076e2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076d0:	f7fa f9ce 	bl	8001a70 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d901      	bls.n	80076e2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e076      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80076e2:	4b03      	ldr	r3, [pc, #12]	@ (80076f0 <HAL_RCC_OscConfig+0x6c4>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1f0      	bne.n	80076d0 <HAL_RCC_OscConfig+0x6a4>
 80076ee:	e06e      	b.n	80077ce <HAL_RCC_OscConfig+0x7a2>
 80076f0:	58024400 	.word	0x58024400
 80076f4:	fffffc0c 	.word	0xfffffc0c
 80076f8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80076fc:	4b36      	ldr	r3, [pc, #216]	@ (80077d8 <HAL_RCC_OscConfig+0x7ac>)
 80076fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007700:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007702:	4b35      	ldr	r3, [pc, #212]	@ (80077d8 <HAL_RCC_OscConfig+0x7ac>)
 8007704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007706:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770c:	2b01      	cmp	r3, #1
 800770e:	d031      	beq.n	8007774 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	f003 0203 	and.w	r2, r3, #3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800771a:	429a      	cmp	r2, r3
 800771c:	d12a      	bne.n	8007774 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	091b      	lsrs	r3, r3, #4
 8007722:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800772a:	429a      	cmp	r2, r3
 800772c:	d122      	bne.n	8007774 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007738:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800773a:	429a      	cmp	r2, r3
 800773c:	d11a      	bne.n	8007774 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	0a5b      	lsrs	r3, r3, #9
 8007742:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800774a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800774c:	429a      	cmp	r2, r3
 800774e:	d111      	bne.n	8007774 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	0c1b      	lsrs	r3, r3, #16
 8007754:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800775e:	429a      	cmp	r2, r3
 8007760:	d108      	bne.n	8007774 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	0e1b      	lsrs	r3, r3, #24
 8007766:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800776e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007770:	429a      	cmp	r2, r3
 8007772:	d001      	beq.n	8007778 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e02b      	b.n	80077d0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007778:	4b17      	ldr	r3, [pc, #92]	@ (80077d8 <HAL_RCC_OscConfig+0x7ac>)
 800777a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800777c:	08db      	lsrs	r3, r3, #3
 800777e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007782:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	429a      	cmp	r2, r3
 800778c:	d01f      	beq.n	80077ce <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800778e:	4b12      	ldr	r3, [pc, #72]	@ (80077d8 <HAL_RCC_OscConfig+0x7ac>)
 8007790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007792:	4a11      	ldr	r2, [pc, #68]	@ (80077d8 <HAL_RCC_OscConfig+0x7ac>)
 8007794:	f023 0301 	bic.w	r3, r3, #1
 8007798:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800779a:	f7fa f969 	bl	8001a70 <HAL_GetTick>
 800779e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80077a0:	bf00      	nop
 80077a2:	f7fa f965 	bl	8001a70 <HAL_GetTick>
 80077a6:	4602      	mov	r2, r0
 80077a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d0f9      	beq.n	80077a2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80077ae:	4b0a      	ldr	r3, [pc, #40]	@ (80077d8 <HAL_RCC_OscConfig+0x7ac>)
 80077b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077b2:	4b0a      	ldr	r3, [pc, #40]	@ (80077dc <HAL_RCC_OscConfig+0x7b0>)
 80077b4:	4013      	ands	r3, r2
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80077ba:	00d2      	lsls	r2, r2, #3
 80077bc:	4906      	ldr	r1, [pc, #24]	@ (80077d8 <HAL_RCC_OscConfig+0x7ac>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80077c2:	4b05      	ldr	r3, [pc, #20]	@ (80077d8 <HAL_RCC_OscConfig+0x7ac>)
 80077c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c6:	4a04      	ldr	r2, [pc, #16]	@ (80077d8 <HAL_RCC_OscConfig+0x7ac>)
 80077c8:	f043 0301 	orr.w	r3, r3, #1
 80077cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3730      	adds	r7, #48	@ 0x30
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	58024400 	.word	0x58024400
 80077dc:	ffff0007 	.word	0xffff0007

080077e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e19c      	b.n	8007b2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077f4:	4b8a      	ldr	r3, [pc, #552]	@ (8007a20 <HAL_RCC_ClockConfig+0x240>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 030f 	and.w	r3, r3, #15
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d910      	bls.n	8007824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007802:	4b87      	ldr	r3, [pc, #540]	@ (8007a20 <HAL_RCC_ClockConfig+0x240>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f023 020f 	bic.w	r2, r3, #15
 800780a:	4985      	ldr	r1, [pc, #532]	@ (8007a20 <HAL_RCC_ClockConfig+0x240>)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	4313      	orrs	r3, r2
 8007810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007812:	4b83      	ldr	r3, [pc, #524]	@ (8007a20 <HAL_RCC_ClockConfig+0x240>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 030f 	and.w	r3, r3, #15
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	429a      	cmp	r2, r3
 800781e:	d001      	beq.n	8007824 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e184      	b.n	8007b2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	2b00      	cmp	r3, #0
 800782e:	d010      	beq.n	8007852 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691a      	ldr	r2, [r3, #16]
 8007834:	4b7b      	ldr	r3, [pc, #492]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800783c:	429a      	cmp	r2, r3
 800783e:	d908      	bls.n	8007852 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007840:	4b78      	ldr	r3, [pc, #480]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	4975      	ldr	r1, [pc, #468]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 800784e:	4313      	orrs	r3, r2
 8007850:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0308 	and.w	r3, r3, #8
 800785a:	2b00      	cmp	r3, #0
 800785c:	d010      	beq.n	8007880 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	695a      	ldr	r2, [r3, #20]
 8007862:	4b70      	ldr	r3, [pc, #448]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800786a:	429a      	cmp	r2, r3
 800786c:	d908      	bls.n	8007880 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800786e:	4b6d      	ldr	r3, [pc, #436]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	496a      	ldr	r1, [pc, #424]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 800787c:	4313      	orrs	r3, r2
 800787e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0310 	and.w	r3, r3, #16
 8007888:	2b00      	cmp	r3, #0
 800788a:	d010      	beq.n	80078ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	699a      	ldr	r2, [r3, #24]
 8007890:	4b64      	ldr	r3, [pc, #400]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007898:	429a      	cmp	r2, r3
 800789a:	d908      	bls.n	80078ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800789c:	4b61      	ldr	r3, [pc, #388]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	495e      	ldr	r1, [pc, #376]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0320 	and.w	r3, r3, #32
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d010      	beq.n	80078dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	69da      	ldr	r2, [r3, #28]
 80078be:	4b59      	ldr	r3, [pc, #356]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d908      	bls.n	80078dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80078ca:	4b56      	ldr	r3, [pc, #344]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	4953      	ldr	r1, [pc, #332]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 80078d8:	4313      	orrs	r3, r2
 80078da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0302 	and.w	r3, r3, #2
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d010      	beq.n	800790a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	4b4d      	ldr	r3, [pc, #308]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	f003 030f 	and.w	r3, r3, #15
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d908      	bls.n	800790a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078f8:	4b4a      	ldr	r3, [pc, #296]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	f023 020f 	bic.w	r2, r3, #15
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	4947      	ldr	r1, [pc, #284]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 8007906:	4313      	orrs	r3, r2
 8007908:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b00      	cmp	r3, #0
 8007914:	d055      	beq.n	80079c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007916:	4b43      	ldr	r3, [pc, #268]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	4940      	ldr	r1, [pc, #256]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 8007924:	4313      	orrs	r3, r2
 8007926:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	2b02      	cmp	r3, #2
 800792e:	d107      	bne.n	8007940 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007930:	4b3c      	ldr	r3, [pc, #240]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d121      	bne.n	8007980 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e0f6      	b.n	8007b2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	2b03      	cmp	r3, #3
 8007946:	d107      	bne.n	8007958 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007948:	4b36      	ldr	r3, [pc, #216]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d115      	bne.n	8007980 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e0ea      	b.n	8007b2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d107      	bne.n	8007970 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007960:	4b30      	ldr	r3, [pc, #192]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007968:	2b00      	cmp	r3, #0
 800796a:	d109      	bne.n	8007980 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e0de      	b.n	8007b2e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007970:	4b2c      	ldr	r3, [pc, #176]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0304 	and.w	r3, r3, #4
 8007978:	2b00      	cmp	r3, #0
 800797a:	d101      	bne.n	8007980 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	e0d6      	b.n	8007b2e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007980:	4b28      	ldr	r3, [pc, #160]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	f023 0207 	bic.w	r2, r3, #7
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	4925      	ldr	r1, [pc, #148]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 800798e:	4313      	orrs	r3, r2
 8007990:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007992:	f7fa f86d 	bl	8001a70 <HAL_GetTick>
 8007996:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007998:	e00a      	b.n	80079b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800799a:	f7fa f869 	bl	8001a70 <HAL_GetTick>
 800799e:	4602      	mov	r2, r0
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d901      	bls.n	80079b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e0be      	b.n	8007b2e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079b0:	4b1c      	ldr	r3, [pc, #112]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	00db      	lsls	r3, r3, #3
 80079be:	429a      	cmp	r2, r3
 80079c0:	d1eb      	bne.n	800799a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0302 	and.w	r3, r3, #2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d010      	beq.n	80079f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68da      	ldr	r2, [r3, #12]
 80079d2:	4b14      	ldr	r3, [pc, #80]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	429a      	cmp	r2, r3
 80079dc:	d208      	bcs.n	80079f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079de:	4b11      	ldr	r3, [pc, #68]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	f023 020f 	bic.w	r2, r3, #15
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	490e      	ldr	r1, [pc, #56]	@ (8007a24 <HAL_RCC_ClockConfig+0x244>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80079f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007a20 <HAL_RCC_ClockConfig+0x240>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 030f 	and.w	r3, r3, #15
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d214      	bcs.n	8007a28 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079fe:	4b08      	ldr	r3, [pc, #32]	@ (8007a20 <HAL_RCC_ClockConfig+0x240>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f023 020f 	bic.w	r2, r3, #15
 8007a06:	4906      	ldr	r1, [pc, #24]	@ (8007a20 <HAL_RCC_ClockConfig+0x240>)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a0e:	4b04      	ldr	r3, [pc, #16]	@ (8007a20 <HAL_RCC_ClockConfig+0x240>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d005      	beq.n	8007a28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e086      	b.n	8007b2e <HAL_RCC_ClockConfig+0x34e>
 8007a20:	52002000 	.word	0x52002000
 8007a24:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0304 	and.w	r3, r3, #4
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d010      	beq.n	8007a56 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	691a      	ldr	r2, [r3, #16]
 8007a38:	4b3f      	ldr	r3, [pc, #252]	@ (8007b38 <HAL_RCC_ClockConfig+0x358>)
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d208      	bcs.n	8007a56 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a44:	4b3c      	ldr	r3, [pc, #240]	@ (8007b38 <HAL_RCC_ClockConfig+0x358>)
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	4939      	ldr	r1, [pc, #228]	@ (8007b38 <HAL_RCC_ClockConfig+0x358>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0308 	and.w	r3, r3, #8
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d010      	beq.n	8007a84 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	695a      	ldr	r2, [r3, #20]
 8007a66:	4b34      	ldr	r3, [pc, #208]	@ (8007b38 <HAL_RCC_ClockConfig+0x358>)
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d208      	bcs.n	8007a84 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a72:	4b31      	ldr	r3, [pc, #196]	@ (8007b38 <HAL_RCC_ClockConfig+0x358>)
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	492e      	ldr	r1, [pc, #184]	@ (8007b38 <HAL_RCC_ClockConfig+0x358>)
 8007a80:	4313      	orrs	r3, r2
 8007a82:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0310 	and.w	r3, r3, #16
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d010      	beq.n	8007ab2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	699a      	ldr	r2, [r3, #24]
 8007a94:	4b28      	ldr	r3, [pc, #160]	@ (8007b38 <HAL_RCC_ClockConfig+0x358>)
 8007a96:	69db      	ldr	r3, [r3, #28]
 8007a98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d208      	bcs.n	8007ab2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007aa0:	4b25      	ldr	r3, [pc, #148]	@ (8007b38 <HAL_RCC_ClockConfig+0x358>)
 8007aa2:	69db      	ldr	r3, [r3, #28]
 8007aa4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	4922      	ldr	r1, [pc, #136]	@ (8007b38 <HAL_RCC_ClockConfig+0x358>)
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0320 	and.w	r3, r3, #32
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d010      	beq.n	8007ae0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	69da      	ldr	r2, [r3, #28]
 8007ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8007b38 <HAL_RCC_ClockConfig+0x358>)
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d208      	bcs.n	8007ae0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007ace:	4b1a      	ldr	r3, [pc, #104]	@ (8007b38 <HAL_RCC_ClockConfig+0x358>)
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	4917      	ldr	r1, [pc, #92]	@ (8007b38 <HAL_RCC_ClockConfig+0x358>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007ae0:	f000 f834 	bl	8007b4c <HAL_RCC_GetSysClockFreq>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	4b14      	ldr	r3, [pc, #80]	@ (8007b38 <HAL_RCC_ClockConfig+0x358>)
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	0a1b      	lsrs	r3, r3, #8
 8007aec:	f003 030f 	and.w	r3, r3, #15
 8007af0:	4912      	ldr	r1, [pc, #72]	@ (8007b3c <HAL_RCC_ClockConfig+0x35c>)
 8007af2:	5ccb      	ldrb	r3, [r1, r3]
 8007af4:	f003 031f 	and.w	r3, r3, #31
 8007af8:	fa22 f303 	lsr.w	r3, r2, r3
 8007afc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007afe:	4b0e      	ldr	r3, [pc, #56]	@ (8007b38 <HAL_RCC_ClockConfig+0x358>)
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	f003 030f 	and.w	r3, r3, #15
 8007b06:	4a0d      	ldr	r2, [pc, #52]	@ (8007b3c <HAL_RCC_ClockConfig+0x35c>)
 8007b08:	5cd3      	ldrb	r3, [r2, r3]
 8007b0a:	f003 031f 	and.w	r3, r3, #31
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	fa22 f303 	lsr.w	r3, r2, r3
 8007b14:	4a0a      	ldr	r2, [pc, #40]	@ (8007b40 <HAL_RCC_ClockConfig+0x360>)
 8007b16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b18:	4a0a      	ldr	r2, [pc, #40]	@ (8007b44 <HAL_RCC_ClockConfig+0x364>)
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b48 <HAL_RCC_ClockConfig+0x368>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7f9 fb0a 	bl	800113c <HAL_InitTick>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3718      	adds	r7, #24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	58024400 	.word	0x58024400
 8007b3c:	08010b08 	.word	0x08010b08
 8007b40:	24000004 	.word	0x24000004
 8007b44:	24000000 	.word	0x24000000
 8007b48:	24000008 	.word	0x24000008

08007b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b089      	sub	sp, #36	@ 0x24
 8007b50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b52:	4bb3      	ldr	r3, [pc, #716]	@ (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b5a:	2b18      	cmp	r3, #24
 8007b5c:	f200 8155 	bhi.w	8007e0a <HAL_RCC_GetSysClockFreq+0x2be>
 8007b60:	a201      	add	r2, pc, #4	@ (adr r2, 8007b68 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b66:	bf00      	nop
 8007b68:	08007bcd 	.word	0x08007bcd
 8007b6c:	08007e0b 	.word	0x08007e0b
 8007b70:	08007e0b 	.word	0x08007e0b
 8007b74:	08007e0b 	.word	0x08007e0b
 8007b78:	08007e0b 	.word	0x08007e0b
 8007b7c:	08007e0b 	.word	0x08007e0b
 8007b80:	08007e0b 	.word	0x08007e0b
 8007b84:	08007e0b 	.word	0x08007e0b
 8007b88:	08007bf3 	.word	0x08007bf3
 8007b8c:	08007e0b 	.word	0x08007e0b
 8007b90:	08007e0b 	.word	0x08007e0b
 8007b94:	08007e0b 	.word	0x08007e0b
 8007b98:	08007e0b 	.word	0x08007e0b
 8007b9c:	08007e0b 	.word	0x08007e0b
 8007ba0:	08007e0b 	.word	0x08007e0b
 8007ba4:	08007e0b 	.word	0x08007e0b
 8007ba8:	08007bf9 	.word	0x08007bf9
 8007bac:	08007e0b 	.word	0x08007e0b
 8007bb0:	08007e0b 	.word	0x08007e0b
 8007bb4:	08007e0b 	.word	0x08007e0b
 8007bb8:	08007e0b 	.word	0x08007e0b
 8007bbc:	08007e0b 	.word	0x08007e0b
 8007bc0:	08007e0b 	.word	0x08007e0b
 8007bc4:	08007e0b 	.word	0x08007e0b
 8007bc8:	08007bff 	.word	0x08007bff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bcc:	4b94      	ldr	r3, [pc, #592]	@ (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0320 	and.w	r3, r3, #32
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d009      	beq.n	8007bec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bd8:	4b91      	ldr	r3, [pc, #580]	@ (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	08db      	lsrs	r3, r3, #3
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	4a90      	ldr	r2, [pc, #576]	@ (8007e24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007be4:	fa22 f303 	lsr.w	r3, r2, r3
 8007be8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007bea:	e111      	b.n	8007e10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007bec:	4b8d      	ldr	r3, [pc, #564]	@ (8007e24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007bee:	61bb      	str	r3, [r7, #24]
      break;
 8007bf0:	e10e      	b.n	8007e10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007bf2:	4b8d      	ldr	r3, [pc, #564]	@ (8007e28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007bf4:	61bb      	str	r3, [r7, #24]
      break;
 8007bf6:	e10b      	b.n	8007e10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007bf8:	4b8c      	ldr	r3, [pc, #560]	@ (8007e2c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007bfa:	61bb      	str	r3, [r7, #24]
      break;
 8007bfc:	e108      	b.n	8007e10 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bfe:	4b88      	ldr	r3, [pc, #544]	@ (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c02:	f003 0303 	and.w	r3, r3, #3
 8007c06:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007c08:	4b85      	ldr	r3, [pc, #532]	@ (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c0c:	091b      	lsrs	r3, r3, #4
 8007c0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c12:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007c14:	4b82      	ldr	r3, [pc, #520]	@ (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007c1e:	4b80      	ldr	r3, [pc, #512]	@ (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c22:	08db      	lsrs	r3, r3, #3
 8007c24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	fb02 f303 	mul.w	r3, r2, r3
 8007c2e:	ee07 3a90 	vmov	s15, r3
 8007c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c36:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 80e1 	beq.w	8007e04 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	f000 8083 	beq.w	8007d50 <HAL_RCC_GetSysClockFreq+0x204>
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	f200 80a1 	bhi.w	8007d94 <HAL_RCC_GetSysClockFreq+0x248>
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <HAL_RCC_GetSysClockFreq+0x114>
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d056      	beq.n	8007d0c <HAL_RCC_GetSysClockFreq+0x1c0>
 8007c5e:	e099      	b.n	8007d94 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c60:	4b6f      	ldr	r3, [pc, #444]	@ (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0320 	and.w	r3, r3, #32
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d02d      	beq.n	8007cc8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c6c:	4b6c      	ldr	r3, [pc, #432]	@ (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	08db      	lsrs	r3, r3, #3
 8007c72:	f003 0303 	and.w	r3, r3, #3
 8007c76:	4a6b      	ldr	r2, [pc, #428]	@ (8007e24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c78:	fa22 f303 	lsr.w	r3, r2, r3
 8007c7c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	ee07 3a90 	vmov	s15, r3
 8007c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	ee07 3a90 	vmov	s15, r3
 8007c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c96:	4b62      	ldr	r3, [pc, #392]	@ (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c9e:	ee07 3a90 	vmov	s15, r3
 8007ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007caa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007e30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cc2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007cc6:	e087      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	ee07 3a90 	vmov	s15, r3
 8007cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007e34 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cda:	4b51      	ldr	r3, [pc, #324]	@ (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce2:	ee07 3a90 	vmov	s15, r3
 8007ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cea:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007e30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d0a:	e065      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	ee07 3a90 	vmov	s15, r3
 8007d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d16:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007e38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d1e:	4b40      	ldr	r3, [pc, #256]	@ (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d32:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007e30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d4e:	e043      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	ee07 3a90 	vmov	s15, r3
 8007d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d5a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007e3c <HAL_RCC_GetSysClockFreq+0x2f0>
 8007d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d62:	4b2f      	ldr	r3, [pc, #188]	@ (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d6a:	ee07 3a90 	vmov	s15, r3
 8007d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d72:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d76:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007e30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d92:	e021      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	ee07 3a90 	vmov	s15, r3
 8007d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d9e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007e38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007da6:	4b1e      	ldr	r3, [pc, #120]	@ (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dae:	ee07 3a90 	vmov	s15, r3
 8007db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007db6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007e30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007dd6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007dd8:	4b11      	ldr	r3, [pc, #68]	@ (8007e20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ddc:	0a5b      	lsrs	r3, r3, #9
 8007dde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007de2:	3301      	adds	r3, #1
 8007de4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	ee07 3a90 	vmov	s15, r3
 8007dec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007df0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007df4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007df8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dfc:	ee17 3a90 	vmov	r3, s15
 8007e00:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007e02:	e005      	b.n	8007e10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007e04:	2300      	movs	r3, #0
 8007e06:	61bb      	str	r3, [r7, #24]
      break;
 8007e08:	e002      	b.n	8007e10 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007e0a:	4b07      	ldr	r3, [pc, #28]	@ (8007e28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e0c:	61bb      	str	r3, [r7, #24]
      break;
 8007e0e:	bf00      	nop
  }

  return sysclockfreq;
 8007e10:	69bb      	ldr	r3, [r7, #24]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3724      	adds	r7, #36	@ 0x24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	58024400 	.word	0x58024400
 8007e24:	03d09000 	.word	0x03d09000
 8007e28:	003d0900 	.word	0x003d0900
 8007e2c:	017d7840 	.word	0x017d7840
 8007e30:	46000000 	.word	0x46000000
 8007e34:	4c742400 	.word	0x4c742400
 8007e38:	4a742400 	.word	0x4a742400
 8007e3c:	4bbebc20 	.word	0x4bbebc20

08007e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007e46:	f7ff fe81 	bl	8007b4c <HAL_RCC_GetSysClockFreq>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	4b10      	ldr	r3, [pc, #64]	@ (8007e90 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	0a1b      	lsrs	r3, r3, #8
 8007e52:	f003 030f 	and.w	r3, r3, #15
 8007e56:	490f      	ldr	r1, [pc, #60]	@ (8007e94 <HAL_RCC_GetHCLKFreq+0x54>)
 8007e58:	5ccb      	ldrb	r3, [r1, r3]
 8007e5a:	f003 031f 	and.w	r3, r3, #31
 8007e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e64:	4b0a      	ldr	r3, [pc, #40]	@ (8007e90 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	f003 030f 	and.w	r3, r3, #15
 8007e6c:	4a09      	ldr	r2, [pc, #36]	@ (8007e94 <HAL_RCC_GetHCLKFreq+0x54>)
 8007e6e:	5cd3      	ldrb	r3, [r2, r3]
 8007e70:	f003 031f 	and.w	r3, r3, #31
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	fa22 f303 	lsr.w	r3, r2, r3
 8007e7a:	4a07      	ldr	r2, [pc, #28]	@ (8007e98 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e7c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e7e:	4a07      	ldr	r2, [pc, #28]	@ (8007e9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007e84:	4b04      	ldr	r3, [pc, #16]	@ (8007e98 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e86:	681b      	ldr	r3, [r3, #0]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	58024400 	.word	0x58024400
 8007e94:	08010b08 	.word	0x08010b08
 8007e98:	24000004 	.word	0x24000004
 8007e9c:	24000000 	.word	0x24000000

08007ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007ea4:	f7ff ffcc 	bl	8007e40 <HAL_RCC_GetHCLKFreq>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	4b06      	ldr	r3, [pc, #24]	@ (8007ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	091b      	lsrs	r3, r3, #4
 8007eb0:	f003 0307 	and.w	r3, r3, #7
 8007eb4:	4904      	ldr	r1, [pc, #16]	@ (8007ec8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007eb6:	5ccb      	ldrb	r3, [r1, r3]
 8007eb8:	f003 031f 	and.w	r3, r3, #31
 8007ebc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	58024400 	.word	0x58024400
 8007ec8:	08010b08 	.word	0x08010b08

08007ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007ed0:	f7ff ffb6 	bl	8007e40 <HAL_RCC_GetHCLKFreq>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	4b06      	ldr	r3, [pc, #24]	@ (8007ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	0a1b      	lsrs	r3, r3, #8
 8007edc:	f003 0307 	and.w	r3, r3, #7
 8007ee0:	4904      	ldr	r1, [pc, #16]	@ (8007ef4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007ee2:	5ccb      	ldrb	r3, [r1, r3]
 8007ee4:	f003 031f 	and.w	r3, r3, #31
 8007ee8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	58024400 	.word	0x58024400
 8007ef4:	08010b08 	.word	0x08010b08

08007ef8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	223f      	movs	r2, #63	@ 0x3f
 8007f06:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007f08:	4b1a      	ldr	r3, [pc, #104]	@ (8007f74 <HAL_RCC_GetClockConfig+0x7c>)
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	f003 0207 	and.w	r2, r3, #7
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007f14:	4b17      	ldr	r3, [pc, #92]	@ (8007f74 <HAL_RCC_GetClockConfig+0x7c>)
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007f20:	4b14      	ldr	r3, [pc, #80]	@ (8007f74 <HAL_RCC_GetClockConfig+0x7c>)
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	f003 020f 	and.w	r2, r3, #15
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007f2c:	4b11      	ldr	r3, [pc, #68]	@ (8007f74 <HAL_RCC_GetClockConfig+0x7c>)
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007f38:	4b0e      	ldr	r3, [pc, #56]	@ (8007f74 <HAL_RCC_GetClockConfig+0x7c>)
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007f44:	4b0b      	ldr	r3, [pc, #44]	@ (8007f74 <HAL_RCC_GetClockConfig+0x7c>)
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007f50:	4b08      	ldr	r3, [pc, #32]	@ (8007f74 <HAL_RCC_GetClockConfig+0x7c>)
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f5c:	4b06      	ldr	r3, [pc, #24]	@ (8007f78 <HAL_RCC_GetClockConfig+0x80>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 020f 	and.w	r2, r3, #15
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	601a      	str	r2, [r3, #0]
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr
 8007f74:	58024400 	.word	0x58024400
 8007f78:	52002000 	.word	0x52002000

08007f7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f80:	b0c6      	sub	sp, #280	@ 0x118
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f88:	2300      	movs	r3, #0
 8007f8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007fa0:	2500      	movs	r5, #0
 8007fa2:	ea54 0305 	orrs.w	r3, r4, r5
 8007fa6:	d049      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007fb2:	d02f      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007fb4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007fb8:	d828      	bhi.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007fba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fbe:	d01a      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007fc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fc4:	d822      	bhi.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007fca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fce:	d007      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007fd0:	e01c      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fd2:	4bab      	ldr	r3, [pc, #684]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd6:	4aaa      	ldr	r2, [pc, #680]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007fde:	e01a      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe4:	3308      	adds	r3, #8
 8007fe6:	2102      	movs	r1, #2
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f002 fa49 	bl	800a480 <RCCEx_PLL2_Config>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ff4:	e00f      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ffa:	3328      	adds	r3, #40	@ 0x28
 8007ffc:	2102      	movs	r1, #2
 8007ffe:	4618      	mov	r0, r3
 8008000:	f002 faf0 	bl	800a5e4 <RCCEx_PLL3_Config>
 8008004:	4603      	mov	r3, r0
 8008006:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800800a:	e004      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008012:	e000      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008016:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10a      	bne.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800801e:	4b98      	ldr	r3, [pc, #608]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008022:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800802a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800802c:	4a94      	ldr	r2, [pc, #592]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800802e:	430b      	orrs	r3, r1
 8008030:	6513      	str	r3, [r2, #80]	@ 0x50
 8008032:	e003      	b.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008038:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800803c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008044:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008048:	f04f 0900 	mov.w	r9, #0
 800804c:	ea58 0309 	orrs.w	r3, r8, r9
 8008050:	d047      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008058:	2b04      	cmp	r3, #4
 800805a:	d82a      	bhi.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800805c:	a201      	add	r2, pc, #4	@ (adr r2, 8008064 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800805e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008062:	bf00      	nop
 8008064:	08008079 	.word	0x08008079
 8008068:	08008087 	.word	0x08008087
 800806c:	0800809d 	.word	0x0800809d
 8008070:	080080bb 	.word	0x080080bb
 8008074:	080080bb 	.word	0x080080bb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008078:	4b81      	ldr	r3, [pc, #516]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800807a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807c:	4a80      	ldr	r2, [pc, #512]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800807e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008082:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008084:	e01a      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800808a:	3308      	adds	r3, #8
 800808c:	2100      	movs	r1, #0
 800808e:	4618      	mov	r0, r3
 8008090:	f002 f9f6 	bl	800a480 <RCCEx_PLL2_Config>
 8008094:	4603      	mov	r3, r0
 8008096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800809a:	e00f      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800809c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a0:	3328      	adds	r3, #40	@ 0x28
 80080a2:	2100      	movs	r1, #0
 80080a4:	4618      	mov	r0, r3
 80080a6:	f002 fa9d 	bl	800a5e4 <RCCEx_PLL3_Config>
 80080aa:	4603      	mov	r3, r0
 80080ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080b0:	e004      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80080b8:	e000      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80080ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10a      	bne.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80080c4:	4b6e      	ldr	r3, [pc, #440]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80080c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080c8:	f023 0107 	bic.w	r1, r3, #7
 80080cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080d2:	4a6b      	ldr	r2, [pc, #428]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80080d4:	430b      	orrs	r3, r1
 80080d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80080d8:	e003      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80080e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ea:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80080ee:	f04f 0b00 	mov.w	fp, #0
 80080f2:	ea5a 030b 	orrs.w	r3, sl, fp
 80080f6:	d05b      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80080f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008100:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008104:	d03b      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008106:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800810a:	d834      	bhi.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800810c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008110:	d037      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008112:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008116:	d82e      	bhi.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008118:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800811c:	d033      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800811e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008122:	d828      	bhi.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008124:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008128:	d01a      	beq.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800812a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800812e:	d822      	bhi.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008130:	2b00      	cmp	r3, #0
 8008132:	d003      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008134:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008138:	d007      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800813a:	e01c      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800813c:	4b50      	ldr	r3, [pc, #320]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800813e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008140:	4a4f      	ldr	r2, [pc, #316]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008142:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008146:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008148:	e01e      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800814a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814e:	3308      	adds	r3, #8
 8008150:	2100      	movs	r1, #0
 8008152:	4618      	mov	r0, r3
 8008154:	f002 f994 	bl	800a480 <RCCEx_PLL2_Config>
 8008158:	4603      	mov	r3, r0
 800815a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800815e:	e013      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008164:	3328      	adds	r3, #40	@ 0x28
 8008166:	2100      	movs	r1, #0
 8008168:	4618      	mov	r0, r3
 800816a:	f002 fa3b 	bl	800a5e4 <RCCEx_PLL3_Config>
 800816e:	4603      	mov	r3, r0
 8008170:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008174:	e008      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800817c:	e004      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800817e:	bf00      	nop
 8008180:	e002      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008182:	bf00      	nop
 8008184:	e000      	b.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008186:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008188:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10b      	bne.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008190:	4b3b      	ldr	r3, [pc, #236]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008194:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800819c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80081a0:	4a37      	ldr	r2, [pc, #220]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80081a2:	430b      	orrs	r3, r1
 80081a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80081a6:	e003      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80081b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80081bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80081c0:	2300      	movs	r3, #0
 80081c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80081c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80081ca:	460b      	mov	r3, r1
 80081cc:	4313      	orrs	r3, r2
 80081ce:	d05d      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80081d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80081d8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80081dc:	d03b      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80081de:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80081e2:	d834      	bhi.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80081e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081e8:	d037      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80081ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081ee:	d82e      	bhi.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80081f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80081f4:	d033      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80081f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80081fa:	d828      	bhi.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80081fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008200:	d01a      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008202:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008206:	d822      	bhi.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800820c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008210:	d007      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008212:	e01c      	b.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008214:	4b1a      	ldr	r3, [pc, #104]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008218:	4a19      	ldr	r2, [pc, #100]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800821a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800821e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008220:	e01e      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008226:	3308      	adds	r3, #8
 8008228:	2100      	movs	r1, #0
 800822a:	4618      	mov	r0, r3
 800822c:	f002 f928 	bl	800a480 <RCCEx_PLL2_Config>
 8008230:	4603      	mov	r3, r0
 8008232:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008236:	e013      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800823c:	3328      	adds	r3, #40	@ 0x28
 800823e:	2100      	movs	r1, #0
 8008240:	4618      	mov	r0, r3
 8008242:	f002 f9cf 	bl	800a5e4 <RCCEx_PLL3_Config>
 8008246:	4603      	mov	r3, r0
 8008248:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800824c:	e008      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008254:	e004      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008256:	bf00      	nop
 8008258:	e002      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800825a:	bf00      	nop
 800825c:	e000      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800825e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008260:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10d      	bne.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008268:	4b05      	ldr	r3, [pc, #20]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800826a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800826c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008274:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008278:	4a01      	ldr	r2, [pc, #4]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800827a:	430b      	orrs	r3, r1
 800827c:	6593      	str	r3, [r2, #88]	@ 0x58
 800827e:	e005      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008280:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008284:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008288:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800828c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008298:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800829c:	2300      	movs	r3, #0
 800829e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80082a2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80082a6:	460b      	mov	r3, r1
 80082a8:	4313      	orrs	r3, r2
 80082aa:	d03a      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80082ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082b2:	2b30      	cmp	r3, #48	@ 0x30
 80082b4:	d01f      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80082b6:	2b30      	cmp	r3, #48	@ 0x30
 80082b8:	d819      	bhi.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x372>
 80082ba:	2b20      	cmp	r3, #32
 80082bc:	d00c      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80082be:	2b20      	cmp	r3, #32
 80082c0:	d815      	bhi.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x372>
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d019      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80082c6:	2b10      	cmp	r3, #16
 80082c8:	d111      	bne.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082ca:	4baa      	ldr	r3, [pc, #680]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ce:	4aa9      	ldr	r2, [pc, #676]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80082d6:	e011      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082dc:	3308      	adds	r3, #8
 80082de:	2102      	movs	r1, #2
 80082e0:	4618      	mov	r0, r3
 80082e2:	f002 f8cd 	bl	800a480 <RCCEx_PLL2_Config>
 80082e6:	4603      	mov	r3, r0
 80082e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80082ec:	e006      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80082f4:	e002      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80082f6:	bf00      	nop
 80082f8:	e000      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80082fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10a      	bne.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008304:	4b9b      	ldr	r3, [pc, #620]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008308:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800830c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008312:	4a98      	ldr	r2, [pc, #608]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008314:	430b      	orrs	r3, r1
 8008316:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008318:	e003      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800831a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800831e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800832e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008332:	2300      	movs	r3, #0
 8008334:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008338:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800833c:	460b      	mov	r3, r1
 800833e:	4313      	orrs	r3, r2
 8008340:	d051      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008348:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800834c:	d035      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800834e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008352:	d82e      	bhi.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008354:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008358:	d031      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x442>
 800835a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800835e:	d828      	bhi.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008360:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008364:	d01a      	beq.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800836a:	d822      	bhi.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800836c:	2b00      	cmp	r3, #0
 800836e:	d003      	beq.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008370:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008374:	d007      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008376:	e01c      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008378:	4b7e      	ldr	r3, [pc, #504]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800837a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800837c:	4a7d      	ldr	r2, [pc, #500]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800837e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008382:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008384:	e01c      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800838a:	3308      	adds	r3, #8
 800838c:	2100      	movs	r1, #0
 800838e:	4618      	mov	r0, r3
 8008390:	f002 f876 	bl	800a480 <RCCEx_PLL2_Config>
 8008394:	4603      	mov	r3, r0
 8008396:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800839a:	e011      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800839c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083a0:	3328      	adds	r3, #40	@ 0x28
 80083a2:	2100      	movs	r1, #0
 80083a4:	4618      	mov	r0, r3
 80083a6:	f002 f91d 	bl	800a5e4 <RCCEx_PLL3_Config>
 80083aa:	4603      	mov	r3, r0
 80083ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80083b0:	e006      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80083b8:	e002      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80083ba:	bf00      	nop
 80083bc:	e000      	b.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80083be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10a      	bne.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80083c8:	4b6a      	ldr	r3, [pc, #424]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80083ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80083d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083d6:	4a67      	ldr	r2, [pc, #412]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80083d8:	430b      	orrs	r3, r1
 80083da:	6513      	str	r3, [r2, #80]	@ 0x50
 80083dc:	e003      	b.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80083e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80083f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083f6:	2300      	movs	r3, #0
 80083f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80083fc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008400:	460b      	mov	r3, r1
 8008402:	4313      	orrs	r3, r2
 8008404:	d053      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800840a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800840c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008410:	d033      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008412:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008416:	d82c      	bhi.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008418:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800841c:	d02f      	beq.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800841e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008422:	d826      	bhi.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008424:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008428:	d02b      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800842a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800842e:	d820      	bhi.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008430:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008434:	d012      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8008436:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800843a:	d81a      	bhi.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800843c:	2b00      	cmp	r3, #0
 800843e:	d022      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008444:	d115      	bne.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800844a:	3308      	adds	r3, #8
 800844c:	2101      	movs	r1, #1
 800844e:	4618      	mov	r0, r3
 8008450:	f002 f816 	bl	800a480 <RCCEx_PLL2_Config>
 8008454:	4603      	mov	r3, r0
 8008456:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800845a:	e015      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800845c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008460:	3328      	adds	r3, #40	@ 0x28
 8008462:	2101      	movs	r1, #1
 8008464:	4618      	mov	r0, r3
 8008466:	f002 f8bd 	bl	800a5e4 <RCCEx_PLL3_Config>
 800846a:	4603      	mov	r3, r0
 800846c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008470:	e00a      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008478:	e006      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800847a:	bf00      	nop
 800847c:	e004      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800847e:	bf00      	nop
 8008480:	e002      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008482:	bf00      	nop
 8008484:	e000      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008488:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10a      	bne.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008490:	4b38      	ldr	r3, [pc, #224]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008494:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800849c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800849e:	4a35      	ldr	r2, [pc, #212]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80084a0:	430b      	orrs	r3, r1
 80084a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80084a4:	e003      	b.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80084ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80084ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80084be:	2300      	movs	r3, #0
 80084c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80084c4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80084c8:	460b      	mov	r3, r1
 80084ca:	4313      	orrs	r3, r2
 80084cc:	d058      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80084ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80084d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084da:	d033      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80084dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084e0:	d82c      	bhi.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80084e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084e6:	d02f      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80084e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084ec:	d826      	bhi.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80084ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084f2:	d02b      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80084f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084f8:	d820      	bhi.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80084fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084fe:	d012      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008504:	d81a      	bhi.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008506:	2b00      	cmp	r3, #0
 8008508:	d022      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800850a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800850e:	d115      	bne.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008514:	3308      	adds	r3, #8
 8008516:	2101      	movs	r1, #1
 8008518:	4618      	mov	r0, r3
 800851a:	f001 ffb1 	bl	800a480 <RCCEx_PLL2_Config>
 800851e:	4603      	mov	r3, r0
 8008520:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008524:	e015      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800852a:	3328      	adds	r3, #40	@ 0x28
 800852c:	2101      	movs	r1, #1
 800852e:	4618      	mov	r0, r3
 8008530:	f002 f858 	bl	800a5e4 <RCCEx_PLL3_Config>
 8008534:	4603      	mov	r3, r0
 8008536:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800853a:	e00a      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008542:	e006      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008544:	bf00      	nop
 8008546:	e004      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008548:	bf00      	nop
 800854a:	e002      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800854c:	bf00      	nop
 800854e:	e000      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008552:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10e      	bne.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800855a:	4b06      	ldr	r3, [pc, #24]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800855c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800855e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008566:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800856a:	4a02      	ldr	r2, [pc, #8]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800856c:	430b      	orrs	r3, r1
 800856e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008570:	e006      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008572:	bf00      	nop
 8008574:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008578:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800857c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008588:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800858c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008590:	2300      	movs	r3, #0
 8008592:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008596:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800859a:	460b      	mov	r3, r1
 800859c:	4313      	orrs	r3, r2
 800859e:	d037      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80085a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085aa:	d00e      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80085ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085b0:	d816      	bhi.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d018      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80085b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085ba:	d111      	bne.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085bc:	4bc4      	ldr	r3, [pc, #784]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c0:	4ac3      	ldr	r2, [pc, #780]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80085c8:	e00f      	b.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ce:	3308      	adds	r3, #8
 80085d0:	2101      	movs	r1, #1
 80085d2:	4618      	mov	r0, r3
 80085d4:	f001 ff54 	bl	800a480 <RCCEx_PLL2_Config>
 80085d8:	4603      	mov	r3, r0
 80085da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80085de:	e004      	b.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80085e6:	e000      	b.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80085e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10a      	bne.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80085f2:	4bb7      	ldr	r3, [pc, #732]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80085fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008600:	4ab3      	ldr	r2, [pc, #716]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008602:	430b      	orrs	r3, r1
 8008604:	6513      	str	r3, [r2, #80]	@ 0x50
 8008606:	e003      	b.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008608:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800860c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008618:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800861c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008620:	2300      	movs	r3, #0
 8008622:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008626:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800862a:	460b      	mov	r3, r1
 800862c:	4313      	orrs	r3, r2
 800862e:	d039      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008636:	2b03      	cmp	r3, #3
 8008638:	d81c      	bhi.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800863a:	a201      	add	r2, pc, #4	@ (adr r2, 8008640 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800863c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008640:	0800867d 	.word	0x0800867d
 8008644:	08008651 	.word	0x08008651
 8008648:	0800865f 	.word	0x0800865f
 800864c:	0800867d 	.word	0x0800867d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008650:	4b9f      	ldr	r3, [pc, #636]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008654:	4a9e      	ldr	r2, [pc, #632]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800865a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800865c:	e00f      	b.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800865e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008662:	3308      	adds	r3, #8
 8008664:	2102      	movs	r1, #2
 8008666:	4618      	mov	r0, r3
 8008668:	f001 ff0a 	bl	800a480 <RCCEx_PLL2_Config>
 800866c:	4603      	mov	r3, r0
 800866e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008672:	e004      	b.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800867a:	e000      	b.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800867c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800867e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10a      	bne.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008686:	4b92      	ldr	r3, [pc, #584]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800868a:	f023 0103 	bic.w	r1, r3, #3
 800868e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008694:	4a8e      	ldr	r2, [pc, #568]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008696:	430b      	orrs	r3, r1
 8008698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800869a:	e003      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800869c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80086a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80086b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086b4:	2300      	movs	r3, #0
 80086b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80086ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80086be:	460b      	mov	r3, r1
 80086c0:	4313      	orrs	r3, r2
 80086c2:	f000 8099 	beq.w	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086c6:	4b83      	ldr	r3, [pc, #524]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a82      	ldr	r2, [pc, #520]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80086cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086d2:	f7f9 f9cd 	bl	8001a70 <HAL_GetTick>
 80086d6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086da:	e00b      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086dc:	f7f9 f9c8 	bl	8001a70 <HAL_GetTick>
 80086e0:	4602      	mov	r2, r0
 80086e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	2b64      	cmp	r3, #100	@ 0x64
 80086ea:	d903      	bls.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80086f2:	e005      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086f4:	4b77      	ldr	r3, [pc, #476]	@ (80088d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d0ed      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008700:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008704:	2b00      	cmp	r3, #0
 8008706:	d173      	bne.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008708:	4b71      	ldr	r3, [pc, #452]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800870a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800870c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008710:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008714:	4053      	eors	r3, r2
 8008716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800871a:	2b00      	cmp	r3, #0
 800871c:	d015      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800871e:	4b6c      	ldr	r3, [pc, #432]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008726:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800872a:	4b69      	ldr	r3, [pc, #420]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800872c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800872e:	4a68      	ldr	r2, [pc, #416]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008734:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008736:	4b66      	ldr	r3, [pc, #408]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800873a:	4a65      	ldr	r2, [pc, #404]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800873c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008740:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008742:	4a63      	ldr	r2, [pc, #396]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008748:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800874a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800874e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008752:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008756:	d118      	bne.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008758:	f7f9 f98a 	bl	8001a70 <HAL_GetTick>
 800875c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008760:	e00d      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008762:	f7f9 f985 	bl	8001a70 <HAL_GetTick>
 8008766:	4602      	mov	r2, r0
 8008768:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800876c:	1ad2      	subs	r2, r2, r3
 800876e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008772:	429a      	cmp	r2, r3
 8008774:	d903      	bls.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800877c:	e005      	b.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800877e:	4b54      	ldr	r3, [pc, #336]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	2b00      	cmp	r3, #0
 8008788:	d0eb      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800878a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800878e:	2b00      	cmp	r3, #0
 8008790:	d129      	bne.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008796:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800879a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800879e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087a2:	d10e      	bne.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80087a4:	4b4a      	ldr	r3, [pc, #296]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80087ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80087b4:	091a      	lsrs	r2, r3, #4
 80087b6:	4b48      	ldr	r3, [pc, #288]	@ (80088d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80087b8:	4013      	ands	r3, r2
 80087ba:	4a45      	ldr	r2, [pc, #276]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087bc:	430b      	orrs	r3, r1
 80087be:	6113      	str	r3, [r2, #16]
 80087c0:	e005      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x852>
 80087c2:	4b43      	ldr	r3, [pc, #268]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	4a42      	ldr	r2, [pc, #264]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80087cc:	6113      	str	r3, [r2, #16]
 80087ce:	4b40      	ldr	r3, [pc, #256]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087d0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80087d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80087da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087de:	4a3c      	ldr	r2, [pc, #240]	@ (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087e0:	430b      	orrs	r3, r1
 80087e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80087e4:	e008      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80087e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80087ee:	e003      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80087f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008800:	f002 0301 	and.w	r3, r2, #1
 8008804:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008808:	2300      	movs	r3, #0
 800880a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800880e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008812:	460b      	mov	r3, r1
 8008814:	4313      	orrs	r3, r2
 8008816:	f000 808f 	beq.w	8008938 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800881a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800881e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008820:	2b28      	cmp	r3, #40	@ 0x28
 8008822:	d871      	bhi.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008824:	a201      	add	r2, pc, #4	@ (adr r2, 800882c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882a:	bf00      	nop
 800882c:	08008911 	.word	0x08008911
 8008830:	08008909 	.word	0x08008909
 8008834:	08008909 	.word	0x08008909
 8008838:	08008909 	.word	0x08008909
 800883c:	08008909 	.word	0x08008909
 8008840:	08008909 	.word	0x08008909
 8008844:	08008909 	.word	0x08008909
 8008848:	08008909 	.word	0x08008909
 800884c:	080088dd 	.word	0x080088dd
 8008850:	08008909 	.word	0x08008909
 8008854:	08008909 	.word	0x08008909
 8008858:	08008909 	.word	0x08008909
 800885c:	08008909 	.word	0x08008909
 8008860:	08008909 	.word	0x08008909
 8008864:	08008909 	.word	0x08008909
 8008868:	08008909 	.word	0x08008909
 800886c:	080088f3 	.word	0x080088f3
 8008870:	08008909 	.word	0x08008909
 8008874:	08008909 	.word	0x08008909
 8008878:	08008909 	.word	0x08008909
 800887c:	08008909 	.word	0x08008909
 8008880:	08008909 	.word	0x08008909
 8008884:	08008909 	.word	0x08008909
 8008888:	08008909 	.word	0x08008909
 800888c:	08008911 	.word	0x08008911
 8008890:	08008909 	.word	0x08008909
 8008894:	08008909 	.word	0x08008909
 8008898:	08008909 	.word	0x08008909
 800889c:	08008909 	.word	0x08008909
 80088a0:	08008909 	.word	0x08008909
 80088a4:	08008909 	.word	0x08008909
 80088a8:	08008909 	.word	0x08008909
 80088ac:	08008911 	.word	0x08008911
 80088b0:	08008909 	.word	0x08008909
 80088b4:	08008909 	.word	0x08008909
 80088b8:	08008909 	.word	0x08008909
 80088bc:	08008909 	.word	0x08008909
 80088c0:	08008909 	.word	0x08008909
 80088c4:	08008909 	.word	0x08008909
 80088c8:	08008909 	.word	0x08008909
 80088cc:	08008911 	.word	0x08008911
 80088d0:	58024400 	.word	0x58024400
 80088d4:	58024800 	.word	0x58024800
 80088d8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088e0:	3308      	adds	r3, #8
 80088e2:	2101      	movs	r1, #1
 80088e4:	4618      	mov	r0, r3
 80088e6:	f001 fdcb 	bl	800a480 <RCCEx_PLL2_Config>
 80088ea:	4603      	mov	r3, r0
 80088ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80088f0:	e00f      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088f6:	3328      	adds	r3, #40	@ 0x28
 80088f8:	2101      	movs	r1, #1
 80088fa:	4618      	mov	r0, r3
 80088fc:	f001 fe72 	bl	800a5e4 <RCCEx_PLL3_Config>
 8008900:	4603      	mov	r3, r0
 8008902:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008906:	e004      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800890e:	e000      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008912:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10a      	bne.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800891a:	4bbf      	ldr	r3, [pc, #764]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800891c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800891e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008926:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008928:	4abb      	ldr	r2, [pc, #748]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800892a:	430b      	orrs	r3, r1
 800892c:	6553      	str	r3, [r2, #84]	@ 0x54
 800892e:	e003      	b.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008930:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008934:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f002 0302 	and.w	r3, r2, #2
 8008944:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008948:	2300      	movs	r3, #0
 800894a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800894e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008952:	460b      	mov	r3, r1
 8008954:	4313      	orrs	r3, r2
 8008956:	d041      	beq.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800895c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800895e:	2b05      	cmp	r3, #5
 8008960:	d824      	bhi.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008962:	a201      	add	r2, pc, #4	@ (adr r2, 8008968 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	080089b5 	.word	0x080089b5
 800896c:	08008981 	.word	0x08008981
 8008970:	08008997 	.word	0x08008997
 8008974:	080089b5 	.word	0x080089b5
 8008978:	080089b5 	.word	0x080089b5
 800897c:	080089b5 	.word	0x080089b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008984:	3308      	adds	r3, #8
 8008986:	2101      	movs	r1, #1
 8008988:	4618      	mov	r0, r3
 800898a:	f001 fd79 	bl	800a480 <RCCEx_PLL2_Config>
 800898e:	4603      	mov	r3, r0
 8008990:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008994:	e00f      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800899a:	3328      	adds	r3, #40	@ 0x28
 800899c:	2101      	movs	r1, #1
 800899e:	4618      	mov	r0, r3
 80089a0:	f001 fe20 	bl	800a5e4 <RCCEx_PLL3_Config>
 80089a4:	4603      	mov	r3, r0
 80089a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80089aa:	e004      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80089b2:	e000      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80089b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10a      	bne.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80089be:	4b96      	ldr	r3, [pc, #600]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80089c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089c2:	f023 0107 	bic.w	r1, r3, #7
 80089c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089cc:	4a92      	ldr	r2, [pc, #584]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80089ce:	430b      	orrs	r3, r1
 80089d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80089d2:	e003      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e4:	f002 0304 	and.w	r3, r2, #4
 80089e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80089ec:	2300      	movs	r3, #0
 80089ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80089f2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80089f6:	460b      	mov	r3, r1
 80089f8:	4313      	orrs	r3, r2
 80089fa:	d044      	beq.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80089fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a04:	2b05      	cmp	r3, #5
 8008a06:	d825      	bhi.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8008a08:	a201      	add	r2, pc, #4	@ (adr r2, 8008a10 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8008a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0e:	bf00      	nop
 8008a10:	08008a5d 	.word	0x08008a5d
 8008a14:	08008a29 	.word	0x08008a29
 8008a18:	08008a3f 	.word	0x08008a3f
 8008a1c:	08008a5d 	.word	0x08008a5d
 8008a20:	08008a5d 	.word	0x08008a5d
 8008a24:	08008a5d 	.word	0x08008a5d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a2c:	3308      	adds	r3, #8
 8008a2e:	2101      	movs	r1, #1
 8008a30:	4618      	mov	r0, r3
 8008a32:	f001 fd25 	bl	800a480 <RCCEx_PLL2_Config>
 8008a36:	4603      	mov	r3, r0
 8008a38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008a3c:	e00f      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a42:	3328      	adds	r3, #40	@ 0x28
 8008a44:	2101      	movs	r1, #1
 8008a46:	4618      	mov	r0, r3
 8008a48:	f001 fdcc 	bl	800a5e4 <RCCEx_PLL3_Config>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008a52:	e004      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008a5a:	e000      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d10b      	bne.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a66:	4b6c      	ldr	r3, [pc, #432]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a6a:	f023 0107 	bic.w	r1, r3, #7
 8008a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a76:	4a68      	ldr	r2, [pc, #416]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008a78:	430b      	orrs	r3, r1
 8008a7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a7c:	e003      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8e:	f002 0320 	and.w	r3, r2, #32
 8008a92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a96:	2300      	movs	r3, #0
 8008a98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008a9c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	d055      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ab2:	d033      	beq.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ab8:	d82c      	bhi.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008abe:	d02f      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ac4:	d826      	bhi.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008ac6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008aca:	d02b      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008acc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ad0:	d820      	bhi.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008ad2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ad6:	d012      	beq.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008ad8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008adc:	d81a      	bhi.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d022      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008ae2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ae6:	d115      	bne.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aec:	3308      	adds	r3, #8
 8008aee:	2100      	movs	r1, #0
 8008af0:	4618      	mov	r0, r3
 8008af2:	f001 fcc5 	bl	800a480 <RCCEx_PLL2_Config>
 8008af6:	4603      	mov	r3, r0
 8008af8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008afc:	e015      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b02:	3328      	adds	r3, #40	@ 0x28
 8008b04:	2102      	movs	r1, #2
 8008b06:	4618      	mov	r0, r3
 8008b08:	f001 fd6c 	bl	800a5e4 <RCCEx_PLL3_Config>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008b12:	e00a      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008b1a:	e006      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008b1c:	bf00      	nop
 8008b1e:	e004      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008b20:	bf00      	nop
 8008b22:	e002      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008b24:	bf00      	nop
 8008b26:	e000      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008b28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10b      	bne.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b32:	4b39      	ldr	r3, [pc, #228]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b36:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b42:	4a35      	ldr	r2, [pc, #212]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008b44:	430b      	orrs	r3, r1
 8008b46:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b48:	e003      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008b5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b62:	2300      	movs	r3, #0
 8008b64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b68:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	d058      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b7a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b7e:	d033      	beq.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008b80:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b84:	d82c      	bhi.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b8a:	d02f      	beq.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b90:	d826      	bhi.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008b92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b96:	d02b      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008b98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b9c:	d820      	bhi.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008b9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ba2:	d012      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008ba4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ba8:	d81a      	bhi.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d022      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bb2:	d115      	bne.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bb8:	3308      	adds	r3, #8
 8008bba:	2100      	movs	r1, #0
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f001 fc5f 	bl	800a480 <RCCEx_PLL2_Config>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008bc8:	e015      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bce:	3328      	adds	r3, #40	@ 0x28
 8008bd0:	2102      	movs	r1, #2
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f001 fd06 	bl	800a5e4 <RCCEx_PLL3_Config>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008bde:	e00a      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008be6:	e006      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008be8:	bf00      	nop
 8008bea:	e004      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008bec:	bf00      	nop
 8008bee:	e002      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008bf0:	bf00      	nop
 8008bf2:	e000      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bf6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10e      	bne.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008bfe:	4b06      	ldr	r3, [pc, #24]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c02:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c0e:	4a02      	ldr	r2, [pc, #8]	@ (8008c18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008c10:	430b      	orrs	r3, r1
 8008c12:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c14:	e006      	b.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008c16:	bf00      	nop
 8008c18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008c30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c34:	2300      	movs	r3, #0
 8008c36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c3a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4313      	orrs	r3, r2
 8008c42:	d055      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c4c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008c50:	d033      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8008c52:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008c56:	d82c      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008c58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c5c:	d02f      	beq.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008c5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c62:	d826      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008c64:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c68:	d02b      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008c6a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c6e:	d820      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008c70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c74:	d012      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8008c76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c7a:	d81a      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d022      	beq.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c84:	d115      	bne.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c8a:	3308      	adds	r3, #8
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f001 fbf6 	bl	800a480 <RCCEx_PLL2_Config>
 8008c94:	4603      	mov	r3, r0
 8008c96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c9a:	e015      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ca0:	3328      	adds	r3, #40	@ 0x28
 8008ca2:	2102      	movs	r1, #2
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f001 fc9d 	bl	800a5e4 <RCCEx_PLL3_Config>
 8008caa:	4603      	mov	r3, r0
 8008cac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008cb0:	e00a      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008cb8:	e006      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008cba:	bf00      	nop
 8008cbc:	e004      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008cbe:	bf00      	nop
 8008cc0:	e002      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008cc2:	bf00      	nop
 8008cc4:	e000      	b.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10b      	bne.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008cd0:	4ba0      	ldr	r3, [pc, #640]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cd4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ce0:	4a9c      	ldr	r2, [pc, #624]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ce2:	430b      	orrs	r3, r1
 8008ce4:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ce6:	e003      	b.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	f002 0308 	and.w	r3, r2, #8
 8008cfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008d00:	2300      	movs	r3, #0
 8008d02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008d06:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	d01e      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d1c:	d10c      	bne.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d22:	3328      	adds	r3, #40	@ 0x28
 8008d24:	2102      	movs	r1, #2
 8008d26:	4618      	mov	r0, r3
 8008d28:	f001 fc5c 	bl	800a5e4 <RCCEx_PLL3_Config>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008d38:	4b86      	ldr	r3, [pc, #536]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d3c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d48:	4a82      	ldr	r2, [pc, #520]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d4a:	430b      	orrs	r3, r1
 8008d4c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d56:	f002 0310 	and.w	r3, r2, #16
 8008d5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d64:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	d01e      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d7a:	d10c      	bne.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d80:	3328      	adds	r3, #40	@ 0x28
 8008d82:	2102      	movs	r1, #2
 8008d84:	4618      	mov	r0, r3
 8008d86:	f001 fc2d 	bl	800a5e4 <RCCEx_PLL3_Config>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d002      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008d96:	4b6f      	ldr	r3, [pc, #444]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d9a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008da6:	4a6b      	ldr	r2, [pc, #428]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008da8:	430b      	orrs	r3, r1
 8008daa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008db8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008dba:	2300      	movs	r3, #0
 8008dbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008dbe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	d03e      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008dd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dd4:	d022      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008dd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dda:	d81b      	bhi.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d003      	beq.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008de4:	d00b      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008de6:	e015      	b.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dec:	3308      	adds	r3, #8
 8008dee:	2100      	movs	r1, #0
 8008df0:	4618      	mov	r0, r3
 8008df2:	f001 fb45 	bl	800a480 <RCCEx_PLL2_Config>
 8008df6:	4603      	mov	r3, r0
 8008df8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008dfc:	e00f      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e02:	3328      	adds	r3, #40	@ 0x28
 8008e04:	2102      	movs	r1, #2
 8008e06:	4618      	mov	r0, r3
 8008e08:	f001 fbec 	bl	800a5e4 <RCCEx_PLL3_Config>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008e12:	e004      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008e1a:	e000      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10b      	bne.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e26:	4b4b      	ldr	r3, [pc, #300]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e2a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008e36:	4a47      	ldr	r2, [pc, #284]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e38:	430b      	orrs	r3, r1
 8008e3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e3c:	e003      	b.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008e52:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e54:	2300      	movs	r3, #0
 8008e56:	677b      	str	r3, [r7, #116]	@ 0x74
 8008e58:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	d03b      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e6e:	d01f      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008e70:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e74:	d818      	bhi.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008e76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e7a:	d003      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008e7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e80:	d007      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8008e82:	e011      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e84:	4b33      	ldr	r3, [pc, #204]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e88:	4a32      	ldr	r2, [pc, #200]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e90:	e00f      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e96:	3328      	adds	r3, #40	@ 0x28
 8008e98:	2101      	movs	r1, #1
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f001 fba2 	bl	800a5e4 <RCCEx_PLL3_Config>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8008ea6:	e004      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008eae:	e000      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10b      	bne.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008eba:	4b26      	ldr	r3, [pc, #152]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ebe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008eca:	4a22      	ldr	r2, [pc, #136]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ecc:	430b      	orrs	r3, r1
 8008ece:	6553      	str	r3, [r2, #84]	@ 0x54
 8008ed0:	e003      	b.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ed2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ed6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008ee6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ee8:	2300      	movs	r3, #0
 8008eea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008eec:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	d034      	beq.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d003      	beq.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f04:	d007      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008f06:	e011      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f08:	4b12      	ldr	r3, [pc, #72]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f0c:	4a11      	ldr	r2, [pc, #68]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008f14:	e00e      	b.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f1a:	3308      	adds	r3, #8
 8008f1c:	2102      	movs	r1, #2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f001 faae 	bl	800a480 <RCCEx_PLL2_Config>
 8008f24:	4603      	mov	r3, r0
 8008f26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008f2a:	e003      	b.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10d      	bne.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008f3c:	4b05      	ldr	r3, [pc, #20]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f40:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f4a:	4a02      	ldr	r2, [pc, #8]	@ (8008f54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f4c:	430b      	orrs	r3, r1
 8008f4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008f50:	e006      	b.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008f52:	bf00      	nop
 8008f54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008f6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f6e:	2300      	movs	r3, #0
 8008f70:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f72:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008f76:	460b      	mov	r3, r1
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	d00c      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f80:	3328      	adds	r3, #40	@ 0x28
 8008f82:	2102      	movs	r1, #2
 8008f84:	4618      	mov	r0, r3
 8008f86:	f001 fb2d 	bl	800a5e4 <RCCEx_PLL3_Config>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d002      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008fa2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fa8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008fac:	460b      	mov	r3, r1
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	d036      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008fb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fbc:	d018      	beq.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008fbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fc2:	d811      	bhi.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fc8:	d014      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008fca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fce:	d80b      	bhi.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d011      	beq.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fd8:	d106      	bne.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fda:	4bb7      	ldr	r3, [pc, #732]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fde:	4ab6      	ldr	r2, [pc, #728]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008fe6:	e008      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008fee:	e004      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008ff0:	bf00      	nop
 8008ff2:	e002      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008ff4:	bf00      	nop
 8008ff6:	e000      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ffa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10a      	bne.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009002:	4bad      	ldr	r3, [pc, #692]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009006:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800900a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800900e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009010:	4aa9      	ldr	r2, [pc, #676]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009012:	430b      	orrs	r3, r1
 8009014:	6553      	str	r3, [r2, #84]	@ 0x54
 8009016:	e003      	b.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009018:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800901c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800902c:	653b      	str	r3, [r7, #80]	@ 0x50
 800902e:	2300      	movs	r3, #0
 8009030:	657b      	str	r3, [r7, #84]	@ 0x54
 8009032:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009036:	460b      	mov	r3, r1
 8009038:	4313      	orrs	r3, r2
 800903a:	d009      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800903c:	4b9e      	ldr	r3, [pc, #632]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800903e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009040:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800904a:	4a9b      	ldr	r2, [pc, #620]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800904c:	430b      	orrs	r3, r1
 800904e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009058:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800905c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800905e:	2300      	movs	r3, #0
 8009060:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009062:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009066:	460b      	mov	r3, r1
 8009068:	4313      	orrs	r3, r2
 800906a:	d009      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800906c:	4b92      	ldr	r3, [pc, #584]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800906e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009070:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009078:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800907a:	4a8f      	ldr	r2, [pc, #572]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800907c:	430b      	orrs	r3, r1
 800907e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009088:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800908c:	643b      	str	r3, [r7, #64]	@ 0x40
 800908e:	2300      	movs	r3, #0
 8009090:	647b      	str	r3, [r7, #68]	@ 0x44
 8009092:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009096:	460b      	mov	r3, r1
 8009098:	4313      	orrs	r3, r2
 800909a:	d00e      	beq.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800909c:	4b86      	ldr	r3, [pc, #536]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	4a85      	ldr	r2, [pc, #532]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80090a6:	6113      	str	r3, [r2, #16]
 80090a8:	4b83      	ldr	r3, [pc, #524]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090aa:	6919      	ldr	r1, [r3, #16]
 80090ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80090b4:	4a80      	ldr	r2, [pc, #512]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090b6:	430b      	orrs	r3, r1
 80090b8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80090ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80090c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090c8:	2300      	movs	r3, #0
 80090ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090cc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80090d0:	460b      	mov	r3, r1
 80090d2:	4313      	orrs	r3, r2
 80090d4:	d009      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80090d6:	4b78      	ldr	r3, [pc, #480]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80090de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090e4:	4a74      	ldr	r2, [pc, #464]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090e6:	430b      	orrs	r3, r1
 80090e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80090ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80090f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80090f8:	2300      	movs	r3, #0
 80090fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80090fc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009100:	460b      	mov	r3, r1
 8009102:	4313      	orrs	r3, r2
 8009104:	d00a      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009106:	4b6c      	ldr	r3, [pc, #432]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800910a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800910e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009116:	4a68      	ldr	r2, [pc, #416]	@ (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009118:	430b      	orrs	r3, r1
 800911a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800911c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	2100      	movs	r1, #0
 8009126:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800912e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009132:	460b      	mov	r3, r1
 8009134:	4313      	orrs	r3, r2
 8009136:	d011      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800913c:	3308      	adds	r3, #8
 800913e:	2100      	movs	r1, #0
 8009140:	4618      	mov	r0, r3
 8009142:	f001 f99d 	bl	800a480 <RCCEx_PLL2_Config>
 8009146:	4603      	mov	r3, r0
 8009148:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800914c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009150:	2b00      	cmp	r3, #0
 8009152:	d003      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009154:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009158:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800915c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009164:	2100      	movs	r1, #0
 8009166:	6239      	str	r1, [r7, #32]
 8009168:	f003 0302 	and.w	r3, r3, #2
 800916c:	627b      	str	r3, [r7, #36]	@ 0x24
 800916e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009172:	460b      	mov	r3, r1
 8009174:	4313      	orrs	r3, r2
 8009176:	d011      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800917c:	3308      	adds	r3, #8
 800917e:	2101      	movs	r1, #1
 8009180:	4618      	mov	r0, r3
 8009182:	f001 f97d 	bl	800a480 <RCCEx_PLL2_Config>
 8009186:	4603      	mov	r3, r0
 8009188:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800918c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009190:	2b00      	cmp	r3, #0
 8009192:	d003      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009194:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009198:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800919c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a4:	2100      	movs	r1, #0
 80091a6:	61b9      	str	r1, [r7, #24]
 80091a8:	f003 0304 	and.w	r3, r3, #4
 80091ac:	61fb      	str	r3, [r7, #28]
 80091ae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80091b2:	460b      	mov	r3, r1
 80091b4:	4313      	orrs	r3, r2
 80091b6:	d011      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091bc:	3308      	adds	r3, #8
 80091be:	2102      	movs	r1, #2
 80091c0:	4618      	mov	r0, r3
 80091c2:	f001 f95d 	bl	800a480 <RCCEx_PLL2_Config>
 80091c6:	4603      	mov	r3, r0
 80091c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80091cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d003      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80091dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e4:	2100      	movs	r1, #0
 80091e6:	6139      	str	r1, [r7, #16]
 80091e8:	f003 0308 	and.w	r3, r3, #8
 80091ec:	617b      	str	r3, [r7, #20]
 80091ee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80091f2:	460b      	mov	r3, r1
 80091f4:	4313      	orrs	r3, r2
 80091f6:	d011      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091fc:	3328      	adds	r3, #40	@ 0x28
 80091fe:	2100      	movs	r1, #0
 8009200:	4618      	mov	r0, r3
 8009202:	f001 f9ef 	bl	800a5e4 <RCCEx_PLL3_Config>
 8009206:	4603      	mov	r3, r0
 8009208:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800920c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009210:	2b00      	cmp	r3, #0
 8009212:	d003      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009214:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009218:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800921c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009224:	2100      	movs	r1, #0
 8009226:	60b9      	str	r1, [r7, #8]
 8009228:	f003 0310 	and.w	r3, r3, #16
 800922c:	60fb      	str	r3, [r7, #12]
 800922e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009232:	460b      	mov	r3, r1
 8009234:	4313      	orrs	r3, r2
 8009236:	d011      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800923c:	3328      	adds	r3, #40	@ 0x28
 800923e:	2101      	movs	r1, #1
 8009240:	4618      	mov	r0, r3
 8009242:	f001 f9cf 	bl	800a5e4 <RCCEx_PLL3_Config>
 8009246:	4603      	mov	r3, r0
 8009248:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800924c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009250:	2b00      	cmp	r3, #0
 8009252:	d003      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009254:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009258:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800925c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009264:	2100      	movs	r1, #0
 8009266:	6039      	str	r1, [r7, #0]
 8009268:	f003 0320 	and.w	r3, r3, #32
 800926c:	607b      	str	r3, [r7, #4]
 800926e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009272:	460b      	mov	r3, r1
 8009274:	4313      	orrs	r3, r2
 8009276:	d011      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800927c:	3328      	adds	r3, #40	@ 0x28
 800927e:	2102      	movs	r1, #2
 8009280:	4618      	mov	r0, r3
 8009282:	f001 f9af 	bl	800a5e4 <RCCEx_PLL3_Config>
 8009286:	4603      	mov	r3, r0
 8009288:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800928c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009290:	2b00      	cmp	r3, #0
 8009292:	d003      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009294:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009298:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800929c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d101      	bne.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	e000      	b.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80092b0:	46bd      	mov	sp, r7
 80092b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092b6:	bf00      	nop
 80092b8:	58024400 	.word	0x58024400

080092bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b090      	sub	sp, #64	@ 0x40
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80092c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ca:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80092ce:	430b      	orrs	r3, r1
 80092d0:	f040 8094 	bne.w	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80092d4:	4b9b      	ldr	r3, [pc, #620]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80092d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092d8:	f003 0307 	and.w	r3, r3, #7
 80092dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80092de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e0:	2b04      	cmp	r3, #4
 80092e2:	f200 8087 	bhi.w	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80092e6:	a201      	add	r2, pc, #4	@ (adr r2, 80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80092e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ec:	08009301 	.word	0x08009301
 80092f0:	08009329 	.word	0x08009329
 80092f4:	08009351 	.word	0x08009351
 80092f8:	080093ed 	.word	0x080093ed
 80092fc:	08009379 	.word	0x08009379
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009300:	4b90      	ldr	r3, [pc, #576]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009308:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800930c:	d108      	bne.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800930e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009312:	4618      	mov	r0, r3
 8009314:	f000 ff62 	bl	800a1dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800931a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800931c:	f000 bc93 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009320:	2300      	movs	r3, #0
 8009322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009324:	f000 bc8f 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009328:	4b86      	ldr	r3, [pc, #536]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009330:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009334:	d108      	bne.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009336:	f107 0318 	add.w	r3, r7, #24
 800933a:	4618      	mov	r0, r3
 800933c:	f000 fca6 	bl	8009c8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009344:	f000 bc7f 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009348:	2300      	movs	r3, #0
 800934a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800934c:	f000 bc7b 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009350:	4b7c      	ldr	r3, [pc, #496]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009358:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800935c:	d108      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800935e:	f107 030c 	add.w	r3, r7, #12
 8009362:	4618      	mov	r0, r3
 8009364:	f000 fde6 	bl	8009f34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800936c:	f000 bc6b 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009370:	2300      	movs	r3, #0
 8009372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009374:	f000 bc67 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009378:	4b72      	ldr	r3, [pc, #456]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800937a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800937c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009380:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009382:	4b70      	ldr	r3, [pc, #448]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 0304 	and.w	r3, r3, #4
 800938a:	2b04      	cmp	r3, #4
 800938c:	d10c      	bne.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800938e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009390:	2b00      	cmp	r3, #0
 8009392:	d109      	bne.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009394:	4b6b      	ldr	r3, [pc, #428]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	08db      	lsrs	r3, r3, #3
 800939a:	f003 0303 	and.w	r3, r3, #3
 800939e:	4a6a      	ldr	r2, [pc, #424]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80093a0:	fa22 f303 	lsr.w	r3, r2, r3
 80093a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093a6:	e01f      	b.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093a8:	4b66      	ldr	r3, [pc, #408]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093b4:	d106      	bne.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80093b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093bc:	d102      	bne.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093be:	4b63      	ldr	r3, [pc, #396]	@ (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80093c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093c2:	e011      	b.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093c4:	4b5f      	ldr	r3, [pc, #380]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093d0:	d106      	bne.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80093d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093d8:	d102      	bne.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093da:	4b5d      	ldr	r3, [pc, #372]	@ (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093de:	e003      	b.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80093e0:	2300      	movs	r3, #0
 80093e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80093e4:	f000 bc2f 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80093e8:	f000 bc2d 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80093ec:	4b59      	ldr	r3, [pc, #356]	@ (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80093ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093f0:	f000 bc29 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80093f4:	2300      	movs	r3, #0
 80093f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093f8:	f000 bc25 	b.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80093fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009400:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009404:	430b      	orrs	r3, r1
 8009406:	f040 80a7 	bne.w	8009558 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800940a:	4b4e      	ldr	r3, [pc, #312]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800940c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800940e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009412:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009416:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800941a:	d054      	beq.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800941c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009422:	f200 808b 	bhi.w	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009428:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800942c:	f000 8083 	beq.w	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8009430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009432:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009436:	f200 8081 	bhi.w	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800943a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800943c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009440:	d02f      	beq.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009444:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009448:	d878      	bhi.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800944a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944c:	2b00      	cmp	r3, #0
 800944e:	d004      	beq.n	800945a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8009450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009452:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009456:	d012      	beq.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8009458:	e070      	b.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800945a:	4b3a      	ldr	r3, [pc, #232]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009462:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009466:	d107      	bne.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009468:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800946c:	4618      	mov	r0, r3
 800946e:	f000 feb5 	bl	800a1dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009476:	e3e6      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800947c:	e3e3      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800947e:	4b31      	ldr	r3, [pc, #196]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009486:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800948a:	d107      	bne.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800948c:	f107 0318 	add.w	r3, r7, #24
 8009490:	4618      	mov	r0, r3
 8009492:	f000 fbfb 	bl	8009c8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800949a:	e3d4      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800949c:	2300      	movs	r3, #0
 800949e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094a0:	e3d1      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094a2:	4b28      	ldr	r3, [pc, #160]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094ae:	d107      	bne.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094b0:	f107 030c 	add.w	r3, r7, #12
 80094b4:	4618      	mov	r0, r3
 80094b6:	f000 fd3d 	bl	8009f34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094be:	e3c2      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094c0:	2300      	movs	r3, #0
 80094c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094c4:	e3bf      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094c6:	4b1f      	ldr	r3, [pc, #124]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80094c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80094ce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094d0:	4b1c      	ldr	r3, [pc, #112]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 0304 	and.w	r3, r3, #4
 80094d8:	2b04      	cmp	r3, #4
 80094da:	d10c      	bne.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80094dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d109      	bne.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094e2:	4b18      	ldr	r3, [pc, #96]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	08db      	lsrs	r3, r3, #3
 80094e8:	f003 0303 	and.w	r3, r3, #3
 80094ec:	4a16      	ldr	r2, [pc, #88]	@ (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80094ee:	fa22 f303 	lsr.w	r3, r2, r3
 80094f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094f4:	e01e      	b.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094f6:	4b13      	ldr	r3, [pc, #76]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009502:	d106      	bne.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8009504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009506:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800950a:	d102      	bne.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800950c:	4b0f      	ldr	r3, [pc, #60]	@ (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800950e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009510:	e010      	b.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009512:	4b0c      	ldr	r3, [pc, #48]	@ (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800951a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800951e:	d106      	bne.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009522:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009526:	d102      	bne.n	800952e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009528:	4b09      	ldr	r3, [pc, #36]	@ (8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800952a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800952c:	e002      	b.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800952e:	2300      	movs	r3, #0
 8009530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009532:	e388      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009534:	e387      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009536:	4b07      	ldr	r3, [pc, #28]	@ (8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800953a:	e384      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800953c:	2300      	movs	r3, #0
 800953e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009540:	e381      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009542:	bf00      	nop
 8009544:	58024400 	.word	0x58024400
 8009548:	03d09000 	.word	0x03d09000
 800954c:	003d0900 	.word	0x003d0900
 8009550:	017d7840 	.word	0x017d7840
 8009554:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800955c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009560:	430b      	orrs	r3, r1
 8009562:	f040 809c 	bne.w	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009566:	4b9e      	ldr	r3, [pc, #632]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800956a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800956e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009572:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009576:	d054      	beq.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8009578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800957e:	f200 808b 	bhi.w	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009584:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009588:	f000 8083 	beq.w	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800958c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009592:	f200 8081 	bhi.w	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009598:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800959c:	d02f      	beq.n	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800959e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095a4:	d878      	bhi.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80095a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d004      	beq.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80095ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095b2:	d012      	beq.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80095b4:	e070      	b.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095b6:	4b8a      	ldr	r3, [pc, #552]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095c2:	d107      	bne.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 fe07 	bl	800a1dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095d2:	e338      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095d4:	2300      	movs	r3, #0
 80095d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095d8:	e335      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095da:	4b81      	ldr	r3, [pc, #516]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095e6:	d107      	bne.n	80095f8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095e8:	f107 0318 	add.w	r3, r7, #24
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 fb4d 	bl	8009c8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095f6:	e326      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80095f8:	2300      	movs	r3, #0
 80095fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095fc:	e323      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095fe:	4b78      	ldr	r3, [pc, #480]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800960a:	d107      	bne.n	800961c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800960c:	f107 030c 	add.w	r3, r7, #12
 8009610:	4618      	mov	r0, r3
 8009612:	f000 fc8f 	bl	8009f34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800961a:	e314      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800961c:	2300      	movs	r3, #0
 800961e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009620:	e311      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009622:	4b6f      	ldr	r3, [pc, #444]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009626:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800962a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800962c:	4b6c      	ldr	r3, [pc, #432]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0304 	and.w	r3, r3, #4
 8009634:	2b04      	cmp	r3, #4
 8009636:	d10c      	bne.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800963a:	2b00      	cmp	r3, #0
 800963c:	d109      	bne.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800963e:	4b68      	ldr	r3, [pc, #416]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	08db      	lsrs	r3, r3, #3
 8009644:	f003 0303 	and.w	r3, r3, #3
 8009648:	4a66      	ldr	r2, [pc, #408]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800964a:	fa22 f303 	lsr.w	r3, r2, r3
 800964e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009650:	e01e      	b.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009652:	4b63      	ldr	r3, [pc, #396]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800965a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800965e:	d106      	bne.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009662:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009666:	d102      	bne.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009668:	4b5f      	ldr	r3, [pc, #380]	@ (80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800966a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800966c:	e010      	b.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800966e:	4b5c      	ldr	r3, [pc, #368]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009676:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800967a:	d106      	bne.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800967c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800967e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009682:	d102      	bne.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009684:	4b59      	ldr	r3, [pc, #356]	@ (80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009688:	e002      	b.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800968e:	e2da      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009690:	e2d9      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009692:	4b57      	ldr	r3, [pc, #348]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009696:	e2d6      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009698:	2300      	movs	r3, #0
 800969a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800969c:	e2d3      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800969e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096a2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80096a6:	430b      	orrs	r3, r1
 80096a8:	f040 80a7 	bne.w	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80096ac:	4b4c      	ldr	r3, [pc, #304]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80096ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096b0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80096b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80096b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096bc:	d055      	beq.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80096be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096c4:	f200 8096 	bhi.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80096c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80096ce:	f000 8084 	beq.w	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80096d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80096d8:	f200 808c 	bhi.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80096dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096e2:	d030      	beq.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80096e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096ea:	f200 8083 	bhi.w	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80096ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d004      	beq.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80096f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096fa:	d012      	beq.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80096fc:	e07a      	b.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096fe:	4b38      	ldr	r3, [pc, #224]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009706:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800970a:	d107      	bne.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800970c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009710:	4618      	mov	r0, r3
 8009712:	f000 fd63 	bl	800a1dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800971a:	e294      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800971c:	2300      	movs	r3, #0
 800971e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009720:	e291      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009722:	4b2f      	ldr	r3, [pc, #188]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800972a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800972e:	d107      	bne.n	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009730:	f107 0318 	add.w	r3, r7, #24
 8009734:	4618      	mov	r0, r3
 8009736:	f000 faa9 	bl	8009c8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800973e:	e282      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009740:	2300      	movs	r3, #0
 8009742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009744:	e27f      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009746:	4b26      	ldr	r3, [pc, #152]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800974e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009752:	d107      	bne.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009754:	f107 030c 	add.w	r3, r7, #12
 8009758:	4618      	mov	r0, r3
 800975a:	f000 fbeb 	bl	8009f34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009762:	e270      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009764:	2300      	movs	r3, #0
 8009766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009768:	e26d      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800976a:	4b1d      	ldr	r3, [pc, #116]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800976c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800976e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009772:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009774:	4b1a      	ldr	r3, [pc, #104]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 0304 	and.w	r3, r3, #4
 800977c:	2b04      	cmp	r3, #4
 800977e:	d10c      	bne.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8009780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009782:	2b00      	cmp	r3, #0
 8009784:	d109      	bne.n	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009786:	4b16      	ldr	r3, [pc, #88]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	08db      	lsrs	r3, r3, #3
 800978c:	f003 0303 	and.w	r3, r3, #3
 8009790:	4a14      	ldr	r2, [pc, #80]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009792:	fa22 f303 	lsr.w	r3, r2, r3
 8009796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009798:	e01e      	b.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800979a:	4b11      	ldr	r3, [pc, #68]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097a6:	d106      	bne.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80097a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097ae:	d102      	bne.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80097b0:	4b0d      	ldr	r3, [pc, #52]	@ (80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80097b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097b4:	e010      	b.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097b6:	4b0a      	ldr	r3, [pc, #40]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097c2:	d106      	bne.n	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80097c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097ca:	d102      	bne.n	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80097cc:	4b07      	ldr	r3, [pc, #28]	@ (80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80097ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097d0:	e002      	b.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80097d2:	2300      	movs	r3, #0
 80097d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80097d6:	e236      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80097d8:	e235      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80097da:	4b05      	ldr	r3, [pc, #20]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80097dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097de:	e232      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80097e0:	58024400 	.word	0x58024400
 80097e4:	03d09000 	.word	0x03d09000
 80097e8:	003d0900 	.word	0x003d0900
 80097ec:	017d7840 	.word	0x017d7840
 80097f0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80097f4:	2300      	movs	r3, #0
 80097f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097f8:	e225      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80097fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097fe:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009802:	430b      	orrs	r3, r1
 8009804:	f040 8085 	bne.w	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009808:	4b9c      	ldr	r3, [pc, #624]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800980a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800980c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009810:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009814:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009818:	d06b      	beq.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800981a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800981c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009820:	d874      	bhi.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009824:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009828:	d056      	beq.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800982a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009830:	d86c      	bhi.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009834:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009838:	d03b      	beq.n	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800983a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009840:	d864      	bhi.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009844:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009848:	d021      	beq.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800984a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800984c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009850:	d85c      	bhi.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009854:	2b00      	cmp	r3, #0
 8009856:	d004      	beq.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8009858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800985a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800985e:	d004      	beq.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8009860:	e054      	b.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009862:	f7fe fb1d 	bl	8007ea0 <HAL_RCC_GetPCLK1Freq>
 8009866:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009868:	e1ed      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800986a:	4b84      	ldr	r3, [pc, #528]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009872:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009876:	d107      	bne.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009878:	f107 0318 	add.w	r3, r7, #24
 800987c:	4618      	mov	r0, r3
 800987e:	f000 fa05 	bl	8009c8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009886:	e1de      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009888:	2300      	movs	r3, #0
 800988a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800988c:	e1db      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800988e:	4b7b      	ldr	r3, [pc, #492]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009896:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800989a:	d107      	bne.n	80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800989c:	f107 030c 	add.w	r3, r7, #12
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 fb47 	bl	8009f34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098aa:	e1cc      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80098ac:	2300      	movs	r3, #0
 80098ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098b0:	e1c9      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80098b2:	4b72      	ldr	r3, [pc, #456]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f003 0304 	and.w	r3, r3, #4
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d109      	bne.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098be:	4b6f      	ldr	r3, [pc, #444]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	08db      	lsrs	r3, r3, #3
 80098c4:	f003 0303 	and.w	r3, r3, #3
 80098c8:	4a6d      	ldr	r2, [pc, #436]	@ (8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80098ca:	fa22 f303 	lsr.w	r3, r2, r3
 80098ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098d0:	e1b9      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80098d2:	2300      	movs	r3, #0
 80098d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098d6:	e1b6      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80098d8:	4b68      	ldr	r3, [pc, #416]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098e4:	d102      	bne.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80098e6:	4b67      	ldr	r3, [pc, #412]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80098e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098ea:	e1ac      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80098ec:	2300      	movs	r3, #0
 80098ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098f0:	e1a9      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098f2:	4b62      	ldr	r3, [pc, #392]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098fe:	d102      	bne.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8009900:	4b61      	ldr	r3, [pc, #388]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009904:	e19f      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800990a:	e19c      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800990c:	2300      	movs	r3, #0
 800990e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009910:	e199      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009912:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009916:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800991a:	430b      	orrs	r3, r1
 800991c:	d173      	bne.n	8009a06 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800991e:	4b57      	ldr	r3, [pc, #348]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009922:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009926:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800992a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800992e:	d02f      	beq.n	8009990 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8009930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009932:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009936:	d863      	bhi.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8009938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800993a:	2b00      	cmp	r3, #0
 800993c:	d004      	beq.n	8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800993e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009944:	d012      	beq.n	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8009946:	e05b      	b.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009948:	4b4c      	ldr	r3, [pc, #304]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009950:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009954:	d107      	bne.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009956:	f107 0318 	add.w	r3, r7, #24
 800995a:	4618      	mov	r0, r3
 800995c:	f000 f996 	bl	8009c8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009964:	e16f      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009966:	2300      	movs	r3, #0
 8009968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800996a:	e16c      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800996c:	4b43      	ldr	r3, [pc, #268]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009974:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009978:	d107      	bne.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800997a:	f107 030c 	add.w	r3, r7, #12
 800997e:	4618      	mov	r0, r3
 8009980:	f000 fad8 	bl	8009f34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009988:	e15d      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800998a:	2300      	movs	r3, #0
 800998c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800998e:	e15a      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009990:	4b3a      	ldr	r3, [pc, #232]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009994:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009998:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800999a:	4b38      	ldr	r3, [pc, #224]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f003 0304 	and.w	r3, r3, #4
 80099a2:	2b04      	cmp	r3, #4
 80099a4:	d10c      	bne.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80099a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d109      	bne.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099ac:	4b33      	ldr	r3, [pc, #204]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	08db      	lsrs	r3, r3, #3
 80099b2:	f003 0303 	and.w	r3, r3, #3
 80099b6:	4a32      	ldr	r2, [pc, #200]	@ (8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80099b8:	fa22 f303 	lsr.w	r3, r2, r3
 80099bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099be:	e01e      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099c0:	4b2e      	ldr	r3, [pc, #184]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099cc:	d106      	bne.n	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80099ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099d4:	d102      	bne.n	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80099d6:	4b2b      	ldr	r3, [pc, #172]	@ (8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80099d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099da:	e010      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099dc:	4b27      	ldr	r3, [pc, #156]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099e8:	d106      	bne.n	80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80099ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099f0:	d102      	bne.n	80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80099f2:	4b25      	ldr	r3, [pc, #148]	@ (8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80099f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099f6:	e002      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80099f8:	2300      	movs	r3, #0
 80099fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80099fc:	e123      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80099fe:	e122      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009a00:	2300      	movs	r3, #0
 8009a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a04:	e11f      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009a06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a0a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009a0e:	430b      	orrs	r3, r1
 8009a10:	d13c      	bne.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009a12:	4b1a      	ldr	r3, [pc, #104]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a1a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d004      	beq.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8009a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a28:	d012      	beq.n	8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8009a2a:	e023      	b.n	8009a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a2c:	4b13      	ldr	r3, [pc, #76]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a38:	d107      	bne.n	8009a4a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f000 fbcc 	bl	800a1dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a48:	e0fd      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a4e:	e0fa      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a50:	4b0a      	ldr	r3, [pc, #40]	@ (8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a5c:	d107      	bne.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a5e:	f107 0318 	add.w	r3, r7, #24
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 f912 	bl	8009c8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009a68:	6a3b      	ldr	r3, [r7, #32]
 8009a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a6c:	e0eb      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a72:	e0e8      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009a74:	2300      	movs	r3, #0
 8009a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a78:	e0e5      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009a7a:	bf00      	nop
 8009a7c:	58024400 	.word	0x58024400
 8009a80:	03d09000 	.word	0x03d09000
 8009a84:	003d0900 	.word	0x003d0900
 8009a88:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a90:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009a94:	430b      	orrs	r3, r1
 8009a96:	f040 8085 	bne.w	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009a9a:	4b6d      	ldr	r3, [pc, #436]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a9e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009aa2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009aaa:	d06b      	beq.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8009aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ab2:	d874      	bhi.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009aba:	d056      	beq.n	8009b6a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8009abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ac2:	d86c      	bhi.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009aca:	d03b      	beq.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8009acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ace:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ad2:	d864      	bhi.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ada:	d021      	beq.n	8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8009adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ade:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ae2:	d85c      	bhi.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d004      	beq.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8009aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009af0:	d004      	beq.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8009af2:	e054      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009af4:	f000 f8b4 	bl	8009c60 <HAL_RCCEx_GetD3PCLK1Freq>
 8009af8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009afa:	e0a4      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009afc:	4b54      	ldr	r3, [pc, #336]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b08:	d107      	bne.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b0a:	f107 0318 	add.w	r3, r7, #24
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 f8bc 	bl	8009c8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b18:	e095      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b1e:	e092      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b20:	4b4b      	ldr	r3, [pc, #300]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b2c:	d107      	bne.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b2e:	f107 030c 	add.w	r3, r7, #12
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 f9fe 	bl	8009f34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b3c:	e083      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b42:	e080      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b44:	4b42      	ldr	r3, [pc, #264]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 0304 	and.w	r3, r3, #4
 8009b4c:	2b04      	cmp	r3, #4
 8009b4e:	d109      	bne.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b50:	4b3f      	ldr	r3, [pc, #252]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	08db      	lsrs	r3, r3, #3
 8009b56:	f003 0303 	and.w	r3, r3, #3
 8009b5a:	4a3e      	ldr	r2, [pc, #248]	@ (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b62:	e070      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b64:	2300      	movs	r3, #0
 8009b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b68:	e06d      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009b6a:	4b39      	ldr	r3, [pc, #228]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b76:	d102      	bne.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8009b78:	4b37      	ldr	r3, [pc, #220]	@ (8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b7c:	e063      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b82:	e060      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b84:	4b32      	ldr	r3, [pc, #200]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b90:	d102      	bne.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8009b92:	4b32      	ldr	r3, [pc, #200]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b96:	e056      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b9c:	e053      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ba2:	e050      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ba8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009bac:	430b      	orrs	r3, r1
 8009bae:	d148      	bne.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009bb0:	4b27      	ldr	r3, [pc, #156]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bb4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009bb8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bc0:	d02a      	beq.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bc8:	d838      	bhi.n	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d004      	beq.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bd6:	d00d      	beq.n	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009bd8:	e030      	b.n	8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009bda:	4b1d      	ldr	r3, [pc, #116]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009be2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009be6:	d102      	bne.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8009be8:	4b1c      	ldr	r3, [pc, #112]	@ (8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bec:	e02b      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bf2:	e028      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009bf4:	4b16      	ldr	r3, [pc, #88]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c00:	d107      	bne.n	8009c12 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 fae8 	bl	800a1dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c10:	e019      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c16:	e016      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c18:	4b0d      	ldr	r3, [pc, #52]	@ (8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c24:	d107      	bne.n	8009c36 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c26:	f107 0318 	add.w	r3, r7, #24
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f000 f82e 	bl	8009c8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c34:	e007      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c3a:	e004      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c40:	e001      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3740      	adds	r7, #64	@ 0x40
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	58024400 	.word	0x58024400
 8009c54:	03d09000 	.word	0x03d09000
 8009c58:	003d0900 	.word	0x003d0900
 8009c5c:	017d7840 	.word	0x017d7840

08009c60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009c64:	f7fe f8ec 	bl	8007e40 <HAL_RCC_GetHCLKFreq>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	4b06      	ldr	r3, [pc, #24]	@ (8009c84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009c6c:	6a1b      	ldr	r3, [r3, #32]
 8009c6e:	091b      	lsrs	r3, r3, #4
 8009c70:	f003 0307 	and.w	r3, r3, #7
 8009c74:	4904      	ldr	r1, [pc, #16]	@ (8009c88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009c76:	5ccb      	ldrb	r3, [r1, r3]
 8009c78:	f003 031f 	and.w	r3, r3, #31
 8009c7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	58024400 	.word	0x58024400
 8009c88:	08010b08 	.word	0x08010b08

08009c8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b089      	sub	sp, #36	@ 0x24
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c94:	4ba1      	ldr	r3, [pc, #644]	@ (8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c98:	f003 0303 	and.w	r3, r3, #3
 8009c9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009c9e:	4b9f      	ldr	r3, [pc, #636]	@ (8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ca2:	0b1b      	lsrs	r3, r3, #12
 8009ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ca8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009caa:	4b9c      	ldr	r3, [pc, #624]	@ (8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cae:	091b      	lsrs	r3, r3, #4
 8009cb0:	f003 0301 	and.w	r3, r3, #1
 8009cb4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009cb6:	4b99      	ldr	r3, [pc, #612]	@ (8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cba:	08db      	lsrs	r3, r3, #3
 8009cbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	fb02 f303 	mul.w	r3, r2, r3
 8009cc6:	ee07 3a90 	vmov	s15, r3
 8009cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 8111 	beq.w	8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	f000 8083 	beq.w	8009de8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	f200 80a1 	bhi.w	8009e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d003      	beq.n	8009cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d056      	beq.n	8009da4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009cf6:	e099      	b.n	8009e2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cf8:	4b88      	ldr	r3, [pc, #544]	@ (8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f003 0320 	and.w	r3, r3, #32
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d02d      	beq.n	8009d60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d04:	4b85      	ldr	r3, [pc, #532]	@ (8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	08db      	lsrs	r3, r3, #3
 8009d0a:	f003 0303 	and.w	r3, r3, #3
 8009d0e:	4a84      	ldr	r2, [pc, #528]	@ (8009f20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009d10:	fa22 f303 	lsr.w	r3, r2, r3
 8009d14:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	ee07 3a90 	vmov	s15, r3
 8009d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	ee07 3a90 	vmov	s15, r3
 8009d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d2e:	4b7b      	ldr	r3, [pc, #492]	@ (8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d36:	ee07 3a90 	vmov	s15, r3
 8009d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d42:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009d5e:	e087      	b.n	8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	ee07 3a90 	vmov	s15, r3
 8009d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d6a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009f28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d72:	4b6a      	ldr	r3, [pc, #424]	@ (8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d7a:	ee07 3a90 	vmov	s15, r3
 8009d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d86:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009da2:	e065      	b.n	8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	ee07 3a90 	vmov	s15, r3
 8009daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009db6:	4b59      	ldr	r3, [pc, #356]	@ (8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dbe:	ee07 3a90 	vmov	s15, r3
 8009dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009de6:	e043      	b.n	8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	ee07 3a90 	vmov	s15, r3
 8009dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009f30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dfa:	4b48      	ldr	r3, [pc, #288]	@ (8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e02:	ee07 3a90 	vmov	s15, r3
 8009e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e0e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e2a:	e021      	b.n	8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	ee07 3a90 	vmov	s15, r3
 8009e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e36:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e3e:	4b37      	ldr	r3, [pc, #220]	@ (8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e46:	ee07 3a90 	vmov	s15, r3
 8009e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e52:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009e70:	4b2a      	ldr	r3, [pc, #168]	@ (8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e74:	0a5b      	lsrs	r3, r3, #9
 8009e76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e7a:	ee07 3a90 	vmov	s15, r3
 8009e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e96:	ee17 2a90 	vmov	r2, s15
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea2:	0c1b      	lsrs	r3, r3, #16
 8009ea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ea8:	ee07 3a90 	vmov	s15, r3
 8009eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009eb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ec4:	ee17 2a90 	vmov	r2, s15
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009ecc:	4b13      	ldr	r3, [pc, #76]	@ (8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed0:	0e1b      	lsrs	r3, r3, #24
 8009ed2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ed6:	ee07 3a90 	vmov	s15, r3
 8009eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ede:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ee2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ee6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ef2:	ee17 2a90 	vmov	r2, s15
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009efa:	e008      	b.n	8009f0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	609a      	str	r2, [r3, #8]
}
 8009f0e:	bf00      	nop
 8009f10:	3724      	adds	r7, #36	@ 0x24
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	58024400 	.word	0x58024400
 8009f20:	03d09000 	.word	0x03d09000
 8009f24:	46000000 	.word	0x46000000
 8009f28:	4c742400 	.word	0x4c742400
 8009f2c:	4a742400 	.word	0x4a742400
 8009f30:	4bbebc20 	.word	0x4bbebc20

08009f34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b089      	sub	sp, #36	@ 0x24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f3c:	4ba1      	ldr	r3, [pc, #644]	@ (800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f40:	f003 0303 	and.w	r3, r3, #3
 8009f44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009f46:	4b9f      	ldr	r3, [pc, #636]	@ (800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f4a:	0d1b      	lsrs	r3, r3, #20
 8009f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009f52:	4b9c      	ldr	r3, [pc, #624]	@ (800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f56:	0a1b      	lsrs	r3, r3, #8
 8009f58:	f003 0301 	and.w	r3, r3, #1
 8009f5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009f5e:	4b99      	ldr	r3, [pc, #612]	@ (800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f62:	08db      	lsrs	r3, r3, #3
 8009f64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	fb02 f303 	mul.w	r3, r2, r3
 8009f6e:	ee07 3a90 	vmov	s15, r3
 8009f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f000 8111 	beq.w	800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	f000 8083 	beq.w	800a090 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	f200 80a1 	bhi.w	800a0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d003      	beq.n	8009fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d056      	beq.n	800a04c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009f9e:	e099      	b.n	800a0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fa0:	4b88      	ldr	r3, [pc, #544]	@ (800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f003 0320 	and.w	r3, r3, #32
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d02d      	beq.n	800a008 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fac:	4b85      	ldr	r3, [pc, #532]	@ (800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	08db      	lsrs	r3, r3, #3
 8009fb2:	f003 0303 	and.w	r3, r3, #3
 8009fb6:	4a84      	ldr	r2, [pc, #528]	@ (800a1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8009fbc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	ee07 3a90 	vmov	s15, r3
 8009fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	ee07 3a90 	vmov	s15, r3
 8009fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fd6:	4b7b      	ldr	r3, [pc, #492]	@ (800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fde:	ee07 3a90 	vmov	s15, r3
 8009fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a002:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a006:	e087      	b.n	800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	ee07 3a90 	vmov	s15, r3
 800a00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a012:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a1d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a01a:	4b6a      	ldr	r3, [pc, #424]	@ (800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a01c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a022:	ee07 3a90 	vmov	s15, r3
 800a026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a02a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a02e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a03a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a03e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a042:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a04a:	e065      	b.n	800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	ee07 3a90 	vmov	s15, r3
 800a052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a056:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a05a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a05e:	4b59      	ldr	r3, [pc, #356]	@ (800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a066:	ee07 3a90 	vmov	s15, r3
 800a06a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a06e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a072:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a07a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a07e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a08a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a08e:	e043      	b.n	800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	ee07 3a90 	vmov	s15, r3
 800a096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a09a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a09e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0a2:	4b48      	ldr	r3, [pc, #288]	@ (800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0aa:	ee07 3a90 	vmov	s15, r3
 800a0ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0d2:	e021      	b.n	800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	ee07 3a90 	vmov	s15, r3
 800a0da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a0e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0e6:	4b37      	ldr	r3, [pc, #220]	@ (800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ee:	ee07 3a90 	vmov	s15, r3
 800a0f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a10a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a10e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a116:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a118:	4b2a      	ldr	r3, [pc, #168]	@ (800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a11a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a11c:	0a5b      	lsrs	r3, r3, #9
 800a11e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a122:	ee07 3a90 	vmov	s15, r3
 800a126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a12a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a12e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a132:	edd7 6a07 	vldr	s13, [r7, #28]
 800a136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a13a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a13e:	ee17 2a90 	vmov	r2, s15
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a146:	4b1f      	ldr	r3, [pc, #124]	@ (800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a14a:	0c1b      	lsrs	r3, r3, #16
 800a14c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a150:	ee07 3a90 	vmov	s15, r3
 800a154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a158:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a15c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a160:	edd7 6a07 	vldr	s13, [r7, #28]
 800a164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a16c:	ee17 2a90 	vmov	r2, s15
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a174:	4b13      	ldr	r3, [pc, #76]	@ (800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a178:	0e1b      	lsrs	r3, r3, #24
 800a17a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a17e:	ee07 3a90 	vmov	s15, r3
 800a182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a186:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a18a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a18e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a19a:	ee17 2a90 	vmov	r2, s15
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a1a2:	e008      	b.n	800a1b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	609a      	str	r2, [r3, #8]
}
 800a1b6:	bf00      	nop
 800a1b8:	3724      	adds	r7, #36	@ 0x24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	58024400 	.word	0x58024400
 800a1c8:	03d09000 	.word	0x03d09000
 800a1cc:	46000000 	.word	0x46000000
 800a1d0:	4c742400 	.word	0x4c742400
 800a1d4:	4a742400 	.word	0x4a742400
 800a1d8:	4bbebc20 	.word	0x4bbebc20

0800a1dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b089      	sub	sp, #36	@ 0x24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1e4:	4ba0      	ldr	r3, [pc, #640]	@ (800a468 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e8:	f003 0303 	and.w	r3, r3, #3
 800a1ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a1ee:	4b9e      	ldr	r3, [pc, #632]	@ (800a468 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f2:	091b      	lsrs	r3, r3, #4
 800a1f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a1f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a1fa:	4b9b      	ldr	r3, [pc, #620]	@ (800a468 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1fe:	f003 0301 	and.w	r3, r3, #1
 800a202:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a204:	4b98      	ldr	r3, [pc, #608]	@ (800a468 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a208:	08db      	lsrs	r3, r3, #3
 800a20a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	fb02 f303 	mul.w	r3, r2, r3
 800a214:	ee07 3a90 	vmov	s15, r3
 800a218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a21c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	2b00      	cmp	r3, #0
 800a224:	f000 8111 	beq.w	800a44a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	f000 8083 	beq.w	800a336 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	2b02      	cmp	r3, #2
 800a234:	f200 80a1 	bhi.w	800a37a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	2b01      	cmp	r3, #1
 800a242:	d056      	beq.n	800a2f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a244:	e099      	b.n	800a37a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a246:	4b88      	ldr	r3, [pc, #544]	@ (800a468 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f003 0320 	and.w	r3, r3, #32
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d02d      	beq.n	800a2ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a252:	4b85      	ldr	r3, [pc, #532]	@ (800a468 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	08db      	lsrs	r3, r3, #3
 800a258:	f003 0303 	and.w	r3, r3, #3
 800a25c:	4a83      	ldr	r2, [pc, #524]	@ (800a46c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a25e:	fa22 f303 	lsr.w	r3, r2, r3
 800a262:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	ee07 3a90 	vmov	s15, r3
 800a26a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	ee07 3a90 	vmov	s15, r3
 800a274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a278:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a27c:	4b7a      	ldr	r3, [pc, #488]	@ (800a468 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a27e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a284:	ee07 3a90 	vmov	s15, r3
 800a288:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a28c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a290:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a294:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a298:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a29c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2a8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a2ac:	e087      	b.n	800a3be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	ee07 3a90 	vmov	s15, r3
 800a2b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2b8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a474 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a2bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2c0:	4b69      	ldr	r3, [pc, #420]	@ (800a468 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2c8:	ee07 3a90 	vmov	s15, r3
 800a2cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2d4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2f0:	e065      	b.n	800a3be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	ee07 3a90 	vmov	s15, r3
 800a2f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2fc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a478 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a300:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a304:	4b58      	ldr	r3, [pc, #352]	@ (800a468 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a30c:	ee07 3a90 	vmov	s15, r3
 800a310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a314:	ed97 6a03 	vldr	s12, [r7, #12]
 800a318:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a31c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a320:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a324:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a328:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a32c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a330:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a334:	e043      	b.n	800a3be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	ee07 3a90 	vmov	s15, r3
 800a33c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a340:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a47c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a344:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a348:	4b47      	ldr	r3, [pc, #284]	@ (800a468 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a34a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a34c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a350:	ee07 3a90 	vmov	s15, r3
 800a354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a358:	ed97 6a03 	vldr	s12, [r7, #12]
 800a35c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a360:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a364:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a368:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a36c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a370:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a374:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a378:	e021      	b.n	800a3be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	ee07 3a90 	vmov	s15, r3
 800a380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a384:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a474 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a388:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a38c:	4b36      	ldr	r3, [pc, #216]	@ (800a468 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a38e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a394:	ee07 3a90 	vmov	s15, r3
 800a398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a39c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3a0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a3a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3bc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a3be:	4b2a      	ldr	r3, [pc, #168]	@ (800a468 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3c2:	0a5b      	lsrs	r3, r3, #9
 800a3c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3c8:	ee07 3a90 	vmov	s15, r3
 800a3cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3e4:	ee17 2a90 	vmov	r2, s15
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a3ec:	4b1e      	ldr	r3, [pc, #120]	@ (800a468 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3f0:	0c1b      	lsrs	r3, r3, #16
 800a3f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3f6:	ee07 3a90 	vmov	s15, r3
 800a3fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a402:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a406:	edd7 6a07 	vldr	s13, [r7, #28]
 800a40a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a40e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a412:	ee17 2a90 	vmov	r2, s15
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a41a:	4b13      	ldr	r3, [pc, #76]	@ (800a468 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a41c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a41e:	0e1b      	lsrs	r3, r3, #24
 800a420:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a424:	ee07 3a90 	vmov	s15, r3
 800a428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a42c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a430:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a434:	edd7 6a07 	vldr	s13, [r7, #28]
 800a438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a43c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a440:	ee17 2a90 	vmov	r2, s15
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a448:	e008      	b.n	800a45c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	609a      	str	r2, [r3, #8]
}
 800a45c:	bf00      	nop
 800a45e:	3724      	adds	r7, #36	@ 0x24
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr
 800a468:	58024400 	.word	0x58024400
 800a46c:	03d09000 	.word	0x03d09000
 800a470:	46000000 	.word	0x46000000
 800a474:	4c742400 	.word	0x4c742400
 800a478:	4a742400 	.word	0x4a742400
 800a47c:	4bbebc20 	.word	0x4bbebc20

0800a480 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a48a:	2300      	movs	r3, #0
 800a48c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a48e:	4b53      	ldr	r3, [pc, #332]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a492:	f003 0303 	and.w	r3, r3, #3
 800a496:	2b03      	cmp	r3, #3
 800a498:	d101      	bne.n	800a49e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e099      	b.n	800a5d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a49e:	4b4f      	ldr	r3, [pc, #316]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a4e      	ldr	r2, [pc, #312]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a4a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a4a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4aa:	f7f7 fae1 	bl	8001a70 <HAL_GetTick>
 800a4ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4b0:	e008      	b.n	800a4c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a4b2:	f7f7 fadd 	bl	8001a70 <HAL_GetTick>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	d901      	bls.n	800a4c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	e086      	b.n	800a5d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4c4:	4b45      	ldr	r3, [pc, #276]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1f0      	bne.n	800a4b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a4d0:	4b42      	ldr	r3, [pc, #264]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a4d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	031b      	lsls	r3, r3, #12
 800a4de:	493f      	ldr	r1, [pc, #252]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	628b      	str	r3, [r1, #40]	@ 0x28
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	025b      	lsls	r3, r3, #9
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	431a      	orrs	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	3b01      	subs	r3, #1
 800a500:	041b      	lsls	r3, r3, #16
 800a502:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a506:	431a      	orrs	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	3b01      	subs	r3, #1
 800a50e:	061b      	lsls	r3, r3, #24
 800a510:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a514:	4931      	ldr	r1, [pc, #196]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a516:	4313      	orrs	r3, r2
 800a518:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a51a:	4b30      	ldr	r3, [pc, #192]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a51c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a51e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	695b      	ldr	r3, [r3, #20]
 800a526:	492d      	ldr	r1, [pc, #180]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a528:	4313      	orrs	r3, r2
 800a52a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a52c:	4b2b      	ldr	r3, [pc, #172]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a530:	f023 0220 	bic.w	r2, r3, #32
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	699b      	ldr	r3, [r3, #24]
 800a538:	4928      	ldr	r1, [pc, #160]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a53a:	4313      	orrs	r3, r2
 800a53c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a53e:	4b27      	ldr	r3, [pc, #156]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a542:	4a26      	ldr	r2, [pc, #152]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a544:	f023 0310 	bic.w	r3, r3, #16
 800a548:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a54a:	4b24      	ldr	r3, [pc, #144]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a54c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a54e:	4b24      	ldr	r3, [pc, #144]	@ (800a5e0 <RCCEx_PLL2_Config+0x160>)
 800a550:	4013      	ands	r3, r2
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	69d2      	ldr	r2, [r2, #28]
 800a556:	00d2      	lsls	r2, r2, #3
 800a558:	4920      	ldr	r1, [pc, #128]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a55a:	4313      	orrs	r3, r2
 800a55c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a55e:	4b1f      	ldr	r3, [pc, #124]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a562:	4a1e      	ldr	r2, [pc, #120]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a564:	f043 0310 	orr.w	r3, r3, #16
 800a568:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d106      	bne.n	800a57e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a570:	4b1a      	ldr	r3, [pc, #104]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a574:	4a19      	ldr	r2, [pc, #100]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a576:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a57a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a57c:	e00f      	b.n	800a59e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d106      	bne.n	800a592 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a584:	4b15      	ldr	r3, [pc, #84]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a588:	4a14      	ldr	r2, [pc, #80]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a58a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a58e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a590:	e005      	b.n	800a59e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a592:	4b12      	ldr	r3, [pc, #72]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a596:	4a11      	ldr	r2, [pc, #68]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a598:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a59c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a59e:	4b0f      	ldr	r3, [pc, #60]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a0e      	ldr	r2, [pc, #56]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a5a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a5a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5aa:	f7f7 fa61 	bl	8001a70 <HAL_GetTick>
 800a5ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a5b0:	e008      	b.n	800a5c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a5b2:	f7f7 fa5d 	bl	8001a70 <HAL_GetTick>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	1ad3      	subs	r3, r2, r3
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d901      	bls.n	800a5c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	e006      	b.n	800a5d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a5c4:	4b05      	ldr	r3, [pc, #20]	@ (800a5dc <RCCEx_PLL2_Config+0x15c>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d0f0      	beq.n	800a5b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	58024400 	.word	0x58024400
 800a5e0:	ffff0007 	.word	0xffff0007

0800a5e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a5f2:	4b53      	ldr	r3, [pc, #332]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a5f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5f6:	f003 0303 	and.w	r3, r3, #3
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	d101      	bne.n	800a602 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a5fe:	2301      	movs	r3, #1
 800a600:	e099      	b.n	800a736 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a602:	4b4f      	ldr	r3, [pc, #316]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a4e      	ldr	r2, [pc, #312]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a608:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a60c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a60e:	f7f7 fa2f 	bl	8001a70 <HAL_GetTick>
 800a612:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a614:	e008      	b.n	800a628 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a616:	f7f7 fa2b 	bl	8001a70 <HAL_GetTick>
 800a61a:	4602      	mov	r2, r0
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	1ad3      	subs	r3, r2, r3
 800a620:	2b02      	cmp	r3, #2
 800a622:	d901      	bls.n	800a628 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a624:	2303      	movs	r3, #3
 800a626:	e086      	b.n	800a736 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a628:	4b45      	ldr	r3, [pc, #276]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1f0      	bne.n	800a616 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a634:	4b42      	ldr	r3, [pc, #264]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a638:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	051b      	lsls	r3, r3, #20
 800a642:	493f      	ldr	r1, [pc, #252]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a644:	4313      	orrs	r3, r2
 800a646:	628b      	str	r3, [r1, #40]	@ 0x28
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	3b01      	subs	r3, #1
 800a64e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	3b01      	subs	r3, #1
 800a658:	025b      	lsls	r3, r3, #9
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	431a      	orrs	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	3b01      	subs	r3, #1
 800a664:	041b      	lsls	r3, r3, #16
 800a666:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a66a:	431a      	orrs	r2, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	691b      	ldr	r3, [r3, #16]
 800a670:	3b01      	subs	r3, #1
 800a672:	061b      	lsls	r3, r3, #24
 800a674:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a678:	4931      	ldr	r1, [pc, #196]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a67a:	4313      	orrs	r3, r2
 800a67c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a67e:	4b30      	ldr	r3, [pc, #192]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a682:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	695b      	ldr	r3, [r3, #20]
 800a68a:	492d      	ldr	r1, [pc, #180]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a68c:	4313      	orrs	r3, r2
 800a68e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a690:	4b2b      	ldr	r3, [pc, #172]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a694:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	4928      	ldr	r1, [pc, #160]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a6a2:	4b27      	ldr	r3, [pc, #156]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a6a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a6:	4a26      	ldr	r2, [pc, #152]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a6a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a6ae:	4b24      	ldr	r3, [pc, #144]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a6b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6b2:	4b24      	ldr	r3, [pc, #144]	@ (800a744 <RCCEx_PLL3_Config+0x160>)
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	69d2      	ldr	r2, [r2, #28]
 800a6ba:	00d2      	lsls	r2, r2, #3
 800a6bc:	4920      	ldr	r1, [pc, #128]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a6c2:	4b1f      	ldr	r3, [pc, #124]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a6c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6c6:	4a1e      	ldr	r2, [pc, #120]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a6c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d106      	bne.n	800a6e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a6d4:	4b1a      	ldr	r3, [pc, #104]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a6d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6d8:	4a19      	ldr	r2, [pc, #100]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a6da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a6de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a6e0:	e00f      	b.n	800a702 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d106      	bne.n	800a6f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a6e8:	4b15      	ldr	r3, [pc, #84]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a6ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ec:	4a14      	ldr	r2, [pc, #80]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a6ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a6f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a6f4:	e005      	b.n	800a702 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a6f6:	4b12      	ldr	r3, [pc, #72]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a6f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6fa:	4a11      	ldr	r2, [pc, #68]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a6fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a700:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a702:	4b0f      	ldr	r3, [pc, #60]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a0e      	ldr	r2, [pc, #56]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a70c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a70e:	f7f7 f9af 	bl	8001a70 <HAL_GetTick>
 800a712:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a714:	e008      	b.n	800a728 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a716:	f7f7 f9ab 	bl	8001a70 <HAL_GetTick>
 800a71a:	4602      	mov	r2, r0
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	1ad3      	subs	r3, r2, r3
 800a720:	2b02      	cmp	r3, #2
 800a722:	d901      	bls.n	800a728 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a724:	2303      	movs	r3, #3
 800a726:	e006      	b.n	800a736 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a728:	4b05      	ldr	r3, [pc, #20]	@ (800a740 <RCCEx_PLL3_Config+0x15c>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a730:	2b00      	cmp	r3, #0
 800a732:	d0f0      	beq.n	800a716 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a734:	7bfb      	ldrb	r3, [r7, #15]
}
 800a736:	4618      	mov	r0, r3
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	58024400 	.word	0x58024400
 800a744:	ffff0007 	.word	0xffff0007

0800a748 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d101      	bne.n	800a75a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	e10f      	b.n	800a97a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a87      	ldr	r2, [pc, #540]	@ (800a984 <HAL_SPI_Init+0x23c>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d00f      	beq.n	800a78a <HAL_SPI_Init+0x42>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a86      	ldr	r2, [pc, #536]	@ (800a988 <HAL_SPI_Init+0x240>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d00a      	beq.n	800a78a <HAL_SPI_Init+0x42>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a84      	ldr	r2, [pc, #528]	@ (800a98c <HAL_SPI_Init+0x244>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d005      	beq.n	800a78a <HAL_SPI_Init+0x42>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	2b0f      	cmp	r3, #15
 800a784:	d901      	bls.n	800a78a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	e0f7      	b.n	800a97a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fbba 	bl	800af04 <SPI_GetPacketSize>
 800a790:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a7b      	ldr	r2, [pc, #492]	@ (800a984 <HAL_SPI_Init+0x23c>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d00c      	beq.n	800a7b6 <HAL_SPI_Init+0x6e>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a79      	ldr	r2, [pc, #484]	@ (800a988 <HAL_SPI_Init+0x240>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d007      	beq.n	800a7b6 <HAL_SPI_Init+0x6e>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a78      	ldr	r2, [pc, #480]	@ (800a98c <HAL_SPI_Init+0x244>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d002      	beq.n	800a7b6 <HAL_SPI_Init+0x6e>
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2b08      	cmp	r3, #8
 800a7b4:	d811      	bhi.n	800a7da <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a7ba:	4a72      	ldr	r2, [pc, #456]	@ (800a984 <HAL_SPI_Init+0x23c>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d009      	beq.n	800a7d4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a70      	ldr	r2, [pc, #448]	@ (800a988 <HAL_SPI_Init+0x240>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d004      	beq.n	800a7d4 <HAL_SPI_Init+0x8c>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a6f      	ldr	r2, [pc, #444]	@ (800a98c <HAL_SPI_Init+0x244>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d104      	bne.n	800a7de <HAL_SPI_Init+0x96>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2b10      	cmp	r3, #16
 800a7d8:	d901      	bls.n	800a7de <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e0cd      	b.n	800a97a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d106      	bne.n	800a7f8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f7f6 fbee 	bl	8000fd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2202      	movs	r2, #2
 800a7fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f022 0201 	bic.w	r2, r2, #1
 800a80e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a81a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	699b      	ldr	r3, [r3, #24]
 800a820:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a824:	d119      	bne.n	800a85a <HAL_SPI_Init+0x112>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a82e:	d103      	bne.n	800a838 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a834:	2b00      	cmp	r3, #0
 800a836:	d008      	beq.n	800a84a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d10c      	bne.n	800a85a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a844:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a848:	d107      	bne.n	800a85a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a858:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00f      	beq.n	800a886 <HAL_SPI_Init+0x13e>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	2b06      	cmp	r3, #6
 800a86c:	d90b      	bls.n	800a886 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	430a      	orrs	r2, r1
 800a882:	601a      	str	r2, [r3, #0]
 800a884:	e007      	b.n	800a896 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a894:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	69da      	ldr	r2, [r3, #28]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a89e:	431a      	orrs	r2, r3
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	431a      	orrs	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8a8:	ea42 0103 	orr.w	r1, r2, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	68da      	ldr	r2, [r3, #12]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	430a      	orrs	r2, r1
 800a8b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c0:	431a      	orrs	r2, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	699b      	ldr	r3, [r3, #24]
 800a8cc:	431a      	orrs	r2, r3
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	431a      	orrs	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	695b      	ldr	r3, [r3, #20]
 800a8d8:	431a      	orrs	r2, r3
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	431a      	orrs	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	431a      	orrs	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8ea:	431a      	orrs	r2, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	431a      	orrs	r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a8f6:	ea42 0103 	orr.w	r1, r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	430a      	orrs	r2, r1
 800a904:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d113      	bne.n	800a936 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a920:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a934:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f022 0201 	bic.w	r2, r2, #1
 800a944:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00a      	beq.n	800a968 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	430a      	orrs	r2, r1
 800a966:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	40013000 	.word	0x40013000
 800a988:	40003800 	.word	0x40003800
 800a98c:	40003c00 	.word	0x40003c00

0800a990 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b08a      	sub	sp, #40	@ 0x28
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a9a8:	6a3a      	ldr	r2, [r7, #32]
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	4013      	ands	r3, r2
 800a9ae:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a9c2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	3330      	adds	r3, #48	@ 0x30
 800a9ca:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d010      	beq.n	800a9f8 <HAL_SPI_IRQHandler+0x68>
 800a9d6:	6a3b      	ldr	r3, [r7, #32]
 800a9d8:	f003 0308 	and.w	r3, r3, #8
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00b      	beq.n	800a9f8 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	699a      	ldr	r2, [r3, #24]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a9ee:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 f9c3 	bl	800ad7c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a9f6:	e192      	b.n	800ad1e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d113      	bne.n	800aa2a <HAL_SPI_IRQHandler+0x9a>
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	f003 0320 	and.w	r3, r3, #32
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10e      	bne.n	800aa2a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d009      	beq.n	800aa2a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	4798      	blx	r3
    handled = 1UL;
 800aa26:	2301      	movs	r3, #1
 800aa28:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d10f      	bne.n	800aa54 <HAL_SPI_IRQHandler+0xc4>
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	f003 0301 	and.w	r3, r3, #1
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00a      	beq.n	800aa54 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d105      	bne.n	800aa54 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	4798      	blx	r3
    handled = 1UL;
 800aa50:	2301      	movs	r3, #1
 800aa52:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	f003 0320 	and.w	r3, r3, #32
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10f      	bne.n	800aa7e <HAL_SPI_IRQHandler+0xee>
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	f003 0302 	and.w	r3, r3, #2
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00a      	beq.n	800aa7e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d105      	bne.n	800aa7e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	4798      	blx	r3
    handled = 1UL;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800aa7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f040 8147 	bne.w	800ad14 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	f003 0308 	and.w	r3, r3, #8
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f000 808b 	beq.w	800aba8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	699a      	ldr	r2, [r3, #24]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f042 0208 	orr.w	r2, r2, #8
 800aaa0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	699a      	ldr	r2, [r3, #24]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f042 0210 	orr.w	r2, r2, #16
 800aab0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	699a      	ldr	r2, [r3, #24]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aac0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	691a      	ldr	r2, [r3, #16]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f022 0208 	bic.w	r2, r2, #8
 800aad0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d13d      	bne.n	800ab5c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800aae0:	e036      	b.n	800ab50 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	2b0f      	cmp	r3, #15
 800aae8:	d90b      	bls.n	800ab02 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aaf2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800aaf4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aafa:	1d1a      	adds	r2, r3, #4
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	665a      	str	r2, [r3, #100]	@ 0x64
 800ab00:	e01d      	b.n	800ab3e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	2b07      	cmp	r3, #7
 800ab08:	d90b      	bls.n	800ab22 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	8812      	ldrh	r2, [r2, #0]
 800ab12:	b292      	uxth	r2, r2
 800ab14:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab1a:	1c9a      	adds	r2, r3, #2
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	665a      	str	r2, [r3, #100]	@ 0x64
 800ab20:	e00d      	b.n	800ab3e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab2e:	7812      	ldrb	r2, [r2, #0]
 800ab30:	b2d2      	uxtb	r2, r2
 800ab32:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab38:	1c5a      	adds	r2, r3, #1
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	3b01      	subs	r3, #1
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1c2      	bne.n	800aae2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 f931 	bl	800adc4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2201      	movs	r2, #1
 800ab66:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d003      	beq.n	800ab7c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 f8f7 	bl	800ad68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ab7a:	e0d0      	b.n	800ad1e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ab7c:	7cfb      	ldrb	r3, [r7, #19]
 800ab7e:	2b05      	cmp	r3, #5
 800ab80:	d103      	bne.n	800ab8a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 f8e6 	bl	800ad54 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800ab88:	e0c6      	b.n	800ad18 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ab8a:	7cfb      	ldrb	r3, [r7, #19]
 800ab8c:	2b04      	cmp	r3, #4
 800ab8e:	d103      	bne.n	800ab98 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 f8d5 	bl	800ad40 <HAL_SPI_RxCpltCallback>
    return;
 800ab96:	e0bf      	b.n	800ad18 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800ab98:	7cfb      	ldrb	r3, [r7, #19]
 800ab9a:	2b03      	cmp	r3, #3
 800ab9c:	f040 80bc 	bne.w	800ad18 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f8c3 	bl	800ad2c <HAL_SPI_TxCpltCallback>
    return;
 800aba6:	e0b7      	b.n	800ad18 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f000 80b5 	beq.w	800ad1e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00f      	beq.n	800abde <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abc4:	f043 0204 	orr.w	r2, r3, #4
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	699a      	ldr	r2, [r3, #24]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800abdc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00f      	beq.n	800ac08 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abee:	f043 0201 	orr.w	r2, r3, #1
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	699a      	ldr	r2, [r3, #24]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac06:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800ac08:	69bb      	ldr	r3, [r7, #24]
 800ac0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00f      	beq.n	800ac32 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac18:	f043 0208 	orr.w	r2, r3, #8
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	699a      	ldr	r2, [r3, #24]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ac30:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	f003 0320 	and.w	r3, r3, #32
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00f      	beq.n	800ac5c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac42:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	699a      	ldr	r2, [r3, #24]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f042 0220 	orr.w	r2, r2, #32
 800ac5a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d05a      	beq.n	800ad1c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f022 0201 	bic.w	r2, r2, #1
 800ac74:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	6919      	ldr	r1, [r3, #16]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	4b28      	ldr	r3, [pc, #160]	@ (800ad24 <HAL_SPI_IRQHandler+0x394>)
 800ac82:	400b      	ands	r3, r1
 800ac84:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ac8c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ac90:	d138      	bne.n	800ad04 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	689a      	ldr	r2, [r3, #8]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800aca0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d013      	beq.n	800acd2 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800acae:	4a1e      	ldr	r2, [pc, #120]	@ (800ad28 <HAL_SPI_IRQHandler+0x398>)
 800acb0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fa fa40 	bl	800513c <HAL_DMA_Abort_IT>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d007      	beq.n	800acd2 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acc8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d020      	beq.n	800ad1c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800acde:	4a12      	ldr	r2, [pc, #72]	@ (800ad28 <HAL_SPI_IRQHandler+0x398>)
 800ace0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7fa fa28 	bl	800513c <HAL_DMA_Abort_IT>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d014      	beq.n	800ad1c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acf8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ad02:	e00b      	b.n	800ad1c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2201      	movs	r2, #1
 800ad08:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 f82b 	bl	800ad68 <HAL_SPI_ErrorCallback>
    return;
 800ad12:	e003      	b.n	800ad1c <HAL_SPI_IRQHandler+0x38c>
    return;
 800ad14:	bf00      	nop
 800ad16:	e002      	b.n	800ad1e <HAL_SPI_IRQHandler+0x38e>
    return;
 800ad18:	bf00      	nop
 800ad1a:	e000      	b.n	800ad1e <HAL_SPI_IRQHandler+0x38e>
    return;
 800ad1c:	bf00      	nop
  }
}
 800ad1e:	3728      	adds	r7, #40	@ 0x28
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	fffffc94 	.word	0xfffffc94
 800ad28:	0800ad91 	.word	0x0800ad91

0800ad2c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ad48:	bf00      	nop
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ad70:	bf00      	nop
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800ad84:	bf00      	nop
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad9c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2201      	movs	r2, #1
 800adb2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	f7ff ffd6 	bl	800ad68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800adbc:	bf00      	nop
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	695b      	ldr	r3, [r3, #20]
 800add2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	699a      	ldr	r2, [r3, #24]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f042 0208 	orr.w	r2, r2, #8
 800ade2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	699a      	ldr	r2, [r3, #24]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f042 0210 	orr.w	r2, r2, #16
 800adf2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f022 0201 	bic.w	r2, r2, #1
 800ae02:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	6919      	ldr	r1, [r3, #16]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	4b3c      	ldr	r3, [pc, #240]	@ (800af00 <SPI_CloseTransfer+0x13c>)
 800ae10:	400b      	ands	r3, r1
 800ae12:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	689a      	ldr	r2, [r3, #8]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ae22:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	2b04      	cmp	r3, #4
 800ae2e:	d014      	beq.n	800ae5a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f003 0320 	and.w	r3, r3, #32
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00f      	beq.n	800ae5a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae40:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	699a      	ldr	r2, [r3, #24]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f042 0220 	orr.w	r2, r2, #32
 800ae58:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d014      	beq.n	800ae90 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00f      	beq.n	800ae90 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae76:	f043 0204 	orr.w	r2, r3, #4
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	699a      	ldr	r2, [r3, #24]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae8e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00f      	beq.n	800aeba <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aea0:	f043 0201 	orr.w	r2, r3, #1
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	699a      	ldr	r2, [r3, #24]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aeb8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00f      	beq.n	800aee4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aeca:	f043 0208 	orr.w	r2, r3, #8
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	699a      	ldr	r2, [r3, #24]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aee2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800aef4:	bf00      	nop
 800aef6:	3714      	adds	r7, #20
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr
 800af00:	fffffc90 	.word	0xfffffc90

0800af04 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af10:	095b      	lsrs	r3, r3, #5
 800af12:	3301      	adds	r3, #1
 800af14:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	3301      	adds	r3, #1
 800af1c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	3307      	adds	r3, #7
 800af22:	08db      	lsrs	r3, r3, #3
 800af24:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	fb02 f303 	mul.w	r3, r2, r3
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3714      	adds	r7, #20
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr

0800af3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b082      	sub	sp, #8
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d101      	bne.n	800af4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	e049      	b.n	800afe0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af52:	b2db      	uxtb	r3, r3
 800af54:	2b00      	cmp	r3, #0
 800af56:	d106      	bne.n	800af66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f7f6 fb83 	bl	800166c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2202      	movs	r2, #2
 800af6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	3304      	adds	r3, #4
 800af76:	4619      	mov	r1, r3
 800af78:	4610      	mov	r0, r2
 800af7a:	f000 fdf3 	bl	800bb64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2201      	movs	r2, #1
 800af82:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2201      	movs	r2, #1
 800af8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2201      	movs	r2, #1
 800af92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2201      	movs	r2, #1
 800af9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2201      	movs	r2, #1
 800afa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2201      	movs	r2, #1
 800afaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2201      	movs	r2, #1
 800afb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2201      	movs	r2, #1
 800afba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2201      	movs	r2, #1
 800afc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2201      	movs	r2, #1
 800afca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2201      	movs	r2, #1
 800afd2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2201      	movs	r2, #1
 800afda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800afde:	2300      	movs	r3, #0
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800afe8:	b480      	push	{r7}
 800afea:	b085      	sub	sp, #20
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d001      	beq.n	800b000 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	e056      	b.n	800b0ae <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2202      	movs	r2, #2
 800b004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a2b      	ldr	r2, [pc, #172]	@ (800b0bc <HAL_TIM_Base_Start+0xd4>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d02c      	beq.n	800b06c <HAL_TIM_Base_Start+0x84>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b01a:	d027      	beq.n	800b06c <HAL_TIM_Base_Start+0x84>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a27      	ldr	r2, [pc, #156]	@ (800b0c0 <HAL_TIM_Base_Start+0xd8>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d022      	beq.n	800b06c <HAL_TIM_Base_Start+0x84>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a26      	ldr	r2, [pc, #152]	@ (800b0c4 <HAL_TIM_Base_Start+0xdc>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d01d      	beq.n	800b06c <HAL_TIM_Base_Start+0x84>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a24      	ldr	r2, [pc, #144]	@ (800b0c8 <HAL_TIM_Base_Start+0xe0>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d018      	beq.n	800b06c <HAL_TIM_Base_Start+0x84>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a23      	ldr	r2, [pc, #140]	@ (800b0cc <HAL_TIM_Base_Start+0xe4>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d013      	beq.n	800b06c <HAL_TIM_Base_Start+0x84>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a21      	ldr	r2, [pc, #132]	@ (800b0d0 <HAL_TIM_Base_Start+0xe8>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d00e      	beq.n	800b06c <HAL_TIM_Base_Start+0x84>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a20      	ldr	r2, [pc, #128]	@ (800b0d4 <HAL_TIM_Base_Start+0xec>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d009      	beq.n	800b06c <HAL_TIM_Base_Start+0x84>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a1e      	ldr	r2, [pc, #120]	@ (800b0d8 <HAL_TIM_Base_Start+0xf0>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d004      	beq.n	800b06c <HAL_TIM_Base_Start+0x84>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a1d      	ldr	r2, [pc, #116]	@ (800b0dc <HAL_TIM_Base_Start+0xf4>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d115      	bne.n	800b098 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	689a      	ldr	r2, [r3, #8]
 800b072:	4b1b      	ldr	r3, [pc, #108]	@ (800b0e0 <HAL_TIM_Base_Start+0xf8>)
 800b074:	4013      	ands	r3, r2
 800b076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2b06      	cmp	r3, #6
 800b07c:	d015      	beq.n	800b0aa <HAL_TIM_Base_Start+0xc2>
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b084:	d011      	beq.n	800b0aa <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f042 0201 	orr.w	r2, r2, #1
 800b094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b096:	e008      	b.n	800b0aa <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f042 0201 	orr.w	r2, r2, #1
 800b0a6:	601a      	str	r2, [r3, #0]
 800b0a8:	e000      	b.n	800b0ac <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3714      	adds	r7, #20
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	40010000 	.word	0x40010000
 800b0c0:	40000400 	.word	0x40000400
 800b0c4:	40000800 	.word	0x40000800
 800b0c8:	40000c00 	.word	0x40000c00
 800b0cc:	40010400 	.word	0x40010400
 800b0d0:	40001800 	.word	0x40001800
 800b0d4:	40014000 	.word	0x40014000
 800b0d8:	4000e000 	.word	0x4000e000
 800b0dc:	4000e400 	.word	0x4000e400
 800b0e0:	00010007 	.word	0x00010007

0800b0e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d001      	beq.n	800b0fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e05e      	b.n	800b1ba <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2202      	movs	r2, #2
 800b100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	68da      	ldr	r2, [r3, #12]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f042 0201 	orr.w	r2, r2, #1
 800b112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a2b      	ldr	r2, [pc, #172]	@ (800b1c8 <HAL_TIM_Base_Start_IT+0xe4>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d02c      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x94>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b126:	d027      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x94>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a27      	ldr	r2, [pc, #156]	@ (800b1cc <HAL_TIM_Base_Start_IT+0xe8>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d022      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x94>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a26      	ldr	r2, [pc, #152]	@ (800b1d0 <HAL_TIM_Base_Start_IT+0xec>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d01d      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x94>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a24      	ldr	r2, [pc, #144]	@ (800b1d4 <HAL_TIM_Base_Start_IT+0xf0>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d018      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x94>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a23      	ldr	r2, [pc, #140]	@ (800b1d8 <HAL_TIM_Base_Start_IT+0xf4>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d013      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x94>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a21      	ldr	r2, [pc, #132]	@ (800b1dc <HAL_TIM_Base_Start_IT+0xf8>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d00e      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x94>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a20      	ldr	r2, [pc, #128]	@ (800b1e0 <HAL_TIM_Base_Start_IT+0xfc>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d009      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x94>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a1e      	ldr	r2, [pc, #120]	@ (800b1e4 <HAL_TIM_Base_Start_IT+0x100>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d004      	beq.n	800b178 <HAL_TIM_Base_Start_IT+0x94>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a1d      	ldr	r2, [pc, #116]	@ (800b1e8 <HAL_TIM_Base_Start_IT+0x104>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d115      	bne.n	800b1a4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	689a      	ldr	r2, [r3, #8]
 800b17e:	4b1b      	ldr	r3, [pc, #108]	@ (800b1ec <HAL_TIM_Base_Start_IT+0x108>)
 800b180:	4013      	ands	r3, r2
 800b182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2b06      	cmp	r3, #6
 800b188:	d015      	beq.n	800b1b6 <HAL_TIM_Base_Start_IT+0xd2>
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b190:	d011      	beq.n	800b1b6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f042 0201 	orr.w	r2, r2, #1
 800b1a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1a2:	e008      	b.n	800b1b6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f042 0201 	orr.w	r2, r2, #1
 800b1b2:	601a      	str	r2, [r3, #0]
 800b1b4:	e000      	b.n	800b1b8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3714      	adds	r7, #20
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	40010000 	.word	0x40010000
 800b1cc:	40000400 	.word	0x40000400
 800b1d0:	40000800 	.word	0x40000800
 800b1d4:	40000c00 	.word	0x40000c00
 800b1d8:	40010400 	.word	0x40010400
 800b1dc:	40001800 	.word	0x40001800
 800b1e0:	40014000 	.word	0x40014000
 800b1e4:	4000e000 	.word	0x4000e000
 800b1e8:	4000e400 	.word	0x4000e400
 800b1ec:	00010007 	.word	0x00010007

0800b1f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d101      	bne.n	800b202 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	e049      	b.n	800b296 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d106      	bne.n	800b21c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 f841 	bl	800b29e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2202      	movs	r2, #2
 800b220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	3304      	adds	r3, #4
 800b22c:	4619      	mov	r1, r3
 800b22e:	4610      	mov	r0, r2
 800b230:	f000 fc98 	bl	800bb64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2201      	movs	r2, #1
 800b248:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2201      	movs	r2, #1
 800b250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2201      	movs	r2, #1
 800b260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2201      	movs	r2, #1
 800b268:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2201      	movs	r2, #1
 800b270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2201      	movs	r2, #1
 800b278:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2201      	movs	r2, #1
 800b290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3708      	adds	r7, #8
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b29e:	b480      	push	{r7}
 800b2a0:	b083      	sub	sp, #12
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b2a6:	bf00      	nop
 800b2a8:	370c      	adds	r7, #12
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
	...

0800b2b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d109      	bne.n	800b2d8 <HAL_TIM_PWM_Start+0x24>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	bf14      	ite	ne
 800b2d0:	2301      	movne	r3, #1
 800b2d2:	2300      	moveq	r3, #0
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	e03c      	b.n	800b352 <HAL_TIM_PWM_Start+0x9e>
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	2b04      	cmp	r3, #4
 800b2dc:	d109      	bne.n	800b2f2 <HAL_TIM_PWM_Start+0x3e>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	bf14      	ite	ne
 800b2ea:	2301      	movne	r3, #1
 800b2ec:	2300      	moveq	r3, #0
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	e02f      	b.n	800b352 <HAL_TIM_PWM_Start+0x9e>
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	2b08      	cmp	r3, #8
 800b2f6:	d109      	bne.n	800b30c <HAL_TIM_PWM_Start+0x58>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	2b01      	cmp	r3, #1
 800b302:	bf14      	ite	ne
 800b304:	2301      	movne	r3, #1
 800b306:	2300      	moveq	r3, #0
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	e022      	b.n	800b352 <HAL_TIM_PWM_Start+0x9e>
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	2b0c      	cmp	r3, #12
 800b310:	d109      	bne.n	800b326 <HAL_TIM_PWM_Start+0x72>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	bf14      	ite	ne
 800b31e:	2301      	movne	r3, #1
 800b320:	2300      	moveq	r3, #0
 800b322:	b2db      	uxtb	r3, r3
 800b324:	e015      	b.n	800b352 <HAL_TIM_PWM_Start+0x9e>
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	2b10      	cmp	r3, #16
 800b32a:	d109      	bne.n	800b340 <HAL_TIM_PWM_Start+0x8c>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b332:	b2db      	uxtb	r3, r3
 800b334:	2b01      	cmp	r3, #1
 800b336:	bf14      	ite	ne
 800b338:	2301      	movne	r3, #1
 800b33a:	2300      	moveq	r3, #0
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	e008      	b.n	800b352 <HAL_TIM_PWM_Start+0x9e>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b346:	b2db      	uxtb	r3, r3
 800b348:	2b01      	cmp	r3, #1
 800b34a:	bf14      	ite	ne
 800b34c:	2301      	movne	r3, #1
 800b34e:	2300      	moveq	r3, #0
 800b350:	b2db      	uxtb	r3, r3
 800b352:	2b00      	cmp	r3, #0
 800b354:	d001      	beq.n	800b35a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	e0ab      	b.n	800b4b2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d104      	bne.n	800b36a <HAL_TIM_PWM_Start+0xb6>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2202      	movs	r2, #2
 800b364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b368:	e023      	b.n	800b3b2 <HAL_TIM_PWM_Start+0xfe>
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	2b04      	cmp	r3, #4
 800b36e:	d104      	bne.n	800b37a <HAL_TIM_PWM_Start+0xc6>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2202      	movs	r2, #2
 800b374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b378:	e01b      	b.n	800b3b2 <HAL_TIM_PWM_Start+0xfe>
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	2b08      	cmp	r3, #8
 800b37e:	d104      	bne.n	800b38a <HAL_TIM_PWM_Start+0xd6>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2202      	movs	r2, #2
 800b384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b388:	e013      	b.n	800b3b2 <HAL_TIM_PWM_Start+0xfe>
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	2b0c      	cmp	r3, #12
 800b38e:	d104      	bne.n	800b39a <HAL_TIM_PWM_Start+0xe6>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2202      	movs	r2, #2
 800b394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b398:	e00b      	b.n	800b3b2 <HAL_TIM_PWM_Start+0xfe>
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	2b10      	cmp	r3, #16
 800b39e:	d104      	bne.n	800b3aa <HAL_TIM_PWM_Start+0xf6>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2202      	movs	r2, #2
 800b3a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b3a8:	e003      	b.n	800b3b2 <HAL_TIM_PWM_Start+0xfe>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2202      	movs	r2, #2
 800b3ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f000 fff2 	bl	800c3a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a3d      	ldr	r2, [pc, #244]	@ (800b4bc <HAL_TIM_PWM_Start+0x208>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d013      	beq.n	800b3f2 <HAL_TIM_PWM_Start+0x13e>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a3c      	ldr	r2, [pc, #240]	@ (800b4c0 <HAL_TIM_PWM_Start+0x20c>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d00e      	beq.n	800b3f2 <HAL_TIM_PWM_Start+0x13e>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a3a      	ldr	r2, [pc, #232]	@ (800b4c4 <HAL_TIM_PWM_Start+0x210>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d009      	beq.n	800b3f2 <HAL_TIM_PWM_Start+0x13e>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4a39      	ldr	r2, [pc, #228]	@ (800b4c8 <HAL_TIM_PWM_Start+0x214>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d004      	beq.n	800b3f2 <HAL_TIM_PWM_Start+0x13e>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a37      	ldr	r2, [pc, #220]	@ (800b4cc <HAL_TIM_PWM_Start+0x218>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d101      	bne.n	800b3f6 <HAL_TIM_PWM_Start+0x142>
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e000      	b.n	800b3f8 <HAL_TIM_PWM_Start+0x144>
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d007      	beq.n	800b40c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b40a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4a2a      	ldr	r2, [pc, #168]	@ (800b4bc <HAL_TIM_PWM_Start+0x208>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d02c      	beq.n	800b470 <HAL_TIM_PWM_Start+0x1bc>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b41e:	d027      	beq.n	800b470 <HAL_TIM_PWM_Start+0x1bc>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a2a      	ldr	r2, [pc, #168]	@ (800b4d0 <HAL_TIM_PWM_Start+0x21c>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d022      	beq.n	800b470 <HAL_TIM_PWM_Start+0x1bc>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a29      	ldr	r2, [pc, #164]	@ (800b4d4 <HAL_TIM_PWM_Start+0x220>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d01d      	beq.n	800b470 <HAL_TIM_PWM_Start+0x1bc>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a27      	ldr	r2, [pc, #156]	@ (800b4d8 <HAL_TIM_PWM_Start+0x224>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d018      	beq.n	800b470 <HAL_TIM_PWM_Start+0x1bc>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	4a1f      	ldr	r2, [pc, #124]	@ (800b4c0 <HAL_TIM_PWM_Start+0x20c>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d013      	beq.n	800b470 <HAL_TIM_PWM_Start+0x1bc>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a23      	ldr	r2, [pc, #140]	@ (800b4dc <HAL_TIM_PWM_Start+0x228>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d00e      	beq.n	800b470 <HAL_TIM_PWM_Start+0x1bc>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a1b      	ldr	r2, [pc, #108]	@ (800b4c4 <HAL_TIM_PWM_Start+0x210>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d009      	beq.n	800b470 <HAL_TIM_PWM_Start+0x1bc>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a1f      	ldr	r2, [pc, #124]	@ (800b4e0 <HAL_TIM_PWM_Start+0x22c>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d004      	beq.n	800b470 <HAL_TIM_PWM_Start+0x1bc>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a1e      	ldr	r2, [pc, #120]	@ (800b4e4 <HAL_TIM_PWM_Start+0x230>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d115      	bne.n	800b49c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	689a      	ldr	r2, [r3, #8]
 800b476:	4b1c      	ldr	r3, [pc, #112]	@ (800b4e8 <HAL_TIM_PWM_Start+0x234>)
 800b478:	4013      	ands	r3, r2
 800b47a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2b06      	cmp	r3, #6
 800b480:	d015      	beq.n	800b4ae <HAL_TIM_PWM_Start+0x1fa>
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b488:	d011      	beq.n	800b4ae <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f042 0201 	orr.w	r2, r2, #1
 800b498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b49a:	e008      	b.n	800b4ae <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f042 0201 	orr.w	r2, r2, #1
 800b4aa:	601a      	str	r2, [r3, #0]
 800b4ac:	e000      	b.n	800b4b0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	40010000 	.word	0x40010000
 800b4c0:	40010400 	.word	0x40010400
 800b4c4:	40014000 	.word	0x40014000
 800b4c8:	40014400 	.word	0x40014400
 800b4cc:	40014800 	.word	0x40014800
 800b4d0:	40000400 	.word	0x40000400
 800b4d4:	40000800 	.word	0x40000800
 800b4d8:	40000c00 	.word	0x40000c00
 800b4dc:	40001800 	.word	0x40001800
 800b4e0:	4000e000 	.word	0x4000e000
 800b4e4:	4000e400 	.word	0x4000e400
 800b4e8:	00010007 	.word	0x00010007

0800b4ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	691b      	ldr	r3, [r3, #16]
 800b502:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	f003 0302 	and.w	r3, r3, #2
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d020      	beq.n	800b550 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f003 0302 	and.w	r3, r3, #2
 800b514:	2b00      	cmp	r3, #0
 800b516:	d01b      	beq.n	800b550 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f06f 0202 	mvn.w	r2, #2
 800b520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2201      	movs	r2, #1
 800b526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	699b      	ldr	r3, [r3, #24]
 800b52e:	f003 0303 	and.w	r3, r3, #3
 800b532:	2b00      	cmp	r3, #0
 800b534:	d003      	beq.n	800b53e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 faf6 	bl	800bb28 <HAL_TIM_IC_CaptureCallback>
 800b53c:	e005      	b.n	800b54a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 fae8 	bl	800bb14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 faf9 	bl	800bb3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	f003 0304 	and.w	r3, r3, #4
 800b556:	2b00      	cmp	r3, #0
 800b558:	d020      	beq.n	800b59c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f003 0304 	and.w	r3, r3, #4
 800b560:	2b00      	cmp	r3, #0
 800b562:	d01b      	beq.n	800b59c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f06f 0204 	mvn.w	r2, #4
 800b56c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2202      	movs	r2, #2
 800b572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	699b      	ldr	r3, [r3, #24]
 800b57a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d003      	beq.n	800b58a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 fad0 	bl	800bb28 <HAL_TIM_IC_CaptureCallback>
 800b588:	e005      	b.n	800b596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 fac2 	bl	800bb14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 fad3 	bl	800bb3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	f003 0308 	and.w	r3, r3, #8
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d020      	beq.n	800b5e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f003 0308 	and.w	r3, r3, #8
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d01b      	beq.n	800b5e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f06f 0208 	mvn.w	r2, #8
 800b5b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2204      	movs	r2, #4
 800b5be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	69db      	ldr	r3, [r3, #28]
 800b5c6:	f003 0303 	and.w	r3, r3, #3
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d003      	beq.n	800b5d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 faaa 	bl	800bb28 <HAL_TIM_IC_CaptureCallback>
 800b5d4:	e005      	b.n	800b5e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 fa9c 	bl	800bb14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 faad 	bl	800bb3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	f003 0310 	and.w	r3, r3, #16
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d020      	beq.n	800b634 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f003 0310 	and.w	r3, r3, #16
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d01b      	beq.n	800b634 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f06f 0210 	mvn.w	r2, #16
 800b604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2208      	movs	r2, #8
 800b60a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	69db      	ldr	r3, [r3, #28]
 800b612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b616:	2b00      	cmp	r3, #0
 800b618:	d003      	beq.n	800b622 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 fa84 	bl	800bb28 <HAL_TIM_IC_CaptureCallback>
 800b620:	e005      	b.n	800b62e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 fa76 	bl	800bb14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 fa87 	bl	800bb3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	f003 0301 	and.w	r3, r3, #1
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00c      	beq.n	800b658 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f003 0301 	and.w	r3, r3, #1
 800b644:	2b00      	cmp	r3, #0
 800b646:	d007      	beq.n	800b658 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f06f 0201 	mvn.w	r2, #1
 800b650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f7f5 fc50 	bl	8000ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d104      	bne.n	800b66c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00c      	beq.n	800b686 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b672:	2b00      	cmp	r3, #0
 800b674:	d007      	beq.n	800b686 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b67e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 ff5b 	bl	800c53c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00c      	beq.n	800b6aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b696:	2b00      	cmp	r3, #0
 800b698:	d007      	beq.n	800b6aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b6a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 ff53 	bl	800c550 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d00c      	beq.n	800b6ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d007      	beq.n	800b6ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b6c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 fa41 	bl	800bb50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	f003 0320 	and.w	r3, r3, #32
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d00c      	beq.n	800b6f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f003 0320 	and.w	r3, r3, #32
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d007      	beq.n	800b6f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f06f 0220 	mvn.w	r2, #32
 800b6ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 ff1b 	bl	800c528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b6f2:	bf00      	nop
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
	...

0800b6fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b086      	sub	sp, #24
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b708:	2300      	movs	r3, #0
 800b70a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b712:	2b01      	cmp	r3, #1
 800b714:	d101      	bne.n	800b71a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b716:	2302      	movs	r3, #2
 800b718:	e0ff      	b.n	800b91a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2201      	movs	r2, #1
 800b71e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2b14      	cmp	r3, #20
 800b726:	f200 80f0 	bhi.w	800b90a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b72a:	a201      	add	r2, pc, #4	@ (adr r2, 800b730 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b730:	0800b785 	.word	0x0800b785
 800b734:	0800b90b 	.word	0x0800b90b
 800b738:	0800b90b 	.word	0x0800b90b
 800b73c:	0800b90b 	.word	0x0800b90b
 800b740:	0800b7c5 	.word	0x0800b7c5
 800b744:	0800b90b 	.word	0x0800b90b
 800b748:	0800b90b 	.word	0x0800b90b
 800b74c:	0800b90b 	.word	0x0800b90b
 800b750:	0800b807 	.word	0x0800b807
 800b754:	0800b90b 	.word	0x0800b90b
 800b758:	0800b90b 	.word	0x0800b90b
 800b75c:	0800b90b 	.word	0x0800b90b
 800b760:	0800b847 	.word	0x0800b847
 800b764:	0800b90b 	.word	0x0800b90b
 800b768:	0800b90b 	.word	0x0800b90b
 800b76c:	0800b90b 	.word	0x0800b90b
 800b770:	0800b889 	.word	0x0800b889
 800b774:	0800b90b 	.word	0x0800b90b
 800b778:	0800b90b 	.word	0x0800b90b
 800b77c:	0800b90b 	.word	0x0800b90b
 800b780:	0800b8c9 	.word	0x0800b8c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	68b9      	ldr	r1, [r7, #8]
 800b78a:	4618      	mov	r0, r3
 800b78c:	f000 fa96 	bl	800bcbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	699a      	ldr	r2, [r3, #24]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f042 0208 	orr.w	r2, r2, #8
 800b79e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	699a      	ldr	r2, [r3, #24]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f022 0204 	bic.w	r2, r2, #4
 800b7ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	6999      	ldr	r1, [r3, #24]
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	691a      	ldr	r2, [r3, #16]
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	430a      	orrs	r2, r1
 800b7c0:	619a      	str	r2, [r3, #24]
      break;
 800b7c2:	e0a5      	b.n	800b910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	68b9      	ldr	r1, [r7, #8]
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f000 fb06 	bl	800bddc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	699a      	ldr	r2, [r3, #24]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b7de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	699a      	ldr	r2, [r3, #24]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b7ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	6999      	ldr	r1, [r3, #24]
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	691b      	ldr	r3, [r3, #16]
 800b7fa:	021a      	lsls	r2, r3, #8
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	430a      	orrs	r2, r1
 800b802:	619a      	str	r2, [r3, #24]
      break;
 800b804:	e084      	b.n	800b910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	68b9      	ldr	r1, [r7, #8]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f000 fb6f 	bl	800bef0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	69da      	ldr	r2, [r3, #28]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f042 0208 	orr.w	r2, r2, #8
 800b820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	69da      	ldr	r2, [r3, #28]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f022 0204 	bic.w	r2, r2, #4
 800b830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	69d9      	ldr	r1, [r3, #28]
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	691a      	ldr	r2, [r3, #16]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	430a      	orrs	r2, r1
 800b842:	61da      	str	r2, [r3, #28]
      break;
 800b844:	e064      	b.n	800b910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	68b9      	ldr	r1, [r7, #8]
 800b84c:	4618      	mov	r0, r3
 800b84e:	f000 fbd7 	bl	800c000 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	69da      	ldr	r2, [r3, #28]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	69da      	ldr	r2, [r3, #28]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	69d9      	ldr	r1, [r3, #28]
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	021a      	lsls	r2, r3, #8
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	430a      	orrs	r2, r1
 800b884:	61da      	str	r2, [r3, #28]
      break;
 800b886:	e043      	b.n	800b910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	68b9      	ldr	r1, [r7, #8]
 800b88e:	4618      	mov	r0, r3
 800b890:	f000 fc20 	bl	800c0d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f042 0208 	orr.w	r2, r2, #8
 800b8a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f022 0204 	bic.w	r2, r2, #4
 800b8b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	691a      	ldr	r2, [r3, #16]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	430a      	orrs	r2, r1
 800b8c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b8c6:	e023      	b.n	800b910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	68b9      	ldr	r1, [r7, #8]
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f000 fc64 	bl	800c19c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b8e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b8f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	691b      	ldr	r3, [r3, #16]
 800b8fe:	021a      	lsls	r2, r3, #8
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	430a      	orrs	r2, r1
 800b906:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b908:	e002      	b.n	800b910 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b90a:	2301      	movs	r3, #1
 800b90c:	75fb      	strb	r3, [r7, #23]
      break;
 800b90e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2200      	movs	r2, #0
 800b914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b918:	7dfb      	ldrb	r3, [r7, #23]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3718      	adds	r7, #24
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop

0800b924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d101      	bne.n	800b940 <HAL_TIM_ConfigClockSource+0x1c>
 800b93c:	2302      	movs	r3, #2
 800b93e:	e0dc      	b.n	800bafa <HAL_TIM_ConfigClockSource+0x1d6>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2201      	movs	r2, #1
 800b944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2202      	movs	r2, #2
 800b94c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	4b6a      	ldr	r3, [pc, #424]	@ (800bb04 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b95c:	4013      	ands	r3, r2
 800b95e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b966:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a64      	ldr	r2, [pc, #400]	@ (800bb08 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b976:	4293      	cmp	r3, r2
 800b978:	f000 80a9 	beq.w	800bace <HAL_TIM_ConfigClockSource+0x1aa>
 800b97c:	4a62      	ldr	r2, [pc, #392]	@ (800bb08 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	f200 80ae 	bhi.w	800bae0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b984:	4a61      	ldr	r2, [pc, #388]	@ (800bb0c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b986:	4293      	cmp	r3, r2
 800b988:	f000 80a1 	beq.w	800bace <HAL_TIM_ConfigClockSource+0x1aa>
 800b98c:	4a5f      	ldr	r2, [pc, #380]	@ (800bb0c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	f200 80a6 	bhi.w	800bae0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b994:	4a5e      	ldr	r2, [pc, #376]	@ (800bb10 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b996:	4293      	cmp	r3, r2
 800b998:	f000 8099 	beq.w	800bace <HAL_TIM_ConfigClockSource+0x1aa>
 800b99c:	4a5c      	ldr	r2, [pc, #368]	@ (800bb10 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	f200 809e 	bhi.w	800bae0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b9a8:	f000 8091 	beq.w	800bace <HAL_TIM_ConfigClockSource+0x1aa>
 800b9ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b9b0:	f200 8096 	bhi.w	800bae0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9b8:	f000 8089 	beq.w	800bace <HAL_TIM_ConfigClockSource+0x1aa>
 800b9bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9c0:	f200 808e 	bhi.w	800bae0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9c8:	d03e      	beq.n	800ba48 <HAL_TIM_ConfigClockSource+0x124>
 800b9ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9ce:	f200 8087 	bhi.w	800bae0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9d6:	f000 8086 	beq.w	800bae6 <HAL_TIM_ConfigClockSource+0x1c2>
 800b9da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9de:	d87f      	bhi.n	800bae0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9e0:	2b70      	cmp	r3, #112	@ 0x70
 800b9e2:	d01a      	beq.n	800ba1a <HAL_TIM_ConfigClockSource+0xf6>
 800b9e4:	2b70      	cmp	r3, #112	@ 0x70
 800b9e6:	d87b      	bhi.n	800bae0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9e8:	2b60      	cmp	r3, #96	@ 0x60
 800b9ea:	d050      	beq.n	800ba8e <HAL_TIM_ConfigClockSource+0x16a>
 800b9ec:	2b60      	cmp	r3, #96	@ 0x60
 800b9ee:	d877      	bhi.n	800bae0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9f0:	2b50      	cmp	r3, #80	@ 0x50
 800b9f2:	d03c      	beq.n	800ba6e <HAL_TIM_ConfigClockSource+0x14a>
 800b9f4:	2b50      	cmp	r3, #80	@ 0x50
 800b9f6:	d873      	bhi.n	800bae0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9f8:	2b40      	cmp	r3, #64	@ 0x40
 800b9fa:	d058      	beq.n	800baae <HAL_TIM_ConfigClockSource+0x18a>
 800b9fc:	2b40      	cmp	r3, #64	@ 0x40
 800b9fe:	d86f      	bhi.n	800bae0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba00:	2b30      	cmp	r3, #48	@ 0x30
 800ba02:	d064      	beq.n	800bace <HAL_TIM_ConfigClockSource+0x1aa>
 800ba04:	2b30      	cmp	r3, #48	@ 0x30
 800ba06:	d86b      	bhi.n	800bae0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba08:	2b20      	cmp	r3, #32
 800ba0a:	d060      	beq.n	800bace <HAL_TIM_ConfigClockSource+0x1aa>
 800ba0c:	2b20      	cmp	r3, #32
 800ba0e:	d867      	bhi.n	800bae0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d05c      	beq.n	800bace <HAL_TIM_ConfigClockSource+0x1aa>
 800ba14:	2b10      	cmp	r3, #16
 800ba16:	d05a      	beq.n	800bace <HAL_TIM_ConfigClockSource+0x1aa>
 800ba18:	e062      	b.n	800bae0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ba2a:	f000 fc9b 	bl	800c364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ba3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	68ba      	ldr	r2, [r7, #8]
 800ba44:	609a      	str	r2, [r3, #8]
      break;
 800ba46:	e04f      	b.n	800bae8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ba58:	f000 fc84 	bl	800c364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	689a      	ldr	r2, [r3, #8]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ba6a:	609a      	str	r2, [r3, #8]
      break;
 800ba6c:	e03c      	b.n	800bae8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	f000 fbf4 	bl	800c268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2150      	movs	r1, #80	@ 0x50
 800ba86:	4618      	mov	r0, r3
 800ba88:	f000 fc4e 	bl	800c328 <TIM_ITRx_SetConfig>
      break;
 800ba8c:	e02c      	b.n	800bae8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	f000 fc13 	bl	800c2c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2160      	movs	r1, #96	@ 0x60
 800baa6:	4618      	mov	r0, r3
 800baa8:	f000 fc3e 	bl	800c328 <TIM_ITRx_SetConfig>
      break;
 800baac:	e01c      	b.n	800bae8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800baba:	461a      	mov	r2, r3
 800babc:	f000 fbd4 	bl	800c268 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2140      	movs	r1, #64	@ 0x40
 800bac6:	4618      	mov	r0, r3
 800bac8:	f000 fc2e 	bl	800c328 <TIM_ITRx_SetConfig>
      break;
 800bacc:	e00c      	b.n	800bae8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4619      	mov	r1, r3
 800bad8:	4610      	mov	r0, r2
 800bada:	f000 fc25 	bl	800c328 <TIM_ITRx_SetConfig>
      break;
 800bade:	e003      	b.n	800bae8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bae0:	2301      	movs	r3, #1
 800bae2:	73fb      	strb	r3, [r7, #15]
      break;
 800bae4:	e000      	b.n	800bae8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bae6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2201      	movs	r2, #1
 800baec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	ffceff88 	.word	0xffceff88
 800bb08:	00100040 	.word	0x00100040
 800bb0c:	00100030 	.word	0x00100030
 800bb10:	00100020 	.word	0x00100020

0800bb14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bb1c:	bf00      	nop
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bb30:	bf00      	nop
 800bb32:	370c      	adds	r7, #12
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bb44:	bf00      	nop
 800bb46:	370c      	adds	r7, #12
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr

0800bb50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bb58:	bf00      	nop
 800bb5a:	370c      	adds	r7, #12
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr

0800bb64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4a47      	ldr	r2, [pc, #284]	@ (800bc94 <TIM_Base_SetConfig+0x130>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d013      	beq.n	800bba4 <TIM_Base_SetConfig+0x40>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb82:	d00f      	beq.n	800bba4 <TIM_Base_SetConfig+0x40>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	4a44      	ldr	r2, [pc, #272]	@ (800bc98 <TIM_Base_SetConfig+0x134>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d00b      	beq.n	800bba4 <TIM_Base_SetConfig+0x40>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	4a43      	ldr	r2, [pc, #268]	@ (800bc9c <TIM_Base_SetConfig+0x138>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d007      	beq.n	800bba4 <TIM_Base_SetConfig+0x40>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	4a42      	ldr	r2, [pc, #264]	@ (800bca0 <TIM_Base_SetConfig+0x13c>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d003      	beq.n	800bba4 <TIM_Base_SetConfig+0x40>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	4a41      	ldr	r2, [pc, #260]	@ (800bca4 <TIM_Base_SetConfig+0x140>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d108      	bne.n	800bbb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	68fa      	ldr	r2, [r7, #12]
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4a36      	ldr	r2, [pc, #216]	@ (800bc94 <TIM_Base_SetConfig+0x130>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d027      	beq.n	800bc0e <TIM_Base_SetConfig+0xaa>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbc4:	d023      	beq.n	800bc0e <TIM_Base_SetConfig+0xaa>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	4a33      	ldr	r2, [pc, #204]	@ (800bc98 <TIM_Base_SetConfig+0x134>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d01f      	beq.n	800bc0e <TIM_Base_SetConfig+0xaa>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	4a32      	ldr	r2, [pc, #200]	@ (800bc9c <TIM_Base_SetConfig+0x138>)
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d01b      	beq.n	800bc0e <TIM_Base_SetConfig+0xaa>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	4a31      	ldr	r2, [pc, #196]	@ (800bca0 <TIM_Base_SetConfig+0x13c>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d017      	beq.n	800bc0e <TIM_Base_SetConfig+0xaa>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	4a30      	ldr	r2, [pc, #192]	@ (800bca4 <TIM_Base_SetConfig+0x140>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d013      	beq.n	800bc0e <TIM_Base_SetConfig+0xaa>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4a2f      	ldr	r2, [pc, #188]	@ (800bca8 <TIM_Base_SetConfig+0x144>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d00f      	beq.n	800bc0e <TIM_Base_SetConfig+0xaa>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	4a2e      	ldr	r2, [pc, #184]	@ (800bcac <TIM_Base_SetConfig+0x148>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d00b      	beq.n	800bc0e <TIM_Base_SetConfig+0xaa>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	4a2d      	ldr	r2, [pc, #180]	@ (800bcb0 <TIM_Base_SetConfig+0x14c>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d007      	beq.n	800bc0e <TIM_Base_SetConfig+0xaa>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4a2c      	ldr	r2, [pc, #176]	@ (800bcb4 <TIM_Base_SetConfig+0x150>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d003      	beq.n	800bc0e <TIM_Base_SetConfig+0xaa>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	4a2b      	ldr	r2, [pc, #172]	@ (800bcb8 <TIM_Base_SetConfig+0x154>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d108      	bne.n	800bc20 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	68fa      	ldr	r2, [r7, #12]
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	695b      	ldr	r3, [r3, #20]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	689a      	ldr	r2, [r3, #8]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4a14      	ldr	r2, [pc, #80]	@ (800bc94 <TIM_Base_SetConfig+0x130>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d00f      	beq.n	800bc66 <TIM_Base_SetConfig+0x102>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	4a16      	ldr	r2, [pc, #88]	@ (800bca4 <TIM_Base_SetConfig+0x140>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d00b      	beq.n	800bc66 <TIM_Base_SetConfig+0x102>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4a15      	ldr	r2, [pc, #84]	@ (800bca8 <TIM_Base_SetConfig+0x144>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d007      	beq.n	800bc66 <TIM_Base_SetConfig+0x102>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	4a14      	ldr	r2, [pc, #80]	@ (800bcac <TIM_Base_SetConfig+0x148>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d003      	beq.n	800bc66 <TIM_Base_SetConfig+0x102>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4a13      	ldr	r2, [pc, #76]	@ (800bcb0 <TIM_Base_SetConfig+0x14c>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d103      	bne.n	800bc6e <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	691a      	ldr	r2, [r3, #16]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f043 0204 	orr.w	r2, r3, #4
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	601a      	str	r2, [r3, #0]
}
 800bc86:	bf00      	nop
 800bc88:	3714      	adds	r7, #20
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr
 800bc92:	bf00      	nop
 800bc94:	40010000 	.word	0x40010000
 800bc98:	40000400 	.word	0x40000400
 800bc9c:	40000800 	.word	0x40000800
 800bca0:	40000c00 	.word	0x40000c00
 800bca4:	40010400 	.word	0x40010400
 800bca8:	40014000 	.word	0x40014000
 800bcac:	40014400 	.word	0x40014400
 800bcb0:	40014800 	.word	0x40014800
 800bcb4:	4000e000 	.word	0x4000e000
 800bcb8:	4000e400 	.word	0x4000e400

0800bcbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b087      	sub	sp, #28
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6a1b      	ldr	r3, [r3, #32]
 800bcca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a1b      	ldr	r3, [r3, #32]
 800bcd0:	f023 0201 	bic.w	r2, r3, #1
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	699b      	ldr	r3, [r3, #24]
 800bce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bce4:	68fa      	ldr	r2, [r7, #12]
 800bce6:	4b37      	ldr	r3, [pc, #220]	@ (800bdc4 <TIM_OC1_SetConfig+0x108>)
 800bce8:	4013      	ands	r3, r2
 800bcea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f023 0303 	bic.w	r3, r3, #3
 800bcf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	68fa      	ldr	r2, [r7, #12]
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	f023 0302 	bic.w	r3, r3, #2
 800bd04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	697a      	ldr	r2, [r7, #20]
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	4a2d      	ldr	r2, [pc, #180]	@ (800bdc8 <TIM_OC1_SetConfig+0x10c>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d00f      	beq.n	800bd38 <TIM_OC1_SetConfig+0x7c>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	4a2c      	ldr	r2, [pc, #176]	@ (800bdcc <TIM_OC1_SetConfig+0x110>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d00b      	beq.n	800bd38 <TIM_OC1_SetConfig+0x7c>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4a2b      	ldr	r2, [pc, #172]	@ (800bdd0 <TIM_OC1_SetConfig+0x114>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d007      	beq.n	800bd38 <TIM_OC1_SetConfig+0x7c>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	4a2a      	ldr	r2, [pc, #168]	@ (800bdd4 <TIM_OC1_SetConfig+0x118>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d003      	beq.n	800bd38 <TIM_OC1_SetConfig+0x7c>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	4a29      	ldr	r2, [pc, #164]	@ (800bdd8 <TIM_OC1_SetConfig+0x11c>)
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d10c      	bne.n	800bd52 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	f023 0308 	bic.w	r3, r3, #8
 800bd3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	697a      	ldr	r2, [r7, #20]
 800bd46:	4313      	orrs	r3, r2
 800bd48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	f023 0304 	bic.w	r3, r3, #4
 800bd50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	4a1c      	ldr	r2, [pc, #112]	@ (800bdc8 <TIM_OC1_SetConfig+0x10c>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d00f      	beq.n	800bd7a <TIM_OC1_SetConfig+0xbe>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	4a1b      	ldr	r2, [pc, #108]	@ (800bdcc <TIM_OC1_SetConfig+0x110>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d00b      	beq.n	800bd7a <TIM_OC1_SetConfig+0xbe>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	4a1a      	ldr	r2, [pc, #104]	@ (800bdd0 <TIM_OC1_SetConfig+0x114>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d007      	beq.n	800bd7a <TIM_OC1_SetConfig+0xbe>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	4a19      	ldr	r2, [pc, #100]	@ (800bdd4 <TIM_OC1_SetConfig+0x118>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d003      	beq.n	800bd7a <TIM_OC1_SetConfig+0xbe>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	4a18      	ldr	r2, [pc, #96]	@ (800bdd8 <TIM_OC1_SetConfig+0x11c>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d111      	bne.n	800bd9e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bd88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	695b      	ldr	r3, [r3, #20]
 800bd8e:	693a      	ldr	r2, [r7, #16]
 800bd90:	4313      	orrs	r3, r2
 800bd92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	699b      	ldr	r3, [r3, #24]
 800bd98:	693a      	ldr	r2, [r7, #16]
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	693a      	ldr	r2, [r7, #16]
 800bda2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	685a      	ldr	r2, [r3, #4]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	697a      	ldr	r2, [r7, #20]
 800bdb6:	621a      	str	r2, [r3, #32]
}
 800bdb8:	bf00      	nop
 800bdba:	371c      	adds	r7, #28
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr
 800bdc4:	fffeff8f 	.word	0xfffeff8f
 800bdc8:	40010000 	.word	0x40010000
 800bdcc:	40010400 	.word	0x40010400
 800bdd0:	40014000 	.word	0x40014000
 800bdd4:	40014400 	.word	0x40014400
 800bdd8:	40014800 	.word	0x40014800

0800bddc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b087      	sub	sp, #28
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6a1b      	ldr	r3, [r3, #32]
 800bdea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6a1b      	ldr	r3, [r3, #32]
 800bdf0:	f023 0210 	bic.w	r2, r3, #16
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	699b      	ldr	r3, [r3, #24]
 800be02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	4b34      	ldr	r3, [pc, #208]	@ (800bed8 <TIM_OC2_SetConfig+0xfc>)
 800be08:	4013      	ands	r3, r2
 800be0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	021b      	lsls	r3, r3, #8
 800be1a:	68fa      	ldr	r2, [r7, #12]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	f023 0320 	bic.w	r3, r3, #32
 800be26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	011b      	lsls	r3, r3, #4
 800be2e:	697a      	ldr	r2, [r7, #20]
 800be30:	4313      	orrs	r3, r2
 800be32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4a29      	ldr	r2, [pc, #164]	@ (800bedc <TIM_OC2_SetConfig+0x100>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d003      	beq.n	800be44 <TIM_OC2_SetConfig+0x68>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4a28      	ldr	r2, [pc, #160]	@ (800bee0 <TIM_OC2_SetConfig+0x104>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d10d      	bne.n	800be60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	011b      	lsls	r3, r3, #4
 800be52:	697a      	ldr	r2, [r7, #20]
 800be54:	4313      	orrs	r3, r2
 800be56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	4a1e      	ldr	r2, [pc, #120]	@ (800bedc <TIM_OC2_SetConfig+0x100>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d00f      	beq.n	800be88 <TIM_OC2_SetConfig+0xac>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4a1d      	ldr	r2, [pc, #116]	@ (800bee0 <TIM_OC2_SetConfig+0x104>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d00b      	beq.n	800be88 <TIM_OC2_SetConfig+0xac>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	4a1c      	ldr	r2, [pc, #112]	@ (800bee4 <TIM_OC2_SetConfig+0x108>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d007      	beq.n	800be88 <TIM_OC2_SetConfig+0xac>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	4a1b      	ldr	r2, [pc, #108]	@ (800bee8 <TIM_OC2_SetConfig+0x10c>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d003      	beq.n	800be88 <TIM_OC2_SetConfig+0xac>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	4a1a      	ldr	r2, [pc, #104]	@ (800beec <TIM_OC2_SetConfig+0x110>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d113      	bne.n	800beb0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800be8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800be96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	695b      	ldr	r3, [r3, #20]
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	693a      	ldr	r2, [r7, #16]
 800bea0:	4313      	orrs	r3, r2
 800bea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	699b      	ldr	r3, [r3, #24]
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	693a      	ldr	r2, [r7, #16]
 800beac:	4313      	orrs	r3, r2
 800beae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	693a      	ldr	r2, [r7, #16]
 800beb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	68fa      	ldr	r2, [r7, #12]
 800beba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	685a      	ldr	r2, [r3, #4]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	697a      	ldr	r2, [r7, #20]
 800bec8:	621a      	str	r2, [r3, #32]
}
 800beca:	bf00      	nop
 800becc:	371c      	adds	r7, #28
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr
 800bed6:	bf00      	nop
 800bed8:	feff8fff 	.word	0xfeff8fff
 800bedc:	40010000 	.word	0x40010000
 800bee0:	40010400 	.word	0x40010400
 800bee4:	40014000 	.word	0x40014000
 800bee8:	40014400 	.word	0x40014400
 800beec:	40014800 	.word	0x40014800

0800bef0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b087      	sub	sp, #28
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a1b      	ldr	r3, [r3, #32]
 800befe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6a1b      	ldr	r3, [r3, #32]
 800bf04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	69db      	ldr	r3, [r3, #28]
 800bf16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	4b33      	ldr	r3, [pc, #204]	@ (800bfe8 <TIM_OC3_SetConfig+0xf8>)
 800bf1c:	4013      	ands	r3, r2
 800bf1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f023 0303 	bic.w	r3, r3, #3
 800bf26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	68fa      	ldr	r2, [r7, #12]
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bf38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	689b      	ldr	r3, [r3, #8]
 800bf3e:	021b      	lsls	r3, r3, #8
 800bf40:	697a      	ldr	r2, [r7, #20]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4a28      	ldr	r2, [pc, #160]	@ (800bfec <TIM_OC3_SetConfig+0xfc>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d003      	beq.n	800bf56 <TIM_OC3_SetConfig+0x66>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4a27      	ldr	r2, [pc, #156]	@ (800bff0 <TIM_OC3_SetConfig+0x100>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d10d      	bne.n	800bf72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bf5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	021b      	lsls	r3, r3, #8
 800bf64:	697a      	ldr	r2, [r7, #20]
 800bf66:	4313      	orrs	r3, r2
 800bf68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bf70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4a1d      	ldr	r2, [pc, #116]	@ (800bfec <TIM_OC3_SetConfig+0xfc>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d00f      	beq.n	800bf9a <TIM_OC3_SetConfig+0xaa>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	4a1c      	ldr	r2, [pc, #112]	@ (800bff0 <TIM_OC3_SetConfig+0x100>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d00b      	beq.n	800bf9a <TIM_OC3_SetConfig+0xaa>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	4a1b      	ldr	r2, [pc, #108]	@ (800bff4 <TIM_OC3_SetConfig+0x104>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d007      	beq.n	800bf9a <TIM_OC3_SetConfig+0xaa>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4a1a      	ldr	r2, [pc, #104]	@ (800bff8 <TIM_OC3_SetConfig+0x108>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d003      	beq.n	800bf9a <TIM_OC3_SetConfig+0xaa>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	4a19      	ldr	r2, [pc, #100]	@ (800bffc <TIM_OC3_SetConfig+0x10c>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d113      	bne.n	800bfc2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bfa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bfa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	695b      	ldr	r3, [r3, #20]
 800bfae:	011b      	lsls	r3, r3, #4
 800bfb0:	693a      	ldr	r2, [r7, #16]
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	699b      	ldr	r3, [r3, #24]
 800bfba:	011b      	lsls	r3, r3, #4
 800bfbc:	693a      	ldr	r2, [r7, #16]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	693a      	ldr	r2, [r7, #16]
 800bfc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	685a      	ldr	r2, [r3, #4]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	697a      	ldr	r2, [r7, #20]
 800bfda:	621a      	str	r2, [r3, #32]
}
 800bfdc:	bf00      	nop
 800bfde:	371c      	adds	r7, #28
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr
 800bfe8:	fffeff8f 	.word	0xfffeff8f
 800bfec:	40010000 	.word	0x40010000
 800bff0:	40010400 	.word	0x40010400
 800bff4:	40014000 	.word	0x40014000
 800bff8:	40014400 	.word	0x40014400
 800bffc:	40014800 	.word	0x40014800

0800c000 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c000:	b480      	push	{r7}
 800c002:	b087      	sub	sp, #28
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6a1b      	ldr	r3, [r3, #32]
 800c00e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a1b      	ldr	r3, [r3, #32]
 800c014:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	69db      	ldr	r3, [r3, #28]
 800c026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	4b24      	ldr	r3, [pc, #144]	@ (800c0bc <TIM_OC4_SetConfig+0xbc>)
 800c02c:	4013      	ands	r3, r2
 800c02e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	021b      	lsls	r3, r3, #8
 800c03e:	68fa      	ldr	r2, [r7, #12]
 800c040:	4313      	orrs	r3, r2
 800c042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c04a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	689b      	ldr	r3, [r3, #8]
 800c050:	031b      	lsls	r3, r3, #12
 800c052:	693a      	ldr	r2, [r7, #16]
 800c054:	4313      	orrs	r3, r2
 800c056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	4a19      	ldr	r2, [pc, #100]	@ (800c0c0 <TIM_OC4_SetConfig+0xc0>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d00f      	beq.n	800c080 <TIM_OC4_SetConfig+0x80>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	4a18      	ldr	r2, [pc, #96]	@ (800c0c4 <TIM_OC4_SetConfig+0xc4>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d00b      	beq.n	800c080 <TIM_OC4_SetConfig+0x80>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	4a17      	ldr	r2, [pc, #92]	@ (800c0c8 <TIM_OC4_SetConfig+0xc8>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d007      	beq.n	800c080 <TIM_OC4_SetConfig+0x80>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	4a16      	ldr	r2, [pc, #88]	@ (800c0cc <TIM_OC4_SetConfig+0xcc>)
 800c074:	4293      	cmp	r3, r2
 800c076:	d003      	beq.n	800c080 <TIM_OC4_SetConfig+0x80>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4a15      	ldr	r2, [pc, #84]	@ (800c0d0 <TIM_OC4_SetConfig+0xd0>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d109      	bne.n	800c094 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	695b      	ldr	r3, [r3, #20]
 800c08c:	019b      	lsls	r3, r3, #6
 800c08e:	697a      	ldr	r2, [r7, #20]
 800c090:	4313      	orrs	r3, r2
 800c092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	697a      	ldr	r2, [r7, #20]
 800c098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	68fa      	ldr	r2, [r7, #12]
 800c09e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	685a      	ldr	r2, [r3, #4]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	621a      	str	r2, [r3, #32]
}
 800c0ae:	bf00      	nop
 800c0b0:	371c      	adds	r7, #28
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	feff8fff 	.word	0xfeff8fff
 800c0c0:	40010000 	.word	0x40010000
 800c0c4:	40010400 	.word	0x40010400
 800c0c8:	40014000 	.word	0x40014000
 800c0cc:	40014400 	.word	0x40014400
 800c0d0:	40014800 	.word	0x40014800

0800c0d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b087      	sub	sp, #28
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6a1b      	ldr	r3, [r3, #32]
 800c0e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6a1b      	ldr	r3, [r3, #32]
 800c0e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c0fc:	68fa      	ldr	r2, [r7, #12]
 800c0fe:	4b21      	ldr	r3, [pc, #132]	@ (800c184 <TIM_OC5_SetConfig+0xb0>)
 800c100:	4013      	ands	r3, r2
 800c102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	4313      	orrs	r3, r2
 800c10c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c114:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	689b      	ldr	r3, [r3, #8]
 800c11a:	041b      	lsls	r3, r3, #16
 800c11c:	693a      	ldr	r2, [r7, #16]
 800c11e:	4313      	orrs	r3, r2
 800c120:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	4a18      	ldr	r2, [pc, #96]	@ (800c188 <TIM_OC5_SetConfig+0xb4>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d00f      	beq.n	800c14a <TIM_OC5_SetConfig+0x76>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4a17      	ldr	r2, [pc, #92]	@ (800c18c <TIM_OC5_SetConfig+0xb8>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d00b      	beq.n	800c14a <TIM_OC5_SetConfig+0x76>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	4a16      	ldr	r2, [pc, #88]	@ (800c190 <TIM_OC5_SetConfig+0xbc>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d007      	beq.n	800c14a <TIM_OC5_SetConfig+0x76>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4a15      	ldr	r2, [pc, #84]	@ (800c194 <TIM_OC5_SetConfig+0xc0>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d003      	beq.n	800c14a <TIM_OC5_SetConfig+0x76>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	4a14      	ldr	r2, [pc, #80]	@ (800c198 <TIM_OC5_SetConfig+0xc4>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d109      	bne.n	800c15e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c150:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	695b      	ldr	r3, [r3, #20]
 800c156:	021b      	lsls	r3, r3, #8
 800c158:	697a      	ldr	r2, [r7, #20]
 800c15a:	4313      	orrs	r3, r2
 800c15c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	697a      	ldr	r2, [r7, #20]
 800c162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	68fa      	ldr	r2, [r7, #12]
 800c168:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	685a      	ldr	r2, [r3, #4]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	693a      	ldr	r2, [r7, #16]
 800c176:	621a      	str	r2, [r3, #32]
}
 800c178:	bf00      	nop
 800c17a:	371c      	adds	r7, #28
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr
 800c184:	fffeff8f 	.word	0xfffeff8f
 800c188:	40010000 	.word	0x40010000
 800c18c:	40010400 	.word	0x40010400
 800c190:	40014000 	.word	0x40014000
 800c194:	40014400 	.word	0x40014400
 800c198:	40014800 	.word	0x40014800

0800c19c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b087      	sub	sp, #28
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6a1b      	ldr	r3, [r3, #32]
 800c1aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6a1b      	ldr	r3, [r3, #32]
 800c1b0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	4b22      	ldr	r3, [pc, #136]	@ (800c250 <TIM_OC6_SetConfig+0xb4>)
 800c1c8:	4013      	ands	r3, r2
 800c1ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	021b      	lsls	r3, r3, #8
 800c1d2:	68fa      	ldr	r2, [r7, #12]
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c1de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	051b      	lsls	r3, r3, #20
 800c1e6:	693a      	ldr	r2, [r7, #16]
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	4a19      	ldr	r2, [pc, #100]	@ (800c254 <TIM_OC6_SetConfig+0xb8>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d00f      	beq.n	800c214 <TIM_OC6_SetConfig+0x78>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	4a18      	ldr	r2, [pc, #96]	@ (800c258 <TIM_OC6_SetConfig+0xbc>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d00b      	beq.n	800c214 <TIM_OC6_SetConfig+0x78>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	4a17      	ldr	r2, [pc, #92]	@ (800c25c <TIM_OC6_SetConfig+0xc0>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d007      	beq.n	800c214 <TIM_OC6_SetConfig+0x78>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	4a16      	ldr	r2, [pc, #88]	@ (800c260 <TIM_OC6_SetConfig+0xc4>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d003      	beq.n	800c214 <TIM_OC6_SetConfig+0x78>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	4a15      	ldr	r2, [pc, #84]	@ (800c264 <TIM_OC6_SetConfig+0xc8>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d109      	bne.n	800c228 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c21a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	695b      	ldr	r3, [r3, #20]
 800c220:	029b      	lsls	r3, r3, #10
 800c222:	697a      	ldr	r2, [r7, #20]
 800c224:	4313      	orrs	r3, r2
 800c226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	697a      	ldr	r2, [r7, #20]
 800c22c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	68fa      	ldr	r2, [r7, #12]
 800c232:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	685a      	ldr	r2, [r3, #4]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	693a      	ldr	r2, [r7, #16]
 800c240:	621a      	str	r2, [r3, #32]
}
 800c242:	bf00      	nop
 800c244:	371c      	adds	r7, #28
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	feff8fff 	.word	0xfeff8fff
 800c254:	40010000 	.word	0x40010000
 800c258:	40010400 	.word	0x40010400
 800c25c:	40014000 	.word	0x40014000
 800c260:	40014400 	.word	0x40014400
 800c264:	40014800 	.word	0x40014800

0800c268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c268:	b480      	push	{r7}
 800c26a:	b087      	sub	sp, #28
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6a1b      	ldr	r3, [r3, #32]
 800c278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6a1b      	ldr	r3, [r3, #32]
 800c27e:	f023 0201 	bic.w	r2, r3, #1
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	699b      	ldr	r3, [r3, #24]
 800c28a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	011b      	lsls	r3, r3, #4
 800c298:	693a      	ldr	r2, [r7, #16]
 800c29a:	4313      	orrs	r3, r2
 800c29c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	f023 030a 	bic.w	r3, r3, #10
 800c2a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c2a6:	697a      	ldr	r2, [r7, #20]
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	693a      	ldr	r2, [r7, #16]
 800c2b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	697a      	ldr	r2, [r7, #20]
 800c2b8:	621a      	str	r2, [r3, #32]
}
 800c2ba:	bf00      	nop
 800c2bc:	371c      	adds	r7, #28
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr

0800c2c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2c6:	b480      	push	{r7}
 800c2c8:	b087      	sub	sp, #28
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	60f8      	str	r0, [r7, #12]
 800c2ce:	60b9      	str	r1, [r7, #8]
 800c2d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	6a1b      	ldr	r3, [r3, #32]
 800c2d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6a1b      	ldr	r3, [r3, #32]
 800c2dc:	f023 0210 	bic.w	r2, r3, #16
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	699b      	ldr	r3, [r3, #24]
 800c2e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c2f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	031b      	lsls	r3, r3, #12
 800c2f6:	693a      	ldr	r2, [r7, #16]
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c302:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	011b      	lsls	r3, r3, #4
 800c308:	697a      	ldr	r2, [r7, #20]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	693a      	ldr	r2, [r7, #16]
 800c312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	697a      	ldr	r2, [r7, #20]
 800c318:	621a      	str	r2, [r3, #32]
}
 800c31a:	bf00      	nop
 800c31c:	371c      	adds	r7, #28
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr
	...

0800c328 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c338:	68fa      	ldr	r2, [r7, #12]
 800c33a:	4b09      	ldr	r3, [pc, #36]	@ (800c360 <TIM_ITRx_SetConfig+0x38>)
 800c33c:	4013      	ands	r3, r2
 800c33e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c340:	683a      	ldr	r2, [r7, #0]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	4313      	orrs	r3, r2
 800c346:	f043 0307 	orr.w	r3, r3, #7
 800c34a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	68fa      	ldr	r2, [r7, #12]
 800c350:	609a      	str	r2, [r3, #8]
}
 800c352:	bf00      	nop
 800c354:	3714      	adds	r7, #20
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	ffcfff8f 	.word	0xffcfff8f

0800c364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c364:	b480      	push	{r7}
 800c366:	b087      	sub	sp, #28
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
 800c370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	689b      	ldr	r3, [r3, #8]
 800c376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c37e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	021a      	lsls	r2, r3, #8
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	431a      	orrs	r2, r3
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	4313      	orrs	r3, r2
 800c38c:	697a      	ldr	r2, [r7, #20]
 800c38e:	4313      	orrs	r3, r2
 800c390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	697a      	ldr	r2, [r7, #20]
 800c396:	609a      	str	r2, [r3, #8]
}
 800c398:	bf00      	nop
 800c39a:	371c      	adds	r7, #28
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b087      	sub	sp, #28
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	f003 031f 	and.w	r3, r3, #31
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c3bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6a1a      	ldr	r2, [r3, #32]
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	43db      	mvns	r3, r3
 800c3c6:	401a      	ands	r2, r3
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6a1a      	ldr	r2, [r3, #32]
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	f003 031f 	and.w	r3, r3, #31
 800c3d6:	6879      	ldr	r1, [r7, #4]
 800c3d8:	fa01 f303 	lsl.w	r3, r1, r3
 800c3dc:	431a      	orrs	r2, r3
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	621a      	str	r2, [r3, #32]
}
 800c3e2:	bf00      	nop
 800c3e4:	371c      	adds	r7, #28
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr
	...

0800c3f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c400:	2b01      	cmp	r3, #1
 800c402:	d101      	bne.n	800c408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c404:	2302      	movs	r3, #2
 800c406:	e077      	b.n	800c4f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2201      	movs	r2, #1
 800c40c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2202      	movs	r2, #2
 800c414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a35      	ldr	r2, [pc, #212]	@ (800c504 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d004      	beq.n	800c43c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4a34      	ldr	r2, [pc, #208]	@ (800c508 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d108      	bne.n	800c44e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c442:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c454:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	68fa      	ldr	r2, [r7, #12]
 800c45c:	4313      	orrs	r3, r2
 800c45e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a25      	ldr	r2, [pc, #148]	@ (800c504 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d02c      	beq.n	800c4cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c47a:	d027      	beq.n	800c4cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a22      	ldr	r2, [pc, #136]	@ (800c50c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d022      	beq.n	800c4cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a21      	ldr	r2, [pc, #132]	@ (800c510 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d01d      	beq.n	800c4cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a1f      	ldr	r2, [pc, #124]	@ (800c514 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d018      	beq.n	800c4cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a1a      	ldr	r2, [pc, #104]	@ (800c508 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d013      	beq.n	800c4cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a1b      	ldr	r2, [pc, #108]	@ (800c518 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d00e      	beq.n	800c4cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a1a      	ldr	r2, [pc, #104]	@ (800c51c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d009      	beq.n	800c4cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a18      	ldr	r2, [pc, #96]	@ (800c520 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d004      	beq.n	800c4cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a17      	ldr	r2, [pc, #92]	@ (800c524 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d10c      	bne.n	800c4e6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c4d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	68ba      	ldr	r2, [r7, #8]
 800c4e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3714      	adds	r7, #20
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr
 800c504:	40010000 	.word	0x40010000
 800c508:	40010400 	.word	0x40010400
 800c50c:	40000400 	.word	0x40000400
 800c510:	40000800 	.word	0x40000800
 800c514:	40000c00 	.word	0x40000c00
 800c518:	40001800 	.word	0x40001800
 800c51c:	40014000 	.word	0x40014000
 800c520:	4000e000 	.word	0x4000e000
 800c524:	4000e400 	.word	0x4000e400

0800c528 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c530:	bf00      	nop
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c544:	bf00      	nop
 800c546:	370c      	adds	r7, #12
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c550:	b480      	push	{r7}
 800c552:	b083      	sub	sp, #12
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c558:	bf00      	nop
 800c55a:	370c      	adds	r7, #12
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d101      	bne.n	800c576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c572:	2301      	movs	r3, #1
 800c574:	e042      	b.n	800c5fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d106      	bne.n	800c58e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f7f5 f953 	bl	8001834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2224      	movs	r2, #36	@ 0x24
 800c592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f022 0201 	bic.w	r2, r2, #1
 800c5a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d002      	beq.n	800c5b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f001 fbe8 	bl	800dd84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 fd79 	bl	800d0ac <UART_SetConfig>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d101      	bne.n	800c5c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e01b      	b.n	800c5fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	685a      	ldr	r2, [r3, #4]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c5d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	689a      	ldr	r2, [r3, #8]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c5e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f042 0201 	orr.w	r2, r2, #1
 800c5f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f001 fc67 	bl	800dec8 <UART_CheckIdleState>
 800c5fa:	4603      	mov	r3, r0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3708      	adds	r7, #8
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b08a      	sub	sp, #40	@ 0x28
 800c608:	af02      	add	r7, sp, #8
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	603b      	str	r3, [r7, #0]
 800c610:	4613      	mov	r3, r2
 800c612:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c61a:	2b20      	cmp	r3, #32
 800c61c:	d17b      	bne.n	800c716 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d002      	beq.n	800c62a <HAL_UART_Transmit+0x26>
 800c624:	88fb      	ldrh	r3, [r7, #6]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d101      	bne.n	800c62e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c62a:	2301      	movs	r3, #1
 800c62c:	e074      	b.n	800c718 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2200      	movs	r2, #0
 800c632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2221      	movs	r2, #33	@ 0x21
 800c63a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c63e:	f7f5 fa17 	bl	8001a70 <HAL_GetTick>
 800c642:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	88fa      	ldrh	r2, [r7, #6]
 800c648:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	88fa      	ldrh	r2, [r7, #6]
 800c650:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	689b      	ldr	r3, [r3, #8]
 800c658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c65c:	d108      	bne.n	800c670 <HAL_UART_Transmit+0x6c>
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	691b      	ldr	r3, [r3, #16]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d104      	bne.n	800c670 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c666:	2300      	movs	r3, #0
 800c668:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	61bb      	str	r3, [r7, #24]
 800c66e:	e003      	b.n	800c678 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c674:	2300      	movs	r3, #0
 800c676:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c678:	e030      	b.n	800c6dc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	9300      	str	r3, [sp, #0]
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	2200      	movs	r2, #0
 800c682:	2180      	movs	r1, #128	@ 0x80
 800c684:	68f8      	ldr	r0, [r7, #12]
 800c686:	f001 fcc9 	bl	800e01c <UART_WaitOnFlagUntilTimeout>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d005      	beq.n	800c69c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2220      	movs	r2, #32
 800c694:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c698:	2303      	movs	r3, #3
 800c69a:	e03d      	b.n	800c718 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d10b      	bne.n	800c6ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	881b      	ldrh	r3, [r3, #0]
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c6b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c6b2:	69bb      	ldr	r3, [r7, #24]
 800c6b4:	3302      	adds	r3, #2
 800c6b6:	61bb      	str	r3, [r7, #24]
 800c6b8:	e007      	b.n	800c6ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c6ba:	69fb      	ldr	r3, [r7, #28]
 800c6bc:	781a      	ldrb	r2, [r3, #0]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	3b01      	subs	r3, #1
 800c6d4:	b29a      	uxth	r2, r3
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d1c8      	bne.n	800c67a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	2140      	movs	r1, #64	@ 0x40
 800c6f2:	68f8      	ldr	r0, [r7, #12]
 800c6f4:	f001 fc92 	bl	800e01c <UART_WaitOnFlagUntilTimeout>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d005      	beq.n	800c70a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2220      	movs	r2, #32
 800c702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c706:	2303      	movs	r3, #3
 800c708:	e006      	b.n	800c718 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2220      	movs	r2, #32
 800c70e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c712:	2300      	movs	r3, #0
 800c714:	e000      	b.n	800c718 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c716:	2302      	movs	r3, #2
  }
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3720      	adds	r7, #32
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b08a      	sub	sp, #40	@ 0x28
 800c724:	af02      	add	r7, sp, #8
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	603b      	str	r3, [r7, #0]
 800c72c:	4613      	mov	r3, r2
 800c72e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c736:	2b20      	cmp	r3, #32
 800c738:	f040 80b5 	bne.w	800c8a6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d002      	beq.n	800c748 <HAL_UART_Receive+0x28>
 800c742:	88fb      	ldrh	r3, [r7, #6]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d101      	bne.n	800c74c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800c748:	2301      	movs	r3, #1
 800c74a:	e0ad      	b.n	800c8a8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2200      	movs	r2, #0
 800c750:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2222      	movs	r2, #34	@ 0x22
 800c758:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2200      	movs	r2, #0
 800c760:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c762:	f7f5 f985 	bl	8001a70 <HAL_GetTick>
 800c766:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	88fa      	ldrh	r2, [r7, #6]
 800c76c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	88fa      	ldrh	r2, [r7, #6]
 800c774:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	689b      	ldr	r3, [r3, #8]
 800c77c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c780:	d10e      	bne.n	800c7a0 <HAL_UART_Receive+0x80>
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d105      	bne.n	800c796 <HAL_UART_Receive+0x76>
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c790:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c794:	e02d      	b.n	800c7f2 <HAL_UART_Receive+0xd2>
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	22ff      	movs	r2, #255	@ 0xff
 800c79a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c79e:	e028      	b.n	800c7f2 <HAL_UART_Receive+0xd2>
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	689b      	ldr	r3, [r3, #8]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d10d      	bne.n	800c7c4 <HAL_UART_Receive+0xa4>
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	691b      	ldr	r3, [r3, #16]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d104      	bne.n	800c7ba <HAL_UART_Receive+0x9a>
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	22ff      	movs	r2, #255	@ 0xff
 800c7b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c7b8:	e01b      	b.n	800c7f2 <HAL_UART_Receive+0xd2>
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	227f      	movs	r2, #127	@ 0x7f
 800c7be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c7c2:	e016      	b.n	800c7f2 <HAL_UART_Receive+0xd2>
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	689b      	ldr	r3, [r3, #8]
 800c7c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7cc:	d10d      	bne.n	800c7ea <HAL_UART_Receive+0xca>
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	691b      	ldr	r3, [r3, #16]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d104      	bne.n	800c7e0 <HAL_UART_Receive+0xc0>
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	227f      	movs	r2, #127	@ 0x7f
 800c7da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c7de:	e008      	b.n	800c7f2 <HAL_UART_Receive+0xd2>
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	223f      	movs	r2, #63	@ 0x3f
 800c7e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c7e8:	e003      	b.n	800c7f2 <HAL_UART_Receive+0xd2>
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c7f8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	689b      	ldr	r3, [r3, #8]
 800c7fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c802:	d108      	bne.n	800c816 <HAL_UART_Receive+0xf6>
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d104      	bne.n	800c816 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800c80c:	2300      	movs	r3, #0
 800c80e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	61bb      	str	r3, [r7, #24]
 800c814:	e003      	b.n	800c81e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c81a:	2300      	movs	r3, #0
 800c81c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800c81e:	e036      	b.n	800c88e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	2200      	movs	r2, #0
 800c828:	2120      	movs	r1, #32
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f001 fbf6 	bl	800e01c <UART_WaitOnFlagUntilTimeout>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d005      	beq.n	800c842 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2220      	movs	r2, #32
 800c83a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800c83e:	2303      	movs	r3, #3
 800c840:	e032      	b.n	800c8a8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d10c      	bne.n	800c862 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c84e:	b29a      	uxth	r2, r3
 800c850:	8a7b      	ldrh	r3, [r7, #18]
 800c852:	4013      	ands	r3, r2
 800c854:	b29a      	uxth	r2, r3
 800c856:	69bb      	ldr	r3, [r7, #24]
 800c858:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c85a:	69bb      	ldr	r3, [r7, #24]
 800c85c:	3302      	adds	r3, #2
 800c85e:	61bb      	str	r3, [r7, #24]
 800c860:	e00c      	b.n	800c87c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c868:	b2da      	uxtb	r2, r3
 800c86a:	8a7b      	ldrh	r3, [r7, #18]
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	4013      	ands	r3, r2
 800c870:	b2da      	uxtb	r2, r3
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	3301      	adds	r3, #1
 800c87a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c882:	b29b      	uxth	r3, r3
 800c884:	3b01      	subs	r3, #1
 800c886:	b29a      	uxth	r2, r3
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c894:	b29b      	uxth	r3, r3
 800c896:	2b00      	cmp	r3, #0
 800c898:	d1c2      	bne.n	800c820 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2220      	movs	r2, #32
 800c89e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	e000      	b.n	800c8a8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800c8a6:	2302      	movs	r3, #2
  }
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3720      	adds	r7, #32
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b0ba      	sub	sp, #232	@ 0xe8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	69db      	ldr	r3, [r3, #28]
 800c8be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c8d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c8da:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c8de:	4013      	ands	r3, r2
 800c8e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c8e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d11b      	bne.n	800c924 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c8ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8f0:	f003 0320 	and.w	r3, r3, #32
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d015      	beq.n	800c924 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c8f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8fc:	f003 0320 	and.w	r3, r3, #32
 800c900:	2b00      	cmp	r3, #0
 800c902:	d105      	bne.n	800c910 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d009      	beq.n	800c924 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c914:	2b00      	cmp	r3, #0
 800c916:	f000 8393 	beq.w	800d040 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	4798      	blx	r3
      }
      return;
 800c922:	e38d      	b.n	800d040 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c924:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c928:	2b00      	cmp	r3, #0
 800c92a:	f000 8123 	beq.w	800cb74 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c92e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c932:	4b8d      	ldr	r3, [pc, #564]	@ (800cb68 <HAL_UART_IRQHandler+0x2b8>)
 800c934:	4013      	ands	r3, r2
 800c936:	2b00      	cmp	r3, #0
 800c938:	d106      	bne.n	800c948 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c93a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c93e:	4b8b      	ldr	r3, [pc, #556]	@ (800cb6c <HAL_UART_IRQHandler+0x2bc>)
 800c940:	4013      	ands	r3, r2
 800c942:	2b00      	cmp	r3, #0
 800c944:	f000 8116 	beq.w	800cb74 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c94c:	f003 0301 	and.w	r3, r3, #1
 800c950:	2b00      	cmp	r3, #0
 800c952:	d011      	beq.n	800c978 <HAL_UART_IRQHandler+0xc8>
 800c954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d00b      	beq.n	800c978 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	2201      	movs	r2, #1
 800c966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c96e:	f043 0201 	orr.w	r2, r3, #1
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c97c:	f003 0302 	and.w	r3, r3, #2
 800c980:	2b00      	cmp	r3, #0
 800c982:	d011      	beq.n	800c9a8 <HAL_UART_IRQHandler+0xf8>
 800c984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c988:	f003 0301 	and.w	r3, r3, #1
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d00b      	beq.n	800c9a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	2202      	movs	r2, #2
 800c996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c99e:	f043 0204 	orr.w	r2, r3, #4
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c9a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9ac:	f003 0304 	and.w	r3, r3, #4
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d011      	beq.n	800c9d8 <HAL_UART_IRQHandler+0x128>
 800c9b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c9b8:	f003 0301 	and.w	r3, r3, #1
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d00b      	beq.n	800c9d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	2204      	movs	r2, #4
 800c9c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9ce:	f043 0202 	orr.w	r2, r3, #2
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c9d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9dc:	f003 0308 	and.w	r3, r3, #8
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d017      	beq.n	800ca14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c9e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c9e8:	f003 0320 	and.w	r3, r3, #32
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d105      	bne.n	800c9fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c9f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c9f4:	4b5c      	ldr	r3, [pc, #368]	@ (800cb68 <HAL_UART_IRQHandler+0x2b8>)
 800c9f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d00b      	beq.n	800ca14 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	2208      	movs	r2, #8
 800ca02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca0a:	f043 0208 	orr.w	r2, r3, #8
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ca14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d012      	beq.n	800ca46 <HAL_UART_IRQHandler+0x196>
 800ca20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d00c      	beq.n	800ca46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ca34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca3c:	f043 0220 	orr.w	r2, r3, #32
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	f000 82f9 	beq.w	800d044 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ca52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca56:	f003 0320 	and.w	r3, r3, #32
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d013      	beq.n	800ca86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ca5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca62:	f003 0320 	and.w	r3, r3, #32
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d105      	bne.n	800ca76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ca6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d007      	beq.n	800ca86 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d003      	beq.n	800ca86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	689b      	ldr	r3, [r3, #8]
 800ca96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca9a:	2b40      	cmp	r3, #64	@ 0x40
 800ca9c:	d005      	beq.n	800caaa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ca9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800caa2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d054      	beq.n	800cb54 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f001 fc0c 	bl	800e2c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800caba:	2b40      	cmp	r3, #64	@ 0x40
 800cabc:	d146      	bne.n	800cb4c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	3308      	adds	r3, #8
 800cac4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cacc:	e853 3f00 	ldrex	r3, [r3]
 800cad0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cad8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cadc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	3308      	adds	r3, #8
 800cae6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800caea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800caee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800caf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cafa:	e841 2300 	strex	r3, r2, [r1]
 800cafe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cb02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1d9      	bne.n	800cabe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d017      	beq.n	800cb44 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb1a:	4a15      	ldr	r2, [pc, #84]	@ (800cb70 <HAL_UART_IRQHandler+0x2c0>)
 800cb1c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb24:	4618      	mov	r0, r3
 800cb26:	f7f8 fb09 	bl	800513c <HAL_DMA_Abort_IT>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d019      	beq.n	800cb64 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb38:	687a      	ldr	r2, [r7, #4]
 800cb3a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800cb3e:	4610      	mov	r0, r2
 800cb40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb42:	e00f      	b.n	800cb64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f000 faa7 	bl	800d098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb4a:	e00b      	b.n	800cb64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 faa3 	bl	800d098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb52:	e007      	b.n	800cb64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 fa9f 	bl	800d098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800cb62:	e26f      	b.n	800d044 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb64:	bf00      	nop
    return;
 800cb66:	e26d      	b.n	800d044 <HAL_UART_IRQHandler+0x794>
 800cb68:	10000001 	.word	0x10000001
 800cb6c:	04000120 	.word	0x04000120
 800cb70:	0800e57b 	.word	0x0800e57b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	f040 8203 	bne.w	800cf84 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cb7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb82:	f003 0310 	and.w	r3, r3, #16
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f000 81fc 	beq.w	800cf84 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cb8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb90:	f003 0310 	and.w	r3, r3, #16
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	f000 81f5 	beq.w	800cf84 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2210      	movs	r2, #16
 800cba0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbac:	2b40      	cmp	r3, #64	@ 0x40
 800cbae:	f040 816d 	bne.w	800ce8c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4aa4      	ldr	r2, [pc, #656]	@ (800ce4c <HAL_UART_IRQHandler+0x59c>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d068      	beq.n	800cc92 <HAL_UART_IRQHandler+0x3e2>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4aa1      	ldr	r2, [pc, #644]	@ (800ce50 <HAL_UART_IRQHandler+0x5a0>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d061      	beq.n	800cc92 <HAL_UART_IRQHandler+0x3e2>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4a9f      	ldr	r2, [pc, #636]	@ (800ce54 <HAL_UART_IRQHandler+0x5a4>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d05a      	beq.n	800cc92 <HAL_UART_IRQHandler+0x3e2>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a9c      	ldr	r2, [pc, #624]	@ (800ce58 <HAL_UART_IRQHandler+0x5a8>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d053      	beq.n	800cc92 <HAL_UART_IRQHandler+0x3e2>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a9a      	ldr	r2, [pc, #616]	@ (800ce5c <HAL_UART_IRQHandler+0x5ac>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d04c      	beq.n	800cc92 <HAL_UART_IRQHandler+0x3e2>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a97      	ldr	r2, [pc, #604]	@ (800ce60 <HAL_UART_IRQHandler+0x5b0>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d045      	beq.n	800cc92 <HAL_UART_IRQHandler+0x3e2>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4a95      	ldr	r2, [pc, #596]	@ (800ce64 <HAL_UART_IRQHandler+0x5b4>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d03e      	beq.n	800cc92 <HAL_UART_IRQHandler+0x3e2>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a92      	ldr	r2, [pc, #584]	@ (800ce68 <HAL_UART_IRQHandler+0x5b8>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d037      	beq.n	800cc92 <HAL_UART_IRQHandler+0x3e2>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a90      	ldr	r2, [pc, #576]	@ (800ce6c <HAL_UART_IRQHandler+0x5bc>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d030      	beq.n	800cc92 <HAL_UART_IRQHandler+0x3e2>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a8d      	ldr	r2, [pc, #564]	@ (800ce70 <HAL_UART_IRQHandler+0x5c0>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d029      	beq.n	800cc92 <HAL_UART_IRQHandler+0x3e2>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a8b      	ldr	r2, [pc, #556]	@ (800ce74 <HAL_UART_IRQHandler+0x5c4>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d022      	beq.n	800cc92 <HAL_UART_IRQHandler+0x3e2>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a88      	ldr	r2, [pc, #544]	@ (800ce78 <HAL_UART_IRQHandler+0x5c8>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d01b      	beq.n	800cc92 <HAL_UART_IRQHandler+0x3e2>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a86      	ldr	r2, [pc, #536]	@ (800ce7c <HAL_UART_IRQHandler+0x5cc>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d014      	beq.n	800cc92 <HAL_UART_IRQHandler+0x3e2>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4a83      	ldr	r2, [pc, #524]	@ (800ce80 <HAL_UART_IRQHandler+0x5d0>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d00d      	beq.n	800cc92 <HAL_UART_IRQHandler+0x3e2>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a81      	ldr	r2, [pc, #516]	@ (800ce84 <HAL_UART_IRQHandler+0x5d4>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d006      	beq.n	800cc92 <HAL_UART_IRQHandler+0x3e2>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a7e      	ldr	r2, [pc, #504]	@ (800ce88 <HAL_UART_IRQHandler+0x5d8>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d106      	bne.n	800cca0 <HAL_UART_IRQHandler+0x3f0>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	e005      	b.n	800ccac <HAL_UART_IRQHandler+0x3fc>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ccb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	f000 80ad 	beq.w	800ce14 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ccc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	f080 80a5 	bcs.w	800ce14 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ccd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccda:	69db      	ldr	r3, [r3, #28]
 800ccdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cce0:	f000 8087 	beq.w	800cdf2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ccf0:	e853 3f00 	ldrex	r3, [r3]
 800ccf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ccf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ccfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cd00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	461a      	mov	r2, r3
 800cd0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cd0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cd12:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd16:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cd1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cd1e:	e841 2300 	strex	r3, r2, [r1]
 800cd22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cd26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1da      	bne.n	800cce4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	3308      	adds	r3, #8
 800cd34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd38:	e853 3f00 	ldrex	r3, [r3]
 800cd3c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cd3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd40:	f023 0301 	bic.w	r3, r3, #1
 800cd44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	3308      	adds	r3, #8
 800cd4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cd52:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cd56:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd58:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cd5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cd5e:	e841 2300 	strex	r3, r2, [r1]
 800cd62:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cd64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d1e1      	bne.n	800cd2e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	3308      	adds	r3, #8
 800cd70:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cd74:	e853 3f00 	ldrex	r3, [r3]
 800cd78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cd7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cd7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	3308      	adds	r3, #8
 800cd8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cd8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cd90:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd92:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cd94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cd96:	e841 2300 	strex	r3, r2, [r1]
 800cd9a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cd9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1e3      	bne.n	800cd6a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2220      	movs	r2, #32
 800cda6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2200      	movs	r2, #0
 800cdae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cdb8:	e853 3f00 	ldrex	r3, [r3]
 800cdbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cdbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdc0:	f023 0310 	bic.w	r3, r3, #16
 800cdc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	461a      	mov	r2, r3
 800cdce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cdd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cdd4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdd6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cdd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cdda:	e841 2300 	strex	r3, r2, [r1]
 800cdde:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cde0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d1e4      	bne.n	800cdb0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7f7 fe87 	bl	8004b00 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2202      	movs	r2, #2
 800cdf6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	1ad3      	subs	r3, r2, r3
 800ce08:	b29b      	uxth	r3, r3
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f003 fc77 	bl	8010700 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ce12:	e119      	b.n	800d048 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ce1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	f040 8112 	bne.w	800d048 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce2a:	69db      	ldr	r3, [r3, #28]
 800ce2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce30:	f040 810a 	bne.w	800d048 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2202      	movs	r2, #2
 800ce38:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ce40:	4619      	mov	r1, r3
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f003 fc5c 	bl	8010700 <HAL_UARTEx_RxEventCallback>
      return;
 800ce48:	e0fe      	b.n	800d048 <HAL_UART_IRQHandler+0x798>
 800ce4a:	bf00      	nop
 800ce4c:	40020010 	.word	0x40020010
 800ce50:	40020028 	.word	0x40020028
 800ce54:	40020040 	.word	0x40020040
 800ce58:	40020058 	.word	0x40020058
 800ce5c:	40020070 	.word	0x40020070
 800ce60:	40020088 	.word	0x40020088
 800ce64:	400200a0 	.word	0x400200a0
 800ce68:	400200b8 	.word	0x400200b8
 800ce6c:	40020410 	.word	0x40020410
 800ce70:	40020428 	.word	0x40020428
 800ce74:	40020440 	.word	0x40020440
 800ce78:	40020458 	.word	0x40020458
 800ce7c:	40020470 	.word	0x40020470
 800ce80:	40020488 	.word	0x40020488
 800ce84:	400204a0 	.word	0x400204a0
 800ce88:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	1ad3      	subs	r3, r2, r3
 800ce9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f000 80cf 	beq.w	800d04c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800ceae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	f000 80ca 	beq.w	800d04c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec0:	e853 3f00 	ldrex	r3, [r3]
 800cec4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cec8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cecc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	461a      	mov	r2, r3
 800ced6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ceda:	647b      	str	r3, [r7, #68]	@ 0x44
 800cedc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cede:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cee0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cee2:	e841 2300 	strex	r3, r2, [r1]
 800cee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1e4      	bne.n	800ceb8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	3308      	adds	r3, #8
 800cef4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef8:	e853 3f00 	ldrex	r3, [r3]
 800cefc:	623b      	str	r3, [r7, #32]
   return(result);
 800cefe:	6a3a      	ldr	r2, [r7, #32]
 800cf00:	4b55      	ldr	r3, [pc, #340]	@ (800d058 <HAL_UART_IRQHandler+0x7a8>)
 800cf02:	4013      	ands	r3, r2
 800cf04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	3308      	adds	r3, #8
 800cf0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cf12:	633a      	str	r2, [r7, #48]	@ 0x30
 800cf14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cf18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf1a:	e841 2300 	strex	r3, r2, [r1]
 800cf1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cf20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1e3      	bne.n	800ceee <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2220      	movs	r2, #32
 800cf2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	e853 3f00 	ldrex	r3, [r3]
 800cf46:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f023 0310 	bic.w	r3, r3, #16
 800cf4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	461a      	mov	r2, r3
 800cf58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cf5c:	61fb      	str	r3, [r7, #28]
 800cf5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf60:	69b9      	ldr	r1, [r7, #24]
 800cf62:	69fa      	ldr	r2, [r7, #28]
 800cf64:	e841 2300 	strex	r3, r2, [r1]
 800cf68:	617b      	str	r3, [r7, #20]
   return(result);
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d1e4      	bne.n	800cf3a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2202      	movs	r2, #2
 800cf74:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cf76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f003 fbbf 	bl	8010700 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cf82:	e063      	b.n	800d04c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cf84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00e      	beq.n	800cfae <HAL_UART_IRQHandler+0x6fe>
 800cf90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cf94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d008      	beq.n	800cfae <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800cfa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f001 fb24 	bl	800e5f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cfac:	e051      	b.n	800d052 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cfae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d014      	beq.n	800cfe4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cfba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cfbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d105      	bne.n	800cfd2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cfc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cfca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d008      	beq.n	800cfe4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d03a      	beq.n	800d050 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	4798      	blx	r3
    }
    return;
 800cfe2:	e035      	b.n	800d050 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cfe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d009      	beq.n	800d004 <HAL_UART_IRQHandler+0x754>
 800cff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d003      	beq.n	800d004 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f001 face 	bl	800e59e <UART_EndTransmit_IT>
    return;
 800d002:	e026      	b.n	800d052 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d008:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d009      	beq.n	800d024 <HAL_UART_IRQHandler+0x774>
 800d010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d014:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d003      	beq.n	800d024 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f001 fafd 	bl	800e61c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d022:	e016      	b.n	800d052 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d028:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d010      	beq.n	800d052 <HAL_UART_IRQHandler+0x7a2>
 800d030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d034:	2b00      	cmp	r3, #0
 800d036:	da0c      	bge.n	800d052 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f001 fae5 	bl	800e608 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d03e:	e008      	b.n	800d052 <HAL_UART_IRQHandler+0x7a2>
      return;
 800d040:	bf00      	nop
 800d042:	e006      	b.n	800d052 <HAL_UART_IRQHandler+0x7a2>
    return;
 800d044:	bf00      	nop
 800d046:	e004      	b.n	800d052 <HAL_UART_IRQHandler+0x7a2>
      return;
 800d048:	bf00      	nop
 800d04a:	e002      	b.n	800d052 <HAL_UART_IRQHandler+0x7a2>
      return;
 800d04c:	bf00      	nop
 800d04e:	e000      	b.n	800d052 <HAL_UART_IRQHandler+0x7a2>
    return;
 800d050:	bf00      	nop
  }
}
 800d052:	37e8      	adds	r7, #232	@ 0xe8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	effffffe 	.word	0xeffffffe

0800d05c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b083      	sub	sp, #12
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d064:	bf00      	nop
 800d066:	370c      	adds	r7, #12
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d078:	bf00      	nop
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d08c:	bf00      	nop
 800d08e:	370c      	adds	r7, #12
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr

0800d098 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d0a0:	bf00      	nop
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0b0:	b092      	sub	sp, #72	@ 0x48
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	689a      	ldr	r2, [r3, #8]
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	691b      	ldr	r3, [r3, #16]
 800d0c4:	431a      	orrs	r2, r3
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	695b      	ldr	r3, [r3, #20]
 800d0ca:	431a      	orrs	r2, r3
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	69db      	ldr	r3, [r3, #28]
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	4bbe      	ldr	r3, [pc, #760]	@ (800d3d4 <UART_SetConfig+0x328>)
 800d0dc:	4013      	ands	r3, r2
 800d0de:	697a      	ldr	r2, [r7, #20]
 800d0e0:	6812      	ldr	r2, [r2, #0]
 800d0e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d0e4:	430b      	orrs	r3, r1
 800d0e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	68da      	ldr	r2, [r3, #12]
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	430a      	orrs	r2, r1
 800d0fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	699b      	ldr	r3, [r3, #24]
 800d102:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4ab3      	ldr	r2, [pc, #716]	@ (800d3d8 <UART_SetConfig+0x32c>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d004      	beq.n	800d118 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	6a1b      	ldr	r3, [r3, #32]
 800d112:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d114:	4313      	orrs	r3, r2
 800d116:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	689a      	ldr	r2, [r3, #8]
 800d11e:	4baf      	ldr	r3, [pc, #700]	@ (800d3dc <UART_SetConfig+0x330>)
 800d120:	4013      	ands	r3, r2
 800d122:	697a      	ldr	r2, [r7, #20]
 800d124:	6812      	ldr	r2, [r2, #0]
 800d126:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d128:	430b      	orrs	r3, r1
 800d12a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d132:	f023 010f 	bic.w	r1, r3, #15
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	430a      	orrs	r2, r1
 800d140:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4aa6      	ldr	r2, [pc, #664]	@ (800d3e0 <UART_SetConfig+0x334>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	d177      	bne.n	800d23c <UART_SetConfig+0x190>
 800d14c:	4ba5      	ldr	r3, [pc, #660]	@ (800d3e4 <UART_SetConfig+0x338>)
 800d14e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d150:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d154:	2b28      	cmp	r3, #40	@ 0x28
 800d156:	d86d      	bhi.n	800d234 <UART_SetConfig+0x188>
 800d158:	a201      	add	r2, pc, #4	@ (adr r2, 800d160 <UART_SetConfig+0xb4>)
 800d15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d15e:	bf00      	nop
 800d160:	0800d205 	.word	0x0800d205
 800d164:	0800d235 	.word	0x0800d235
 800d168:	0800d235 	.word	0x0800d235
 800d16c:	0800d235 	.word	0x0800d235
 800d170:	0800d235 	.word	0x0800d235
 800d174:	0800d235 	.word	0x0800d235
 800d178:	0800d235 	.word	0x0800d235
 800d17c:	0800d235 	.word	0x0800d235
 800d180:	0800d20d 	.word	0x0800d20d
 800d184:	0800d235 	.word	0x0800d235
 800d188:	0800d235 	.word	0x0800d235
 800d18c:	0800d235 	.word	0x0800d235
 800d190:	0800d235 	.word	0x0800d235
 800d194:	0800d235 	.word	0x0800d235
 800d198:	0800d235 	.word	0x0800d235
 800d19c:	0800d235 	.word	0x0800d235
 800d1a0:	0800d215 	.word	0x0800d215
 800d1a4:	0800d235 	.word	0x0800d235
 800d1a8:	0800d235 	.word	0x0800d235
 800d1ac:	0800d235 	.word	0x0800d235
 800d1b0:	0800d235 	.word	0x0800d235
 800d1b4:	0800d235 	.word	0x0800d235
 800d1b8:	0800d235 	.word	0x0800d235
 800d1bc:	0800d235 	.word	0x0800d235
 800d1c0:	0800d21d 	.word	0x0800d21d
 800d1c4:	0800d235 	.word	0x0800d235
 800d1c8:	0800d235 	.word	0x0800d235
 800d1cc:	0800d235 	.word	0x0800d235
 800d1d0:	0800d235 	.word	0x0800d235
 800d1d4:	0800d235 	.word	0x0800d235
 800d1d8:	0800d235 	.word	0x0800d235
 800d1dc:	0800d235 	.word	0x0800d235
 800d1e0:	0800d225 	.word	0x0800d225
 800d1e4:	0800d235 	.word	0x0800d235
 800d1e8:	0800d235 	.word	0x0800d235
 800d1ec:	0800d235 	.word	0x0800d235
 800d1f0:	0800d235 	.word	0x0800d235
 800d1f4:	0800d235 	.word	0x0800d235
 800d1f8:	0800d235 	.word	0x0800d235
 800d1fc:	0800d235 	.word	0x0800d235
 800d200:	0800d22d 	.word	0x0800d22d
 800d204:	2301      	movs	r3, #1
 800d206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d20a:	e326      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d20c:	2304      	movs	r3, #4
 800d20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d212:	e322      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d214:	2308      	movs	r3, #8
 800d216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d21a:	e31e      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d21c:	2310      	movs	r3, #16
 800d21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d222:	e31a      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d224:	2320      	movs	r3, #32
 800d226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d22a:	e316      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d22c:	2340      	movs	r3, #64	@ 0x40
 800d22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d232:	e312      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d234:	2380      	movs	r3, #128	@ 0x80
 800d236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d23a:	e30e      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a69      	ldr	r2, [pc, #420]	@ (800d3e8 <UART_SetConfig+0x33c>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d130      	bne.n	800d2a8 <UART_SetConfig+0x1fc>
 800d246:	4b67      	ldr	r3, [pc, #412]	@ (800d3e4 <UART_SetConfig+0x338>)
 800d248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d24a:	f003 0307 	and.w	r3, r3, #7
 800d24e:	2b05      	cmp	r3, #5
 800d250:	d826      	bhi.n	800d2a0 <UART_SetConfig+0x1f4>
 800d252:	a201      	add	r2, pc, #4	@ (adr r2, 800d258 <UART_SetConfig+0x1ac>)
 800d254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d258:	0800d271 	.word	0x0800d271
 800d25c:	0800d279 	.word	0x0800d279
 800d260:	0800d281 	.word	0x0800d281
 800d264:	0800d289 	.word	0x0800d289
 800d268:	0800d291 	.word	0x0800d291
 800d26c:	0800d299 	.word	0x0800d299
 800d270:	2300      	movs	r3, #0
 800d272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d276:	e2f0      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d278:	2304      	movs	r3, #4
 800d27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d27e:	e2ec      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d280:	2308      	movs	r3, #8
 800d282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d286:	e2e8      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d288:	2310      	movs	r3, #16
 800d28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d28e:	e2e4      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d290:	2320      	movs	r3, #32
 800d292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d296:	e2e0      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d298:	2340      	movs	r3, #64	@ 0x40
 800d29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d29e:	e2dc      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d2a0:	2380      	movs	r3, #128	@ 0x80
 800d2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2a6:	e2d8      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a4f      	ldr	r2, [pc, #316]	@ (800d3ec <UART_SetConfig+0x340>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d130      	bne.n	800d314 <UART_SetConfig+0x268>
 800d2b2:	4b4c      	ldr	r3, [pc, #304]	@ (800d3e4 <UART_SetConfig+0x338>)
 800d2b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2b6:	f003 0307 	and.w	r3, r3, #7
 800d2ba:	2b05      	cmp	r3, #5
 800d2bc:	d826      	bhi.n	800d30c <UART_SetConfig+0x260>
 800d2be:	a201      	add	r2, pc, #4	@ (adr r2, 800d2c4 <UART_SetConfig+0x218>)
 800d2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2c4:	0800d2dd 	.word	0x0800d2dd
 800d2c8:	0800d2e5 	.word	0x0800d2e5
 800d2cc:	0800d2ed 	.word	0x0800d2ed
 800d2d0:	0800d2f5 	.word	0x0800d2f5
 800d2d4:	0800d2fd 	.word	0x0800d2fd
 800d2d8:	0800d305 	.word	0x0800d305
 800d2dc:	2300      	movs	r3, #0
 800d2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2e2:	e2ba      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d2e4:	2304      	movs	r3, #4
 800d2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ea:	e2b6      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d2ec:	2308      	movs	r3, #8
 800d2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2f2:	e2b2      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d2f4:	2310      	movs	r3, #16
 800d2f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2fa:	e2ae      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d2fc:	2320      	movs	r3, #32
 800d2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d302:	e2aa      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d304:	2340      	movs	r3, #64	@ 0x40
 800d306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d30a:	e2a6      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d30c:	2380      	movs	r3, #128	@ 0x80
 800d30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d312:	e2a2      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	4a35      	ldr	r2, [pc, #212]	@ (800d3f0 <UART_SetConfig+0x344>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d130      	bne.n	800d380 <UART_SetConfig+0x2d4>
 800d31e:	4b31      	ldr	r3, [pc, #196]	@ (800d3e4 <UART_SetConfig+0x338>)
 800d320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d322:	f003 0307 	and.w	r3, r3, #7
 800d326:	2b05      	cmp	r3, #5
 800d328:	d826      	bhi.n	800d378 <UART_SetConfig+0x2cc>
 800d32a:	a201      	add	r2, pc, #4	@ (adr r2, 800d330 <UART_SetConfig+0x284>)
 800d32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d330:	0800d349 	.word	0x0800d349
 800d334:	0800d351 	.word	0x0800d351
 800d338:	0800d359 	.word	0x0800d359
 800d33c:	0800d361 	.word	0x0800d361
 800d340:	0800d369 	.word	0x0800d369
 800d344:	0800d371 	.word	0x0800d371
 800d348:	2300      	movs	r3, #0
 800d34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d34e:	e284      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d350:	2304      	movs	r3, #4
 800d352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d356:	e280      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d358:	2308      	movs	r3, #8
 800d35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d35e:	e27c      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d360:	2310      	movs	r3, #16
 800d362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d366:	e278      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d368:	2320      	movs	r3, #32
 800d36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d36e:	e274      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d370:	2340      	movs	r3, #64	@ 0x40
 800d372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d376:	e270      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d378:	2380      	movs	r3, #128	@ 0x80
 800d37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d37e:	e26c      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4a1b      	ldr	r2, [pc, #108]	@ (800d3f4 <UART_SetConfig+0x348>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d142      	bne.n	800d410 <UART_SetConfig+0x364>
 800d38a:	4b16      	ldr	r3, [pc, #88]	@ (800d3e4 <UART_SetConfig+0x338>)
 800d38c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d38e:	f003 0307 	and.w	r3, r3, #7
 800d392:	2b05      	cmp	r3, #5
 800d394:	d838      	bhi.n	800d408 <UART_SetConfig+0x35c>
 800d396:	a201      	add	r2, pc, #4	@ (adr r2, 800d39c <UART_SetConfig+0x2f0>)
 800d398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d39c:	0800d3b5 	.word	0x0800d3b5
 800d3a0:	0800d3bd 	.word	0x0800d3bd
 800d3a4:	0800d3c5 	.word	0x0800d3c5
 800d3a8:	0800d3cd 	.word	0x0800d3cd
 800d3ac:	0800d3f9 	.word	0x0800d3f9
 800d3b0:	0800d401 	.word	0x0800d401
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3ba:	e24e      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d3bc:	2304      	movs	r3, #4
 800d3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3c2:	e24a      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d3c4:	2308      	movs	r3, #8
 800d3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3ca:	e246      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d3cc:	2310      	movs	r3, #16
 800d3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3d2:	e242      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d3d4:	cfff69f3 	.word	0xcfff69f3
 800d3d8:	58000c00 	.word	0x58000c00
 800d3dc:	11fff4ff 	.word	0x11fff4ff
 800d3e0:	40011000 	.word	0x40011000
 800d3e4:	58024400 	.word	0x58024400
 800d3e8:	40004400 	.word	0x40004400
 800d3ec:	40004800 	.word	0x40004800
 800d3f0:	40004c00 	.word	0x40004c00
 800d3f4:	40005000 	.word	0x40005000
 800d3f8:	2320      	movs	r3, #32
 800d3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3fe:	e22c      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d400:	2340      	movs	r3, #64	@ 0x40
 800d402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d406:	e228      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d408:	2380      	movs	r3, #128	@ 0x80
 800d40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d40e:	e224      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4ab1      	ldr	r2, [pc, #708]	@ (800d6dc <UART_SetConfig+0x630>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d176      	bne.n	800d508 <UART_SetConfig+0x45c>
 800d41a:	4bb1      	ldr	r3, [pc, #708]	@ (800d6e0 <UART_SetConfig+0x634>)
 800d41c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d41e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d422:	2b28      	cmp	r3, #40	@ 0x28
 800d424:	d86c      	bhi.n	800d500 <UART_SetConfig+0x454>
 800d426:	a201      	add	r2, pc, #4	@ (adr r2, 800d42c <UART_SetConfig+0x380>)
 800d428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d42c:	0800d4d1 	.word	0x0800d4d1
 800d430:	0800d501 	.word	0x0800d501
 800d434:	0800d501 	.word	0x0800d501
 800d438:	0800d501 	.word	0x0800d501
 800d43c:	0800d501 	.word	0x0800d501
 800d440:	0800d501 	.word	0x0800d501
 800d444:	0800d501 	.word	0x0800d501
 800d448:	0800d501 	.word	0x0800d501
 800d44c:	0800d4d9 	.word	0x0800d4d9
 800d450:	0800d501 	.word	0x0800d501
 800d454:	0800d501 	.word	0x0800d501
 800d458:	0800d501 	.word	0x0800d501
 800d45c:	0800d501 	.word	0x0800d501
 800d460:	0800d501 	.word	0x0800d501
 800d464:	0800d501 	.word	0x0800d501
 800d468:	0800d501 	.word	0x0800d501
 800d46c:	0800d4e1 	.word	0x0800d4e1
 800d470:	0800d501 	.word	0x0800d501
 800d474:	0800d501 	.word	0x0800d501
 800d478:	0800d501 	.word	0x0800d501
 800d47c:	0800d501 	.word	0x0800d501
 800d480:	0800d501 	.word	0x0800d501
 800d484:	0800d501 	.word	0x0800d501
 800d488:	0800d501 	.word	0x0800d501
 800d48c:	0800d4e9 	.word	0x0800d4e9
 800d490:	0800d501 	.word	0x0800d501
 800d494:	0800d501 	.word	0x0800d501
 800d498:	0800d501 	.word	0x0800d501
 800d49c:	0800d501 	.word	0x0800d501
 800d4a0:	0800d501 	.word	0x0800d501
 800d4a4:	0800d501 	.word	0x0800d501
 800d4a8:	0800d501 	.word	0x0800d501
 800d4ac:	0800d4f1 	.word	0x0800d4f1
 800d4b0:	0800d501 	.word	0x0800d501
 800d4b4:	0800d501 	.word	0x0800d501
 800d4b8:	0800d501 	.word	0x0800d501
 800d4bc:	0800d501 	.word	0x0800d501
 800d4c0:	0800d501 	.word	0x0800d501
 800d4c4:	0800d501 	.word	0x0800d501
 800d4c8:	0800d501 	.word	0x0800d501
 800d4cc:	0800d4f9 	.word	0x0800d4f9
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4d6:	e1c0      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d4d8:	2304      	movs	r3, #4
 800d4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4de:	e1bc      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d4e0:	2308      	movs	r3, #8
 800d4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4e6:	e1b8      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d4e8:	2310      	movs	r3, #16
 800d4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4ee:	e1b4      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d4f0:	2320      	movs	r3, #32
 800d4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4f6:	e1b0      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d4f8:	2340      	movs	r3, #64	@ 0x40
 800d4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4fe:	e1ac      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d500:	2380      	movs	r3, #128	@ 0x80
 800d502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d506:	e1a8      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	4a75      	ldr	r2, [pc, #468]	@ (800d6e4 <UART_SetConfig+0x638>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d130      	bne.n	800d574 <UART_SetConfig+0x4c8>
 800d512:	4b73      	ldr	r3, [pc, #460]	@ (800d6e0 <UART_SetConfig+0x634>)
 800d514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d516:	f003 0307 	and.w	r3, r3, #7
 800d51a:	2b05      	cmp	r3, #5
 800d51c:	d826      	bhi.n	800d56c <UART_SetConfig+0x4c0>
 800d51e:	a201      	add	r2, pc, #4	@ (adr r2, 800d524 <UART_SetConfig+0x478>)
 800d520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d524:	0800d53d 	.word	0x0800d53d
 800d528:	0800d545 	.word	0x0800d545
 800d52c:	0800d54d 	.word	0x0800d54d
 800d530:	0800d555 	.word	0x0800d555
 800d534:	0800d55d 	.word	0x0800d55d
 800d538:	0800d565 	.word	0x0800d565
 800d53c:	2300      	movs	r3, #0
 800d53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d542:	e18a      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d544:	2304      	movs	r3, #4
 800d546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d54a:	e186      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d54c:	2308      	movs	r3, #8
 800d54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d552:	e182      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d554:	2310      	movs	r3, #16
 800d556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d55a:	e17e      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d55c:	2320      	movs	r3, #32
 800d55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d562:	e17a      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d564:	2340      	movs	r3, #64	@ 0x40
 800d566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d56a:	e176      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d56c:	2380      	movs	r3, #128	@ 0x80
 800d56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d572:	e172      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	4a5b      	ldr	r2, [pc, #364]	@ (800d6e8 <UART_SetConfig+0x63c>)
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d130      	bne.n	800d5e0 <UART_SetConfig+0x534>
 800d57e:	4b58      	ldr	r3, [pc, #352]	@ (800d6e0 <UART_SetConfig+0x634>)
 800d580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d582:	f003 0307 	and.w	r3, r3, #7
 800d586:	2b05      	cmp	r3, #5
 800d588:	d826      	bhi.n	800d5d8 <UART_SetConfig+0x52c>
 800d58a:	a201      	add	r2, pc, #4	@ (adr r2, 800d590 <UART_SetConfig+0x4e4>)
 800d58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d590:	0800d5a9 	.word	0x0800d5a9
 800d594:	0800d5b1 	.word	0x0800d5b1
 800d598:	0800d5b9 	.word	0x0800d5b9
 800d59c:	0800d5c1 	.word	0x0800d5c1
 800d5a0:	0800d5c9 	.word	0x0800d5c9
 800d5a4:	0800d5d1 	.word	0x0800d5d1
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5ae:	e154      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d5b0:	2304      	movs	r3, #4
 800d5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5b6:	e150      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d5b8:	2308      	movs	r3, #8
 800d5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5be:	e14c      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d5c0:	2310      	movs	r3, #16
 800d5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5c6:	e148      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d5c8:	2320      	movs	r3, #32
 800d5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5ce:	e144      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d5d0:	2340      	movs	r3, #64	@ 0x40
 800d5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5d6:	e140      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d5d8:	2380      	movs	r3, #128	@ 0x80
 800d5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5de:	e13c      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4a41      	ldr	r2, [pc, #260]	@ (800d6ec <UART_SetConfig+0x640>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	f040 8082 	bne.w	800d6f0 <UART_SetConfig+0x644>
 800d5ec:	4b3c      	ldr	r3, [pc, #240]	@ (800d6e0 <UART_SetConfig+0x634>)
 800d5ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d5f4:	2b28      	cmp	r3, #40	@ 0x28
 800d5f6:	d86d      	bhi.n	800d6d4 <UART_SetConfig+0x628>
 800d5f8:	a201      	add	r2, pc, #4	@ (adr r2, 800d600 <UART_SetConfig+0x554>)
 800d5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5fe:	bf00      	nop
 800d600:	0800d6a5 	.word	0x0800d6a5
 800d604:	0800d6d5 	.word	0x0800d6d5
 800d608:	0800d6d5 	.word	0x0800d6d5
 800d60c:	0800d6d5 	.word	0x0800d6d5
 800d610:	0800d6d5 	.word	0x0800d6d5
 800d614:	0800d6d5 	.word	0x0800d6d5
 800d618:	0800d6d5 	.word	0x0800d6d5
 800d61c:	0800d6d5 	.word	0x0800d6d5
 800d620:	0800d6ad 	.word	0x0800d6ad
 800d624:	0800d6d5 	.word	0x0800d6d5
 800d628:	0800d6d5 	.word	0x0800d6d5
 800d62c:	0800d6d5 	.word	0x0800d6d5
 800d630:	0800d6d5 	.word	0x0800d6d5
 800d634:	0800d6d5 	.word	0x0800d6d5
 800d638:	0800d6d5 	.word	0x0800d6d5
 800d63c:	0800d6d5 	.word	0x0800d6d5
 800d640:	0800d6b5 	.word	0x0800d6b5
 800d644:	0800d6d5 	.word	0x0800d6d5
 800d648:	0800d6d5 	.word	0x0800d6d5
 800d64c:	0800d6d5 	.word	0x0800d6d5
 800d650:	0800d6d5 	.word	0x0800d6d5
 800d654:	0800d6d5 	.word	0x0800d6d5
 800d658:	0800d6d5 	.word	0x0800d6d5
 800d65c:	0800d6d5 	.word	0x0800d6d5
 800d660:	0800d6bd 	.word	0x0800d6bd
 800d664:	0800d6d5 	.word	0x0800d6d5
 800d668:	0800d6d5 	.word	0x0800d6d5
 800d66c:	0800d6d5 	.word	0x0800d6d5
 800d670:	0800d6d5 	.word	0x0800d6d5
 800d674:	0800d6d5 	.word	0x0800d6d5
 800d678:	0800d6d5 	.word	0x0800d6d5
 800d67c:	0800d6d5 	.word	0x0800d6d5
 800d680:	0800d6c5 	.word	0x0800d6c5
 800d684:	0800d6d5 	.word	0x0800d6d5
 800d688:	0800d6d5 	.word	0x0800d6d5
 800d68c:	0800d6d5 	.word	0x0800d6d5
 800d690:	0800d6d5 	.word	0x0800d6d5
 800d694:	0800d6d5 	.word	0x0800d6d5
 800d698:	0800d6d5 	.word	0x0800d6d5
 800d69c:	0800d6d5 	.word	0x0800d6d5
 800d6a0:	0800d6cd 	.word	0x0800d6cd
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6aa:	e0d6      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d6ac:	2304      	movs	r3, #4
 800d6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6b2:	e0d2      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d6b4:	2308      	movs	r3, #8
 800d6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ba:	e0ce      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d6bc:	2310      	movs	r3, #16
 800d6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6c2:	e0ca      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d6c4:	2320      	movs	r3, #32
 800d6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ca:	e0c6      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d6cc:	2340      	movs	r3, #64	@ 0x40
 800d6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6d2:	e0c2      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d6d4:	2380      	movs	r3, #128	@ 0x80
 800d6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6da:	e0be      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d6dc:	40011400 	.word	0x40011400
 800d6e0:	58024400 	.word	0x58024400
 800d6e4:	40007800 	.word	0x40007800
 800d6e8:	40007c00 	.word	0x40007c00
 800d6ec:	40011800 	.word	0x40011800
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4aad      	ldr	r2, [pc, #692]	@ (800d9ac <UART_SetConfig+0x900>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d176      	bne.n	800d7e8 <UART_SetConfig+0x73c>
 800d6fa:	4bad      	ldr	r3, [pc, #692]	@ (800d9b0 <UART_SetConfig+0x904>)
 800d6fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d702:	2b28      	cmp	r3, #40	@ 0x28
 800d704:	d86c      	bhi.n	800d7e0 <UART_SetConfig+0x734>
 800d706:	a201      	add	r2, pc, #4	@ (adr r2, 800d70c <UART_SetConfig+0x660>)
 800d708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d70c:	0800d7b1 	.word	0x0800d7b1
 800d710:	0800d7e1 	.word	0x0800d7e1
 800d714:	0800d7e1 	.word	0x0800d7e1
 800d718:	0800d7e1 	.word	0x0800d7e1
 800d71c:	0800d7e1 	.word	0x0800d7e1
 800d720:	0800d7e1 	.word	0x0800d7e1
 800d724:	0800d7e1 	.word	0x0800d7e1
 800d728:	0800d7e1 	.word	0x0800d7e1
 800d72c:	0800d7b9 	.word	0x0800d7b9
 800d730:	0800d7e1 	.word	0x0800d7e1
 800d734:	0800d7e1 	.word	0x0800d7e1
 800d738:	0800d7e1 	.word	0x0800d7e1
 800d73c:	0800d7e1 	.word	0x0800d7e1
 800d740:	0800d7e1 	.word	0x0800d7e1
 800d744:	0800d7e1 	.word	0x0800d7e1
 800d748:	0800d7e1 	.word	0x0800d7e1
 800d74c:	0800d7c1 	.word	0x0800d7c1
 800d750:	0800d7e1 	.word	0x0800d7e1
 800d754:	0800d7e1 	.word	0x0800d7e1
 800d758:	0800d7e1 	.word	0x0800d7e1
 800d75c:	0800d7e1 	.word	0x0800d7e1
 800d760:	0800d7e1 	.word	0x0800d7e1
 800d764:	0800d7e1 	.word	0x0800d7e1
 800d768:	0800d7e1 	.word	0x0800d7e1
 800d76c:	0800d7c9 	.word	0x0800d7c9
 800d770:	0800d7e1 	.word	0x0800d7e1
 800d774:	0800d7e1 	.word	0x0800d7e1
 800d778:	0800d7e1 	.word	0x0800d7e1
 800d77c:	0800d7e1 	.word	0x0800d7e1
 800d780:	0800d7e1 	.word	0x0800d7e1
 800d784:	0800d7e1 	.word	0x0800d7e1
 800d788:	0800d7e1 	.word	0x0800d7e1
 800d78c:	0800d7d1 	.word	0x0800d7d1
 800d790:	0800d7e1 	.word	0x0800d7e1
 800d794:	0800d7e1 	.word	0x0800d7e1
 800d798:	0800d7e1 	.word	0x0800d7e1
 800d79c:	0800d7e1 	.word	0x0800d7e1
 800d7a0:	0800d7e1 	.word	0x0800d7e1
 800d7a4:	0800d7e1 	.word	0x0800d7e1
 800d7a8:	0800d7e1 	.word	0x0800d7e1
 800d7ac:	0800d7d9 	.word	0x0800d7d9
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7b6:	e050      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d7b8:	2304      	movs	r3, #4
 800d7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7be:	e04c      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d7c0:	2308      	movs	r3, #8
 800d7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7c6:	e048      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d7c8:	2310      	movs	r3, #16
 800d7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ce:	e044      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d7d0:	2320      	movs	r3, #32
 800d7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7d6:	e040      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d7d8:	2340      	movs	r3, #64	@ 0x40
 800d7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7de:	e03c      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d7e0:	2380      	movs	r3, #128	@ 0x80
 800d7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7e6:	e038      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a71      	ldr	r2, [pc, #452]	@ (800d9b4 <UART_SetConfig+0x908>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d130      	bne.n	800d854 <UART_SetConfig+0x7a8>
 800d7f2:	4b6f      	ldr	r3, [pc, #444]	@ (800d9b0 <UART_SetConfig+0x904>)
 800d7f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d7f6:	f003 0307 	and.w	r3, r3, #7
 800d7fa:	2b05      	cmp	r3, #5
 800d7fc:	d826      	bhi.n	800d84c <UART_SetConfig+0x7a0>
 800d7fe:	a201      	add	r2, pc, #4	@ (adr r2, 800d804 <UART_SetConfig+0x758>)
 800d800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d804:	0800d81d 	.word	0x0800d81d
 800d808:	0800d825 	.word	0x0800d825
 800d80c:	0800d82d 	.word	0x0800d82d
 800d810:	0800d835 	.word	0x0800d835
 800d814:	0800d83d 	.word	0x0800d83d
 800d818:	0800d845 	.word	0x0800d845
 800d81c:	2302      	movs	r3, #2
 800d81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d822:	e01a      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d824:	2304      	movs	r3, #4
 800d826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d82a:	e016      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d82c:	2308      	movs	r3, #8
 800d82e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d832:	e012      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d834:	2310      	movs	r3, #16
 800d836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d83a:	e00e      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d83c:	2320      	movs	r3, #32
 800d83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d842:	e00a      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d844:	2340      	movs	r3, #64	@ 0x40
 800d846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d84a:	e006      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d84c:	2380      	movs	r3, #128	@ 0x80
 800d84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d852:	e002      	b.n	800d85a <UART_SetConfig+0x7ae>
 800d854:	2380      	movs	r3, #128	@ 0x80
 800d856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	4a55      	ldr	r2, [pc, #340]	@ (800d9b4 <UART_SetConfig+0x908>)
 800d860:	4293      	cmp	r3, r2
 800d862:	f040 80f8 	bne.w	800da56 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d866:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d86a:	2b20      	cmp	r3, #32
 800d86c:	dc46      	bgt.n	800d8fc <UART_SetConfig+0x850>
 800d86e:	2b02      	cmp	r3, #2
 800d870:	db75      	blt.n	800d95e <UART_SetConfig+0x8b2>
 800d872:	3b02      	subs	r3, #2
 800d874:	2b1e      	cmp	r3, #30
 800d876:	d872      	bhi.n	800d95e <UART_SetConfig+0x8b2>
 800d878:	a201      	add	r2, pc, #4	@ (adr r2, 800d880 <UART_SetConfig+0x7d4>)
 800d87a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d87e:	bf00      	nop
 800d880:	0800d903 	.word	0x0800d903
 800d884:	0800d95f 	.word	0x0800d95f
 800d888:	0800d90b 	.word	0x0800d90b
 800d88c:	0800d95f 	.word	0x0800d95f
 800d890:	0800d95f 	.word	0x0800d95f
 800d894:	0800d95f 	.word	0x0800d95f
 800d898:	0800d91b 	.word	0x0800d91b
 800d89c:	0800d95f 	.word	0x0800d95f
 800d8a0:	0800d95f 	.word	0x0800d95f
 800d8a4:	0800d95f 	.word	0x0800d95f
 800d8a8:	0800d95f 	.word	0x0800d95f
 800d8ac:	0800d95f 	.word	0x0800d95f
 800d8b0:	0800d95f 	.word	0x0800d95f
 800d8b4:	0800d95f 	.word	0x0800d95f
 800d8b8:	0800d92b 	.word	0x0800d92b
 800d8bc:	0800d95f 	.word	0x0800d95f
 800d8c0:	0800d95f 	.word	0x0800d95f
 800d8c4:	0800d95f 	.word	0x0800d95f
 800d8c8:	0800d95f 	.word	0x0800d95f
 800d8cc:	0800d95f 	.word	0x0800d95f
 800d8d0:	0800d95f 	.word	0x0800d95f
 800d8d4:	0800d95f 	.word	0x0800d95f
 800d8d8:	0800d95f 	.word	0x0800d95f
 800d8dc:	0800d95f 	.word	0x0800d95f
 800d8e0:	0800d95f 	.word	0x0800d95f
 800d8e4:	0800d95f 	.word	0x0800d95f
 800d8e8:	0800d95f 	.word	0x0800d95f
 800d8ec:	0800d95f 	.word	0x0800d95f
 800d8f0:	0800d95f 	.word	0x0800d95f
 800d8f4:	0800d95f 	.word	0x0800d95f
 800d8f8:	0800d951 	.word	0x0800d951
 800d8fc:	2b40      	cmp	r3, #64	@ 0x40
 800d8fe:	d02a      	beq.n	800d956 <UART_SetConfig+0x8aa>
 800d900:	e02d      	b.n	800d95e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d902:	f7fc f9ad 	bl	8009c60 <HAL_RCCEx_GetD3PCLK1Freq>
 800d906:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d908:	e02f      	b.n	800d96a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d90a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d90e:	4618      	mov	r0, r3
 800d910:	f7fc f9bc 	bl	8009c8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d918:	e027      	b.n	800d96a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d91a:	f107 0318 	add.w	r3, r7, #24
 800d91e:	4618      	mov	r0, r3
 800d920:	f7fc fb08 	bl	8009f34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d924:	69fb      	ldr	r3, [r7, #28]
 800d926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d928:	e01f      	b.n	800d96a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d92a:	4b21      	ldr	r3, [pc, #132]	@ (800d9b0 <UART_SetConfig+0x904>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f003 0320 	and.w	r3, r3, #32
 800d932:	2b00      	cmp	r3, #0
 800d934:	d009      	beq.n	800d94a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d936:	4b1e      	ldr	r3, [pc, #120]	@ (800d9b0 <UART_SetConfig+0x904>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	08db      	lsrs	r3, r3, #3
 800d93c:	f003 0303 	and.w	r3, r3, #3
 800d940:	4a1d      	ldr	r2, [pc, #116]	@ (800d9b8 <UART_SetConfig+0x90c>)
 800d942:	fa22 f303 	lsr.w	r3, r2, r3
 800d946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d948:	e00f      	b.n	800d96a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d94a:	4b1b      	ldr	r3, [pc, #108]	@ (800d9b8 <UART_SetConfig+0x90c>)
 800d94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d94e:	e00c      	b.n	800d96a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d950:	4b1a      	ldr	r3, [pc, #104]	@ (800d9bc <UART_SetConfig+0x910>)
 800d952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d954:	e009      	b.n	800d96a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d95c:	e005      	b.n	800d96a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d95e:	2300      	movs	r3, #0
 800d960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d962:	2301      	movs	r3, #1
 800d964:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d968:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d96a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f000 81ee 	beq.w	800dd4e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d976:	4a12      	ldr	r2, [pc, #72]	@ (800d9c0 <UART_SetConfig+0x914>)
 800d978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d97c:	461a      	mov	r2, r3
 800d97e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d980:	fbb3 f3f2 	udiv	r3, r3, r2
 800d984:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	685a      	ldr	r2, [r3, #4]
 800d98a:	4613      	mov	r3, r2
 800d98c:	005b      	lsls	r3, r3, #1
 800d98e:	4413      	add	r3, r2
 800d990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d992:	429a      	cmp	r2, r3
 800d994:	d305      	bcc.n	800d9a2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d99c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d910      	bls.n	800d9c4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d9a8:	e1d1      	b.n	800dd4e <UART_SetConfig+0xca2>
 800d9aa:	bf00      	nop
 800d9ac:	40011c00 	.word	0x40011c00
 800d9b0:	58024400 	.word	0x58024400
 800d9b4:	58000c00 	.word	0x58000c00
 800d9b8:	03d09000 	.word	0x03d09000
 800d9bc:	003d0900 	.word	0x003d0900
 800d9c0:	08010b20 	.word	0x08010b20
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	60bb      	str	r3, [r7, #8]
 800d9ca:	60fa      	str	r2, [r7, #12]
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9d0:	4ac0      	ldr	r2, [pc, #768]	@ (800dcd4 <UART_SetConfig+0xc28>)
 800d9d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	2200      	movs	r2, #0
 800d9da:	603b      	str	r3, [r7, #0]
 800d9dc:	607a      	str	r2, [r7, #4]
 800d9de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d9e6:	f7f2 fc93 	bl	8000310 <__aeabi_uldivmod>
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	4610      	mov	r0, r2
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	f04f 0200 	mov.w	r2, #0
 800d9f6:	f04f 0300 	mov.w	r3, #0
 800d9fa:	020b      	lsls	r3, r1, #8
 800d9fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800da00:	0202      	lsls	r2, r0, #8
 800da02:	6979      	ldr	r1, [r7, #20]
 800da04:	6849      	ldr	r1, [r1, #4]
 800da06:	0849      	lsrs	r1, r1, #1
 800da08:	2000      	movs	r0, #0
 800da0a:	460c      	mov	r4, r1
 800da0c:	4605      	mov	r5, r0
 800da0e:	eb12 0804 	adds.w	r8, r2, r4
 800da12:	eb43 0905 	adc.w	r9, r3, r5
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	2200      	movs	r2, #0
 800da1c:	469a      	mov	sl, r3
 800da1e:	4693      	mov	fp, r2
 800da20:	4652      	mov	r2, sl
 800da22:	465b      	mov	r3, fp
 800da24:	4640      	mov	r0, r8
 800da26:	4649      	mov	r1, r9
 800da28:	f7f2 fc72 	bl	8000310 <__aeabi_uldivmod>
 800da2c:	4602      	mov	r2, r0
 800da2e:	460b      	mov	r3, r1
 800da30:	4613      	mov	r3, r2
 800da32:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800da34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800da3a:	d308      	bcc.n	800da4e <UART_SetConfig+0x9a2>
 800da3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da42:	d204      	bcs.n	800da4e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da4a:	60da      	str	r2, [r3, #12]
 800da4c:	e17f      	b.n	800dd4e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800da4e:	2301      	movs	r3, #1
 800da50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800da54:	e17b      	b.n	800dd4e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	69db      	ldr	r3, [r3, #28]
 800da5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800da5e:	f040 80bd 	bne.w	800dbdc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800da62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800da66:	2b20      	cmp	r3, #32
 800da68:	dc48      	bgt.n	800dafc <UART_SetConfig+0xa50>
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	db7b      	blt.n	800db66 <UART_SetConfig+0xaba>
 800da6e:	2b20      	cmp	r3, #32
 800da70:	d879      	bhi.n	800db66 <UART_SetConfig+0xaba>
 800da72:	a201      	add	r2, pc, #4	@ (adr r2, 800da78 <UART_SetConfig+0x9cc>)
 800da74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da78:	0800db03 	.word	0x0800db03
 800da7c:	0800db0b 	.word	0x0800db0b
 800da80:	0800db67 	.word	0x0800db67
 800da84:	0800db67 	.word	0x0800db67
 800da88:	0800db13 	.word	0x0800db13
 800da8c:	0800db67 	.word	0x0800db67
 800da90:	0800db67 	.word	0x0800db67
 800da94:	0800db67 	.word	0x0800db67
 800da98:	0800db23 	.word	0x0800db23
 800da9c:	0800db67 	.word	0x0800db67
 800daa0:	0800db67 	.word	0x0800db67
 800daa4:	0800db67 	.word	0x0800db67
 800daa8:	0800db67 	.word	0x0800db67
 800daac:	0800db67 	.word	0x0800db67
 800dab0:	0800db67 	.word	0x0800db67
 800dab4:	0800db67 	.word	0x0800db67
 800dab8:	0800db33 	.word	0x0800db33
 800dabc:	0800db67 	.word	0x0800db67
 800dac0:	0800db67 	.word	0x0800db67
 800dac4:	0800db67 	.word	0x0800db67
 800dac8:	0800db67 	.word	0x0800db67
 800dacc:	0800db67 	.word	0x0800db67
 800dad0:	0800db67 	.word	0x0800db67
 800dad4:	0800db67 	.word	0x0800db67
 800dad8:	0800db67 	.word	0x0800db67
 800dadc:	0800db67 	.word	0x0800db67
 800dae0:	0800db67 	.word	0x0800db67
 800dae4:	0800db67 	.word	0x0800db67
 800dae8:	0800db67 	.word	0x0800db67
 800daec:	0800db67 	.word	0x0800db67
 800daf0:	0800db67 	.word	0x0800db67
 800daf4:	0800db67 	.word	0x0800db67
 800daf8:	0800db59 	.word	0x0800db59
 800dafc:	2b40      	cmp	r3, #64	@ 0x40
 800dafe:	d02e      	beq.n	800db5e <UART_SetConfig+0xab2>
 800db00:	e031      	b.n	800db66 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db02:	f7fa f9cd 	bl	8007ea0 <HAL_RCC_GetPCLK1Freq>
 800db06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800db08:	e033      	b.n	800db72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db0a:	f7fa f9df 	bl	8007ecc <HAL_RCC_GetPCLK2Freq>
 800db0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800db10:	e02f      	b.n	800db72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800db16:	4618      	mov	r0, r3
 800db18:	f7fc f8b8 	bl	8009c8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db20:	e027      	b.n	800db72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db22:	f107 0318 	add.w	r3, r7, #24
 800db26:	4618      	mov	r0, r3
 800db28:	f7fc fa04 	bl	8009f34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db30:	e01f      	b.n	800db72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db32:	4b69      	ldr	r3, [pc, #420]	@ (800dcd8 <UART_SetConfig+0xc2c>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f003 0320 	and.w	r3, r3, #32
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d009      	beq.n	800db52 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db3e:	4b66      	ldr	r3, [pc, #408]	@ (800dcd8 <UART_SetConfig+0xc2c>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	08db      	lsrs	r3, r3, #3
 800db44:	f003 0303 	and.w	r3, r3, #3
 800db48:	4a64      	ldr	r2, [pc, #400]	@ (800dcdc <UART_SetConfig+0xc30>)
 800db4a:	fa22 f303 	lsr.w	r3, r2, r3
 800db4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db50:	e00f      	b.n	800db72 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800db52:	4b62      	ldr	r3, [pc, #392]	@ (800dcdc <UART_SetConfig+0xc30>)
 800db54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db56:	e00c      	b.n	800db72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db58:	4b61      	ldr	r3, [pc, #388]	@ (800dce0 <UART_SetConfig+0xc34>)
 800db5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db5c:	e009      	b.n	800db72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800db62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db64:	e005      	b.n	800db72 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800db66:	2300      	movs	r3, #0
 800db68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800db6a:	2301      	movs	r3, #1
 800db6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800db70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800db72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db74:	2b00      	cmp	r3, #0
 800db76:	f000 80ea 	beq.w	800dd4e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db7e:	4a55      	ldr	r2, [pc, #340]	@ (800dcd4 <UART_SetConfig+0xc28>)
 800db80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db84:	461a      	mov	r2, r3
 800db86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db88:	fbb3 f3f2 	udiv	r3, r3, r2
 800db8c:	005a      	lsls	r2, r3, #1
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	085b      	lsrs	r3, r3, #1
 800db94:	441a      	add	r2, r3
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	685b      	ldr	r3, [r3, #4]
 800db9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800db9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dba2:	2b0f      	cmp	r3, #15
 800dba4:	d916      	bls.n	800dbd4 <UART_SetConfig+0xb28>
 800dba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbac:	d212      	bcs.n	800dbd4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dbae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	f023 030f 	bic.w	r3, r3, #15
 800dbb6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dbb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbba:	085b      	lsrs	r3, r3, #1
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	f003 0307 	and.w	r3, r3, #7
 800dbc2:	b29a      	uxth	r2, r3
 800dbc4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800dbd0:	60da      	str	r2, [r3, #12]
 800dbd2:	e0bc      	b.n	800dd4e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dbda:	e0b8      	b.n	800dd4e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dbdc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dbe0:	2b20      	cmp	r3, #32
 800dbe2:	dc4b      	bgt.n	800dc7c <UART_SetConfig+0xbd0>
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	f2c0 8087 	blt.w	800dcf8 <UART_SetConfig+0xc4c>
 800dbea:	2b20      	cmp	r3, #32
 800dbec:	f200 8084 	bhi.w	800dcf8 <UART_SetConfig+0xc4c>
 800dbf0:	a201      	add	r2, pc, #4	@ (adr r2, 800dbf8 <UART_SetConfig+0xb4c>)
 800dbf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbf6:	bf00      	nop
 800dbf8:	0800dc83 	.word	0x0800dc83
 800dbfc:	0800dc8b 	.word	0x0800dc8b
 800dc00:	0800dcf9 	.word	0x0800dcf9
 800dc04:	0800dcf9 	.word	0x0800dcf9
 800dc08:	0800dc93 	.word	0x0800dc93
 800dc0c:	0800dcf9 	.word	0x0800dcf9
 800dc10:	0800dcf9 	.word	0x0800dcf9
 800dc14:	0800dcf9 	.word	0x0800dcf9
 800dc18:	0800dca3 	.word	0x0800dca3
 800dc1c:	0800dcf9 	.word	0x0800dcf9
 800dc20:	0800dcf9 	.word	0x0800dcf9
 800dc24:	0800dcf9 	.word	0x0800dcf9
 800dc28:	0800dcf9 	.word	0x0800dcf9
 800dc2c:	0800dcf9 	.word	0x0800dcf9
 800dc30:	0800dcf9 	.word	0x0800dcf9
 800dc34:	0800dcf9 	.word	0x0800dcf9
 800dc38:	0800dcb3 	.word	0x0800dcb3
 800dc3c:	0800dcf9 	.word	0x0800dcf9
 800dc40:	0800dcf9 	.word	0x0800dcf9
 800dc44:	0800dcf9 	.word	0x0800dcf9
 800dc48:	0800dcf9 	.word	0x0800dcf9
 800dc4c:	0800dcf9 	.word	0x0800dcf9
 800dc50:	0800dcf9 	.word	0x0800dcf9
 800dc54:	0800dcf9 	.word	0x0800dcf9
 800dc58:	0800dcf9 	.word	0x0800dcf9
 800dc5c:	0800dcf9 	.word	0x0800dcf9
 800dc60:	0800dcf9 	.word	0x0800dcf9
 800dc64:	0800dcf9 	.word	0x0800dcf9
 800dc68:	0800dcf9 	.word	0x0800dcf9
 800dc6c:	0800dcf9 	.word	0x0800dcf9
 800dc70:	0800dcf9 	.word	0x0800dcf9
 800dc74:	0800dcf9 	.word	0x0800dcf9
 800dc78:	0800dceb 	.word	0x0800dceb
 800dc7c:	2b40      	cmp	r3, #64	@ 0x40
 800dc7e:	d037      	beq.n	800dcf0 <UART_SetConfig+0xc44>
 800dc80:	e03a      	b.n	800dcf8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc82:	f7fa f90d 	bl	8007ea0 <HAL_RCC_GetPCLK1Freq>
 800dc86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dc88:	e03c      	b.n	800dd04 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dc8a:	f7fa f91f 	bl	8007ecc <HAL_RCC_GetPCLK2Freq>
 800dc8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dc90:	e038      	b.n	800dd04 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7fb fff8 	bl	8009c8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dc9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dca0:	e030      	b.n	800dd04 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dca2:	f107 0318 	add.w	r3, r7, #24
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7fc f944 	bl	8009f34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcb0:	e028      	b.n	800dd04 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dcb2:	4b09      	ldr	r3, [pc, #36]	@ (800dcd8 <UART_SetConfig+0xc2c>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f003 0320 	and.w	r3, r3, #32
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d012      	beq.n	800dce4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dcbe:	4b06      	ldr	r3, [pc, #24]	@ (800dcd8 <UART_SetConfig+0xc2c>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	08db      	lsrs	r3, r3, #3
 800dcc4:	f003 0303 	and.w	r3, r3, #3
 800dcc8:	4a04      	ldr	r2, [pc, #16]	@ (800dcdc <UART_SetConfig+0xc30>)
 800dcca:	fa22 f303 	lsr.w	r3, r2, r3
 800dcce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dcd0:	e018      	b.n	800dd04 <UART_SetConfig+0xc58>
 800dcd2:	bf00      	nop
 800dcd4:	08010b20 	.word	0x08010b20
 800dcd8:	58024400 	.word	0x58024400
 800dcdc:	03d09000 	.word	0x03d09000
 800dce0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800dce4:	4b24      	ldr	r3, [pc, #144]	@ (800dd78 <UART_SetConfig+0xccc>)
 800dce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dce8:	e00c      	b.n	800dd04 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dcea:	4b24      	ldr	r3, [pc, #144]	@ (800dd7c <UART_SetConfig+0xcd0>)
 800dcec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcee:	e009      	b.n	800dd04 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dcf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dcf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcf6:	e005      	b.n	800dd04 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dd02:	bf00      	nop
    }

    if (pclk != 0U)
 800dd04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d021      	beq.n	800dd4e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd0e:	4a1c      	ldr	r2, [pc, #112]	@ (800dd80 <UART_SetConfig+0xcd4>)
 800dd10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd14:	461a      	mov	r2, r3
 800dd16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd18:	fbb3 f2f2 	udiv	r2, r3, r2
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	685b      	ldr	r3, [r3, #4]
 800dd20:	085b      	lsrs	r3, r3, #1
 800dd22:	441a      	add	r2, r3
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd30:	2b0f      	cmp	r3, #15
 800dd32:	d909      	bls.n	800dd48 <UART_SetConfig+0xc9c>
 800dd34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd3a:	d205      	bcs.n	800dd48 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dd3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd3e:	b29a      	uxth	r2, r3
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	60da      	str	r2, [r3, #12]
 800dd46:	e002      	b.n	800dd4e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800dd48:	2301      	movs	r3, #1
 800dd4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	2201      	movs	r2, #1
 800dd52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	2201      	movs	r2, #1
 800dd5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	2200      	movs	r2, #0
 800dd62:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	2200      	movs	r2, #0
 800dd68:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800dd6a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3748      	adds	r7, #72	@ 0x48
 800dd72:	46bd      	mov	sp, r7
 800dd74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dd78:	03d09000 	.word	0x03d09000
 800dd7c:	003d0900 	.word	0x003d0900
 800dd80:	08010b20 	.word	0x08010b20

0800dd84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b083      	sub	sp, #12
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd90:	f003 0308 	and.w	r3, r3, #8
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d00a      	beq.n	800ddae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	430a      	orrs	r2, r1
 800ddac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddb2:	f003 0301 	and.w	r3, r3, #1
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d00a      	beq.n	800ddd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	685b      	ldr	r3, [r3, #4]
 800ddc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	430a      	orrs	r2, r1
 800ddce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddd4:	f003 0302 	and.w	r3, r3, #2
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d00a      	beq.n	800ddf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	430a      	orrs	r2, r1
 800ddf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddf6:	f003 0304 	and.w	r3, r3, #4
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d00a      	beq.n	800de14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	430a      	orrs	r2, r1
 800de12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de18:	f003 0310 	and.w	r3, r3, #16
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d00a      	beq.n	800de36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	689b      	ldr	r3, [r3, #8]
 800de26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	430a      	orrs	r2, r1
 800de34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de3a:	f003 0320 	and.w	r3, r3, #32
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d00a      	beq.n	800de58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	430a      	orrs	r2, r1
 800de56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de60:	2b00      	cmp	r3, #0
 800de62:	d01a      	beq.n	800de9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	430a      	orrs	r2, r1
 800de78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800de82:	d10a      	bne.n	800de9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	685b      	ldr	r3, [r3, #4]
 800de8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	430a      	orrs	r2, r1
 800de98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d00a      	beq.n	800debc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	430a      	orrs	r2, r1
 800deba:	605a      	str	r2, [r3, #4]
  }
}
 800debc:	bf00      	nop
 800debe:	370c      	adds	r7, #12
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b098      	sub	sp, #96	@ 0x60
 800decc:	af02      	add	r7, sp, #8
 800dece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2200      	movs	r2, #0
 800ded4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ded8:	f7f3 fdca 	bl	8001a70 <HAL_GetTick>
 800dedc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f003 0308 	and.w	r3, r3, #8
 800dee8:	2b08      	cmp	r3, #8
 800deea:	d12f      	bne.n	800df4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800deec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800def0:	9300      	str	r3, [sp, #0]
 800def2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800def4:	2200      	movs	r2, #0
 800def6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f000 f88e 	bl	800e01c <UART_WaitOnFlagUntilTimeout>
 800df00:	4603      	mov	r3, r0
 800df02:	2b00      	cmp	r3, #0
 800df04:	d022      	beq.n	800df4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df0e:	e853 3f00 	ldrex	r3, [r3]
 800df12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800df14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df1a:	653b      	str	r3, [r7, #80]	@ 0x50
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	461a      	mov	r2, r3
 800df22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df24:	647b      	str	r3, [r7, #68]	@ 0x44
 800df26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800df2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800df2c:	e841 2300 	strex	r3, r2, [r1]
 800df30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800df32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df34:	2b00      	cmp	r3, #0
 800df36:	d1e6      	bne.n	800df06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2220      	movs	r2, #32
 800df3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2200      	movs	r2, #0
 800df44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800df48:	2303      	movs	r3, #3
 800df4a:	e063      	b.n	800e014 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f003 0304 	and.w	r3, r3, #4
 800df56:	2b04      	cmp	r3, #4
 800df58:	d149      	bne.n	800dfee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800df5a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800df5e:	9300      	str	r3, [sp, #0]
 800df60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df62:	2200      	movs	r2, #0
 800df64:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f000 f857 	bl	800e01c <UART_WaitOnFlagUntilTimeout>
 800df6e:	4603      	mov	r3, r0
 800df70:	2b00      	cmp	r3, #0
 800df72:	d03c      	beq.n	800dfee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df7c:	e853 3f00 	ldrex	r3, [r3]
 800df80:	623b      	str	r3, [r7, #32]
   return(result);
 800df82:	6a3b      	ldr	r3, [r7, #32]
 800df84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800df88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	461a      	mov	r2, r3
 800df90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df92:	633b      	str	r3, [r7, #48]	@ 0x30
 800df94:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800df98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df9a:	e841 2300 	strex	r3, r2, [r1]
 800df9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dfa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d1e6      	bne.n	800df74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	3308      	adds	r3, #8
 800dfac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	e853 3f00 	ldrex	r3, [r3]
 800dfb4:	60fb      	str	r3, [r7, #12]
   return(result);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f023 0301 	bic.w	r3, r3, #1
 800dfbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	3308      	adds	r3, #8
 800dfc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dfc6:	61fa      	str	r2, [r7, #28]
 800dfc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfca:	69b9      	ldr	r1, [r7, #24]
 800dfcc:	69fa      	ldr	r2, [r7, #28]
 800dfce:	e841 2300 	strex	r3, r2, [r1]
 800dfd2:	617b      	str	r3, [r7, #20]
   return(result);
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d1e5      	bne.n	800dfa6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2220      	movs	r2, #32
 800dfde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dfea:	2303      	movs	r3, #3
 800dfec:	e012      	b.n	800e014 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2220      	movs	r2, #32
 800dff2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2220      	movs	r2, #32
 800dffa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2200      	movs	r2, #0
 800e002:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2200      	movs	r2, #0
 800e008:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2200      	movs	r2, #0
 800e00e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e012:	2300      	movs	r3, #0
}
 800e014:	4618      	mov	r0, r3
 800e016:	3758      	adds	r7, #88	@ 0x58
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	60b9      	str	r1, [r7, #8]
 800e026:	603b      	str	r3, [r7, #0]
 800e028:	4613      	mov	r3, r2
 800e02a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e02c:	e04f      	b.n	800e0ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e02e:	69bb      	ldr	r3, [r7, #24]
 800e030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e034:	d04b      	beq.n	800e0ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e036:	f7f3 fd1b 	bl	8001a70 <HAL_GetTick>
 800e03a:	4602      	mov	r2, r0
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	1ad3      	subs	r3, r2, r3
 800e040:	69ba      	ldr	r2, [r7, #24]
 800e042:	429a      	cmp	r2, r3
 800e044:	d302      	bcc.n	800e04c <UART_WaitOnFlagUntilTimeout+0x30>
 800e046:	69bb      	ldr	r3, [r7, #24]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d101      	bne.n	800e050 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e04c:	2303      	movs	r3, #3
 800e04e:	e04e      	b.n	800e0ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f003 0304 	and.w	r3, r3, #4
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d037      	beq.n	800e0ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	2b80      	cmp	r3, #128	@ 0x80
 800e062:	d034      	beq.n	800e0ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	2b40      	cmp	r3, #64	@ 0x40
 800e068:	d031      	beq.n	800e0ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	69db      	ldr	r3, [r3, #28]
 800e070:	f003 0308 	and.w	r3, r3, #8
 800e074:	2b08      	cmp	r3, #8
 800e076:	d110      	bne.n	800e09a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	2208      	movs	r2, #8
 800e07e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e080:	68f8      	ldr	r0, [r7, #12]
 800e082:	f000 f921 	bl	800e2c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2208      	movs	r2, #8
 800e08a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2200      	movs	r2, #0
 800e092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e096:	2301      	movs	r3, #1
 800e098:	e029      	b.n	800e0ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	69db      	ldr	r3, [r3, #28]
 800e0a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e0a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e0a8:	d111      	bne.n	800e0ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e0b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	f000 f907 	bl	800e2c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	2220      	movs	r2, #32
 800e0be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e0ca:	2303      	movs	r3, #3
 800e0cc:	e00f      	b.n	800e0ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	69da      	ldr	r2, [r3, #28]
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	4013      	ands	r3, r2
 800e0d8:	68ba      	ldr	r2, [r7, #8]
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	bf0c      	ite	eq
 800e0de:	2301      	moveq	r3, #1
 800e0e0:	2300      	movne	r3, #0
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	79fb      	ldrb	r3, [r7, #7]
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d0a0      	beq.n	800e02e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e0ec:	2300      	movs	r3, #0
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3710      	adds	r7, #16
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
	...

0800e0f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b096      	sub	sp, #88	@ 0x58
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	4613      	mov	r3, r2
 800e104:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	68ba      	ldr	r2, [r7, #8]
 800e10a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	88fa      	ldrh	r2, [r7, #6]
 800e110:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2200      	movs	r2, #0
 800e118:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	2222      	movs	r2, #34	@ 0x22
 800e120:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d02d      	beq.n	800e18a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e134:	4a40      	ldr	r2, [pc, #256]	@ (800e238 <UART_Start_Receive_DMA+0x140>)
 800e136:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e13e:	4a3f      	ldr	r2, [pc, #252]	@ (800e23c <UART_Start_Receive_DMA+0x144>)
 800e140:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e148:	4a3d      	ldr	r2, [pc, #244]	@ (800e240 <UART_Start_Receive_DMA+0x148>)
 800e14a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e152:	2200      	movs	r2, #0
 800e154:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	3324      	adds	r3, #36	@ 0x24
 800e162:	4619      	mov	r1, r3
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e168:	461a      	mov	r2, r3
 800e16a:	88fb      	ldrh	r3, [r7, #6]
 800e16c:	f7f6 fa5e 	bl	800462c <HAL_DMA_Start_IT>
 800e170:	4603      	mov	r3, r0
 800e172:	2b00      	cmp	r3, #0
 800e174:	d009      	beq.n	800e18a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2210      	movs	r2, #16
 800e17a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2220      	movs	r2, #32
 800e182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800e186:	2301      	movs	r3, #1
 800e188:	e051      	b.n	800e22e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	691b      	ldr	r3, [r3, #16]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d018      	beq.n	800e1c4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e19a:	e853 3f00 	ldrex	r3, [r3]
 800e19e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e1a6:	657b      	str	r3, [r7, #84]	@ 0x54
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e1b2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e1b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1b8:	e841 2300 	strex	r3, r2, [r1]
 800e1bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e1be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d1e6      	bne.n	800e192 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	3308      	adds	r3, #8
 800e1ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ce:	e853 3f00 	ldrex	r3, [r3]
 800e1d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d6:	f043 0301 	orr.w	r3, r3, #1
 800e1da:	653b      	str	r3, [r7, #80]	@ 0x50
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	3308      	adds	r3, #8
 800e1e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e1e4:	637a      	str	r2, [r7, #52]	@ 0x34
 800e1e6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e1ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e1ec:	e841 2300 	strex	r3, r2, [r1]
 800e1f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e1f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d1e5      	bne.n	800e1c4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	3308      	adds	r3, #8
 800e1fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	e853 3f00 	ldrex	r3, [r3]
 800e206:	613b      	str	r3, [r7, #16]
   return(result);
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e20e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	3308      	adds	r3, #8
 800e216:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e218:	623a      	str	r2, [r7, #32]
 800e21a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e21c:	69f9      	ldr	r1, [r7, #28]
 800e21e:	6a3a      	ldr	r2, [r7, #32]
 800e220:	e841 2300 	strex	r3, r2, [r1]
 800e224:	61bb      	str	r3, [r7, #24]
   return(result);
 800e226:	69bb      	ldr	r3, [r7, #24]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d1e5      	bne.n	800e1f8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e22c:	2300      	movs	r3, #0
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3758      	adds	r7, #88	@ 0x58
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	0800e395 	.word	0x0800e395
 800e23c:	0800e4bd 	.word	0x0800e4bd
 800e240:	0800e4fb 	.word	0x0800e4fb

0800e244 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e244:	b480      	push	{r7}
 800e246:	b08f      	sub	sp, #60	@ 0x3c
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e252:	6a3b      	ldr	r3, [r7, #32]
 800e254:	e853 3f00 	ldrex	r3, [r3]
 800e258:	61fb      	str	r3, [r7, #28]
   return(result);
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e260:	637b      	str	r3, [r7, #52]	@ 0x34
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	461a      	mov	r2, r3
 800e268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e26a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e26c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e26e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e270:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e272:	e841 2300 	strex	r3, r2, [r1]
 800e276:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d1e6      	bne.n	800e24c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	3308      	adds	r3, #8
 800e284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	e853 3f00 	ldrex	r3, [r3]
 800e28c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e294:	633b      	str	r3, [r7, #48]	@ 0x30
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	3308      	adds	r3, #8
 800e29c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e29e:	61ba      	str	r2, [r7, #24]
 800e2a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2a2:	6979      	ldr	r1, [r7, #20]
 800e2a4:	69ba      	ldr	r2, [r7, #24]
 800e2a6:	e841 2300 	strex	r3, r2, [r1]
 800e2aa:	613b      	str	r3, [r7, #16]
   return(result);
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d1e5      	bne.n	800e27e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2220      	movs	r2, #32
 800e2b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800e2ba:	bf00      	nop
 800e2bc:	373c      	adds	r7, #60	@ 0x3c
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr
	...

0800e2c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b095      	sub	sp, #84	@ 0x54
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2d8:	e853 3f00 	ldrex	r3, [r3]
 800e2dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e2e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800e2f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e2f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e2f6:	e841 2300 	strex	r3, r2, [r1]
 800e2fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d1e6      	bne.n	800e2d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	3308      	adds	r3, #8
 800e308:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e30a:	6a3b      	ldr	r3, [r7, #32]
 800e30c:	e853 3f00 	ldrex	r3, [r3]
 800e310:	61fb      	str	r3, [r7, #28]
   return(result);
 800e312:	69fa      	ldr	r2, [r7, #28]
 800e314:	4b1e      	ldr	r3, [pc, #120]	@ (800e390 <UART_EndRxTransfer+0xc8>)
 800e316:	4013      	ands	r3, r2
 800e318:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	3308      	adds	r3, #8
 800e320:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e322:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e324:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e326:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e328:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e32a:	e841 2300 	strex	r3, r2, [r1]
 800e32e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e332:	2b00      	cmp	r3, #0
 800e334:	d1e5      	bne.n	800e302 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d118      	bne.n	800e370 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	e853 3f00 	ldrex	r3, [r3]
 800e34a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	f023 0310 	bic.w	r3, r3, #16
 800e352:	647b      	str	r3, [r7, #68]	@ 0x44
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	461a      	mov	r2, r3
 800e35a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e35c:	61bb      	str	r3, [r7, #24]
 800e35e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e360:	6979      	ldr	r1, [r7, #20]
 800e362:	69ba      	ldr	r2, [r7, #24]
 800e364:	e841 2300 	strex	r3, r2, [r1]
 800e368:	613b      	str	r3, [r7, #16]
   return(result);
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d1e6      	bne.n	800e33e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2220      	movs	r2, #32
 800e374:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2200      	movs	r2, #0
 800e37c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2200      	movs	r2, #0
 800e382:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e384:	bf00      	nop
 800e386:	3754      	adds	r7, #84	@ 0x54
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr
 800e390:	effffffe 	.word	0xeffffffe

0800e394 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b09c      	sub	sp, #112	@ 0x70
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3a0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	69db      	ldr	r3, [r3, #28]
 800e3a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e3aa:	d071      	beq.n	800e490 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e3ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3bc:	e853 3f00 	ldrex	r3, [r3]
 800e3c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e3c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e3c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e3ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e3d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e3d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e3d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e3da:	e841 2300 	strex	r3, r2, [r1]
 800e3de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e3e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d1e6      	bne.n	800e3b4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	3308      	adds	r3, #8
 800e3ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3f0:	e853 3f00 	ldrex	r3, [r3]
 800e3f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e3f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3f8:	f023 0301 	bic.w	r3, r3, #1
 800e3fc:	667b      	str	r3, [r7, #100]	@ 0x64
 800e3fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	3308      	adds	r3, #8
 800e404:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e406:	647a      	str	r2, [r7, #68]	@ 0x44
 800e408:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e40a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e40c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e40e:	e841 2300 	strex	r3, r2, [r1]
 800e412:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e416:	2b00      	cmp	r3, #0
 800e418:	d1e5      	bne.n	800e3e6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e41a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	3308      	adds	r3, #8
 800e420:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e424:	e853 3f00 	ldrex	r3, [r3]
 800e428:	623b      	str	r3, [r7, #32]
   return(result);
 800e42a:	6a3b      	ldr	r3, [r7, #32]
 800e42c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e430:	663b      	str	r3, [r7, #96]	@ 0x60
 800e432:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	3308      	adds	r3, #8
 800e438:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e43a:	633a      	str	r2, [r7, #48]	@ 0x30
 800e43c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e442:	e841 2300 	strex	r3, r2, [r1]
 800e446:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d1e5      	bne.n	800e41a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e44e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e450:	2220      	movs	r2, #32
 800e452:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e456:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e458:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	d118      	bne.n	800e490 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e45e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	e853 3f00 	ldrex	r3, [r3]
 800e46a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f023 0310 	bic.w	r3, r3, #16
 800e472:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	461a      	mov	r2, r3
 800e47a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e47c:	61fb      	str	r3, [r7, #28]
 800e47e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e480:	69b9      	ldr	r1, [r7, #24]
 800e482:	69fa      	ldr	r2, [r7, #28]
 800e484:	e841 2300 	strex	r3, r2, [r1]
 800e488:	617b      	str	r3, [r7, #20]
   return(result);
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d1e6      	bne.n	800e45e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e492:	2200      	movs	r2, #0
 800e494:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e496:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e49a:	2b01      	cmp	r3, #1
 800e49c:	d107      	bne.n	800e4ae <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e49e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e4a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e4a8:	f002 f92a 	bl	8010700 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e4ac:	e002      	b.n	800e4b4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800e4ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e4b0:	f7fe fdde 	bl	800d070 <HAL_UART_RxCpltCallback>
}
 800e4b4:	bf00      	nop
 800e4b6:	3770      	adds	r7, #112	@ 0x70
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4c8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d109      	bne.n	800e4ec <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e4de:	085b      	lsrs	r3, r3, #1
 800e4e0:	b29b      	uxth	r3, r3
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	68f8      	ldr	r0, [r7, #12]
 800e4e6:	f002 f90b 	bl	8010700 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e4ea:	e002      	b.n	800e4f2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800e4ec:	68f8      	ldr	r0, [r7, #12]
 800e4ee:	f7fe fdc9 	bl	800d084 <HAL_UART_RxHalfCpltCallback>
}
 800e4f2:	bf00      	nop
 800e4f4:	3710      	adds	r7, #16
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}

0800e4fa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e4fa:	b580      	push	{r7, lr}
 800e4fc:	b086      	sub	sp, #24
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e506:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e50e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e516:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	689b      	ldr	r3, [r3, #8]
 800e51e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e522:	2b80      	cmp	r3, #128	@ 0x80
 800e524:	d109      	bne.n	800e53a <UART_DMAError+0x40>
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	2b21      	cmp	r3, #33	@ 0x21
 800e52a:	d106      	bne.n	800e53a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	2200      	movs	r2, #0
 800e530:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e534:	6978      	ldr	r0, [r7, #20]
 800e536:	f7ff fe85 	bl	800e244 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	689b      	ldr	r3, [r3, #8]
 800e540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e544:	2b40      	cmp	r3, #64	@ 0x40
 800e546:	d109      	bne.n	800e55c <UART_DMAError+0x62>
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2b22      	cmp	r3, #34	@ 0x22
 800e54c:	d106      	bne.n	800e55c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	2200      	movs	r2, #0
 800e552:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e556:	6978      	ldr	r0, [r7, #20]
 800e558:	f7ff feb6 	bl	800e2c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e562:	f043 0210 	orr.w	r2, r3, #16
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e56c:	6978      	ldr	r0, [r7, #20]
 800e56e:	f7fe fd93 	bl	800d098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e572:	bf00      	nop
 800e574:	3718      	adds	r7, #24
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}

0800e57a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e57a:	b580      	push	{r7, lr}
 800e57c:	b084      	sub	sp, #16
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e586:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2200      	movs	r2, #0
 800e58c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e590:	68f8      	ldr	r0, [r7, #12]
 800e592:	f7fe fd81 	bl	800d098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e596:	bf00      	nop
 800e598:	3710      	adds	r7, #16
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b088      	sub	sp, #32
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	e853 3f00 	ldrex	r3, [r3]
 800e5b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e5ba:	61fb      	str	r3, [r7, #28]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	461a      	mov	r2, r3
 800e5c2:	69fb      	ldr	r3, [r7, #28]
 800e5c4:	61bb      	str	r3, [r7, #24]
 800e5c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c8:	6979      	ldr	r1, [r7, #20]
 800e5ca:	69ba      	ldr	r2, [r7, #24]
 800e5cc:	e841 2300 	strex	r3, r2, [r1]
 800e5d0:	613b      	str	r3, [r7, #16]
   return(result);
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d1e6      	bne.n	800e5a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2220      	movs	r2, #32
 800e5dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f7fe fd38 	bl	800d05c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e5ec:	bf00      	nop
 800e5ee:	3720      	adds	r7, #32
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e5fc:	bf00      	nop
 800e5fe:	370c      	adds	r7, #12
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr

0800e608 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e608:	b480      	push	{r7}
 800e60a:	b083      	sub	sp, #12
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e610:	bf00      	nop
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr

0800e61c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e624:	bf00      	nop
 800e626:	370c      	adds	r7, #12
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr

0800e630 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e630:	b480      	push	{r7}
 800e632:	b085      	sub	sp, #20
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e63e:	2b01      	cmp	r3, #1
 800e640:	d101      	bne.n	800e646 <HAL_UARTEx_DisableFifoMode+0x16>
 800e642:	2302      	movs	r3, #2
 800e644:	e027      	b.n	800e696 <HAL_UARTEx_DisableFifoMode+0x66>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2201      	movs	r2, #1
 800e64a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2224      	movs	r2, #36	@ 0x24
 800e652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	681a      	ldr	r2, [r3, #0]
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f022 0201 	bic.w	r2, r2, #1
 800e66c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e674:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2200      	movs	r2, #0
 800e67a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	68fa      	ldr	r2, [r7, #12]
 800e682:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2220      	movs	r2, #32
 800e688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2200      	movs	r2, #0
 800e690:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e694:	2300      	movs	r3, #0
}
 800e696:	4618      	mov	r0, r3
 800e698:	3714      	adds	r7, #20
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr

0800e6a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	b084      	sub	sp, #16
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
 800e6aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d101      	bne.n	800e6ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e6b6:	2302      	movs	r3, #2
 800e6b8:	e02d      	b.n	800e716 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2201      	movs	r2, #1
 800e6be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2224      	movs	r2, #36	@ 0x24
 800e6c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f022 0201 	bic.w	r2, r2, #1
 800e6e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	689b      	ldr	r3, [r3, #8]
 800e6e8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	683a      	ldr	r2, [r7, #0]
 800e6f2:	430a      	orrs	r2, r1
 800e6f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f000 f8a4 	bl	800e844 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	68fa      	ldr	r2, [r7, #12]
 800e702:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2220      	movs	r2, #32
 800e708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2200      	movs	r2, #0
 800e710:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e714:	2300      	movs	r3, #0
}
 800e716:	4618      	mov	r0, r3
 800e718:	3710      	adds	r7, #16
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}

0800e71e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e71e:	b580      	push	{r7, lr}
 800e720:	b084      	sub	sp, #16
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
 800e726:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e72e:	2b01      	cmp	r3, #1
 800e730:	d101      	bne.n	800e736 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e732:	2302      	movs	r3, #2
 800e734:	e02d      	b.n	800e792 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2201      	movs	r2, #1
 800e73a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2224      	movs	r2, #36	@ 0x24
 800e742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	681a      	ldr	r2, [r3, #0]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f022 0201 	bic.w	r2, r2, #1
 800e75c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	689b      	ldr	r3, [r3, #8]
 800e764:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	683a      	ldr	r2, [r7, #0]
 800e76e:	430a      	orrs	r2, r1
 800e770:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f000 f866 	bl	800e844 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	68fa      	ldr	r2, [r7, #12]
 800e77e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2220      	movs	r2, #32
 800e784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2200      	movs	r2, #0
 800e78c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e790:	2300      	movs	r3, #0
}
 800e792:	4618      	mov	r0, r3
 800e794:	3710      	adds	r7, #16
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}

0800e79a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e79a:	b580      	push	{r7, lr}
 800e79c:	b08c      	sub	sp, #48	@ 0x30
 800e79e:	af00      	add	r7, sp, #0
 800e7a0:	60f8      	str	r0, [r7, #12]
 800e7a2:	60b9      	str	r1, [r7, #8]
 800e7a4:	4613      	mov	r3, r2
 800e7a6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e7ae:	2b20      	cmp	r3, #32
 800e7b0:	d142      	bne.n	800e838 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d002      	beq.n	800e7be <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800e7b8:	88fb      	ldrh	r3, [r7, #6]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d101      	bne.n	800e7c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e03b      	b.n	800e83a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2201      	movs	r2, #1
 800e7c6:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800e7ce:	88fb      	ldrh	r3, [r7, #6]
 800e7d0:	461a      	mov	r2, r3
 800e7d2:	68b9      	ldr	r1, [r7, #8]
 800e7d4:	68f8      	ldr	r0, [r7, #12]
 800e7d6:	f7ff fc8f 	bl	800e0f8 <UART_Start_Receive_DMA>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800e7e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d124      	bne.n	800e832 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	d11d      	bne.n	800e82c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	2210      	movs	r2, #16
 800e7f6:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7fe:	69bb      	ldr	r3, [r7, #24]
 800e800:	e853 3f00 	ldrex	r3, [r3]
 800e804:	617b      	str	r3, [r7, #20]
   return(result);
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	f043 0310 	orr.w	r3, r3, #16
 800e80c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	461a      	mov	r2, r3
 800e814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e816:	627b      	str	r3, [r7, #36]	@ 0x24
 800e818:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e81a:	6a39      	ldr	r1, [r7, #32]
 800e81c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e81e:	e841 2300 	strex	r3, r2, [r1]
 800e822:	61fb      	str	r3, [r7, #28]
   return(result);
 800e824:	69fb      	ldr	r3, [r7, #28]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d1e6      	bne.n	800e7f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800e82a:	e002      	b.n	800e832 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800e82c:	2301      	movs	r3, #1
 800e82e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800e832:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e836:	e000      	b.n	800e83a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e838:	2302      	movs	r3, #2
  }
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3730      	adds	r7, #48	@ 0x30
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
	...

0800e844 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e844:	b480      	push	{r7}
 800e846:	b085      	sub	sp, #20
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e850:	2b00      	cmp	r3, #0
 800e852:	d108      	bne.n	800e866 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2201      	movs	r2, #1
 800e858:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2201      	movs	r2, #1
 800e860:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e864:	e031      	b.n	800e8ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e866:	2310      	movs	r3, #16
 800e868:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e86a:	2310      	movs	r3, #16
 800e86c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	0e5b      	lsrs	r3, r3, #25
 800e876:	b2db      	uxtb	r3, r3
 800e878:	f003 0307 	and.w	r3, r3, #7
 800e87c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	689b      	ldr	r3, [r3, #8]
 800e884:	0f5b      	lsrs	r3, r3, #29
 800e886:	b2db      	uxtb	r3, r3
 800e888:	f003 0307 	and.w	r3, r3, #7
 800e88c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e88e:	7bbb      	ldrb	r3, [r7, #14]
 800e890:	7b3a      	ldrb	r2, [r7, #12]
 800e892:	4911      	ldr	r1, [pc, #68]	@ (800e8d8 <UARTEx_SetNbDataToProcess+0x94>)
 800e894:	5c8a      	ldrb	r2, [r1, r2]
 800e896:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e89a:	7b3a      	ldrb	r2, [r7, #12]
 800e89c:	490f      	ldr	r1, [pc, #60]	@ (800e8dc <UARTEx_SetNbDataToProcess+0x98>)
 800e89e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e8a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8a4:	b29a      	uxth	r2, r3
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e8ac:	7bfb      	ldrb	r3, [r7, #15]
 800e8ae:	7b7a      	ldrb	r2, [r7, #13]
 800e8b0:	4909      	ldr	r1, [pc, #36]	@ (800e8d8 <UARTEx_SetNbDataToProcess+0x94>)
 800e8b2:	5c8a      	ldrb	r2, [r1, r2]
 800e8b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e8b8:	7b7a      	ldrb	r2, [r7, #13]
 800e8ba:	4908      	ldr	r1, [pc, #32]	@ (800e8dc <UARTEx_SetNbDataToProcess+0x98>)
 800e8bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e8be:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8c2:	b29a      	uxth	r2, r3
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e8ca:	bf00      	nop
 800e8cc:	3714      	adds	r7, #20
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d4:	4770      	bx	lr
 800e8d6:	bf00      	nop
 800e8d8:	08010b38 	.word	0x08010b38
 800e8dc:	08010b40 	.word	0x08010b40

0800e8e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b085      	sub	sp, #20
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e8ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e8f2:	2b84      	cmp	r3, #132	@ 0x84
 800e8f4:	d005      	beq.n	800e902 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e8f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	4413      	add	r3, r2
 800e8fe:	3303      	adds	r3, #3
 800e900:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e902:	68fb      	ldr	r3, [r7, #12]
}
 800e904:	4618      	mov	r0, r3
 800e906:	3714      	adds	r7, #20
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e914:	f000 fafc 	bl	800ef10 <vTaskStartScheduler>
  
  return osOK;
 800e918:	2300      	movs	r3, #0
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	bd80      	pop	{r7, pc}

0800e91e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e91e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e920:	b089      	sub	sp, #36	@ 0x24
 800e922:	af04      	add	r7, sp, #16
 800e924:	6078      	str	r0, [r7, #4]
 800e926:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	695b      	ldr	r3, [r3, #20]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d020      	beq.n	800e972 <osThreadCreate+0x54>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	699b      	ldr	r3, [r3, #24]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d01c      	beq.n	800e972 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	685c      	ldr	r4, [r3, #4]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	691e      	ldr	r6, [r3, #16]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7ff ffc8 	bl	800e8e0 <makeFreeRtosPriority>
 800e950:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	695b      	ldr	r3, [r3, #20]
 800e956:	687a      	ldr	r2, [r7, #4]
 800e958:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e95a:	9202      	str	r2, [sp, #8]
 800e95c:	9301      	str	r3, [sp, #4]
 800e95e:	9100      	str	r1, [sp, #0]
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	4632      	mov	r2, r6
 800e964:	4629      	mov	r1, r5
 800e966:	4620      	mov	r0, r4
 800e968:	f000 f8ed 	bl	800eb46 <xTaskCreateStatic>
 800e96c:	4603      	mov	r3, r0
 800e96e:	60fb      	str	r3, [r7, #12]
 800e970:	e01c      	b.n	800e9ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	685c      	ldr	r4, [r3, #4]
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e97e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e986:	4618      	mov	r0, r3
 800e988:	f7ff ffaa 	bl	800e8e0 <makeFreeRtosPriority>
 800e98c:	4602      	mov	r2, r0
 800e98e:	f107 030c 	add.w	r3, r7, #12
 800e992:	9301      	str	r3, [sp, #4]
 800e994:	9200      	str	r2, [sp, #0]
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	4632      	mov	r2, r6
 800e99a:	4629      	mov	r1, r5
 800e99c:	4620      	mov	r0, r4
 800e99e:	f000 f932 	bl	800ec06 <xTaskCreate>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d001      	beq.n	800e9ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	e000      	b.n	800e9ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3714      	adds	r7, #20
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e9b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e9b6:	b580      	push	{r7, lr}
 800e9b8:	b084      	sub	sp, #16
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d001      	beq.n	800e9cc <osDelay+0x16>
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	e000      	b.n	800e9ce <osDelay+0x18>
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f000 fa68 	bl	800eea4 <vTaskDelay>
  
  return osOK;
 800e9d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3710      	adds	r7, #16
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}

0800e9de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e9de:	b480      	push	{r7}
 800e9e0:	b083      	sub	sp, #12
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f103 0208 	add.w	r2, r3, #8
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e9f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f103 0208 	add.w	r2, r3, #8
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f103 0208 	add.w	r2, r3, #8
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ea12:	bf00      	nop
 800ea14:	370c      	adds	r7, #12
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr

0800ea1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ea1e:	b480      	push	{r7}
 800ea20:	b083      	sub	sp, #12
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ea2c:	bf00      	nop
 800ea2e:	370c      	adds	r7, #12
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr

0800ea38 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b085      	sub	sp, #20
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	685b      	ldr	r3, [r3, #4]
 800ea46:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	68fa      	ldr	r2, [r7, #12]
 800ea4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	689a      	ldr	r2, [r3, #8]
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	689b      	ldr	r3, [r3, #8]
 800ea5a:	683a      	ldr	r2, [r7, #0]
 800ea5c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	683a      	ldr	r2, [r7, #0]
 800ea62:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	1c5a      	adds	r2, r3, #1
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	601a      	str	r2, [r3, #0]
}
 800ea74:	bf00      	nop
 800ea76:	3714      	adds	r7, #20
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr

0800ea80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ea80:	b480      	push	{r7}
 800ea82:	b085      	sub	sp, #20
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea96:	d103      	bne.n	800eaa0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	691b      	ldr	r3, [r3, #16]
 800ea9c:	60fb      	str	r3, [r7, #12]
 800ea9e:	e00c      	b.n	800eaba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	3308      	adds	r3, #8
 800eaa4:	60fb      	str	r3, [r7, #12]
 800eaa6:	e002      	b.n	800eaae <vListInsert+0x2e>
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	685b      	ldr	r3, [r3, #4]
 800eaac:	60fb      	str	r3, [r7, #12]
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	68ba      	ldr	r2, [r7, #8]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d2f6      	bcs.n	800eaa8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	685a      	ldr	r2, [r3, #4]
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	685b      	ldr	r3, [r3, #4]
 800eac6:	683a      	ldr	r2, [r7, #0]
 800eac8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eaca:	683b      	ldr	r3, [r7, #0]
 800eacc:	68fa      	ldr	r2, [r7, #12]
 800eace:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	683a      	ldr	r2, [r7, #0]
 800ead4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	687a      	ldr	r2, [r7, #4]
 800eada:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	1c5a      	adds	r2, r3, #1
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	601a      	str	r2, [r3, #0]
}
 800eae6:	bf00      	nop
 800eae8:	3714      	adds	r7, #20
 800eaea:	46bd      	mov	sp, r7
 800eaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf0:	4770      	bx	lr

0800eaf2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800eaf2:	b480      	push	{r7}
 800eaf4:	b085      	sub	sp, #20
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	691b      	ldr	r3, [r3, #16]
 800eafe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	687a      	ldr	r2, [r7, #4]
 800eb06:	6892      	ldr	r2, [r2, #8]
 800eb08:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	689b      	ldr	r3, [r3, #8]
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	6852      	ldr	r2, [r2, #4]
 800eb12:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	687a      	ldr	r2, [r7, #4]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d103      	bne.n	800eb26 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	689a      	ldr	r2, [r3, #8]
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	1e5a      	subs	r2, r3, #1
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	681b      	ldr	r3, [r3, #0]
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3714      	adds	r7, #20
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr

0800eb46 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eb46:	b580      	push	{r7, lr}
 800eb48:	b08e      	sub	sp, #56	@ 0x38
 800eb4a:	af04      	add	r7, sp, #16
 800eb4c:	60f8      	str	r0, [r7, #12]
 800eb4e:	60b9      	str	r1, [r7, #8]
 800eb50:	607a      	str	r2, [r7, #4]
 800eb52:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800eb54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d10b      	bne.n	800eb72 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800eb5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb5e:	f383 8811 	msr	BASEPRI, r3
 800eb62:	f3bf 8f6f 	isb	sy
 800eb66:	f3bf 8f4f 	dsb	sy
 800eb6a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800eb6c:	bf00      	nop
 800eb6e:	bf00      	nop
 800eb70:	e7fd      	b.n	800eb6e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800eb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d10b      	bne.n	800eb90 <xTaskCreateStatic+0x4a>
	__asm volatile
 800eb78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb7c:	f383 8811 	msr	BASEPRI, r3
 800eb80:	f3bf 8f6f 	isb	sy
 800eb84:	f3bf 8f4f 	dsb	sy
 800eb88:	61fb      	str	r3, [r7, #28]
}
 800eb8a:	bf00      	nop
 800eb8c:	bf00      	nop
 800eb8e:	e7fd      	b.n	800eb8c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800eb90:	23a0      	movs	r3, #160	@ 0xa0
 800eb92:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	2ba0      	cmp	r3, #160	@ 0xa0
 800eb98:	d00b      	beq.n	800ebb2 <xTaskCreateStatic+0x6c>
	__asm volatile
 800eb9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb9e:	f383 8811 	msr	BASEPRI, r3
 800eba2:	f3bf 8f6f 	isb	sy
 800eba6:	f3bf 8f4f 	dsb	sy
 800ebaa:	61bb      	str	r3, [r7, #24]
}
 800ebac:	bf00      	nop
 800ebae:	bf00      	nop
 800ebb0:	e7fd      	b.n	800ebae <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ebb2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ebb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d01e      	beq.n	800ebf8 <xTaskCreateStatic+0xb2>
 800ebba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d01b      	beq.n	800ebf8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ebc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebc2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ebc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ebc8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ebca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebcc:	2202      	movs	r2, #2
 800ebce:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	9303      	str	r3, [sp, #12]
 800ebd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd8:	9302      	str	r3, [sp, #8]
 800ebda:	f107 0314 	add.w	r3, r7, #20
 800ebde:	9301      	str	r3, [sp, #4]
 800ebe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebe2:	9300      	str	r3, [sp, #0]
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	687a      	ldr	r2, [r7, #4]
 800ebe8:	68b9      	ldr	r1, [r7, #8]
 800ebea:	68f8      	ldr	r0, [r7, #12]
 800ebec:	f000 f850 	bl	800ec90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ebf0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ebf2:	f000 f8ed 	bl	800edd0 <prvAddNewTaskToReadyList>
 800ebf6:	e001      	b.n	800ebfc <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ebfc:	697b      	ldr	r3, [r7, #20]
	}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3728      	adds	r7, #40	@ 0x28
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}

0800ec06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ec06:	b580      	push	{r7, lr}
 800ec08:	b08c      	sub	sp, #48	@ 0x30
 800ec0a:	af04      	add	r7, sp, #16
 800ec0c:	60f8      	str	r0, [r7, #12]
 800ec0e:	60b9      	str	r1, [r7, #8]
 800ec10:	603b      	str	r3, [r7, #0]
 800ec12:	4613      	mov	r3, r2
 800ec14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ec16:	88fb      	ldrh	r3, [r7, #6]
 800ec18:	009b      	lsls	r3, r3, #2
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f001 f966 	bl	800feec <pvPortMalloc>
 800ec20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d00e      	beq.n	800ec46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ec28:	20a0      	movs	r0, #160	@ 0xa0
 800ec2a:	f001 f95f 	bl	800feec <pvPortMalloc>
 800ec2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d003      	beq.n	800ec3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ec36:	69fb      	ldr	r3, [r7, #28]
 800ec38:	697a      	ldr	r2, [r7, #20]
 800ec3a:	631a      	str	r2, [r3, #48]	@ 0x30
 800ec3c:	e005      	b.n	800ec4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ec3e:	6978      	ldr	r0, [r7, #20]
 800ec40:	f001 fa22 	bl	8010088 <vPortFree>
 800ec44:	e001      	b.n	800ec4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ec46:	2300      	movs	r3, #0
 800ec48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d017      	beq.n	800ec80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ec50:	69fb      	ldr	r3, [r7, #28]
 800ec52:	2200      	movs	r2, #0
 800ec54:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ec58:	88fa      	ldrh	r2, [r7, #6]
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	9303      	str	r3, [sp, #12]
 800ec5e:	69fb      	ldr	r3, [r7, #28]
 800ec60:	9302      	str	r3, [sp, #8]
 800ec62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec64:	9301      	str	r3, [sp, #4]
 800ec66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec68:	9300      	str	r3, [sp, #0]
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	68b9      	ldr	r1, [r7, #8]
 800ec6e:	68f8      	ldr	r0, [r7, #12]
 800ec70:	f000 f80e 	bl	800ec90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec74:	69f8      	ldr	r0, [r7, #28]
 800ec76:	f000 f8ab 	bl	800edd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	61bb      	str	r3, [r7, #24]
 800ec7e:	e002      	b.n	800ec86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ec80:	f04f 33ff 	mov.w	r3, #4294967295
 800ec84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ec86:	69bb      	ldr	r3, [r7, #24]
	}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3720      	adds	r7, #32
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b088      	sub	sp, #32
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	60f8      	str	r0, [r7, #12]
 800ec98:	60b9      	str	r1, [r7, #8]
 800ec9a:	607a      	str	r2, [r7, #4]
 800ec9c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ec9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eca0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eca2:	6879      	ldr	r1, [r7, #4]
 800eca4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800eca8:	440b      	add	r3, r1
 800ecaa:	009b      	lsls	r3, r3, #2
 800ecac:	4413      	add	r3, r2
 800ecae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ecb0:	69bb      	ldr	r3, [r7, #24]
 800ecb2:	f023 0307 	bic.w	r3, r3, #7
 800ecb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	f003 0307 	and.w	r3, r3, #7
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d00b      	beq.n	800ecda <prvInitialiseNewTask+0x4a>
	__asm volatile
 800ecc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecc6:	f383 8811 	msr	BASEPRI, r3
 800ecca:	f3bf 8f6f 	isb	sy
 800ecce:	f3bf 8f4f 	dsb	sy
 800ecd2:	617b      	str	r3, [r7, #20]
}
 800ecd4:	bf00      	nop
 800ecd6:	bf00      	nop
 800ecd8:	e7fd      	b.n	800ecd6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d01f      	beq.n	800ed20 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ece0:	2300      	movs	r3, #0
 800ece2:	61fb      	str	r3, [r7, #28]
 800ece4:	e012      	b.n	800ed0c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ece6:	68ba      	ldr	r2, [r7, #8]
 800ece8:	69fb      	ldr	r3, [r7, #28]
 800ecea:	4413      	add	r3, r2
 800ecec:	7819      	ldrb	r1, [r3, #0]
 800ecee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ecf0:	69fb      	ldr	r3, [r7, #28]
 800ecf2:	4413      	add	r3, r2
 800ecf4:	3334      	adds	r3, #52	@ 0x34
 800ecf6:	460a      	mov	r2, r1
 800ecf8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ecfa:	68ba      	ldr	r2, [r7, #8]
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	4413      	add	r3, r2
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d006      	beq.n	800ed14 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed06:	69fb      	ldr	r3, [r7, #28]
 800ed08:	3301      	adds	r3, #1
 800ed0a:	61fb      	str	r3, [r7, #28]
 800ed0c:	69fb      	ldr	r3, [r7, #28]
 800ed0e:	2b0f      	cmp	r3, #15
 800ed10:	d9e9      	bls.n	800ece6 <prvInitialiseNewTask+0x56>
 800ed12:	e000      	b.n	800ed16 <prvInitialiseNewTask+0x86>
			{
				break;
 800ed14:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ed16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed18:	2200      	movs	r2, #0
 800ed1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ed1e:	e003      	b.n	800ed28 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ed20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed22:	2200      	movs	r2, #0
 800ed24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ed28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed2a:	2b09      	cmp	r3, #9
 800ed2c:	d901      	bls.n	800ed32 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ed2e:	2309      	movs	r3, #9
 800ed30:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ed32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ed36:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ed38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ed3c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ed3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed40:	2200      	movs	r2, #0
 800ed42:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ed44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed46:	3304      	adds	r3, #4
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7ff fe68 	bl	800ea1e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ed4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed50:	3318      	adds	r3, #24
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7ff fe63 	bl	800ea1e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ed58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed60:	f1c3 020a 	rsb	r2, r3, #10
 800ed64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ed68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed6c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ed6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed70:	2200      	movs	r2, #0
 800ed72:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ed76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed78:	2200      	movs	r2, #0
 800ed7a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ed7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed80:	334c      	adds	r3, #76	@ 0x4c
 800ed82:	224c      	movs	r2, #76	@ 0x4c
 800ed84:	2100      	movs	r1, #0
 800ed86:	4618      	mov	r0, r3
 800ed88:	f001 fd9b 	bl	80108c2 <memset>
 800ed8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed8e:	4a0d      	ldr	r2, [pc, #52]	@ (800edc4 <prvInitialiseNewTask+0x134>)
 800ed90:	651a      	str	r2, [r3, #80]	@ 0x50
 800ed92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed94:	4a0c      	ldr	r2, [pc, #48]	@ (800edc8 <prvInitialiseNewTask+0x138>)
 800ed96:	655a      	str	r2, [r3, #84]	@ 0x54
 800ed98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed9a:	4a0c      	ldr	r2, [pc, #48]	@ (800edcc <prvInitialiseNewTask+0x13c>)
 800ed9c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ed9e:	683a      	ldr	r2, [r7, #0]
 800eda0:	68f9      	ldr	r1, [r7, #12]
 800eda2:	69b8      	ldr	r0, [r7, #24]
 800eda4:	f000 fe52 	bl	800fa4c <pxPortInitialiseStack>
 800eda8:	4602      	mov	r2, r0
 800edaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800edae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d002      	beq.n	800edba <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800edb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800edb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800edba:	bf00      	nop
 800edbc:	3720      	adds	r7, #32
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}
 800edc2:	bf00      	nop
 800edc4:	24004664 	.word	0x24004664
 800edc8:	240046cc 	.word	0x240046cc
 800edcc:	24004734 	.word	0x24004734

0800edd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800edd8:	f000 ff66 	bl	800fca8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800eddc:	4b2a      	ldr	r3, [pc, #168]	@ (800ee88 <prvAddNewTaskToReadyList+0xb8>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	3301      	adds	r3, #1
 800ede2:	4a29      	ldr	r2, [pc, #164]	@ (800ee88 <prvAddNewTaskToReadyList+0xb8>)
 800ede4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ede6:	4b29      	ldr	r3, [pc, #164]	@ (800ee8c <prvAddNewTaskToReadyList+0xbc>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d109      	bne.n	800ee02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800edee:	4a27      	ldr	r2, [pc, #156]	@ (800ee8c <prvAddNewTaskToReadyList+0xbc>)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800edf4:	4b24      	ldr	r3, [pc, #144]	@ (800ee88 <prvAddNewTaskToReadyList+0xb8>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d110      	bne.n	800ee1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800edfc:	f000 fad4 	bl	800f3a8 <prvInitialiseTaskLists>
 800ee00:	e00d      	b.n	800ee1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ee02:	4b23      	ldr	r3, [pc, #140]	@ (800ee90 <prvAddNewTaskToReadyList+0xc0>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d109      	bne.n	800ee1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ee0a:	4b20      	ldr	r3, [pc, #128]	@ (800ee8c <prvAddNewTaskToReadyList+0xbc>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d802      	bhi.n	800ee1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ee18:	4a1c      	ldr	r2, [pc, #112]	@ (800ee8c <prvAddNewTaskToReadyList+0xbc>)
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ee1e:	4b1d      	ldr	r3, [pc, #116]	@ (800ee94 <prvAddNewTaskToReadyList+0xc4>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	3301      	adds	r3, #1
 800ee24:	4a1b      	ldr	r2, [pc, #108]	@ (800ee94 <prvAddNewTaskToReadyList+0xc4>)
 800ee26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee2c:	2201      	movs	r2, #1
 800ee2e:	409a      	lsls	r2, r3
 800ee30:	4b19      	ldr	r3, [pc, #100]	@ (800ee98 <prvAddNewTaskToReadyList+0xc8>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4313      	orrs	r3, r2
 800ee36:	4a18      	ldr	r2, [pc, #96]	@ (800ee98 <prvAddNewTaskToReadyList+0xc8>)
 800ee38:	6013      	str	r3, [r2, #0]
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee3e:	4613      	mov	r3, r2
 800ee40:	009b      	lsls	r3, r3, #2
 800ee42:	4413      	add	r3, r2
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	4a15      	ldr	r2, [pc, #84]	@ (800ee9c <prvAddNewTaskToReadyList+0xcc>)
 800ee48:	441a      	add	r2, r3
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	3304      	adds	r3, #4
 800ee4e:	4619      	mov	r1, r3
 800ee50:	4610      	mov	r0, r2
 800ee52:	f7ff fdf1 	bl	800ea38 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ee56:	f000 ff59 	bl	800fd0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ee5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ee90 <prvAddNewTaskToReadyList+0xc0>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d00e      	beq.n	800ee80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ee62:	4b0a      	ldr	r3, [pc, #40]	@ (800ee8c <prvAddNewTaskToReadyList+0xbc>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d207      	bcs.n	800ee80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ee70:	4b0b      	ldr	r3, [pc, #44]	@ (800eea0 <prvAddNewTaskToReadyList+0xd0>)
 800ee72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee76:	601a      	str	r2, [r3, #0]
 800ee78:	f3bf 8f4f 	dsb	sy
 800ee7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee80:	bf00      	nop
 800ee82:	3708      	adds	r7, #8
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	240008fc 	.word	0x240008fc
 800ee8c:	240007c0 	.word	0x240007c0
 800ee90:	24000908 	.word	0x24000908
 800ee94:	24000918 	.word	0x24000918
 800ee98:	24000904 	.word	0x24000904
 800ee9c:	240007c4 	.word	0x240007c4
 800eea0:	e000ed04 	.word	0xe000ed04

0800eea4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b084      	sub	sp, #16
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eeac:	2300      	movs	r3, #0
 800eeae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d018      	beq.n	800eee8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800eeb6:	4b14      	ldr	r3, [pc, #80]	@ (800ef08 <vTaskDelay+0x64>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d00b      	beq.n	800eed6 <vTaskDelay+0x32>
	__asm volatile
 800eebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eec2:	f383 8811 	msr	BASEPRI, r3
 800eec6:	f3bf 8f6f 	isb	sy
 800eeca:	f3bf 8f4f 	dsb	sy
 800eece:	60bb      	str	r3, [r7, #8]
}
 800eed0:	bf00      	nop
 800eed2:	bf00      	nop
 800eed4:	e7fd      	b.n	800eed2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800eed6:	f000 f885 	bl	800efe4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eeda:	2100      	movs	r1, #0
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f000 fd4f 	bl	800f980 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eee2:	f000 f88d 	bl	800f000 <xTaskResumeAll>
 800eee6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d107      	bne.n	800eefe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800eeee:	4b07      	ldr	r3, [pc, #28]	@ (800ef0c <vTaskDelay+0x68>)
 800eef0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eef4:	601a      	str	r2, [r3, #0]
 800eef6:	f3bf 8f4f 	dsb	sy
 800eefa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eefe:	bf00      	nop
 800ef00:	3710      	adds	r7, #16
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	24000924 	.word	0x24000924
 800ef0c:	e000ed04 	.word	0xe000ed04

0800ef10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b08a      	sub	sp, #40	@ 0x28
 800ef14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ef16:	2300      	movs	r3, #0
 800ef18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ef1e:	463a      	mov	r2, r7
 800ef20:	1d39      	adds	r1, r7, #4
 800ef22:	f107 0308 	add.w	r3, r7, #8
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7f1 fe32 	bl	8000b90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ef2c:	6839      	ldr	r1, [r7, #0]
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	68ba      	ldr	r2, [r7, #8]
 800ef32:	9202      	str	r2, [sp, #8]
 800ef34:	9301      	str	r3, [sp, #4]
 800ef36:	2300      	movs	r3, #0
 800ef38:	9300      	str	r3, [sp, #0]
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	460a      	mov	r2, r1
 800ef3e:	4921      	ldr	r1, [pc, #132]	@ (800efc4 <vTaskStartScheduler+0xb4>)
 800ef40:	4821      	ldr	r0, [pc, #132]	@ (800efc8 <vTaskStartScheduler+0xb8>)
 800ef42:	f7ff fe00 	bl	800eb46 <xTaskCreateStatic>
 800ef46:	4603      	mov	r3, r0
 800ef48:	4a20      	ldr	r2, [pc, #128]	@ (800efcc <vTaskStartScheduler+0xbc>)
 800ef4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ef4c:	4b1f      	ldr	r3, [pc, #124]	@ (800efcc <vTaskStartScheduler+0xbc>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d002      	beq.n	800ef5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ef54:	2301      	movs	r3, #1
 800ef56:	617b      	str	r3, [r7, #20]
 800ef58:	e001      	b.n	800ef5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	2b01      	cmp	r3, #1
 800ef62:	d11b      	bne.n	800ef9c <vTaskStartScheduler+0x8c>
	__asm volatile
 800ef64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef68:	f383 8811 	msr	BASEPRI, r3
 800ef6c:	f3bf 8f6f 	isb	sy
 800ef70:	f3bf 8f4f 	dsb	sy
 800ef74:	613b      	str	r3, [r7, #16]
}
 800ef76:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ef78:	4b15      	ldr	r3, [pc, #84]	@ (800efd0 <vTaskStartScheduler+0xc0>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	334c      	adds	r3, #76	@ 0x4c
 800ef7e:	4a15      	ldr	r2, [pc, #84]	@ (800efd4 <vTaskStartScheduler+0xc4>)
 800ef80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ef82:	4b15      	ldr	r3, [pc, #84]	@ (800efd8 <vTaskStartScheduler+0xc8>)
 800ef84:	f04f 32ff 	mov.w	r2, #4294967295
 800ef88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ef8a:	4b14      	ldr	r3, [pc, #80]	@ (800efdc <vTaskStartScheduler+0xcc>)
 800ef8c:	2201      	movs	r2, #1
 800ef8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ef90:	4b13      	ldr	r3, [pc, #76]	@ (800efe0 <vTaskStartScheduler+0xd0>)
 800ef92:	2200      	movs	r2, #0
 800ef94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ef96:	f000 fde3 	bl	800fb60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ef9a:	e00f      	b.n	800efbc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa2:	d10b      	bne.n	800efbc <vTaskStartScheduler+0xac>
	__asm volatile
 800efa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efa8:	f383 8811 	msr	BASEPRI, r3
 800efac:	f3bf 8f6f 	isb	sy
 800efb0:	f3bf 8f4f 	dsb	sy
 800efb4:	60fb      	str	r3, [r7, #12]
}
 800efb6:	bf00      	nop
 800efb8:	bf00      	nop
 800efba:	e7fd      	b.n	800efb8 <vTaskStartScheduler+0xa8>
}
 800efbc:	bf00      	nop
 800efbe:	3718      	adds	r7, #24
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	08010ac8 	.word	0x08010ac8
 800efc8:	0800f379 	.word	0x0800f379
 800efcc:	24000920 	.word	0x24000920
 800efd0:	240007c0 	.word	0x240007c0
 800efd4:	24000014 	.word	0x24000014
 800efd8:	2400091c 	.word	0x2400091c
 800efdc:	24000908 	.word	0x24000908
 800efe0:	24000900 	.word	0x24000900

0800efe4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800efe4:	b480      	push	{r7}
 800efe6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800efe8:	4b04      	ldr	r3, [pc, #16]	@ (800effc <vTaskSuspendAll+0x18>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	3301      	adds	r3, #1
 800efee:	4a03      	ldr	r2, [pc, #12]	@ (800effc <vTaskSuspendAll+0x18>)
 800eff0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800eff2:	bf00      	nop
 800eff4:	46bd      	mov	sp, r7
 800eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effa:	4770      	bx	lr
 800effc:	24000924 	.word	0x24000924

0800f000 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b084      	sub	sp, #16
 800f004:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f006:	2300      	movs	r3, #0
 800f008:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f00a:	2300      	movs	r3, #0
 800f00c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f00e:	4b42      	ldr	r3, [pc, #264]	@ (800f118 <xTaskResumeAll+0x118>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d10b      	bne.n	800f02e <xTaskResumeAll+0x2e>
	__asm volatile
 800f016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f01a:	f383 8811 	msr	BASEPRI, r3
 800f01e:	f3bf 8f6f 	isb	sy
 800f022:	f3bf 8f4f 	dsb	sy
 800f026:	603b      	str	r3, [r7, #0]
}
 800f028:	bf00      	nop
 800f02a:	bf00      	nop
 800f02c:	e7fd      	b.n	800f02a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f02e:	f000 fe3b 	bl	800fca8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f032:	4b39      	ldr	r3, [pc, #228]	@ (800f118 <xTaskResumeAll+0x118>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	3b01      	subs	r3, #1
 800f038:	4a37      	ldr	r2, [pc, #220]	@ (800f118 <xTaskResumeAll+0x118>)
 800f03a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f03c:	4b36      	ldr	r3, [pc, #216]	@ (800f118 <xTaskResumeAll+0x118>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d161      	bne.n	800f108 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f044:	4b35      	ldr	r3, [pc, #212]	@ (800f11c <xTaskResumeAll+0x11c>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d05d      	beq.n	800f108 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f04c:	e02e      	b.n	800f0ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f04e:	4b34      	ldr	r3, [pc, #208]	@ (800f120 <xTaskResumeAll+0x120>)
 800f050:	68db      	ldr	r3, [r3, #12]
 800f052:	68db      	ldr	r3, [r3, #12]
 800f054:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	3318      	adds	r3, #24
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7ff fd49 	bl	800eaf2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	3304      	adds	r3, #4
 800f064:	4618      	mov	r0, r3
 800f066:	f7ff fd44 	bl	800eaf2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f06e:	2201      	movs	r2, #1
 800f070:	409a      	lsls	r2, r3
 800f072:	4b2c      	ldr	r3, [pc, #176]	@ (800f124 <xTaskResumeAll+0x124>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	4313      	orrs	r3, r2
 800f078:	4a2a      	ldr	r2, [pc, #168]	@ (800f124 <xTaskResumeAll+0x124>)
 800f07a:	6013      	str	r3, [r2, #0]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f080:	4613      	mov	r3, r2
 800f082:	009b      	lsls	r3, r3, #2
 800f084:	4413      	add	r3, r2
 800f086:	009b      	lsls	r3, r3, #2
 800f088:	4a27      	ldr	r2, [pc, #156]	@ (800f128 <xTaskResumeAll+0x128>)
 800f08a:	441a      	add	r2, r3
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	3304      	adds	r3, #4
 800f090:	4619      	mov	r1, r3
 800f092:	4610      	mov	r0, r2
 800f094:	f7ff fcd0 	bl	800ea38 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f09c:	4b23      	ldr	r3, [pc, #140]	@ (800f12c <xTaskResumeAll+0x12c>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d302      	bcc.n	800f0ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f0a6:	4b22      	ldr	r3, [pc, #136]	@ (800f130 <xTaskResumeAll+0x130>)
 800f0a8:	2201      	movs	r2, #1
 800f0aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f0ac:	4b1c      	ldr	r3, [pc, #112]	@ (800f120 <xTaskResumeAll+0x120>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d1cc      	bne.n	800f04e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d001      	beq.n	800f0be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f0ba:	f000 fa19 	bl	800f4f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f0be:	4b1d      	ldr	r3, [pc, #116]	@ (800f134 <xTaskResumeAll+0x134>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d010      	beq.n	800f0ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f0ca:	f000 f837 	bl	800f13c <xTaskIncrementTick>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d002      	beq.n	800f0da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f0d4:	4b16      	ldr	r3, [pc, #88]	@ (800f130 <xTaskResumeAll+0x130>)
 800f0d6:	2201      	movs	r2, #1
 800f0d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	3b01      	subs	r3, #1
 800f0de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d1f1      	bne.n	800f0ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f0e6:	4b13      	ldr	r3, [pc, #76]	@ (800f134 <xTaskResumeAll+0x134>)
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f0ec:	4b10      	ldr	r3, [pc, #64]	@ (800f130 <xTaskResumeAll+0x130>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d009      	beq.n	800f108 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f0f8:	4b0f      	ldr	r3, [pc, #60]	@ (800f138 <xTaskResumeAll+0x138>)
 800f0fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0fe:	601a      	str	r2, [r3, #0]
 800f100:	f3bf 8f4f 	dsb	sy
 800f104:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f108:	f000 fe00 	bl	800fd0c <vPortExitCritical>

	return xAlreadyYielded;
 800f10c:	68bb      	ldr	r3, [r7, #8]
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3710      	adds	r7, #16
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	24000924 	.word	0x24000924
 800f11c:	240008fc 	.word	0x240008fc
 800f120:	240008bc 	.word	0x240008bc
 800f124:	24000904 	.word	0x24000904
 800f128:	240007c4 	.word	0x240007c4
 800f12c:	240007c0 	.word	0x240007c0
 800f130:	24000910 	.word	0x24000910
 800f134:	2400090c 	.word	0x2400090c
 800f138:	e000ed04 	.word	0xe000ed04

0800f13c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b086      	sub	sp, #24
 800f140:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f142:	2300      	movs	r3, #0
 800f144:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f146:	4b4f      	ldr	r3, [pc, #316]	@ (800f284 <xTaskIncrementTick+0x148>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	f040 808f 	bne.w	800f26e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f150:	4b4d      	ldr	r3, [pc, #308]	@ (800f288 <xTaskIncrementTick+0x14c>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	3301      	adds	r3, #1
 800f156:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f158:	4a4b      	ldr	r2, [pc, #300]	@ (800f288 <xTaskIncrementTick+0x14c>)
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f15e:	693b      	ldr	r3, [r7, #16]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d121      	bne.n	800f1a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f164:	4b49      	ldr	r3, [pc, #292]	@ (800f28c <xTaskIncrementTick+0x150>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d00b      	beq.n	800f186 <xTaskIncrementTick+0x4a>
	__asm volatile
 800f16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f172:	f383 8811 	msr	BASEPRI, r3
 800f176:	f3bf 8f6f 	isb	sy
 800f17a:	f3bf 8f4f 	dsb	sy
 800f17e:	603b      	str	r3, [r7, #0]
}
 800f180:	bf00      	nop
 800f182:	bf00      	nop
 800f184:	e7fd      	b.n	800f182 <xTaskIncrementTick+0x46>
 800f186:	4b41      	ldr	r3, [pc, #260]	@ (800f28c <xTaskIncrementTick+0x150>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	60fb      	str	r3, [r7, #12]
 800f18c:	4b40      	ldr	r3, [pc, #256]	@ (800f290 <xTaskIncrementTick+0x154>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	4a3e      	ldr	r2, [pc, #248]	@ (800f28c <xTaskIncrementTick+0x150>)
 800f192:	6013      	str	r3, [r2, #0]
 800f194:	4a3e      	ldr	r2, [pc, #248]	@ (800f290 <xTaskIncrementTick+0x154>)
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	6013      	str	r3, [r2, #0]
 800f19a:	4b3e      	ldr	r3, [pc, #248]	@ (800f294 <xTaskIncrementTick+0x158>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	3301      	adds	r3, #1
 800f1a0:	4a3c      	ldr	r2, [pc, #240]	@ (800f294 <xTaskIncrementTick+0x158>)
 800f1a2:	6013      	str	r3, [r2, #0]
 800f1a4:	f000 f9a4 	bl	800f4f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f1a8:	4b3b      	ldr	r3, [pc, #236]	@ (800f298 <xTaskIncrementTick+0x15c>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	693a      	ldr	r2, [r7, #16]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d348      	bcc.n	800f244 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1b2:	4b36      	ldr	r3, [pc, #216]	@ (800f28c <xTaskIncrementTick+0x150>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d104      	bne.n	800f1c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1bc:	4b36      	ldr	r3, [pc, #216]	@ (800f298 <xTaskIncrementTick+0x15c>)
 800f1be:	f04f 32ff 	mov.w	r2, #4294967295
 800f1c2:	601a      	str	r2, [r3, #0]
					break;
 800f1c4:	e03e      	b.n	800f244 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1c6:	4b31      	ldr	r3, [pc, #196]	@ (800f28c <xTaskIncrementTick+0x150>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	68db      	ldr	r3, [r3, #12]
 800f1ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	685b      	ldr	r3, [r3, #4]
 800f1d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f1d6:	693a      	ldr	r2, [r7, #16]
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d203      	bcs.n	800f1e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f1de:	4a2e      	ldr	r2, [pc, #184]	@ (800f298 <xTaskIncrementTick+0x15c>)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f1e4:	e02e      	b.n	800f244 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	3304      	adds	r3, #4
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7ff fc81 	bl	800eaf2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d004      	beq.n	800f202 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	3318      	adds	r3, #24
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7ff fc78 	bl	800eaf2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f206:	2201      	movs	r2, #1
 800f208:	409a      	lsls	r2, r3
 800f20a:	4b24      	ldr	r3, [pc, #144]	@ (800f29c <xTaskIncrementTick+0x160>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	4313      	orrs	r3, r2
 800f210:	4a22      	ldr	r2, [pc, #136]	@ (800f29c <xTaskIncrementTick+0x160>)
 800f212:	6013      	str	r3, [r2, #0]
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f218:	4613      	mov	r3, r2
 800f21a:	009b      	lsls	r3, r3, #2
 800f21c:	4413      	add	r3, r2
 800f21e:	009b      	lsls	r3, r3, #2
 800f220:	4a1f      	ldr	r2, [pc, #124]	@ (800f2a0 <xTaskIncrementTick+0x164>)
 800f222:	441a      	add	r2, r3
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	3304      	adds	r3, #4
 800f228:	4619      	mov	r1, r3
 800f22a:	4610      	mov	r0, r2
 800f22c:	f7ff fc04 	bl	800ea38 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f234:	4b1b      	ldr	r3, [pc, #108]	@ (800f2a4 <xTaskIncrementTick+0x168>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d3b9      	bcc.n	800f1b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f23e:	2301      	movs	r3, #1
 800f240:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f242:	e7b6      	b.n	800f1b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f244:	4b17      	ldr	r3, [pc, #92]	@ (800f2a4 <xTaskIncrementTick+0x168>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f24a:	4915      	ldr	r1, [pc, #84]	@ (800f2a0 <xTaskIncrementTick+0x164>)
 800f24c:	4613      	mov	r3, r2
 800f24e:	009b      	lsls	r3, r3, #2
 800f250:	4413      	add	r3, r2
 800f252:	009b      	lsls	r3, r3, #2
 800f254:	440b      	add	r3, r1
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	2b01      	cmp	r3, #1
 800f25a:	d901      	bls.n	800f260 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f25c:	2301      	movs	r3, #1
 800f25e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f260:	4b11      	ldr	r3, [pc, #68]	@ (800f2a8 <xTaskIncrementTick+0x16c>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d007      	beq.n	800f278 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f268:	2301      	movs	r3, #1
 800f26a:	617b      	str	r3, [r7, #20]
 800f26c:	e004      	b.n	800f278 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f26e:	4b0f      	ldr	r3, [pc, #60]	@ (800f2ac <xTaskIncrementTick+0x170>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	3301      	adds	r3, #1
 800f274:	4a0d      	ldr	r2, [pc, #52]	@ (800f2ac <xTaskIncrementTick+0x170>)
 800f276:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f278:	697b      	ldr	r3, [r7, #20]
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3718      	adds	r7, #24
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop
 800f284:	24000924 	.word	0x24000924
 800f288:	24000900 	.word	0x24000900
 800f28c:	240008b4 	.word	0x240008b4
 800f290:	240008b8 	.word	0x240008b8
 800f294:	24000914 	.word	0x24000914
 800f298:	2400091c 	.word	0x2400091c
 800f29c:	24000904 	.word	0x24000904
 800f2a0:	240007c4 	.word	0x240007c4
 800f2a4:	240007c0 	.word	0x240007c0
 800f2a8:	24000910 	.word	0x24000910
 800f2ac:	2400090c 	.word	0x2400090c

0800f2b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b087      	sub	sp, #28
 800f2b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f2b6:	4b2a      	ldr	r3, [pc, #168]	@ (800f360 <vTaskSwitchContext+0xb0>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d003      	beq.n	800f2c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f2be:	4b29      	ldr	r3, [pc, #164]	@ (800f364 <vTaskSwitchContext+0xb4>)
 800f2c0:	2201      	movs	r2, #1
 800f2c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f2c4:	e045      	b.n	800f352 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800f2c6:	4b27      	ldr	r3, [pc, #156]	@ (800f364 <vTaskSwitchContext+0xb4>)
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2cc:	4b26      	ldr	r3, [pc, #152]	@ (800f368 <vTaskSwitchContext+0xb8>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	fab3 f383 	clz	r3, r3
 800f2d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f2da:	7afb      	ldrb	r3, [r7, #11]
 800f2dc:	f1c3 031f 	rsb	r3, r3, #31
 800f2e0:	617b      	str	r3, [r7, #20]
 800f2e2:	4922      	ldr	r1, [pc, #136]	@ (800f36c <vTaskSwitchContext+0xbc>)
 800f2e4:	697a      	ldr	r2, [r7, #20]
 800f2e6:	4613      	mov	r3, r2
 800f2e8:	009b      	lsls	r3, r3, #2
 800f2ea:	4413      	add	r3, r2
 800f2ec:	009b      	lsls	r3, r3, #2
 800f2ee:	440b      	add	r3, r1
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d10b      	bne.n	800f30e <vTaskSwitchContext+0x5e>
	__asm volatile
 800f2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2fa:	f383 8811 	msr	BASEPRI, r3
 800f2fe:	f3bf 8f6f 	isb	sy
 800f302:	f3bf 8f4f 	dsb	sy
 800f306:	607b      	str	r3, [r7, #4]
}
 800f308:	bf00      	nop
 800f30a:	bf00      	nop
 800f30c:	e7fd      	b.n	800f30a <vTaskSwitchContext+0x5a>
 800f30e:	697a      	ldr	r2, [r7, #20]
 800f310:	4613      	mov	r3, r2
 800f312:	009b      	lsls	r3, r3, #2
 800f314:	4413      	add	r3, r2
 800f316:	009b      	lsls	r3, r3, #2
 800f318:	4a14      	ldr	r2, [pc, #80]	@ (800f36c <vTaskSwitchContext+0xbc>)
 800f31a:	4413      	add	r3, r2
 800f31c:	613b      	str	r3, [r7, #16]
 800f31e:	693b      	ldr	r3, [r7, #16]
 800f320:	685b      	ldr	r3, [r3, #4]
 800f322:	685a      	ldr	r2, [r3, #4]
 800f324:	693b      	ldr	r3, [r7, #16]
 800f326:	605a      	str	r2, [r3, #4]
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	685a      	ldr	r2, [r3, #4]
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	3308      	adds	r3, #8
 800f330:	429a      	cmp	r2, r3
 800f332:	d104      	bne.n	800f33e <vTaskSwitchContext+0x8e>
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	685a      	ldr	r2, [r3, #4]
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	605a      	str	r2, [r3, #4]
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	685b      	ldr	r3, [r3, #4]
 800f342:	68db      	ldr	r3, [r3, #12]
 800f344:	4a0a      	ldr	r2, [pc, #40]	@ (800f370 <vTaskSwitchContext+0xc0>)
 800f346:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f348:	4b09      	ldr	r3, [pc, #36]	@ (800f370 <vTaskSwitchContext+0xc0>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	334c      	adds	r3, #76	@ 0x4c
 800f34e:	4a09      	ldr	r2, [pc, #36]	@ (800f374 <vTaskSwitchContext+0xc4>)
 800f350:	6013      	str	r3, [r2, #0]
}
 800f352:	bf00      	nop
 800f354:	371c      	adds	r7, #28
 800f356:	46bd      	mov	sp, r7
 800f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35c:	4770      	bx	lr
 800f35e:	bf00      	nop
 800f360:	24000924 	.word	0x24000924
 800f364:	24000910 	.word	0x24000910
 800f368:	24000904 	.word	0x24000904
 800f36c:	240007c4 	.word	0x240007c4
 800f370:	240007c0 	.word	0x240007c0
 800f374:	24000014 	.word	0x24000014

0800f378 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f380:	f000 f852 	bl	800f428 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f384:	4b06      	ldr	r3, [pc, #24]	@ (800f3a0 <prvIdleTask+0x28>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d9f9      	bls.n	800f380 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f38c:	4b05      	ldr	r3, [pc, #20]	@ (800f3a4 <prvIdleTask+0x2c>)
 800f38e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f392:	601a      	str	r2, [r3, #0]
 800f394:	f3bf 8f4f 	dsb	sy
 800f398:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f39c:	e7f0      	b.n	800f380 <prvIdleTask+0x8>
 800f39e:	bf00      	nop
 800f3a0:	240007c4 	.word	0x240007c4
 800f3a4:	e000ed04 	.word	0xe000ed04

0800f3a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b082      	sub	sp, #8
 800f3ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	607b      	str	r3, [r7, #4]
 800f3b2:	e00c      	b.n	800f3ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f3b4:	687a      	ldr	r2, [r7, #4]
 800f3b6:	4613      	mov	r3, r2
 800f3b8:	009b      	lsls	r3, r3, #2
 800f3ba:	4413      	add	r3, r2
 800f3bc:	009b      	lsls	r3, r3, #2
 800f3be:	4a12      	ldr	r2, [pc, #72]	@ (800f408 <prvInitialiseTaskLists+0x60>)
 800f3c0:	4413      	add	r3, r2
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7ff fb0b 	bl	800e9de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	607b      	str	r3, [r7, #4]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2b09      	cmp	r3, #9
 800f3d2:	d9ef      	bls.n	800f3b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f3d4:	480d      	ldr	r0, [pc, #52]	@ (800f40c <prvInitialiseTaskLists+0x64>)
 800f3d6:	f7ff fb02 	bl	800e9de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f3da:	480d      	ldr	r0, [pc, #52]	@ (800f410 <prvInitialiseTaskLists+0x68>)
 800f3dc:	f7ff faff 	bl	800e9de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f3e0:	480c      	ldr	r0, [pc, #48]	@ (800f414 <prvInitialiseTaskLists+0x6c>)
 800f3e2:	f7ff fafc 	bl	800e9de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f3e6:	480c      	ldr	r0, [pc, #48]	@ (800f418 <prvInitialiseTaskLists+0x70>)
 800f3e8:	f7ff faf9 	bl	800e9de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f3ec:	480b      	ldr	r0, [pc, #44]	@ (800f41c <prvInitialiseTaskLists+0x74>)
 800f3ee:	f7ff faf6 	bl	800e9de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f3f2:	4b0b      	ldr	r3, [pc, #44]	@ (800f420 <prvInitialiseTaskLists+0x78>)
 800f3f4:	4a05      	ldr	r2, [pc, #20]	@ (800f40c <prvInitialiseTaskLists+0x64>)
 800f3f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f3f8:	4b0a      	ldr	r3, [pc, #40]	@ (800f424 <prvInitialiseTaskLists+0x7c>)
 800f3fa:	4a05      	ldr	r2, [pc, #20]	@ (800f410 <prvInitialiseTaskLists+0x68>)
 800f3fc:	601a      	str	r2, [r3, #0]
}
 800f3fe:	bf00      	nop
 800f400:	3708      	adds	r7, #8
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
 800f406:	bf00      	nop
 800f408:	240007c4 	.word	0x240007c4
 800f40c:	2400088c 	.word	0x2400088c
 800f410:	240008a0 	.word	0x240008a0
 800f414:	240008bc 	.word	0x240008bc
 800f418:	240008d0 	.word	0x240008d0
 800f41c:	240008e8 	.word	0x240008e8
 800f420:	240008b4 	.word	0x240008b4
 800f424:	240008b8 	.word	0x240008b8

0800f428 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b082      	sub	sp, #8
 800f42c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f42e:	e019      	b.n	800f464 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f430:	f000 fc3a 	bl	800fca8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f434:	4b10      	ldr	r3, [pc, #64]	@ (800f478 <prvCheckTasksWaitingTermination+0x50>)
 800f436:	68db      	ldr	r3, [r3, #12]
 800f438:	68db      	ldr	r3, [r3, #12]
 800f43a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	3304      	adds	r3, #4
 800f440:	4618      	mov	r0, r3
 800f442:	f7ff fb56 	bl	800eaf2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f446:	4b0d      	ldr	r3, [pc, #52]	@ (800f47c <prvCheckTasksWaitingTermination+0x54>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	3b01      	subs	r3, #1
 800f44c:	4a0b      	ldr	r2, [pc, #44]	@ (800f47c <prvCheckTasksWaitingTermination+0x54>)
 800f44e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f450:	4b0b      	ldr	r3, [pc, #44]	@ (800f480 <prvCheckTasksWaitingTermination+0x58>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	3b01      	subs	r3, #1
 800f456:	4a0a      	ldr	r2, [pc, #40]	@ (800f480 <prvCheckTasksWaitingTermination+0x58>)
 800f458:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f45a:	f000 fc57 	bl	800fd0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f000 f810 	bl	800f484 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f464:	4b06      	ldr	r3, [pc, #24]	@ (800f480 <prvCheckTasksWaitingTermination+0x58>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d1e1      	bne.n	800f430 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f46c:	bf00      	nop
 800f46e:	bf00      	nop
 800f470:	3708      	adds	r7, #8
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	240008d0 	.word	0x240008d0
 800f47c:	240008fc 	.word	0x240008fc
 800f480:	240008e4 	.word	0x240008e4

0800f484 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f484:	b580      	push	{r7, lr}
 800f486:	b084      	sub	sp, #16
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	334c      	adds	r3, #76	@ 0x4c
 800f490:	4618      	mov	r0, r3
 800f492:	f001 fa1f 	bl	80108d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d108      	bne.n	800f4b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f000 fdef 	bl	8010088 <vPortFree>
				vPortFree( pxTCB );
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f000 fdec 	bl	8010088 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f4b0:	e019      	b.n	800f4e6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	d103      	bne.n	800f4c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f000 fde3 	bl	8010088 <vPortFree>
	}
 800f4c2:	e010      	b.n	800f4e6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f4ca:	2b02      	cmp	r3, #2
 800f4cc:	d00b      	beq.n	800f4e6 <prvDeleteTCB+0x62>
	__asm volatile
 800f4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4d2:	f383 8811 	msr	BASEPRI, r3
 800f4d6:	f3bf 8f6f 	isb	sy
 800f4da:	f3bf 8f4f 	dsb	sy
 800f4de:	60fb      	str	r3, [r7, #12]
}
 800f4e0:	bf00      	nop
 800f4e2:	bf00      	nop
 800f4e4:	e7fd      	b.n	800f4e2 <prvDeleteTCB+0x5e>
	}
 800f4e6:	bf00      	nop
 800f4e8:	3710      	adds	r7, #16
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
	...

0800f4f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b083      	sub	sp, #12
 800f4f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f4f6:	4b0c      	ldr	r3, [pc, #48]	@ (800f528 <prvResetNextTaskUnblockTime+0x38>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d104      	bne.n	800f50a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f500:	4b0a      	ldr	r3, [pc, #40]	@ (800f52c <prvResetNextTaskUnblockTime+0x3c>)
 800f502:	f04f 32ff 	mov.w	r2, #4294967295
 800f506:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f508:	e008      	b.n	800f51c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f50a:	4b07      	ldr	r3, [pc, #28]	@ (800f528 <prvResetNextTaskUnblockTime+0x38>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	68db      	ldr	r3, [r3, #12]
 800f510:	68db      	ldr	r3, [r3, #12]
 800f512:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	685b      	ldr	r3, [r3, #4]
 800f518:	4a04      	ldr	r2, [pc, #16]	@ (800f52c <prvResetNextTaskUnblockTime+0x3c>)
 800f51a:	6013      	str	r3, [r2, #0]
}
 800f51c:	bf00      	nop
 800f51e:	370c      	adds	r7, #12
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	4770      	bx	lr
 800f528:	240008b4 	.word	0x240008b4
 800f52c:	2400091c 	.word	0x2400091c

0800f530 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f530:	b580      	push	{r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f53a:	f000 fbb5 	bl	800fca8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f53e:	4b20      	ldr	r3, [pc, #128]	@ (800f5c0 <ulTaskNotifyTake+0x90>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f546:	2b00      	cmp	r3, #0
 800f548:	d113      	bne.n	800f572 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f54a:	4b1d      	ldr	r3, [pc, #116]	@ (800f5c0 <ulTaskNotifyTake+0x90>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	2201      	movs	r2, #1
 800f550:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d00b      	beq.n	800f572 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f55a:	2101      	movs	r1, #1
 800f55c:	6838      	ldr	r0, [r7, #0]
 800f55e:	f000 fa0f 	bl	800f980 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f562:	4b18      	ldr	r3, [pc, #96]	@ (800f5c4 <ulTaskNotifyTake+0x94>)
 800f564:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f568:	601a      	str	r2, [r3, #0]
 800f56a:	f3bf 8f4f 	dsb	sy
 800f56e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f572:	f000 fbcb 	bl	800fd0c <vPortExitCritical>

		taskENTER_CRITICAL();
 800f576:	f000 fb97 	bl	800fca8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f57a:	4b11      	ldr	r3, [pc, #68]	@ (800f5c0 <ulTaskNotifyTake+0x90>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f582:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d00e      	beq.n	800f5a8 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d005      	beq.n	800f59c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f590:	4b0b      	ldr	r3, [pc, #44]	@ (800f5c0 <ulTaskNotifyTake+0x90>)
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	2200      	movs	r2, #0
 800f596:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800f59a:	e005      	b.n	800f5a8 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800f59c:	4b08      	ldr	r3, [pc, #32]	@ (800f5c0 <ulTaskNotifyTake+0x90>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	68fa      	ldr	r2, [r7, #12]
 800f5a2:	3a01      	subs	r2, #1
 800f5a4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f5a8:	4b05      	ldr	r3, [pc, #20]	@ (800f5c0 <ulTaskNotifyTake+0x90>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 800f5b2:	f000 fbab 	bl	800fd0c <vPortExitCritical>

		return ulReturn;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
	}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3710      	adds	r7, #16
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}
 800f5c0:	240007c0 	.word	0x240007c0
 800f5c4:	e000ed04 	.word	0xe000ed04

0800f5c8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b086      	sub	sp, #24
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	607a      	str	r2, [r7, #4]
 800f5d4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f5d6:	f000 fb67 	bl	800fca8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f5da:	4b29      	ldr	r3, [pc, #164]	@ (800f680 <xTaskNotifyWait+0xb8>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800f5e2:	b2db      	uxtb	r3, r3
 800f5e4:	2b02      	cmp	r3, #2
 800f5e6:	d01c      	beq.n	800f622 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f5e8:	4b25      	ldr	r3, [pc, #148]	@ (800f680 <xTaskNotifyWait+0xb8>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 800f5f0:	68fa      	ldr	r2, [r7, #12]
 800f5f2:	43d2      	mvns	r2, r2
 800f5f4:	400a      	ands	r2, r1
 800f5f6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f5fa:	4b21      	ldr	r3, [pc, #132]	@ (800f680 <xTaskNotifyWait+0xb8>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	2201      	movs	r2, #1
 800f600:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d00b      	beq.n	800f622 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f60a:	2101      	movs	r1, #1
 800f60c:	6838      	ldr	r0, [r7, #0]
 800f60e:	f000 f9b7 	bl	800f980 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f612:	4b1c      	ldr	r3, [pc, #112]	@ (800f684 <xTaskNotifyWait+0xbc>)
 800f614:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f618:	601a      	str	r2, [r3, #0]
 800f61a:	f3bf 8f4f 	dsb	sy
 800f61e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f622:	f000 fb73 	bl	800fd0c <vPortExitCritical>

		taskENTER_CRITICAL();
 800f626:	f000 fb3f 	bl	800fca8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d005      	beq.n	800f63c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f630:	4b13      	ldr	r3, [pc, #76]	@ (800f680 <xTaskNotifyWait+0xb8>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f63c:	4b10      	ldr	r3, [pc, #64]	@ (800f680 <xTaskNotifyWait+0xb8>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800f644:	b2db      	uxtb	r3, r3
 800f646:	2b02      	cmp	r3, #2
 800f648:	d002      	beq.n	800f650 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f64a:	2300      	movs	r3, #0
 800f64c:	617b      	str	r3, [r7, #20]
 800f64e:	e00a      	b.n	800f666 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f650:	4b0b      	ldr	r3, [pc, #44]	@ (800f680 <xTaskNotifyWait+0xb8>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 800f658:	68ba      	ldr	r2, [r7, #8]
 800f65a:	43d2      	mvns	r2, r2
 800f65c:	400a      	ands	r2, r1
 800f65e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 800f662:	2301      	movs	r3, #1
 800f664:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f666:	4b06      	ldr	r3, [pc, #24]	@ (800f680 <xTaskNotifyWait+0xb8>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	2200      	movs	r2, #0
 800f66c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 800f670:	f000 fb4c 	bl	800fd0c <vPortExitCritical>

		return xReturn;
 800f674:	697b      	ldr	r3, [r7, #20]
	}
 800f676:	4618      	mov	r0, r3
 800f678:	3718      	adds	r7, #24
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	240007c0 	.word	0x240007c0
 800f684:	e000ed04 	.word	0xe000ed04

0800f688 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b08e      	sub	sp, #56	@ 0x38
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	60b9      	str	r1, [r7, #8]
 800f692:	603b      	str	r3, [r7, #0]
 800f694:	4613      	mov	r3, r2
 800f696:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800f698:	2301      	movs	r3, #1
 800f69a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d10b      	bne.n	800f6ba <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800f6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6a6:	f383 8811 	msr	BASEPRI, r3
 800f6aa:	f3bf 8f6f 	isb	sy
 800f6ae:	f3bf 8f4f 	dsb	sy
 800f6b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f6b4:	bf00      	nop
 800f6b6:	bf00      	nop
 800f6b8:	e7fd      	b.n	800f6b6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f6ba:	f000 fbd5 	bl	800fe68 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f6c2:	f3ef 8211 	mrs	r2, BASEPRI
 800f6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6ca:	f383 8811 	msr	BASEPRI, r3
 800f6ce:	f3bf 8f6f 	isb	sy
 800f6d2:	f3bf 8f4f 	dsb	sy
 800f6d6:	623a      	str	r2, [r7, #32]
 800f6d8:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f6da:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f6dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d004      	beq.n	800f6ee <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6e6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6f0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800f6f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6fa:	2202      	movs	r2, #2
 800f6fc:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 800f700:	79fb      	ldrb	r3, [r7, #7]
 800f702:	2b04      	cmp	r3, #4
 800f704:	d82e      	bhi.n	800f764 <xTaskGenericNotifyFromISR+0xdc>
 800f706:	a201      	add	r2, pc, #4	@ (adr r2, 800f70c <xTaskGenericNotifyFromISR+0x84>)
 800f708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f70c:	0800f789 	.word	0x0800f789
 800f710:	0800f721 	.word	0x0800f721
 800f714:	0800f733 	.word	0x0800f733
 800f718:	0800f743 	.word	0x0800f743
 800f71c:	0800f74d 	.word	0x0800f74d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f722:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	431a      	orrs	r2, r3
 800f72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f72c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800f730:	e02d      	b.n	800f78e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f734:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f738:	1c5a      	adds	r2, r3, #1
 800f73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f73c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800f740:	e025      	b.n	800f78e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f744:	68ba      	ldr	r2, [r7, #8]
 800f746:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800f74a:	e020      	b.n	800f78e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f74c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f750:	2b02      	cmp	r3, #2
 800f752:	d004      	beq.n	800f75e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f756:	68ba      	ldr	r2, [r7, #8]
 800f758:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f75c:	e017      	b.n	800f78e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800f75e:	2300      	movs	r3, #0
 800f760:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800f762:	e014      	b.n	800f78e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f766:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f76e:	d00d      	beq.n	800f78c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800f770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f774:	f383 8811 	msr	BASEPRI, r3
 800f778:	f3bf 8f6f 	isb	sy
 800f77c:	f3bf 8f4f 	dsb	sy
 800f780:	61bb      	str	r3, [r7, #24]
}
 800f782:	bf00      	nop
 800f784:	bf00      	nop
 800f786:	e7fd      	b.n	800f784 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800f788:	bf00      	nop
 800f78a:	e000      	b.n	800f78e <xTaskGenericNotifyFromISR+0x106>
					break;
 800f78c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f78e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f792:	2b01      	cmp	r3, #1
 800f794:	d146      	bne.n	800f824 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d00b      	beq.n	800f7b6 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800f79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7a2:	f383 8811 	msr	BASEPRI, r3
 800f7a6:	f3bf 8f6f 	isb	sy
 800f7aa:	f3bf 8f4f 	dsb	sy
 800f7ae:	617b      	str	r3, [r7, #20]
}
 800f7b0:	bf00      	nop
 800f7b2:	bf00      	nop
 800f7b4:	e7fd      	b.n	800f7b2 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7b6:	4b21      	ldr	r3, [pc, #132]	@ (800f83c <xTaskGenericNotifyFromISR+0x1b4>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d11c      	bne.n	800f7f8 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7c0:	3304      	adds	r3, #4
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7ff f995 	bl	800eaf2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	409a      	lsls	r2, r3
 800f7d0:	4b1b      	ldr	r3, [pc, #108]	@ (800f840 <xTaskGenericNotifyFromISR+0x1b8>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	4313      	orrs	r3, r2
 800f7d6:	4a1a      	ldr	r2, [pc, #104]	@ (800f840 <xTaskGenericNotifyFromISR+0x1b8>)
 800f7d8:	6013      	str	r3, [r2, #0]
 800f7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7de:	4613      	mov	r3, r2
 800f7e0:	009b      	lsls	r3, r3, #2
 800f7e2:	4413      	add	r3, r2
 800f7e4:	009b      	lsls	r3, r3, #2
 800f7e6:	4a17      	ldr	r2, [pc, #92]	@ (800f844 <xTaskGenericNotifyFromISR+0x1bc>)
 800f7e8:	441a      	add	r2, r3
 800f7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ec:	3304      	adds	r3, #4
 800f7ee:	4619      	mov	r1, r3
 800f7f0:	4610      	mov	r0, r2
 800f7f2:	f7ff f921 	bl	800ea38 <vListInsertEnd>
 800f7f6:	e005      	b.n	800f804 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7fa:	3318      	adds	r3, #24
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	4812      	ldr	r0, [pc, #72]	@ (800f848 <xTaskGenericNotifyFromISR+0x1c0>)
 800f800:	f7ff f91a 	bl	800ea38 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f808:	4b10      	ldr	r3, [pc, #64]	@ (800f84c <xTaskGenericNotifyFromISR+0x1c4>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f80e:	429a      	cmp	r2, r3
 800f810:	d908      	bls.n	800f824 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f814:	2b00      	cmp	r3, #0
 800f816:	d002      	beq.n	800f81e <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f818:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f81a:	2201      	movs	r2, #1
 800f81c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f81e:	4b0c      	ldr	r3, [pc, #48]	@ (800f850 <xTaskGenericNotifyFromISR+0x1c8>)
 800f820:	2201      	movs	r2, #1
 800f822:	601a      	str	r2, [r3, #0]
 800f824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f826:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f828:	693b      	ldr	r3, [r7, #16]
 800f82a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f82e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800f832:	4618      	mov	r0, r3
 800f834:	3738      	adds	r7, #56	@ 0x38
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}
 800f83a:	bf00      	nop
 800f83c:	24000924 	.word	0x24000924
 800f840:	24000904 	.word	0x24000904
 800f844:	240007c4 	.word	0x240007c4
 800f848:	240008bc 	.word	0x240008bc
 800f84c:	240007c0 	.word	0x240007c0
 800f850:	24000910 	.word	0x24000910

0800f854 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f854:	b580      	push	{r7, lr}
 800f856:	b08a      	sub	sp, #40	@ 0x28
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d10b      	bne.n	800f87c <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800f864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f868:	f383 8811 	msr	BASEPRI, r3
 800f86c:	f3bf 8f6f 	isb	sy
 800f870:	f3bf 8f4f 	dsb	sy
 800f874:	61bb      	str	r3, [r7, #24]
}
 800f876:	bf00      	nop
 800f878:	bf00      	nop
 800f87a:	e7fd      	b.n	800f878 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f87c:	f000 faf4 	bl	800fe68 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800f884:	f3ef 8211 	mrs	r2, BASEPRI
 800f888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f88c:	f383 8811 	msr	BASEPRI, r3
 800f890:	f3bf 8f6f 	isb	sy
 800f894:	f3bf 8f4f 	dsb	sy
 800f898:	617a      	str	r2, [r7, #20]
 800f89a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f89c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f89e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8a2:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800f8a6:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8aa:	2202      	movs	r2, #2
 800f8ac:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800f8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f8b6:	1c5a      	adds	r2, r3, #1
 800f8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8ba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f8be:	7ffb      	ldrb	r3, [r7, #31]
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	d146      	bne.n	800f952 <vTaskNotifyGiveFromISR+0xfe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d00b      	beq.n	800f8e4 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800f8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8d0:	f383 8811 	msr	BASEPRI, r3
 800f8d4:	f3bf 8f6f 	isb	sy
 800f8d8:	f3bf 8f4f 	dsb	sy
 800f8dc:	60fb      	str	r3, [r7, #12]
}
 800f8de:	bf00      	nop
 800f8e0:	bf00      	nop
 800f8e2:	e7fd      	b.n	800f8e0 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f8e4:	4b20      	ldr	r3, [pc, #128]	@ (800f968 <vTaskNotifyGiveFromISR+0x114>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d11c      	bne.n	800f926 <vTaskNotifyGiveFromISR+0xd2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8ee:	3304      	adds	r3, #4
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7ff f8fe 	bl	800eaf2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8fa:	2201      	movs	r2, #1
 800f8fc:	409a      	lsls	r2, r3
 800f8fe:	4b1b      	ldr	r3, [pc, #108]	@ (800f96c <vTaskNotifyGiveFromISR+0x118>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	4313      	orrs	r3, r2
 800f904:	4a19      	ldr	r2, [pc, #100]	@ (800f96c <vTaskNotifyGiveFromISR+0x118>)
 800f906:	6013      	str	r3, [r2, #0]
 800f908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f90a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f90c:	4613      	mov	r3, r2
 800f90e:	009b      	lsls	r3, r3, #2
 800f910:	4413      	add	r3, r2
 800f912:	009b      	lsls	r3, r3, #2
 800f914:	4a16      	ldr	r2, [pc, #88]	@ (800f970 <vTaskNotifyGiveFromISR+0x11c>)
 800f916:	441a      	add	r2, r3
 800f918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f91a:	3304      	adds	r3, #4
 800f91c:	4619      	mov	r1, r3
 800f91e:	4610      	mov	r0, r2
 800f920:	f7ff f88a 	bl	800ea38 <vListInsertEnd>
 800f924:	e005      	b.n	800f932 <vTaskNotifyGiveFromISR+0xde>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f928:	3318      	adds	r3, #24
 800f92a:	4619      	mov	r1, r3
 800f92c:	4811      	ldr	r0, [pc, #68]	@ (800f974 <vTaskNotifyGiveFromISR+0x120>)
 800f92e:	f7ff f883 	bl	800ea38 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f936:	4b10      	ldr	r3, [pc, #64]	@ (800f978 <vTaskNotifyGiveFromISR+0x124>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f93c:	429a      	cmp	r2, r3
 800f93e:	d908      	bls.n	800f952 <vTaskNotifyGiveFromISR+0xfe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d002      	beq.n	800f94c <vTaskNotifyGiveFromISR+0xf8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	2201      	movs	r2, #1
 800f94a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f94c:	4b0b      	ldr	r3, [pc, #44]	@ (800f97c <vTaskNotifyGiveFromISR+0x128>)
 800f94e:	2201      	movs	r2, #1
 800f950:	601a      	str	r2, [r3, #0]
 800f952:	6a3b      	ldr	r3, [r7, #32]
 800f954:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	f383 8811 	msr	BASEPRI, r3
}
 800f95c:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800f95e:	bf00      	nop
 800f960:	3728      	adds	r7, #40	@ 0x28
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	24000924 	.word	0x24000924
 800f96c:	24000904 	.word	0x24000904
 800f970:	240007c4 	.word	0x240007c4
 800f974:	240008bc 	.word	0x240008bc
 800f978:	240007c0 	.word	0x240007c0
 800f97c:	24000910 	.word	0x24000910

0800f980 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f98a:	4b29      	ldr	r3, [pc, #164]	@ (800fa30 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f990:	4b28      	ldr	r3, [pc, #160]	@ (800fa34 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	3304      	adds	r3, #4
 800f996:	4618      	mov	r0, r3
 800f998:	f7ff f8ab 	bl	800eaf2 <uxListRemove>
 800f99c:	4603      	mov	r3, r0
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d10b      	bne.n	800f9ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f9a2:	4b24      	ldr	r3, [pc, #144]	@ (800fa34 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	fa02 f303 	lsl.w	r3, r2, r3
 800f9ae:	43da      	mvns	r2, r3
 800f9b0:	4b21      	ldr	r3, [pc, #132]	@ (800fa38 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	4013      	ands	r3, r2
 800f9b6:	4a20      	ldr	r2, [pc, #128]	@ (800fa38 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f9b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9c0:	d10a      	bne.n	800f9d8 <prvAddCurrentTaskToDelayedList+0x58>
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d007      	beq.n	800f9d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f9c8:	4b1a      	ldr	r3, [pc, #104]	@ (800fa34 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	3304      	adds	r3, #4
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	481a      	ldr	r0, [pc, #104]	@ (800fa3c <prvAddCurrentTaskToDelayedList+0xbc>)
 800f9d2:	f7ff f831 	bl	800ea38 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f9d6:	e026      	b.n	800fa26 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f9d8:	68fa      	ldr	r2, [r7, #12]
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	4413      	add	r3, r2
 800f9de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f9e0:	4b14      	ldr	r3, [pc, #80]	@ (800fa34 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	68ba      	ldr	r2, [r7, #8]
 800f9e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f9e8:	68ba      	ldr	r2, [r7, #8]
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d209      	bcs.n	800fa04 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f9f0:	4b13      	ldr	r3, [pc, #76]	@ (800fa40 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f9f2:	681a      	ldr	r2, [r3, #0]
 800f9f4:	4b0f      	ldr	r3, [pc, #60]	@ (800fa34 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	3304      	adds	r3, #4
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	4610      	mov	r0, r2
 800f9fe:	f7ff f83f 	bl	800ea80 <vListInsert>
}
 800fa02:	e010      	b.n	800fa26 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa04:	4b0f      	ldr	r3, [pc, #60]	@ (800fa44 <prvAddCurrentTaskToDelayedList+0xc4>)
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	4b0a      	ldr	r3, [pc, #40]	@ (800fa34 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	3304      	adds	r3, #4
 800fa0e:	4619      	mov	r1, r3
 800fa10:	4610      	mov	r0, r2
 800fa12:	f7ff f835 	bl	800ea80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fa16:	4b0c      	ldr	r3, [pc, #48]	@ (800fa48 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	68ba      	ldr	r2, [r7, #8]
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d202      	bcs.n	800fa26 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800fa20:	4a09      	ldr	r2, [pc, #36]	@ (800fa48 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	6013      	str	r3, [r2, #0]
}
 800fa26:	bf00      	nop
 800fa28:	3710      	adds	r7, #16
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}
 800fa2e:	bf00      	nop
 800fa30:	24000900 	.word	0x24000900
 800fa34:	240007c0 	.word	0x240007c0
 800fa38:	24000904 	.word	0x24000904
 800fa3c:	240008e8 	.word	0x240008e8
 800fa40:	240008b8 	.word	0x240008b8
 800fa44:	240008b4 	.word	0x240008b4
 800fa48:	2400091c 	.word	0x2400091c

0800fa4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b085      	sub	sp, #20
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	60f8      	str	r0, [r7, #12]
 800fa54:	60b9      	str	r1, [r7, #8]
 800fa56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	3b04      	subs	r3, #4
 800fa5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fa64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	3b04      	subs	r3, #4
 800fa6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	f023 0201 	bic.w	r2, r3, #1
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	3b04      	subs	r3, #4
 800fa7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fa7c:	4a0c      	ldr	r2, [pc, #48]	@ (800fab0 <pxPortInitialiseStack+0x64>)
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	3b14      	subs	r3, #20
 800fa86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fa88:	687a      	ldr	r2, [r7, #4]
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	3b04      	subs	r3, #4
 800fa92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	f06f 0202 	mvn.w	r2, #2
 800fa9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	3b20      	subs	r3, #32
 800faa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800faa2:	68fb      	ldr	r3, [r7, #12]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3714      	adds	r7, #20
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr
 800fab0:	0800fab5 	.word	0x0800fab5

0800fab4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fab4:	b480      	push	{r7}
 800fab6:	b085      	sub	sp, #20
 800fab8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800faba:	2300      	movs	r3, #0
 800fabc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fabe:	4b13      	ldr	r3, [pc, #76]	@ (800fb0c <prvTaskExitError+0x58>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fac6:	d00b      	beq.n	800fae0 <prvTaskExitError+0x2c>
	__asm volatile
 800fac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800facc:	f383 8811 	msr	BASEPRI, r3
 800fad0:	f3bf 8f6f 	isb	sy
 800fad4:	f3bf 8f4f 	dsb	sy
 800fad8:	60fb      	str	r3, [r7, #12]
}
 800fada:	bf00      	nop
 800fadc:	bf00      	nop
 800fade:	e7fd      	b.n	800fadc <prvTaskExitError+0x28>
	__asm volatile
 800fae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fae4:	f383 8811 	msr	BASEPRI, r3
 800fae8:	f3bf 8f6f 	isb	sy
 800faec:	f3bf 8f4f 	dsb	sy
 800faf0:	60bb      	str	r3, [r7, #8]
}
 800faf2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800faf4:	bf00      	nop
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d0fc      	beq.n	800faf6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fafc:	bf00      	nop
 800fafe:	bf00      	nop
 800fb00:	3714      	adds	r7, #20
 800fb02:	46bd      	mov	sp, r7
 800fb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb08:	4770      	bx	lr
 800fb0a:	bf00      	nop
 800fb0c:	24000010 	.word	0x24000010

0800fb10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fb10:	4b07      	ldr	r3, [pc, #28]	@ (800fb30 <pxCurrentTCBConst2>)
 800fb12:	6819      	ldr	r1, [r3, #0]
 800fb14:	6808      	ldr	r0, [r1, #0]
 800fb16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb1a:	f380 8809 	msr	PSP, r0
 800fb1e:	f3bf 8f6f 	isb	sy
 800fb22:	f04f 0000 	mov.w	r0, #0
 800fb26:	f380 8811 	msr	BASEPRI, r0
 800fb2a:	4770      	bx	lr
 800fb2c:	f3af 8000 	nop.w

0800fb30 <pxCurrentTCBConst2>:
 800fb30:	240007c0 	.word	0x240007c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fb34:	bf00      	nop
 800fb36:	bf00      	nop

0800fb38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fb38:	4808      	ldr	r0, [pc, #32]	@ (800fb5c <prvPortStartFirstTask+0x24>)
 800fb3a:	6800      	ldr	r0, [r0, #0]
 800fb3c:	6800      	ldr	r0, [r0, #0]
 800fb3e:	f380 8808 	msr	MSP, r0
 800fb42:	f04f 0000 	mov.w	r0, #0
 800fb46:	f380 8814 	msr	CONTROL, r0
 800fb4a:	b662      	cpsie	i
 800fb4c:	b661      	cpsie	f
 800fb4e:	f3bf 8f4f 	dsb	sy
 800fb52:	f3bf 8f6f 	isb	sy
 800fb56:	df00      	svc	0
 800fb58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fb5a:	bf00      	nop
 800fb5c:	e000ed08 	.word	0xe000ed08

0800fb60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b086      	sub	sp, #24
 800fb64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fb66:	4b47      	ldr	r3, [pc, #284]	@ (800fc84 <xPortStartScheduler+0x124>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	4a47      	ldr	r2, [pc, #284]	@ (800fc88 <xPortStartScheduler+0x128>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d10b      	bne.n	800fb88 <xPortStartScheduler+0x28>
	__asm volatile
 800fb70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb74:	f383 8811 	msr	BASEPRI, r3
 800fb78:	f3bf 8f6f 	isb	sy
 800fb7c:	f3bf 8f4f 	dsb	sy
 800fb80:	60fb      	str	r3, [r7, #12]
}
 800fb82:	bf00      	nop
 800fb84:	bf00      	nop
 800fb86:	e7fd      	b.n	800fb84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fb88:	4b3e      	ldr	r3, [pc, #248]	@ (800fc84 <xPortStartScheduler+0x124>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	4a3f      	ldr	r2, [pc, #252]	@ (800fc8c <xPortStartScheduler+0x12c>)
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	d10b      	bne.n	800fbaa <xPortStartScheduler+0x4a>
	__asm volatile
 800fb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb96:	f383 8811 	msr	BASEPRI, r3
 800fb9a:	f3bf 8f6f 	isb	sy
 800fb9e:	f3bf 8f4f 	dsb	sy
 800fba2:	613b      	str	r3, [r7, #16]
}
 800fba4:	bf00      	nop
 800fba6:	bf00      	nop
 800fba8:	e7fd      	b.n	800fba6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fbaa:	4b39      	ldr	r3, [pc, #228]	@ (800fc90 <xPortStartScheduler+0x130>)
 800fbac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	22ff      	movs	r2, #255	@ 0xff
 800fbba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	b2db      	uxtb	r3, r3
 800fbc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fbc4:	78fb      	ldrb	r3, [r7, #3]
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fbcc:	b2da      	uxtb	r2, r3
 800fbce:	4b31      	ldr	r3, [pc, #196]	@ (800fc94 <xPortStartScheduler+0x134>)
 800fbd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fbd2:	4b31      	ldr	r3, [pc, #196]	@ (800fc98 <xPortStartScheduler+0x138>)
 800fbd4:	2207      	movs	r2, #7
 800fbd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fbd8:	e009      	b.n	800fbee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fbda:	4b2f      	ldr	r3, [pc, #188]	@ (800fc98 <xPortStartScheduler+0x138>)
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	3b01      	subs	r3, #1
 800fbe0:	4a2d      	ldr	r2, [pc, #180]	@ (800fc98 <xPortStartScheduler+0x138>)
 800fbe2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fbe4:	78fb      	ldrb	r3, [r7, #3]
 800fbe6:	b2db      	uxtb	r3, r3
 800fbe8:	005b      	lsls	r3, r3, #1
 800fbea:	b2db      	uxtb	r3, r3
 800fbec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fbee:	78fb      	ldrb	r3, [r7, #3]
 800fbf0:	b2db      	uxtb	r3, r3
 800fbf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fbf6:	2b80      	cmp	r3, #128	@ 0x80
 800fbf8:	d0ef      	beq.n	800fbda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fbfa:	4b27      	ldr	r3, [pc, #156]	@ (800fc98 <xPortStartScheduler+0x138>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	f1c3 0307 	rsb	r3, r3, #7
 800fc02:	2b04      	cmp	r3, #4
 800fc04:	d00b      	beq.n	800fc1e <xPortStartScheduler+0xbe>
	__asm volatile
 800fc06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc0a:	f383 8811 	msr	BASEPRI, r3
 800fc0e:	f3bf 8f6f 	isb	sy
 800fc12:	f3bf 8f4f 	dsb	sy
 800fc16:	60bb      	str	r3, [r7, #8]
}
 800fc18:	bf00      	nop
 800fc1a:	bf00      	nop
 800fc1c:	e7fd      	b.n	800fc1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fc1e:	4b1e      	ldr	r3, [pc, #120]	@ (800fc98 <xPortStartScheduler+0x138>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	021b      	lsls	r3, r3, #8
 800fc24:	4a1c      	ldr	r2, [pc, #112]	@ (800fc98 <xPortStartScheduler+0x138>)
 800fc26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fc28:	4b1b      	ldr	r3, [pc, #108]	@ (800fc98 <xPortStartScheduler+0x138>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fc30:	4a19      	ldr	r2, [pc, #100]	@ (800fc98 <xPortStartScheduler+0x138>)
 800fc32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	b2da      	uxtb	r2, r3
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fc3c:	4b17      	ldr	r3, [pc, #92]	@ (800fc9c <xPortStartScheduler+0x13c>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	4a16      	ldr	r2, [pc, #88]	@ (800fc9c <xPortStartScheduler+0x13c>)
 800fc42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fc46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fc48:	4b14      	ldr	r3, [pc, #80]	@ (800fc9c <xPortStartScheduler+0x13c>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	4a13      	ldr	r2, [pc, #76]	@ (800fc9c <xPortStartScheduler+0x13c>)
 800fc4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fc52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fc54:	f000 f8da 	bl	800fe0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fc58:	4b11      	ldr	r3, [pc, #68]	@ (800fca0 <xPortStartScheduler+0x140>)
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fc5e:	f000 f8f9 	bl	800fe54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fc62:	4b10      	ldr	r3, [pc, #64]	@ (800fca4 <xPortStartScheduler+0x144>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	4a0f      	ldr	r2, [pc, #60]	@ (800fca4 <xPortStartScheduler+0x144>)
 800fc68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fc6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fc6e:	f7ff ff63 	bl	800fb38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fc72:	f7ff fb1d 	bl	800f2b0 <vTaskSwitchContext>
	prvTaskExitError();
 800fc76:	f7ff ff1d 	bl	800fab4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fc7a:	2300      	movs	r3, #0
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3718      	adds	r7, #24
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	e000ed00 	.word	0xe000ed00
 800fc88:	410fc271 	.word	0x410fc271
 800fc8c:	410fc270 	.word	0x410fc270
 800fc90:	e000e400 	.word	0xe000e400
 800fc94:	24000928 	.word	0x24000928
 800fc98:	2400092c 	.word	0x2400092c
 800fc9c:	e000ed20 	.word	0xe000ed20
 800fca0:	24000010 	.word	0x24000010
 800fca4:	e000ef34 	.word	0xe000ef34

0800fca8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fca8:	b480      	push	{r7}
 800fcaa:	b083      	sub	sp, #12
 800fcac:	af00      	add	r7, sp, #0
	__asm volatile
 800fcae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcb2:	f383 8811 	msr	BASEPRI, r3
 800fcb6:	f3bf 8f6f 	isb	sy
 800fcba:	f3bf 8f4f 	dsb	sy
 800fcbe:	607b      	str	r3, [r7, #4]
}
 800fcc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fcc2:	4b10      	ldr	r3, [pc, #64]	@ (800fd04 <vPortEnterCritical+0x5c>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	4a0e      	ldr	r2, [pc, #56]	@ (800fd04 <vPortEnterCritical+0x5c>)
 800fcca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fccc:	4b0d      	ldr	r3, [pc, #52]	@ (800fd04 <vPortEnterCritical+0x5c>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	2b01      	cmp	r3, #1
 800fcd2:	d110      	bne.n	800fcf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fcd4:	4b0c      	ldr	r3, [pc, #48]	@ (800fd08 <vPortEnterCritical+0x60>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d00b      	beq.n	800fcf6 <vPortEnterCritical+0x4e>
	__asm volatile
 800fcde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fce2:	f383 8811 	msr	BASEPRI, r3
 800fce6:	f3bf 8f6f 	isb	sy
 800fcea:	f3bf 8f4f 	dsb	sy
 800fcee:	603b      	str	r3, [r7, #0]
}
 800fcf0:	bf00      	nop
 800fcf2:	bf00      	nop
 800fcf4:	e7fd      	b.n	800fcf2 <vPortEnterCritical+0x4a>
	}
}
 800fcf6:	bf00      	nop
 800fcf8:	370c      	adds	r7, #12
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd00:	4770      	bx	lr
 800fd02:	bf00      	nop
 800fd04:	24000010 	.word	0x24000010
 800fd08:	e000ed04 	.word	0xe000ed04

0800fd0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	b083      	sub	sp, #12
 800fd10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fd12:	4b12      	ldr	r3, [pc, #72]	@ (800fd5c <vPortExitCritical+0x50>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d10b      	bne.n	800fd32 <vPortExitCritical+0x26>
	__asm volatile
 800fd1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd1e:	f383 8811 	msr	BASEPRI, r3
 800fd22:	f3bf 8f6f 	isb	sy
 800fd26:	f3bf 8f4f 	dsb	sy
 800fd2a:	607b      	str	r3, [r7, #4]
}
 800fd2c:	bf00      	nop
 800fd2e:	bf00      	nop
 800fd30:	e7fd      	b.n	800fd2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fd32:	4b0a      	ldr	r3, [pc, #40]	@ (800fd5c <vPortExitCritical+0x50>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	3b01      	subs	r3, #1
 800fd38:	4a08      	ldr	r2, [pc, #32]	@ (800fd5c <vPortExitCritical+0x50>)
 800fd3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fd3c:	4b07      	ldr	r3, [pc, #28]	@ (800fd5c <vPortExitCritical+0x50>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d105      	bne.n	800fd50 <vPortExitCritical+0x44>
 800fd44:	2300      	movs	r3, #0
 800fd46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	f383 8811 	msr	BASEPRI, r3
}
 800fd4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fd50:	bf00      	nop
 800fd52:	370c      	adds	r7, #12
 800fd54:	46bd      	mov	sp, r7
 800fd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5a:	4770      	bx	lr
 800fd5c:	24000010 	.word	0x24000010

0800fd60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fd60:	f3ef 8009 	mrs	r0, PSP
 800fd64:	f3bf 8f6f 	isb	sy
 800fd68:	4b15      	ldr	r3, [pc, #84]	@ (800fdc0 <pxCurrentTCBConst>)
 800fd6a:	681a      	ldr	r2, [r3, #0]
 800fd6c:	f01e 0f10 	tst.w	lr, #16
 800fd70:	bf08      	it	eq
 800fd72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fd76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd7a:	6010      	str	r0, [r2, #0]
 800fd7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fd80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fd84:	f380 8811 	msr	BASEPRI, r0
 800fd88:	f3bf 8f4f 	dsb	sy
 800fd8c:	f3bf 8f6f 	isb	sy
 800fd90:	f7ff fa8e 	bl	800f2b0 <vTaskSwitchContext>
 800fd94:	f04f 0000 	mov.w	r0, #0
 800fd98:	f380 8811 	msr	BASEPRI, r0
 800fd9c:	bc09      	pop	{r0, r3}
 800fd9e:	6819      	ldr	r1, [r3, #0]
 800fda0:	6808      	ldr	r0, [r1, #0]
 800fda2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fda6:	f01e 0f10 	tst.w	lr, #16
 800fdaa:	bf08      	it	eq
 800fdac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fdb0:	f380 8809 	msr	PSP, r0
 800fdb4:	f3bf 8f6f 	isb	sy
 800fdb8:	4770      	bx	lr
 800fdba:	bf00      	nop
 800fdbc:	f3af 8000 	nop.w

0800fdc0 <pxCurrentTCBConst>:
 800fdc0:	240007c0 	.word	0x240007c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fdc4:	bf00      	nop
 800fdc6:	bf00      	nop

0800fdc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b082      	sub	sp, #8
 800fdcc:	af00      	add	r7, sp, #0
	__asm volatile
 800fdce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdd2:	f383 8811 	msr	BASEPRI, r3
 800fdd6:	f3bf 8f6f 	isb	sy
 800fdda:	f3bf 8f4f 	dsb	sy
 800fdde:	607b      	str	r3, [r7, #4]
}
 800fde0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fde2:	f7ff f9ab 	bl	800f13c <xTaskIncrementTick>
 800fde6:	4603      	mov	r3, r0
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d003      	beq.n	800fdf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fdec:	4b06      	ldr	r3, [pc, #24]	@ (800fe08 <SysTick_Handler+0x40>)
 800fdee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fdf2:	601a      	str	r2, [r3, #0]
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	f383 8811 	msr	BASEPRI, r3
}
 800fdfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fe00:	bf00      	nop
 800fe02:	3708      	adds	r7, #8
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	e000ed04 	.word	0xe000ed04

0800fe0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fe10:	4b0b      	ldr	r3, [pc, #44]	@ (800fe40 <vPortSetupTimerInterrupt+0x34>)
 800fe12:	2200      	movs	r2, #0
 800fe14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fe16:	4b0b      	ldr	r3, [pc, #44]	@ (800fe44 <vPortSetupTimerInterrupt+0x38>)
 800fe18:	2200      	movs	r2, #0
 800fe1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe1c:	4b0a      	ldr	r3, [pc, #40]	@ (800fe48 <vPortSetupTimerInterrupt+0x3c>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	4a0a      	ldr	r2, [pc, #40]	@ (800fe4c <vPortSetupTimerInterrupt+0x40>)
 800fe22:	fba2 2303 	umull	r2, r3, r2, r3
 800fe26:	099b      	lsrs	r3, r3, #6
 800fe28:	4a09      	ldr	r2, [pc, #36]	@ (800fe50 <vPortSetupTimerInterrupt+0x44>)
 800fe2a:	3b01      	subs	r3, #1
 800fe2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fe2e:	4b04      	ldr	r3, [pc, #16]	@ (800fe40 <vPortSetupTimerInterrupt+0x34>)
 800fe30:	2207      	movs	r2, #7
 800fe32:	601a      	str	r2, [r3, #0]
}
 800fe34:	bf00      	nop
 800fe36:	46bd      	mov	sp, r7
 800fe38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3c:	4770      	bx	lr
 800fe3e:	bf00      	nop
 800fe40:	e000e010 	.word	0xe000e010
 800fe44:	e000e018 	.word	0xe000e018
 800fe48:	24000000 	.word	0x24000000
 800fe4c:	10624dd3 	.word	0x10624dd3
 800fe50:	e000e014 	.word	0xe000e014

0800fe54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fe54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fe64 <vPortEnableVFP+0x10>
 800fe58:	6801      	ldr	r1, [r0, #0]
 800fe5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fe5e:	6001      	str	r1, [r0, #0]
 800fe60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fe62:	bf00      	nop
 800fe64:	e000ed88 	.word	0xe000ed88

0800fe68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fe68:	b480      	push	{r7}
 800fe6a:	b085      	sub	sp, #20
 800fe6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fe6e:	f3ef 8305 	mrs	r3, IPSR
 800fe72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2b0f      	cmp	r3, #15
 800fe78:	d915      	bls.n	800fea6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fe7a:	4a18      	ldr	r2, [pc, #96]	@ (800fedc <vPortValidateInterruptPriority+0x74>)
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	4413      	add	r3, r2
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fe84:	4b16      	ldr	r3, [pc, #88]	@ (800fee0 <vPortValidateInterruptPriority+0x78>)
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	7afa      	ldrb	r2, [r7, #11]
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	d20b      	bcs.n	800fea6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fe8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe92:	f383 8811 	msr	BASEPRI, r3
 800fe96:	f3bf 8f6f 	isb	sy
 800fe9a:	f3bf 8f4f 	dsb	sy
 800fe9e:	607b      	str	r3, [r7, #4]
}
 800fea0:	bf00      	nop
 800fea2:	bf00      	nop
 800fea4:	e7fd      	b.n	800fea2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fea6:	4b0f      	ldr	r3, [pc, #60]	@ (800fee4 <vPortValidateInterruptPriority+0x7c>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800feae:	4b0e      	ldr	r3, [pc, #56]	@ (800fee8 <vPortValidateInterruptPriority+0x80>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d90b      	bls.n	800fece <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800feb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feba:	f383 8811 	msr	BASEPRI, r3
 800febe:	f3bf 8f6f 	isb	sy
 800fec2:	f3bf 8f4f 	dsb	sy
 800fec6:	603b      	str	r3, [r7, #0]
}
 800fec8:	bf00      	nop
 800feca:	bf00      	nop
 800fecc:	e7fd      	b.n	800feca <vPortValidateInterruptPriority+0x62>
	}
 800fece:	bf00      	nop
 800fed0:	3714      	adds	r7, #20
 800fed2:	46bd      	mov	sp, r7
 800fed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed8:	4770      	bx	lr
 800feda:	bf00      	nop
 800fedc:	e000e3f0 	.word	0xe000e3f0
 800fee0:	24000928 	.word	0x24000928
 800fee4:	e000ed0c 	.word	0xe000ed0c
 800fee8:	2400092c 	.word	0x2400092c

0800feec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b08a      	sub	sp, #40	@ 0x28
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fef4:	2300      	movs	r3, #0
 800fef6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fef8:	f7ff f874 	bl	800efe4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fefc:	4b5c      	ldr	r3, [pc, #368]	@ (8010070 <pvPortMalloc+0x184>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d101      	bne.n	800ff08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ff04:	f000 f924 	bl	8010150 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ff08:	4b5a      	ldr	r3, [pc, #360]	@ (8010074 <pvPortMalloc+0x188>)
 800ff0a:	681a      	ldr	r2, [r3, #0]
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	4013      	ands	r3, r2
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	f040 8095 	bne.w	8010040 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d01e      	beq.n	800ff5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ff1c:	2208      	movs	r2, #8
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	4413      	add	r3, r2
 800ff22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f003 0307 	and.w	r3, r3, #7
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d015      	beq.n	800ff5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f023 0307 	bic.w	r3, r3, #7
 800ff34:	3308      	adds	r3, #8
 800ff36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f003 0307 	and.w	r3, r3, #7
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d00b      	beq.n	800ff5a <pvPortMalloc+0x6e>
	__asm volatile
 800ff42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff46:	f383 8811 	msr	BASEPRI, r3
 800ff4a:	f3bf 8f6f 	isb	sy
 800ff4e:	f3bf 8f4f 	dsb	sy
 800ff52:	617b      	str	r3, [r7, #20]
}
 800ff54:	bf00      	nop
 800ff56:	bf00      	nop
 800ff58:	e7fd      	b.n	800ff56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d06f      	beq.n	8010040 <pvPortMalloc+0x154>
 800ff60:	4b45      	ldr	r3, [pc, #276]	@ (8010078 <pvPortMalloc+0x18c>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d86a      	bhi.n	8010040 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ff6a:	4b44      	ldr	r3, [pc, #272]	@ (801007c <pvPortMalloc+0x190>)
 800ff6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ff6e:	4b43      	ldr	r3, [pc, #268]	@ (801007c <pvPortMalloc+0x190>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff74:	e004      	b.n	800ff80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ff76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ff7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	687a      	ldr	r2, [r7, #4]
 800ff86:	429a      	cmp	r2, r3
 800ff88:	d903      	bls.n	800ff92 <pvPortMalloc+0xa6>
 800ff8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d1f1      	bne.n	800ff76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ff92:	4b37      	ldr	r3, [pc, #220]	@ (8010070 <pvPortMalloc+0x184>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	d051      	beq.n	8010040 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ff9c:	6a3b      	ldr	r3, [r7, #32]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	2208      	movs	r2, #8
 800ffa2:	4413      	add	r3, r2
 800ffa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ffa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	6a3b      	ldr	r3, [r7, #32]
 800ffac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ffae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffb0:	685a      	ldr	r2, [r3, #4]
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	1ad2      	subs	r2, r2, r3
 800ffb6:	2308      	movs	r3, #8
 800ffb8:	005b      	lsls	r3, r3, #1
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d920      	bls.n	8010000 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ffbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	4413      	add	r3, r2
 800ffc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ffc6:	69bb      	ldr	r3, [r7, #24]
 800ffc8:	f003 0307 	and.w	r3, r3, #7
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d00b      	beq.n	800ffe8 <pvPortMalloc+0xfc>
	__asm volatile
 800ffd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffd4:	f383 8811 	msr	BASEPRI, r3
 800ffd8:	f3bf 8f6f 	isb	sy
 800ffdc:	f3bf 8f4f 	dsb	sy
 800ffe0:	613b      	str	r3, [r7, #16]
}
 800ffe2:	bf00      	nop
 800ffe4:	bf00      	nop
 800ffe6:	e7fd      	b.n	800ffe4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ffe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffea:	685a      	ldr	r2, [r3, #4]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	1ad2      	subs	r2, r2, r3
 800fff0:	69bb      	ldr	r3, [r7, #24]
 800fff2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fffa:	69b8      	ldr	r0, [r7, #24]
 800fffc:	f000 f90a 	bl	8010214 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010000:	4b1d      	ldr	r3, [pc, #116]	@ (8010078 <pvPortMalloc+0x18c>)
 8010002:	681a      	ldr	r2, [r3, #0]
 8010004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	1ad3      	subs	r3, r2, r3
 801000a:	4a1b      	ldr	r2, [pc, #108]	@ (8010078 <pvPortMalloc+0x18c>)
 801000c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801000e:	4b1a      	ldr	r3, [pc, #104]	@ (8010078 <pvPortMalloc+0x18c>)
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	4b1b      	ldr	r3, [pc, #108]	@ (8010080 <pvPortMalloc+0x194>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	429a      	cmp	r2, r3
 8010018:	d203      	bcs.n	8010022 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801001a:	4b17      	ldr	r3, [pc, #92]	@ (8010078 <pvPortMalloc+0x18c>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	4a18      	ldr	r2, [pc, #96]	@ (8010080 <pvPortMalloc+0x194>)
 8010020:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010024:	685a      	ldr	r2, [r3, #4]
 8010026:	4b13      	ldr	r3, [pc, #76]	@ (8010074 <pvPortMalloc+0x188>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	431a      	orrs	r2, r3
 801002c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801002e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010032:	2200      	movs	r2, #0
 8010034:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010036:	4b13      	ldr	r3, [pc, #76]	@ (8010084 <pvPortMalloc+0x198>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	3301      	adds	r3, #1
 801003c:	4a11      	ldr	r2, [pc, #68]	@ (8010084 <pvPortMalloc+0x198>)
 801003e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010040:	f7fe ffde 	bl	800f000 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	f003 0307 	and.w	r3, r3, #7
 801004a:	2b00      	cmp	r3, #0
 801004c:	d00b      	beq.n	8010066 <pvPortMalloc+0x17a>
	__asm volatile
 801004e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010052:	f383 8811 	msr	BASEPRI, r3
 8010056:	f3bf 8f6f 	isb	sy
 801005a:	f3bf 8f4f 	dsb	sy
 801005e:	60fb      	str	r3, [r7, #12]
}
 8010060:	bf00      	nop
 8010062:	bf00      	nop
 8010064:	e7fd      	b.n	8010062 <pvPortMalloc+0x176>
	return pvReturn;
 8010066:	69fb      	ldr	r3, [r7, #28]
}
 8010068:	4618      	mov	r0, r3
 801006a:	3728      	adds	r7, #40	@ 0x28
 801006c:	46bd      	mov	sp, r7
 801006e:	bd80      	pop	{r7, pc}
 8010070:	24004538 	.word	0x24004538
 8010074:	2400454c 	.word	0x2400454c
 8010078:	2400453c 	.word	0x2400453c
 801007c:	24004530 	.word	0x24004530
 8010080:	24004540 	.word	0x24004540
 8010084:	24004544 	.word	0x24004544

08010088 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b086      	sub	sp, #24
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d04f      	beq.n	801013a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801009a:	2308      	movs	r3, #8
 801009c:	425b      	negs	r3, r3
 801009e:	697a      	ldr	r2, [r7, #20]
 80100a0:	4413      	add	r3, r2
 80100a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	685a      	ldr	r2, [r3, #4]
 80100ac:	4b25      	ldr	r3, [pc, #148]	@ (8010144 <vPortFree+0xbc>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4013      	ands	r3, r2
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d10b      	bne.n	80100ce <vPortFree+0x46>
	__asm volatile
 80100b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100ba:	f383 8811 	msr	BASEPRI, r3
 80100be:	f3bf 8f6f 	isb	sy
 80100c2:	f3bf 8f4f 	dsb	sy
 80100c6:	60fb      	str	r3, [r7, #12]
}
 80100c8:	bf00      	nop
 80100ca:	bf00      	nop
 80100cc:	e7fd      	b.n	80100ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80100ce:	693b      	ldr	r3, [r7, #16]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d00b      	beq.n	80100ee <vPortFree+0x66>
	__asm volatile
 80100d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100da:	f383 8811 	msr	BASEPRI, r3
 80100de:	f3bf 8f6f 	isb	sy
 80100e2:	f3bf 8f4f 	dsb	sy
 80100e6:	60bb      	str	r3, [r7, #8]
}
 80100e8:	bf00      	nop
 80100ea:	bf00      	nop
 80100ec:	e7fd      	b.n	80100ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	685a      	ldr	r2, [r3, #4]
 80100f2:	4b14      	ldr	r3, [pc, #80]	@ (8010144 <vPortFree+0xbc>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	4013      	ands	r3, r2
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d01e      	beq.n	801013a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d11a      	bne.n	801013a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	685a      	ldr	r2, [r3, #4]
 8010108:	4b0e      	ldr	r3, [pc, #56]	@ (8010144 <vPortFree+0xbc>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	43db      	mvns	r3, r3
 801010e:	401a      	ands	r2, r3
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010114:	f7fe ff66 	bl	800efe4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	685a      	ldr	r2, [r3, #4]
 801011c:	4b0a      	ldr	r3, [pc, #40]	@ (8010148 <vPortFree+0xc0>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	4413      	add	r3, r2
 8010122:	4a09      	ldr	r2, [pc, #36]	@ (8010148 <vPortFree+0xc0>)
 8010124:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010126:	6938      	ldr	r0, [r7, #16]
 8010128:	f000 f874 	bl	8010214 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801012c:	4b07      	ldr	r3, [pc, #28]	@ (801014c <vPortFree+0xc4>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	3301      	adds	r3, #1
 8010132:	4a06      	ldr	r2, [pc, #24]	@ (801014c <vPortFree+0xc4>)
 8010134:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010136:	f7fe ff63 	bl	800f000 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801013a:	bf00      	nop
 801013c:	3718      	adds	r7, #24
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop
 8010144:	2400454c 	.word	0x2400454c
 8010148:	2400453c 	.word	0x2400453c
 801014c:	24004548 	.word	0x24004548

08010150 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010150:	b480      	push	{r7}
 8010152:	b085      	sub	sp, #20
 8010154:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010156:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801015a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801015c:	4b27      	ldr	r3, [pc, #156]	@ (80101fc <prvHeapInit+0xac>)
 801015e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	f003 0307 	and.w	r3, r3, #7
 8010166:	2b00      	cmp	r3, #0
 8010168:	d00c      	beq.n	8010184 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	3307      	adds	r3, #7
 801016e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	f023 0307 	bic.w	r3, r3, #7
 8010176:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010178:	68ba      	ldr	r2, [r7, #8]
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	1ad3      	subs	r3, r2, r3
 801017e:	4a1f      	ldr	r2, [pc, #124]	@ (80101fc <prvHeapInit+0xac>)
 8010180:	4413      	add	r3, r2
 8010182:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010188:	4a1d      	ldr	r2, [pc, #116]	@ (8010200 <prvHeapInit+0xb0>)
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801018e:	4b1c      	ldr	r3, [pc, #112]	@ (8010200 <prvHeapInit+0xb0>)
 8010190:	2200      	movs	r2, #0
 8010192:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	68ba      	ldr	r2, [r7, #8]
 8010198:	4413      	add	r3, r2
 801019a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801019c:	2208      	movs	r2, #8
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	1a9b      	subs	r3, r3, r2
 80101a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	f023 0307 	bic.w	r3, r3, #7
 80101aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	4a15      	ldr	r2, [pc, #84]	@ (8010204 <prvHeapInit+0xb4>)
 80101b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80101b2:	4b14      	ldr	r3, [pc, #80]	@ (8010204 <prvHeapInit+0xb4>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	2200      	movs	r2, #0
 80101b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80101ba:	4b12      	ldr	r3, [pc, #72]	@ (8010204 <prvHeapInit+0xb4>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	2200      	movs	r2, #0
 80101c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	68fa      	ldr	r2, [r7, #12]
 80101ca:	1ad2      	subs	r2, r2, r3
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80101d0:	4b0c      	ldr	r3, [pc, #48]	@ (8010204 <prvHeapInit+0xb4>)
 80101d2:	681a      	ldr	r2, [r3, #0]
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	4a0a      	ldr	r2, [pc, #40]	@ (8010208 <prvHeapInit+0xb8>)
 80101de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	685b      	ldr	r3, [r3, #4]
 80101e4:	4a09      	ldr	r2, [pc, #36]	@ (801020c <prvHeapInit+0xbc>)
 80101e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80101e8:	4b09      	ldr	r3, [pc, #36]	@ (8010210 <prvHeapInit+0xc0>)
 80101ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80101ee:	601a      	str	r2, [r3, #0]
}
 80101f0:	bf00      	nop
 80101f2:	3714      	adds	r7, #20
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr
 80101fc:	24000930 	.word	0x24000930
 8010200:	24004530 	.word	0x24004530
 8010204:	24004538 	.word	0x24004538
 8010208:	24004540 	.word	0x24004540
 801020c:	2400453c 	.word	0x2400453c
 8010210:	2400454c 	.word	0x2400454c

08010214 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010214:	b480      	push	{r7}
 8010216:	b085      	sub	sp, #20
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801021c:	4b28      	ldr	r3, [pc, #160]	@ (80102c0 <prvInsertBlockIntoFreeList+0xac>)
 801021e:	60fb      	str	r3, [r7, #12]
 8010220:	e002      	b.n	8010228 <prvInsertBlockIntoFreeList+0x14>
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	60fb      	str	r3, [r7, #12]
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	429a      	cmp	r2, r3
 8010230:	d8f7      	bhi.n	8010222 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	68ba      	ldr	r2, [r7, #8]
 801023c:	4413      	add	r3, r2
 801023e:	687a      	ldr	r2, [r7, #4]
 8010240:	429a      	cmp	r2, r3
 8010242:	d108      	bne.n	8010256 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	685a      	ldr	r2, [r3, #4]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	685b      	ldr	r3, [r3, #4]
 801024c:	441a      	add	r2, r3
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	68ba      	ldr	r2, [r7, #8]
 8010260:	441a      	add	r2, r3
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	429a      	cmp	r2, r3
 8010268:	d118      	bne.n	801029c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	681a      	ldr	r2, [r3, #0]
 801026e:	4b15      	ldr	r3, [pc, #84]	@ (80102c4 <prvInsertBlockIntoFreeList+0xb0>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	429a      	cmp	r2, r3
 8010274:	d00d      	beq.n	8010292 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	685a      	ldr	r2, [r3, #4]
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	685b      	ldr	r3, [r3, #4]
 8010280:	441a      	add	r2, r3
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	681a      	ldr	r2, [r3, #0]
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	601a      	str	r2, [r3, #0]
 8010290:	e008      	b.n	80102a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010292:	4b0c      	ldr	r3, [pc, #48]	@ (80102c4 <prvInsertBlockIntoFreeList+0xb0>)
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	601a      	str	r2, [r3, #0]
 801029a:	e003      	b.n	80102a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	681a      	ldr	r2, [r3, #0]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80102a4:	68fa      	ldr	r2, [r7, #12]
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d002      	beq.n	80102b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	687a      	ldr	r2, [r7, #4]
 80102b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80102b2:	bf00      	nop
 80102b4:	3714      	adds	r7, #20
 80102b6:	46bd      	mov	sp, r7
 80102b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102bc:	4770      	bx	lr
 80102be:	bf00      	nop
 80102c0:	24004530 	.word	0x24004530
 80102c4:	24004538 	.word	0x24004538

080102c8 <_ZN5LidarC1Ev>:
 */
#include "Lidar.hpp"
#include "tim.h"
#include "usart.h"

Lidar::Lidar(){
 80102c8:	b480      	push	{r7}
 80102ca:	b083      	sub	sp, #12
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2200      	movs	r2, #0
 80102d4:	801a      	strh	r2, [r3, #0]
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2200      	movs	r2, #0
 80102da:	805a      	strh	r2, [r3, #2]
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2200      	movs	r2, #0
 80102e0:	809a      	strh	r2, [r3, #4]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2200      	movs	r2, #0
 80102e6:	719a      	strb	r2, [r3, #6]
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2200      	movs	r2, #0
 80102ec:	609a      	str	r2, [r3, #8]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2200      	movs	r2, #0
 80102f2:	60da      	str	r2, [r3, #12]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2200      	movs	r2, #0
 80102f8:	741a      	strb	r2, [r3, #16]

}
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	4618      	mov	r0, r3
 80102fe:	370c      	adds	r7, #12
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <_ZN5Lidar12FrameHandlerEPhh>:

void Lidar::FrameHandler(uint8_t* frame, uint8_t size){
 8010308:	b580      	push	{r7, lr}
 801030a:	b086      	sub	sp, #24
 801030c:	af00      	add	r7, sp, #0
 801030e:	60f8      	str	r0, [r7, #12]
 8010310:	60b9      	str	r1, [r7, #8]
 8010312:	4613      	mov	r3, r2
 8010314:	71fb      	strb	r3, [r7, #7]
    if (size != LIDAR_FRAME_SIZE){
 8010316:	79fb      	ldrb	r3, [r7, #7]
 8010318:	2b09      	cmp	r3, #9
 801031a:	d003      	beq.n	8010324 <_ZN5Lidar12FrameHandlerEPhh+0x1c>
        this->status = false;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2200      	movs	r2, #0
 8010320:	741a      	strb	r2, [r3, #16]
        return; // Invalid frame size
 8010322:	e067      	b.n	80103f4 <_ZN5Lidar12FrameHandlerEPhh+0xec>
    }
    if (frame[0] != LIDAR_FRAME_HEADER && frame[1] != LIDAR_FRAME_HEADER){
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	781b      	ldrb	r3, [r3, #0]
 8010328:	2b59      	cmp	r3, #89	@ 0x59
 801032a:	d008      	beq.n	801033e <_ZN5Lidar12FrameHandlerEPhh+0x36>
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	3301      	adds	r3, #1
 8010330:	781b      	ldrb	r3, [r3, #0]
 8010332:	2b59      	cmp	r3, #89	@ 0x59
 8010334:	d003      	beq.n	801033e <_ZN5Lidar12FrameHandlerEPhh+0x36>
        this->status = false;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2200      	movs	r2, #0
 801033a:	741a      	strb	r2, [r3, #16]
        return; // Invalid frame header
 801033c:	e05a      	b.n	80103f4 <_ZN5Lidar12FrameHandlerEPhh+0xec>
    }
    for (uint8_t i = 0; i < (LIDAR_FRAME_SIZE - 1); i++){
 801033e:	2300      	movs	r3, #0
 8010340:	75fb      	strb	r3, [r7, #23]
 8010342:	e00c      	b.n	801035e <_ZN5Lidar12FrameHandlerEPhh+0x56>
        this->checksum += frame[i];
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	799a      	ldrb	r2, [r3, #6]
 8010348:	7dfb      	ldrb	r3, [r7, #23]
 801034a:	68b9      	ldr	r1, [r7, #8]
 801034c:	440b      	add	r3, r1
 801034e:	781b      	ldrb	r3, [r3, #0]
 8010350:	4413      	add	r3, r2
 8010352:	b2da      	uxtb	r2, r3
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < (LIDAR_FRAME_SIZE - 1); i++){
 8010358:	7dfb      	ldrb	r3, [r7, #23]
 801035a:	3301      	adds	r3, #1
 801035c:	75fb      	strb	r3, [r7, #23]
 801035e:	7dfb      	ldrb	r3, [r7, #23]
 8010360:	2b07      	cmp	r3, #7
 8010362:	d9ef      	bls.n	8010344 <_ZN5Lidar12FrameHandlerEPhh+0x3c>
    }
    if (this->checksum != frame[LIDAR_FRAME_SIZE - 1]){
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	799a      	ldrb	r2, [r3, #6]
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	3308      	adds	r3, #8
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	429a      	cmp	r2, r3
 8010370:	d003      	beq.n	801037a <_ZN5Lidar12FrameHandlerEPhh+0x72>
        this->status = false;
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	2200      	movs	r2, #0
 8010376:	741a      	strb	r2, [r3, #16]
        return; // Checksum mismatch
 8010378:	e03c      	b.n	80103f4 <_ZN5Lidar12FrameHandlerEPhh+0xec>
    }
    this->checksum = 0;
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	2200      	movs	r2, #0
 801037e:	719a      	strb	r2, [r3, #6]

    this->interval_us = micros() - this->flag_us;
 8010380:	f7f1 fa00 	bl	8001784 <micros>
 8010384:	4602      	mov	r2, r0
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	68db      	ldr	r3, [r3, #12]
 801038a:	1ad2      	subs	r2, r2, r3
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	609a      	str	r2, [r3, #8]
    this->flag_us = micros();
 8010390:	f7f1 f9f8 	bl	8001784 <micros>
 8010394:	4602      	mov	r2, r0
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	60da      	str	r2, [r3, #12]

    this->distance = frame[2] | (frame[3] << 8);
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	3302      	adds	r3, #2
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	b21a      	sxth	r2, r3
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	3303      	adds	r3, #3
 80103a6:	781b      	ldrb	r3, [r3, #0]
 80103a8:	b21b      	sxth	r3, r3
 80103aa:	021b      	lsls	r3, r3, #8
 80103ac:	b21b      	sxth	r3, r3
 80103ae:	4313      	orrs	r3, r2
 80103b0:	b21b      	sxth	r3, r3
 80103b2:	b29a      	uxth	r2, r3
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	801a      	strh	r2, [r3, #0]
    this->strength = frame[4] | (frame[5] << 8);
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	3304      	adds	r3, #4
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	b21a      	sxth	r2, r3
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	3305      	adds	r3, #5
 80103c4:	781b      	ldrb	r3, [r3, #0]
 80103c6:	b21b      	sxth	r3, r3
 80103c8:	021b      	lsls	r3, r3, #8
 80103ca:	b21b      	sxth	r3, r3
 80103cc:	4313      	orrs	r3, r2
 80103ce:	b21b      	sxth	r3, r3
 80103d0:	b29a      	uxth	r2, r3
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	805a      	strh	r2, [r3, #2]
    this->temperature = frame[6] | (frame[7] << 8);
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	3306      	adds	r3, #6
 80103da:	781b      	ldrb	r3, [r3, #0]
 80103dc:	b21a      	sxth	r2, r3
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	3307      	adds	r3, #7
 80103e2:	781b      	ldrb	r3, [r3, #0]
 80103e4:	b21b      	sxth	r3, r3
 80103e6:	021b      	lsls	r3, r3, #8
 80103e8:	b21b      	sxth	r3, r3
 80103ea:	4313      	orrs	r3, r2
 80103ec:	b21b      	sxth	r3, r3
 80103ee:	b29a      	uxth	r2, r3
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	809a      	strh	r2, [r3, #4]

}
 80103f4:	3718      	adds	r7, #24
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}
	...

080103fc <_ZN5Lidar5ResetEv>:
		command[sizeof(command)-1] += command[i];
	}
	HAL_UART_Transmit(&huart2, command, sizeof(command), 1000);
}

void Lidar::Reset(){
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b088      	sub	sp, #32
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
	uint8_t command[] = {
 8010404:	4b0e      	ldr	r3, [pc, #56]	@ (8010440 <_ZN5Lidar5ResetEv+0x44>)
 8010406:	61fb      	str	r3, [r7, #28]
			0x5A, 0x04, 0x02, 0x60
	};
	uint8_t buffer[15] = {0};
 8010408:	f107 030c 	add.w	r3, r7, #12
 801040c:	2200      	movs	r2, #0
 801040e:	601a      	str	r2, [r3, #0]
 8010410:	605a      	str	r2, [r3, #4]
 8010412:	609a      	str	r2, [r3, #8]
 8010414:	f8c3 200b 	str.w	r2, [r3, #11]
	HAL_UART_Transmit(&huart2, command, sizeof(command), 1000);
 8010418:	f107 011c 	add.w	r1, r7, #28
 801041c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010420:	2204      	movs	r2, #4
 8010422:	4808      	ldr	r0, [pc, #32]	@ (8010444 <_ZN5Lidar5ResetEv+0x48>)
 8010424:	f7fc f8ee 	bl	800c604 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, buffer, 5, 10000);
 8010428:	f107 010c 	add.w	r1, r7, #12
 801042c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8010430:	2205      	movs	r2, #5
 8010432:	4804      	ldr	r0, [pc, #16]	@ (8010444 <_ZN5Lidar5ResetEv+0x48>)
 8010434:	f7fc f974 	bl	800c720 <HAL_UART_Receive>
}
 8010438:	bf00      	nop
 801043a:	3720      	adds	r7, #32
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}
 8010440:	6002045a 	.word	0x6002045a
 8010444:	240006b0 	.word	0x240006b0

08010448 <_ZN5MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefh>:
 *      Author: alica
 */
#include "Motor.hpp"
#include <math.h>

Motor::Motor(GPIO_TypeDef* leftPort, uint16_t leftPin, GPIO_TypeDef* rightPort, uint16_t rightPin, TIM_HandleTypeDef* pwmTimer, uint8_t pwmChannel) {
 8010448:	b480      	push	{r7}
 801044a:	b085      	sub	sp, #20
 801044c:	af00      	add	r7, sp, #0
 801044e:	60f8      	str	r0, [r7, #12]
 8010450:	60b9      	str	r1, [r7, #8]
 8010452:	603b      	str	r3, [r7, #0]
 8010454:	4613      	mov	r3, r2
 8010456:	80fb      	strh	r3, [r7, #6]
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	f04f 0200 	mov.w	r2, #0
 801045e:	619a      	str	r2, [r3, #24]
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	f04f 0200 	mov.w	r2, #0
 8010466:	61da      	str	r2, [r3, #28]
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	2200      	movs	r2, #0
 801046c:	621a      	str	r2, [r3, #32]
	this->left_port = leftPort;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	68ba      	ldr	r2, [r7, #8]
 8010472:	601a      	str	r2, [r3, #0]
	this->left_pin = leftPin;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	88fa      	ldrh	r2, [r7, #6]
 8010478:	809a      	strh	r2, [r3, #4]
	this->right_port = rightPort;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	683a      	ldr	r2, [r7, #0]
 801047e:	609a      	str	r2, [r3, #8]
	this->right_pin = rightPin;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	8b3a      	ldrh	r2, [r7, #24]
 8010484:	819a      	strh	r2, [r3, #12]
	this->PWM_Timer = pwmTimer;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	69fa      	ldr	r2, [r7, #28]
 801048a:	611a      	str	r2, [r3, #16]
	this->PWM_Channel = pwmChannel;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010492:	751a      	strb	r2, [r3, #20]
}
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	4618      	mov	r0, r3
 8010498:	3714      	adds	r7, #20
 801049a:	46bd      	mov	sp, r7
 801049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a0:	4770      	bx	lr
	...

080104a4 <_ZN5Motor14updatePositionEtt>:

void Motor::updatePosition(uint16_t prev_raw, uint16_t raw){
 80104a4:	b480      	push	{r7}
 80104a6:	b083      	sub	sp, #12
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	460b      	mov	r3, r1
 80104ae:	807b      	strh	r3, [r7, #2]
 80104b0:	4613      	mov	r3, r2
 80104b2:	803b      	strh	r3, [r7, #0]
	this->delta_raw = raw - prev_raw;
 80104b4:	883a      	ldrh	r2, [r7, #0]
 80104b6:	887b      	ldrh	r3, [r7, #2]
 80104b8:	1ad2      	subs	r2, r2, r3
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	621a      	str	r2, [r3, #32]

	if (this->delta_raw > HALF_ADC_MAX){
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	6a1b      	ldr	r3, [r3, #32]
 80104c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80104c6:	db06      	blt.n	80104d6 <_ZN5Motor14updatePositionEtt+0x32>
		this->delta_raw -= ADC_MAX;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6a1a      	ldr	r2, [r3, #32]
 80104cc:	4b16      	ldr	r3, [pc, #88]	@ (8010528 <_ZN5Motor14updatePositionEtt+0x84>)
 80104ce:	4413      	add	r3, r2
 80104d0:	687a      	ldr	r2, [r7, #4]
 80104d2:	6213      	str	r3, [r2, #32]
 80104d4:	e00b      	b.n	80104ee <_ZN5Motor14updatePositionEtt+0x4a>
	}
	else if (this->delta_raw < -HALF_ADC_MAX){
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6a1b      	ldr	r3, [r3, #32]
 80104da:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80104de:	dc06      	bgt.n	80104ee <_ZN5Motor14updatePositionEtt+0x4a>
		this->delta_raw += ADC_MAX;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6a1a      	ldr	r2, [r3, #32]
 80104e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80104e8:	4413      	add	r3, r2
 80104ea:	687a      	ldr	r2, [r7, #4]
 80104ec:	6213      	str	r3, [r2, #32]
	}

	position_degree += this->delta_raw*360.0f / ADC_MAX;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	ed93 7a06 	vldr	s14, [r3, #24]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6a1b      	ldr	r3, [r3, #32]
 80104f8:	ee07 3a90 	vmov	s15, r3
 80104fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010500:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 801052c <_ZN5Motor14updatePositionEtt+0x88>
 8010504:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010508:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 8010530 <_ZN5Motor14updatePositionEtt+0x8c>
 801050c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	edc3 7a06 	vstr	s15, [r3, #24]
}
 801051a:	bf00      	nop
 801051c:	370c      	adds	r7, #12
 801051e:	46bd      	mov	sp, r7
 8010520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010524:	4770      	bx	lr
 8010526:	bf00      	nop
 8010528:	ffff0001 	.word	0xffff0001
 801052c:	43b40000 	.word	0x43b40000
 8010530:	477fff00 	.word	0x477fff00

08010534 <_Z9lidarTaskPv>:
uint32_t interval = 0;

//Tasks
// Lidar Task
TaskHandle_t lidarTaskHandle = NULL;
void lidarTask(void *pvParameters){
 8010534:	b580      	push	{r7, lr}
 8010536:	b084      	sub	sp, #16
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
	uint8_t Size = 0;
 801053c:	2300      	movs	r3, #0
 801053e:	73fb      	strb	r3, [r7, #15]
	for(;;) {
		xTaskNotifyWait(0x00, 0x00, (uint32_t *)&Size, portMAX_DELAY);
 8010540:	f107 020f 	add.w	r2, r7, #15
 8010544:	f04f 33ff 	mov.w	r3, #4294967295
 8010548:	2100      	movs	r1, #0
 801054a:	2000      	movs	r0, #0
 801054c:	f7ff f83c 	bl	800f5c8 <xTaskNotifyWait>
		lidar.FrameHandler(usart2_rx_buffer, Size);
 8010550:	7bfb      	ldrb	r3, [r7, #15]
 8010552:	461a      	mov	r2, r3
 8010554:	4902      	ldr	r1, [pc, #8]	@ (8010560 <_Z9lidarTaskPv+0x2c>)
 8010556:	4803      	ldr	r0, [pc, #12]	@ (8010564 <_Z9lidarTaskPv+0x30>)
 8010558:	f7ff fed6 	bl	8010308 <_ZN5Lidar12FrameHandlerEPhh>
		xTaskNotifyWait(0x00, 0x00, (uint32_t *)&Size, portMAX_DELAY);
 801055c:	bf00      	nop
 801055e:	e7ef      	b.n	8010540 <_Z9lidarTaskPv+0xc>
 8010560:	24004550 	.word	0x24004550
 8010564:	24004590 	.word	0x24004590

08010568 <_Z6psTaskPv>:
	}
}
// Pressure Sensor Task
TaskHandle_t psTaskHandle = NULL;
void psTask(void *pvParameters){
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
	for(;;) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8010570:	f04f 31ff 	mov.w	r1, #4294967295
 8010574:	2001      	movs	r0, #1
 8010576:	f7fe ffdb 	bl	800f530 <ulTaskNotifyTake>
 801057a:	e7f9      	b.n	8010570 <_Z6psTaskPv+0x8>

0801057c <_Z6mpTaskPv>:
	}
}
// Motor Position Task
TaskHandle_t mpTaskHandle = NULL;
void mpTask(void *pvParameters){
 801057c:	b580      	push	{r7, lr}
 801057e:	b084      	sub	sp, #16
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
	for(;;) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8010584:	f04f 31ff 	mov.w	r1, #4294967295
 8010588:	2001      	movs	r0, #1
 801058a:	f7fe ffd1 	bl	800f530 <ulTaskNotifyTake>
		for (uint8_t i = 0; i < MAX_MOTOR_COUNT; i++){
 801058e:	2300      	movs	r3, #0
 8010590:	73fb      	strb	r3, [r7, #15]
 8010592:	e01c      	b.n	80105ce <_Z6mpTaskPv+0x52>
			Motors[i].updatePosition(PreviousEncoderValues[i], EncoderValues[i]);
 8010594:	7bfa      	ldrb	r2, [r7, #15]
 8010596:	4613      	mov	r3, r2
 8010598:	00db      	lsls	r3, r3, #3
 801059a:	4413      	add	r3, r2
 801059c:	009b      	lsls	r3, r3, #2
 801059e:	4a0e      	ldr	r2, [pc, #56]	@ (80105d8 <_Z6mpTaskPv+0x5c>)
 80105a0:	1898      	adds	r0, r3, r2
 80105a2:	7bfb      	ldrb	r3, [r7, #15]
 80105a4:	4a0d      	ldr	r2, [pc, #52]	@ (80105dc <_Z6mpTaskPv+0x60>)
 80105a6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80105aa:	7bfb      	ldrb	r3, [r7, #15]
 80105ac:	4a0c      	ldr	r2, [pc, #48]	@ (80105e0 <_Z6mpTaskPv+0x64>)
 80105ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105b2:	461a      	mov	r2, r3
 80105b4:	f7ff ff76 	bl	80104a4 <_ZN5Motor14updatePositionEtt>
			PreviousEncoderValues[i] = EncoderValues[i];
 80105b8:	7bfa      	ldrb	r2, [r7, #15]
 80105ba:	7bfb      	ldrb	r3, [r7, #15]
 80105bc:	4908      	ldr	r1, [pc, #32]	@ (80105e0 <_Z6mpTaskPv+0x64>)
 80105be:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80105c2:	4a06      	ldr	r2, [pc, #24]	@ (80105dc <_Z6mpTaskPv+0x60>)
 80105c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < MAX_MOTOR_COUNT; i++){
 80105c8:	7bfb      	ldrb	r3, [r7, #15]
 80105ca:	3301      	adds	r3, #1
 80105cc:	73fb      	strb	r3, [r7, #15]
 80105ce:	7bfb      	ldrb	r3, [r7, #15]
 80105d0:	2b03      	cmp	r3, #3
 80105d2:	d9df      	bls.n	8010594 <_Z6mpTaskPv+0x18>
		}
	}
 80105d4:	e7d6      	b.n	8010584 <_Z6mpTaskPv+0x8>
 80105d6:	bf00      	nop
 80105d8:	240045c0 	.word	0x240045c0
 80105dc:	240045b8 	.word	0x240045b8
 80105e0:	240045b0 	.word	0x240045b0

080105e4 <app_start>:
}


void app_start(){
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b082      	sub	sp, #8
 80105e8:	af02      	add	r7, sp, #8
	xTaskCreate(
 80105ea:	4b32      	ldr	r3, [pc, #200]	@ (80106b4 <app_start+0xd0>)
 80105ec:	9301      	str	r3, [sp, #4]
 80105ee:	2309      	movs	r3, #9
 80105f0:	9300      	str	r3, [sp, #0]
 80105f2:	2300      	movs	r3, #0
 80105f4:	2280      	movs	r2, #128	@ 0x80
 80105f6:	4930      	ldr	r1, [pc, #192]	@ (80106b8 <app_start+0xd4>)
 80105f8:	4830      	ldr	r0, [pc, #192]	@ (80106bc <app_start+0xd8>)
 80105fa:	f7fe fb04 	bl	800ec06 <xTaskCreate>
		    128,                 // Stack size in words
		    NULL,                // Parameter to pass
		    9,					 // Priority
		    &lidarTaskHandle     // Handler
		);
	xTaskCreate(
 80105fe:	4b30      	ldr	r3, [pc, #192]	@ (80106c0 <app_start+0xdc>)
 8010600:	9301      	str	r3, [sp, #4]
 8010602:	2309      	movs	r3, #9
 8010604:	9300      	str	r3, [sp, #0]
 8010606:	2300      	movs	r3, #0
 8010608:	2280      	movs	r2, #128	@ 0x80
 801060a:	492e      	ldr	r1, [pc, #184]	@ (80106c4 <app_start+0xe0>)
 801060c:	482e      	ldr	r0, [pc, #184]	@ (80106c8 <app_start+0xe4>)
 801060e:	f7fe fafa 	bl	800ec06 <xTaskCreate>
		    128,                 // Stack size in words
		    NULL,                // Parameter to pass
		    9,					 // Priority
		    &psTaskHandle     // Handler
		);
	xTaskCreate(
 8010612:	4b2e      	ldr	r3, [pc, #184]	@ (80106cc <app_start+0xe8>)
 8010614:	9301      	str	r3, [sp, #4]
 8010616:	2309      	movs	r3, #9
 8010618:	9300      	str	r3, [sp, #0]
 801061a:	2300      	movs	r3, #0
 801061c:	2280      	movs	r2, #128	@ 0x80
 801061e:	492c      	ldr	r1, [pc, #176]	@ (80106d0 <app_start+0xec>)
 8010620:	482c      	ldr	r0, [pc, #176]	@ (80106d4 <app_start+0xf0>)
 8010622:	f7fe faf0 	bl	800ec06 <xTaskCreate>
		    NULL,                // Parameter to pass
		    9,					 // Priority
		    &mpTaskHandle     // Handler
		);

	HAL_TIM_Base_Start(&htim23);
 8010626:	482c      	ldr	r0, [pc, #176]	@ (80106d8 <app_start+0xf4>)
 8010628:	f7fa fcde 	bl	800afe8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim6);
 801062c:	482b      	ldr	r0, [pc, #172]	@ (80106dc <app_start+0xf8>)
 801062e:	f7fa fcdb 	bl	800afe8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8010632:	2100      	movs	r1, #0
 8010634:	482a      	ldr	r0, [pc, #168]	@ (80106e0 <app_start+0xfc>)
 8010636:	f7fa fe3d 	bl	800b2b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 801063a:	2104      	movs	r1, #4
 801063c:	4828      	ldr	r0, [pc, #160]	@ (80106e0 <app_start+0xfc>)
 801063e:	f7fa fe39 	bl	800b2b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8010642:	2108      	movs	r1, #8
 8010644:	4826      	ldr	r0, [pc, #152]	@ (80106e0 <app_start+0xfc>)
 8010646:	f7fa fe35 	bl	800b2b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 801064a:	210c      	movs	r1, #12
 801064c:	4824      	ldr	r0, [pc, #144]	@ (80106e0 <app_start+0xfc>)
 801064e:	f7fa fe31 	bl	800b2b4 <HAL_TIM_PWM_Start>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8010652:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010656:	2100      	movs	r1, #0
 8010658:	4822      	ldr	r0, [pc, #136]	@ (80106e4 <app_start+0x100>)
 801065a:	f7f3 fa37 	bl	8003acc <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 801065e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010662:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8010666:	481f      	ldr	r0, [pc, #124]	@ (80106e4 <app_start+0x100>)
 8010668:	f7f3 fa30 	bl	8003acc <HAL_ADCEx_Calibration_Start>

	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 801066c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010670:	2100      	movs	r1, #0
 8010672:	481d      	ldr	r0, [pc, #116]	@ (80106e8 <app_start+0x104>)
 8010674:	f7f3 fa2a 	bl	8003acc <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 8010678:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801067c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8010680:	4819      	ldr	r0, [pc, #100]	@ (80106e8 <app_start+0x104>)
 8010682:	f7f3 fa23 	bl	8003acc <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)PSValues, 5);
 8010686:	2205      	movs	r2, #5
 8010688:	4918      	ldr	r1, [pc, #96]	@ (80106ec <app_start+0x108>)
 801068a:	4816      	ldr	r0, [pc, #88]	@ (80106e4 <app_start+0x100>)
 801068c:	f7f1 ff50 	bl	8002530 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)EncoderValues, 4);
 8010690:	2204      	movs	r2, #4
 8010692:	4917      	ldr	r1, [pc, #92]	@ (80106f0 <app_start+0x10c>)
 8010694:	4814      	ldr	r0, [pc, #80]	@ (80106e8 <app_start+0x104>)
 8010696:	f7f1 ff4b 	bl	8002530 <HAL_ADC_Start_DMA>

	lidar.Reset();
 801069a:	4816      	ldr	r0, [pc, #88]	@ (80106f4 <app_start+0x110>)
 801069c:	f7ff feae 	bl	80103fc <_ZN5Lidar5ResetEv>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, usart2_rx_buffer, USART2_RX_BUFFER_SIZE);
 80106a0:	2240      	movs	r2, #64	@ 0x40
 80106a2:	4915      	ldr	r1, [pc, #84]	@ (80106f8 <app_start+0x114>)
 80106a4:	4815      	ldr	r0, [pc, #84]	@ (80106fc <app_start+0x118>)
 80106a6:	f7fe f878 	bl	800e79a <HAL_UARTEx_ReceiveToIdle_DMA>

	osKernelStart();
 80106aa:	f7fe f931 	bl	800e910 <osKernelStart>

}
 80106ae:	bf00      	nop
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}
 80106b4:	24004650 	.word	0x24004650
 80106b8:	08010ad0 	.word	0x08010ad0
 80106bc:	08010535 	.word	0x08010535
 80106c0:	24004654 	.word	0x24004654
 80106c4:	08010adc 	.word	0x08010adc
 80106c8:	08010569 	.word	0x08010569
 80106cc:	24004658 	.word	0x24004658
 80106d0:	08010af4 	.word	0x08010af4
 80106d4:	0801057d 	.word	0x0801057d
 80106d8:	24000664 	.word	0x24000664
 80106dc:	24000618 	.word	0x24000618
 80106e0:	240005cc 	.word	0x240005cc
 80106e4:	24000080 	.word	0x24000080
 80106e8:	240000f0 	.word	0x240000f0
 80106ec:	240045a4 	.word	0x240045a4
 80106f0:	240045b0 	.word	0x240045b0
 80106f4:	24004590 	.word	0x24004590
 80106f8:	24004550 	.word	0x24004550
 80106fc:	240006b0 	.word	0x240006b0

08010700 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8010700:	b580      	push	{r7, lr}
 8010702:	b084      	sub	sp, #16
 8010704:	af02      	add	r7, sp, #8
 8010706:	6078      	str	r0, [r7, #4]
 8010708:	460b      	mov	r3, r1
 801070a:	807b      	strh	r3, [r7, #2]
    static BaseType_t xHigherPriorityTaskWoken;
	if (huart->Instance == USART2) {
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	4a11      	ldr	r2, [pc, #68]	@ (8010758 <HAL_UARTEx_RxEventCallback+0x58>)
 8010712:	4293      	cmp	r3, r2
 8010714:	d11c      	bne.n	8010750 <HAL_UARTEx_RxEventCallback+0x50>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, usart2_rx_buffer, USART2_RX_BUFFER_SIZE);
 8010716:	2240      	movs	r2, #64	@ 0x40
 8010718:	4910      	ldr	r1, [pc, #64]	@ (801075c <HAL_UARTEx_RxEventCallback+0x5c>)
 801071a:	4811      	ldr	r0, [pc, #68]	@ (8010760 <HAL_UARTEx_RxEventCallback+0x60>)
 801071c:	f7fe f83d 	bl	800e79a <HAL_UARTEx_ReceiveToIdle_DMA>
		xHigherPriorityTaskWoken = pdFALSE;
 8010720:	4b10      	ldr	r3, [pc, #64]	@ (8010764 <HAL_UARTEx_RxEventCallback+0x64>)
 8010722:	2200      	movs	r2, #0
 8010724:	601a      	str	r2, [r3, #0]
		xTaskGenericNotifyFromISR(lidarTaskHandle, Size, eSetValueWithOverwrite, NULL, &xHigherPriorityTaskWoken);
 8010726:	4b10      	ldr	r3, [pc, #64]	@ (8010768 <HAL_UARTEx_RxEventCallback+0x68>)
 8010728:	6818      	ldr	r0, [r3, #0]
 801072a:	8879      	ldrh	r1, [r7, #2]
 801072c:	4b0d      	ldr	r3, [pc, #52]	@ (8010764 <HAL_UARTEx_RxEventCallback+0x64>)
 801072e:	9300      	str	r3, [sp, #0]
 8010730:	2300      	movs	r3, #0
 8010732:	2203      	movs	r2, #3
 8010734:	f7fe ffa8 	bl	800f688 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8010738:	4b0a      	ldr	r3, [pc, #40]	@ (8010764 <HAL_UARTEx_RxEventCallback+0x64>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d007      	beq.n	8010750 <HAL_UARTEx_RxEventCallback+0x50>
 8010740:	4b0a      	ldr	r3, [pc, #40]	@ (801076c <HAL_UARTEx_RxEventCallback+0x6c>)
 8010742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010746:	601a      	str	r2, [r3, #0]
 8010748:	f3bf 8f4f 	dsb	sy
 801074c:	f3bf 8f6f 	isb	sy
	}
}
 8010750:	bf00      	nop
 8010752:	3708      	adds	r7, #8
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}
 8010758:	40004400 	.word	0x40004400
 801075c:	24004550 	.word	0x24004550
 8010760:	240006b0 	.word	0x240006b0
 8010764:	2400465c 	.word	0x2400465c
 8010768:	24004650 	.word	0x24004650
 801076c:	e000ed04 	.word	0xe000ed04

08010770 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8010770:	b580      	push	{r7, lr}
 8010772:	b082      	sub	sp, #8
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
	static BaseType_t  xHigherPriorityTaskWoken;
	if (hadc->Instance == ADC1){
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	4a1f      	ldr	r2, [pc, #124]	@ (80107fc <HAL_ADC_ConvCpltCallback+0x8c>)
 801077e:	4293      	cmp	r3, r2
 8010780:	d119      	bne.n	80107b6 <HAL_ADC_ConvCpltCallback+0x46>
		HAL_ADC_Start_DMA(hadc, (uint32_t *)PSValues, 5);
 8010782:	2205      	movs	r2, #5
 8010784:	491e      	ldr	r1, [pc, #120]	@ (8010800 <HAL_ADC_ConvCpltCallback+0x90>)
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f7f1 fed2 	bl	8002530 <HAL_ADC_Start_DMA>
	    xHigherPriorityTaskWoken = pdFALSE;
 801078c:	4b1d      	ldr	r3, [pc, #116]	@ (8010804 <HAL_ADC_ConvCpltCallback+0x94>)
 801078e:	2200      	movs	r2, #0
 8010790:	601a      	str	r2, [r3, #0]
	    vTaskNotifyGiveFromISR(psTaskHandle, &xHigherPriorityTaskWoken);
 8010792:	4b1d      	ldr	r3, [pc, #116]	@ (8010808 <HAL_ADC_ConvCpltCallback+0x98>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	491b      	ldr	r1, [pc, #108]	@ (8010804 <HAL_ADC_ConvCpltCallback+0x94>)
 8010798:	4618      	mov	r0, r3
 801079a:	f7ff f85b 	bl	800f854 <vTaskNotifyGiveFromISR>
	    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801079e:	4b19      	ldr	r3, [pc, #100]	@ (8010804 <HAL_ADC_ConvCpltCallback+0x94>)
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d007      	beq.n	80107b6 <HAL_ADC_ConvCpltCallback+0x46>
 80107a6:	4b19      	ldr	r3, [pc, #100]	@ (801080c <HAL_ADC_ConvCpltCallback+0x9c>)
 80107a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80107ac:	601a      	str	r2, [r3, #0]
 80107ae:	f3bf 8f4f 	dsb	sy
 80107b2:	f3bf 8f6f 	isb	sy
	}
	if (hadc->Instance == ADC2){
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	4a15      	ldr	r2, [pc, #84]	@ (8010810 <HAL_ADC_ConvCpltCallback+0xa0>)
 80107bc:	4293      	cmp	r3, r2
 80107be:	d119      	bne.n	80107f4 <HAL_ADC_ConvCpltCallback+0x84>
		HAL_ADC_Start_DMA(hadc, (uint32_t *)EncoderValues, 4);
 80107c0:	2204      	movs	r2, #4
 80107c2:	4914      	ldr	r1, [pc, #80]	@ (8010814 <HAL_ADC_ConvCpltCallback+0xa4>)
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f7f1 feb3 	bl	8002530 <HAL_ADC_Start_DMA>
	    xHigherPriorityTaskWoken = pdFALSE;
 80107ca:	4b0e      	ldr	r3, [pc, #56]	@ (8010804 <HAL_ADC_ConvCpltCallback+0x94>)
 80107cc:	2200      	movs	r2, #0
 80107ce:	601a      	str	r2, [r3, #0]
	    vTaskNotifyGiveFromISR(mpTaskHandle, &xHigherPriorityTaskWoken);
 80107d0:	4b11      	ldr	r3, [pc, #68]	@ (8010818 <HAL_ADC_ConvCpltCallback+0xa8>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	490b      	ldr	r1, [pc, #44]	@ (8010804 <HAL_ADC_ConvCpltCallback+0x94>)
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7ff f83c 	bl	800f854 <vTaskNotifyGiveFromISR>
	    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80107dc:	4b09      	ldr	r3, [pc, #36]	@ (8010804 <HAL_ADC_ConvCpltCallback+0x94>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d007      	beq.n	80107f4 <HAL_ADC_ConvCpltCallback+0x84>
 80107e4:	4b09      	ldr	r3, [pc, #36]	@ (801080c <HAL_ADC_ConvCpltCallback+0x9c>)
 80107e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80107ea:	601a      	str	r2, [r3, #0]
 80107ec:	f3bf 8f4f 	dsb	sy
 80107f0:	f3bf 8f6f 	isb	sy
	}
}
 80107f4:	bf00      	nop
 80107f6:	3708      	adds	r7, #8
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	40022000 	.word	0x40022000
 8010800:	240045a4 	.word	0x240045a4
 8010804:	24004660 	.word	0x24004660
 8010808:	24004654 	.word	0x24004654
 801080c:	e000ed04 	.word	0xe000ed04
 8010810:	40022100 	.word	0x40022100
 8010814:	240045b0 	.word	0x240045b0
 8010818:	24004658 	.word	0x24004658

0801081c <_Z41__static_initialization_and_destruction_0v>:
 801081c:	b590      	push	{r4, r7, lr}
 801081e:	b085      	sub	sp, #20
 8010820:	af04      	add	r7, sp, #16
Lidar lidar;
 8010822:	4820      	ldr	r0, [pc, #128]	@ (80108a4 <_Z41__static_initialization_and_destruction_0v+0x88>)
 8010824:	f7ff fd50 	bl	80102c8 <_ZN5LidarC1Ev>
};
 8010828:	4c1f      	ldr	r4, [pc, #124]	@ (80108a8 <_Z41__static_initialization_and_destruction_0v+0x8c>)
 801082a:	2300      	movs	r3, #0
 801082c:	9302      	str	r3, [sp, #8]
 801082e:	4b1f      	ldr	r3, [pc, #124]	@ (80108ac <_Z41__static_initialization_and_destruction_0v+0x90>)
 8010830:	9301      	str	r3, [sp, #4]
 8010832:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010836:	9300      	str	r3, [sp, #0]
 8010838:	4b1d      	ldr	r3, [pc, #116]	@ (80108b0 <_Z41__static_initialization_and_destruction_0v+0x94>)
 801083a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801083e:	491c      	ldr	r1, [pc, #112]	@ (80108b0 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8010840:	4620      	mov	r0, r4
 8010842:	f7ff fe01 	bl	8010448 <_ZN5MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefh>
 8010846:	3424      	adds	r4, #36	@ 0x24
 8010848:	2304      	movs	r3, #4
 801084a:	9302      	str	r3, [sp, #8]
 801084c:	4b17      	ldr	r3, [pc, #92]	@ (80108ac <_Z41__static_initialization_and_destruction_0v+0x90>)
 801084e:	9301      	str	r3, [sp, #4]
 8010850:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010854:	9300      	str	r3, [sp, #0]
 8010856:	4b16      	ldr	r3, [pc, #88]	@ (80108b0 <_Z41__static_initialization_and_destruction_0v+0x94>)
 8010858:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801085c:	4914      	ldr	r1, [pc, #80]	@ (80108b0 <_Z41__static_initialization_and_destruction_0v+0x94>)
 801085e:	4620      	mov	r0, r4
 8010860:	f7ff fdf2 	bl	8010448 <_ZN5MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefh>
 8010864:	3424      	adds	r4, #36	@ 0x24
 8010866:	2308      	movs	r3, #8
 8010868:	9302      	str	r3, [sp, #8]
 801086a:	4b10      	ldr	r3, [pc, #64]	@ (80108ac <_Z41__static_initialization_and_destruction_0v+0x90>)
 801086c:	9301      	str	r3, [sp, #4]
 801086e:	2340      	movs	r3, #64	@ 0x40
 8010870:	9300      	str	r3, [sp, #0]
 8010872:	4b10      	ldr	r3, [pc, #64]	@ (80108b4 <_Z41__static_initialization_and_destruction_0v+0x98>)
 8010874:	2280      	movs	r2, #128	@ 0x80
 8010876:	490f      	ldr	r1, [pc, #60]	@ (80108b4 <_Z41__static_initialization_and_destruction_0v+0x98>)
 8010878:	4620      	mov	r0, r4
 801087a:	f7ff fde5 	bl	8010448 <_ZN5MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefh>
 801087e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010882:	230c      	movs	r3, #12
 8010884:	9302      	str	r3, [sp, #8]
 8010886:	4b09      	ldr	r3, [pc, #36]	@ (80108ac <_Z41__static_initialization_and_destruction_0v+0x90>)
 8010888:	9301      	str	r3, [sp, #4]
 801088a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801088e:	9300      	str	r3, [sp, #0]
 8010890:	4b08      	ldr	r3, [pc, #32]	@ (80108b4 <_Z41__static_initialization_and_destruction_0v+0x98>)
 8010892:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010896:	4907      	ldr	r1, [pc, #28]	@ (80108b4 <_Z41__static_initialization_and_destruction_0v+0x98>)
 8010898:	f7ff fdd6 	bl	8010448 <_ZN5MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefh>
}
 801089c:	bf00      	nop
 801089e:	3704      	adds	r7, #4
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd90      	pop	{r4, r7, pc}
 80108a4:	24004590 	.word	0x24004590
 80108a8:	240045c0 	.word	0x240045c0
 80108ac:	240005cc 	.word	0x240005cc
 80108b0:	58020c00 	.word	0x58020c00
 80108b4:	58020800 	.word	0x58020800

080108b8 <_GLOBAL__sub_I_usart2_rx_buffer>:
 80108b8:	b580      	push	{r7, lr}
 80108ba:	af00      	add	r7, sp, #0
 80108bc:	f7ff ffae 	bl	801081c <_Z41__static_initialization_and_destruction_0v>
 80108c0:	bd80      	pop	{r7, pc}

080108c2 <memset>:
 80108c2:	4402      	add	r2, r0
 80108c4:	4603      	mov	r3, r0
 80108c6:	4293      	cmp	r3, r2
 80108c8:	d100      	bne.n	80108cc <memset+0xa>
 80108ca:	4770      	bx	lr
 80108cc:	f803 1b01 	strb.w	r1, [r3], #1
 80108d0:	e7f9      	b.n	80108c6 <memset+0x4>
	...

080108d4 <_reclaim_reent>:
 80108d4:	4b2d      	ldr	r3, [pc, #180]	@ (801098c <_reclaim_reent+0xb8>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	4283      	cmp	r3, r0
 80108da:	b570      	push	{r4, r5, r6, lr}
 80108dc:	4604      	mov	r4, r0
 80108de:	d053      	beq.n	8010988 <_reclaim_reent+0xb4>
 80108e0:	69c3      	ldr	r3, [r0, #28]
 80108e2:	b31b      	cbz	r3, 801092c <_reclaim_reent+0x58>
 80108e4:	68db      	ldr	r3, [r3, #12]
 80108e6:	b163      	cbz	r3, 8010902 <_reclaim_reent+0x2e>
 80108e8:	2500      	movs	r5, #0
 80108ea:	69e3      	ldr	r3, [r4, #28]
 80108ec:	68db      	ldr	r3, [r3, #12]
 80108ee:	5959      	ldr	r1, [r3, r5]
 80108f0:	b9b1      	cbnz	r1, 8010920 <_reclaim_reent+0x4c>
 80108f2:	3504      	adds	r5, #4
 80108f4:	2d80      	cmp	r5, #128	@ 0x80
 80108f6:	d1f8      	bne.n	80108ea <_reclaim_reent+0x16>
 80108f8:	69e3      	ldr	r3, [r4, #28]
 80108fa:	4620      	mov	r0, r4
 80108fc:	68d9      	ldr	r1, [r3, #12]
 80108fe:	f000 f86d 	bl	80109dc <_free_r>
 8010902:	69e3      	ldr	r3, [r4, #28]
 8010904:	6819      	ldr	r1, [r3, #0]
 8010906:	b111      	cbz	r1, 801090e <_reclaim_reent+0x3a>
 8010908:	4620      	mov	r0, r4
 801090a:	f000 f867 	bl	80109dc <_free_r>
 801090e:	69e3      	ldr	r3, [r4, #28]
 8010910:	689d      	ldr	r5, [r3, #8]
 8010912:	b15d      	cbz	r5, 801092c <_reclaim_reent+0x58>
 8010914:	4629      	mov	r1, r5
 8010916:	4620      	mov	r0, r4
 8010918:	682d      	ldr	r5, [r5, #0]
 801091a:	f000 f85f 	bl	80109dc <_free_r>
 801091e:	e7f8      	b.n	8010912 <_reclaim_reent+0x3e>
 8010920:	680e      	ldr	r6, [r1, #0]
 8010922:	4620      	mov	r0, r4
 8010924:	f000 f85a 	bl	80109dc <_free_r>
 8010928:	4631      	mov	r1, r6
 801092a:	e7e1      	b.n	80108f0 <_reclaim_reent+0x1c>
 801092c:	6961      	ldr	r1, [r4, #20]
 801092e:	b111      	cbz	r1, 8010936 <_reclaim_reent+0x62>
 8010930:	4620      	mov	r0, r4
 8010932:	f000 f853 	bl	80109dc <_free_r>
 8010936:	69e1      	ldr	r1, [r4, #28]
 8010938:	b111      	cbz	r1, 8010940 <_reclaim_reent+0x6c>
 801093a:	4620      	mov	r0, r4
 801093c:	f000 f84e 	bl	80109dc <_free_r>
 8010940:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010942:	b111      	cbz	r1, 801094a <_reclaim_reent+0x76>
 8010944:	4620      	mov	r0, r4
 8010946:	f000 f849 	bl	80109dc <_free_r>
 801094a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801094c:	b111      	cbz	r1, 8010954 <_reclaim_reent+0x80>
 801094e:	4620      	mov	r0, r4
 8010950:	f000 f844 	bl	80109dc <_free_r>
 8010954:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010956:	b111      	cbz	r1, 801095e <_reclaim_reent+0x8a>
 8010958:	4620      	mov	r0, r4
 801095a:	f000 f83f 	bl	80109dc <_free_r>
 801095e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010960:	b111      	cbz	r1, 8010968 <_reclaim_reent+0x94>
 8010962:	4620      	mov	r0, r4
 8010964:	f000 f83a 	bl	80109dc <_free_r>
 8010968:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801096a:	b111      	cbz	r1, 8010972 <_reclaim_reent+0x9e>
 801096c:	4620      	mov	r0, r4
 801096e:	f000 f835 	bl	80109dc <_free_r>
 8010972:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010974:	b111      	cbz	r1, 801097c <_reclaim_reent+0xa8>
 8010976:	4620      	mov	r0, r4
 8010978:	f000 f830 	bl	80109dc <_free_r>
 801097c:	6a23      	ldr	r3, [r4, #32]
 801097e:	b11b      	cbz	r3, 8010988 <_reclaim_reent+0xb4>
 8010980:	4620      	mov	r0, r4
 8010982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010986:	4718      	bx	r3
 8010988:	bd70      	pop	{r4, r5, r6, pc}
 801098a:	bf00      	nop
 801098c:	24000014 	.word	0x24000014

08010990 <__libc_init_array>:
 8010990:	b570      	push	{r4, r5, r6, lr}
 8010992:	4d0d      	ldr	r5, [pc, #52]	@ (80109c8 <__libc_init_array+0x38>)
 8010994:	4c0d      	ldr	r4, [pc, #52]	@ (80109cc <__libc_init_array+0x3c>)
 8010996:	1b64      	subs	r4, r4, r5
 8010998:	10a4      	asrs	r4, r4, #2
 801099a:	2600      	movs	r6, #0
 801099c:	42a6      	cmp	r6, r4
 801099e:	d109      	bne.n	80109b4 <__libc_init_array+0x24>
 80109a0:	4d0b      	ldr	r5, [pc, #44]	@ (80109d0 <__libc_init_array+0x40>)
 80109a2:	4c0c      	ldr	r4, [pc, #48]	@ (80109d4 <__libc_init_array+0x44>)
 80109a4:	f000 f870 	bl	8010a88 <_init>
 80109a8:	1b64      	subs	r4, r4, r5
 80109aa:	10a4      	asrs	r4, r4, #2
 80109ac:	2600      	movs	r6, #0
 80109ae:	42a6      	cmp	r6, r4
 80109b0:	d105      	bne.n	80109be <__libc_init_array+0x2e>
 80109b2:	bd70      	pop	{r4, r5, r6, pc}
 80109b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80109b8:	4798      	blx	r3
 80109ba:	3601      	adds	r6, #1
 80109bc:	e7ee      	b.n	801099c <__libc_init_array+0xc>
 80109be:	f855 3b04 	ldr.w	r3, [r5], #4
 80109c2:	4798      	blx	r3
 80109c4:	3601      	adds	r6, #1
 80109c6:	e7f2      	b.n	80109ae <__libc_init_array+0x1e>
 80109c8:	08010b50 	.word	0x08010b50
 80109cc:	08010b50 	.word	0x08010b50
 80109d0:	08010b50 	.word	0x08010b50
 80109d4:	08010b58 	.word	0x08010b58

080109d8 <__retarget_lock_acquire_recursive>:
 80109d8:	4770      	bx	lr

080109da <__retarget_lock_release_recursive>:
 80109da:	4770      	bx	lr

080109dc <_free_r>:
 80109dc:	b538      	push	{r3, r4, r5, lr}
 80109de:	4605      	mov	r5, r0
 80109e0:	2900      	cmp	r1, #0
 80109e2:	d041      	beq.n	8010a68 <_free_r+0x8c>
 80109e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109e8:	1f0c      	subs	r4, r1, #4
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	bfb8      	it	lt
 80109ee:	18e4      	addlt	r4, r4, r3
 80109f0:	f000 f83e 	bl	8010a70 <__malloc_lock>
 80109f4:	4a1d      	ldr	r2, [pc, #116]	@ (8010a6c <_free_r+0x90>)
 80109f6:	6813      	ldr	r3, [r2, #0]
 80109f8:	b933      	cbnz	r3, 8010a08 <_free_r+0x2c>
 80109fa:	6063      	str	r3, [r4, #4]
 80109fc:	6014      	str	r4, [r2, #0]
 80109fe:	4628      	mov	r0, r5
 8010a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a04:	f000 b83a 	b.w	8010a7c <__malloc_unlock>
 8010a08:	42a3      	cmp	r3, r4
 8010a0a:	d908      	bls.n	8010a1e <_free_r+0x42>
 8010a0c:	6820      	ldr	r0, [r4, #0]
 8010a0e:	1821      	adds	r1, r4, r0
 8010a10:	428b      	cmp	r3, r1
 8010a12:	bf01      	itttt	eq
 8010a14:	6819      	ldreq	r1, [r3, #0]
 8010a16:	685b      	ldreq	r3, [r3, #4]
 8010a18:	1809      	addeq	r1, r1, r0
 8010a1a:	6021      	streq	r1, [r4, #0]
 8010a1c:	e7ed      	b.n	80109fa <_free_r+0x1e>
 8010a1e:	461a      	mov	r2, r3
 8010a20:	685b      	ldr	r3, [r3, #4]
 8010a22:	b10b      	cbz	r3, 8010a28 <_free_r+0x4c>
 8010a24:	42a3      	cmp	r3, r4
 8010a26:	d9fa      	bls.n	8010a1e <_free_r+0x42>
 8010a28:	6811      	ldr	r1, [r2, #0]
 8010a2a:	1850      	adds	r0, r2, r1
 8010a2c:	42a0      	cmp	r0, r4
 8010a2e:	d10b      	bne.n	8010a48 <_free_r+0x6c>
 8010a30:	6820      	ldr	r0, [r4, #0]
 8010a32:	4401      	add	r1, r0
 8010a34:	1850      	adds	r0, r2, r1
 8010a36:	4283      	cmp	r3, r0
 8010a38:	6011      	str	r1, [r2, #0]
 8010a3a:	d1e0      	bne.n	80109fe <_free_r+0x22>
 8010a3c:	6818      	ldr	r0, [r3, #0]
 8010a3e:	685b      	ldr	r3, [r3, #4]
 8010a40:	6053      	str	r3, [r2, #4]
 8010a42:	4408      	add	r0, r1
 8010a44:	6010      	str	r0, [r2, #0]
 8010a46:	e7da      	b.n	80109fe <_free_r+0x22>
 8010a48:	d902      	bls.n	8010a50 <_free_r+0x74>
 8010a4a:	230c      	movs	r3, #12
 8010a4c:	602b      	str	r3, [r5, #0]
 8010a4e:	e7d6      	b.n	80109fe <_free_r+0x22>
 8010a50:	6820      	ldr	r0, [r4, #0]
 8010a52:	1821      	adds	r1, r4, r0
 8010a54:	428b      	cmp	r3, r1
 8010a56:	bf04      	itt	eq
 8010a58:	6819      	ldreq	r1, [r3, #0]
 8010a5a:	685b      	ldreq	r3, [r3, #4]
 8010a5c:	6063      	str	r3, [r4, #4]
 8010a5e:	bf04      	itt	eq
 8010a60:	1809      	addeq	r1, r1, r0
 8010a62:	6021      	streq	r1, [r4, #0]
 8010a64:	6054      	str	r4, [r2, #4]
 8010a66:	e7ca      	b.n	80109fe <_free_r+0x22>
 8010a68:	bd38      	pop	{r3, r4, r5, pc}
 8010a6a:	bf00      	nop
 8010a6c:	240047a0 	.word	0x240047a0

08010a70 <__malloc_lock>:
 8010a70:	4801      	ldr	r0, [pc, #4]	@ (8010a78 <__malloc_lock+0x8>)
 8010a72:	f7ff bfb1 	b.w	80109d8 <__retarget_lock_acquire_recursive>
 8010a76:	bf00      	nop
 8010a78:	2400479c 	.word	0x2400479c

08010a7c <__malloc_unlock>:
 8010a7c:	4801      	ldr	r0, [pc, #4]	@ (8010a84 <__malloc_unlock+0x8>)
 8010a7e:	f7ff bfac 	b.w	80109da <__retarget_lock_release_recursive>
 8010a82:	bf00      	nop
 8010a84:	2400479c 	.word	0x2400479c

08010a88 <_init>:
 8010a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a8a:	bf00      	nop
 8010a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a8e:	bc08      	pop	{r3}
 8010a90:	469e      	mov	lr, r3
 8010a92:	4770      	bx	lr

08010a94 <_fini>:
 8010a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a96:	bf00      	nop
 8010a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a9a:	bc08      	pop	{r3}
 8010a9c:	469e      	mov	lr, r3
 8010a9e:	4770      	bx	lr
