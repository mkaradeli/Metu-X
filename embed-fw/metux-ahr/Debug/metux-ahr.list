
metux-ahr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf94  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800d264  0800d264  0000e264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d2ec  0800d2ec  0000e2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800d2f4  0800d2f4  0000e2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d2fc  0800d2fc  0000e2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800d300  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004dcc  24000064  0800d364  0000f064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004e30  0800d364  0000fe30  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002960b  00000000  00000000  0000f092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004dc8  00000000  00000000  0003869d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b90  00000000  00000000  0003d468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000154f  00000000  00000000  0003eff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b9ff  00000000  00000000  00040547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027b25  00000000  00000000  0007bf46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00166a57  00000000  00000000  000a3a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020a4c2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007624  00000000  00000000  0020a508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  00211b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000064 	.word	0x24000064
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800d24c 	.word	0x0800d24c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000068 	.word	0x24000068
 800030c:	0800d24c 	.word	0x0800d24c

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000642:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <MX_DMA_Init+0x3c>)
 8000644:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000648:	4a0b      	ldr	r2, [pc, #44]	@ (8000678 <MX_DMA_Init+0x3c>)
 800064a:	f043 0301 	orr.w	r3, r3, #1
 800064e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000652:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <MX_DMA_Init+0x3c>)
 8000654:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000660:	2200      	movs	r2, #0
 8000662:	2105      	movs	r1, #5
 8000664:	200b      	movs	r0, #11
 8000666:	f000 fe71 	bl	800134c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800066a:	200b      	movs	r0, #11
 800066c:	f000 fe88 	bl	8001380 <HAL_NVIC_EnableIRQ>

}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	58024400 	.word	0x58024400

0800067c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000680:	4a04      	ldr	r2, [pc, #16]	@ (8000694 <MX_FREERTOS_Init+0x18>)
 8000682:	2100      	movs	r1, #0
 8000684:	4804      	ldr	r0, [pc, #16]	@ (8000698 <MX_FREERTOS_Init+0x1c>)
 8000686:	f009 fec1 	bl	800a40c <osThreadNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a03      	ldr	r2, [pc, #12]	@ (800069c <MX_FREERTOS_Init+0x20>)
 800068e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	0800d288 	.word	0x0800d288
 8000698:	080006a1 	.word	0x080006a1
 800069c:	24000080 	.word	0x24000080

080006a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f009 ff41 	bl	800a530 <osDelay>
 80006ae:	e7fb      	b.n	80006a8 <StartDefaultTask+0x8>

080006b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	4b47      	ldr	r3, [pc, #284]	@ (80007e4 <MX_GPIO_Init+0x134>)
 80006c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006cc:	4a45      	ldr	r2, [pc, #276]	@ (80007e4 <MX_GPIO_Init+0x134>)
 80006ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d6:	4b43      	ldr	r3, [pc, #268]	@ (80007e4 <MX_GPIO_Init+0x134>)
 80006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	4b3f      	ldr	r3, [pc, #252]	@ (80007e4 <MX_GPIO_Init+0x134>)
 80006e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ea:	4a3e      	ldr	r2, [pc, #248]	@ (80007e4 <MX_GPIO_Init+0x134>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f4:	4b3b      	ldr	r3, [pc, #236]	@ (80007e4 <MX_GPIO_Init+0x134>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <MX_GPIO_Init+0x134>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000708:	4a36      	ldr	r2, [pc, #216]	@ (80007e4 <MX_GPIO_Init+0x134>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000712:	4b34      	ldr	r3, [pc, #208]	@ (80007e4 <MX_GPIO_Init+0x134>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000718:	f003 0304 	and.w	r3, r3, #4
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000720:	4b30      	ldr	r3, [pc, #192]	@ (80007e4 <MX_GPIO_Init+0x134>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000726:	4a2f      	ldr	r2, [pc, #188]	@ (80007e4 <MX_GPIO_Init+0x134>)
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000730:	4b2c      	ldr	r3, [pc, #176]	@ (80007e4 <MX_GPIO_Init+0x134>)
 8000732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000736:	f003 0308 	and.w	r3, r3, #8
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b29      	ldr	r3, [pc, #164]	@ (80007e4 <MX_GPIO_Init+0x134>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000744:	4a27      	ldr	r2, [pc, #156]	@ (80007e4 <MX_GPIO_Init+0x134>)
 8000746:	f043 0302 	orr.w	r3, r3, #2
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800074e:	4b25      	ldr	r3, [pc, #148]	@ (80007e4 <MX_GPIO_Init+0x134>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000754:	f003 0302 	and.w	r3, r3, #2
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMU_WAKE_Pin|IMU_RST_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f248 0180 	movw	r1, #32896	@ 0x8080
 8000762:	4821      	ldr	r0, [pc, #132]	@ (80007e8 <MX_GPIO_Init+0x138>)
 8000764:	f003 fdfa 	bl	800435c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800076e:	481f      	ldr	r0, [pc, #124]	@ (80007ec <MX_GPIO_Init+0x13c>)
 8000770:	f003 fdf4 	bl	800435c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IMU_WAKE_Pin IMU_RST_Pin */
  GPIO_InitStruct.Pin = IMU_WAKE_Pin|IMU_RST_Pin;
 8000774:	f248 0380 	movw	r3, #32896	@ 0x8080
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	4816      	ldr	r0, [pc, #88]	@ (80007e8 <MX_GPIO_Init+0x138>)
 800078e:	f003 fc3d 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8000792:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	4810      	ldr	r0, [pc, #64]	@ (80007ec <MX_GPIO_Init+0x13c>)
 80007ac:	f003 fc2e 	bl	800400c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007b0:	2320      	movs	r3, #32
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007b4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	480a      	ldr	r0, [pc, #40]	@ (80007f0 <MX_GPIO_Init+0x140>)
 80007c6:	f003 fc21 	bl	800400c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2105      	movs	r1, #5
 80007ce:	2017      	movs	r0, #23
 80007d0:	f000 fdbc 	bl	800134c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007d4:	2017      	movs	r0, #23
 80007d6:	f000 fdd3 	bl	8001380 <HAL_NVIC_EnableIRQ>

}
 80007da:	bf00      	nop
 80007dc:	3728      	adds	r7, #40	@ 0x28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	58024400 	.word	0x58024400
 80007e8:	58020000 	.word	0x58020000
 80007ec:	58020800 	.word	0x58020800
 80007f0:	58020400 	.word	0x58020400

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f8:	f000 fc94 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fc:	f000 f814 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000800:	f7ff ff56 	bl	80006b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000804:	f7ff ff1a 	bl	800063c <MX_DMA_Init>
  MX_SPI1_Init();
 8000808:	f000 f894 	bl	8000934 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800080c:	f000 fb70 	bl	8000ef0 <MX_USART2_UART_Init>
  MX_TIM23_Init();
 8000810:	f000 faf0 	bl	8000df4 <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */
  app_start();
 8000814:	f00c fbe4 	bl	800cfe0 <app_start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8000818:	f009 fdae 	bl	800a378 <osKernelInitialize>
  MX_FREERTOS_Init();
 800081c:	f7ff ff2e 	bl	800067c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000820:	f009 fdce 	bl	800a3c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <main+0x30>

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b09c      	sub	sp, #112	@ 0x70
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000832:	224c      	movs	r2, #76	@ 0x4c
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f00c fc17 	bl	800d06a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2220      	movs	r2, #32
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f00c fc11 	bl	800d06a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000848:	2002      	movs	r0, #2
 800084a:	f003 fdc5 	bl	80043d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b2b      	ldr	r3, [pc, #172]	@ (8000900 <SystemClock_Config+0xd8>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	4a2a      	ldr	r2, [pc, #168]	@ (8000900 <SystemClock_Config+0xd8>)
 8000858:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800085c:	6193      	str	r3, [r2, #24]
 800085e:	4b28      	ldr	r3, [pc, #160]	@ (8000900 <SystemClock_Config+0xd8>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800086a:	bf00      	nop
 800086c:	4b24      	ldr	r3, [pc, #144]	@ (8000900 <SystemClock_Config+0xd8>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000878:	d1f8      	bne.n	800086c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087a:	2301      	movs	r3, #1
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800087e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000882:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000884:	2302      	movs	r3, #2
 8000886:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000888:	2302      	movs	r3, #2
 800088a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800088c:	2302      	movs	r3, #2
 800088e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000890:	232c      	movs	r3, #44	@ 0x2c
 8000892:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000894:	2301      	movs	r3, #1
 8000896:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 55;
 8000898:	2337      	movs	r3, #55	@ 0x37
 800089a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800089c:	2302      	movs	r3, #2
 800089e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008a0:	230c      	movs	r3, #12
 80008a2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 fdcb 	bl	800444c <HAL_RCC_OscConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008bc:	f000 f834 	bl	8000928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c0:	233f      	movs	r3, #63	@ 0x3f
 80008c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c4:	2303      	movs	r3, #3
 80008c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008cc:	2308      	movs	r3, #8
 80008ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008d0:	2340      	movs	r3, #64	@ 0x40
 80008d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008d4:	2340      	movs	r3, #64	@ 0x40
 80008d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008de:	2340      	movs	r3, #64	@ 0x40
 80008e0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2103      	movs	r1, #3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f004 f98a 	bl	8004c00 <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80008f2:	f000 f819 	bl	8000928 <Error_Handler>
  }
}
 80008f6:	bf00      	nop
 80008f8:	3770      	adds	r7, #112	@ 0x70
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	58024800 	.word	0x58024800

08000904 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a04      	ldr	r2, [pc, #16]	@ (8000924 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d101      	bne.n	800091a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000916:	f000 fc41 	bl	800119c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40014800 	.word	0x40014800

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <Error_Handler+0x8>

08000934 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000938:	4b27      	ldr	r3, [pc, #156]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 800093a:	4a28      	ldr	r2, [pc, #160]	@ (80009dc <MX_SPI1_Init+0xa8>)
 800093c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800093e:	4b26      	ldr	r3, [pc, #152]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000940:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000944:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000946:	4b24      	ldr	r3, [pc, #144]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800094c:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 800094e:	2203      	movs	r2, #3
 8000950:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000952:	4b21      	ldr	r3, [pc, #132]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000958:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800095e:	4b1e      	ldr	r3, [pc, #120]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000960:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000964:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000966:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096c:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000972:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000974:	2200      	movs	r2, #0
 8000976:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000978:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 800097a:	2200      	movs	r2, #0
 800097c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800097e:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000980:	2200      	movs	r2, #0
 8000982:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000986:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800098a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800098c:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 800098e:	2200      	movs	r2, #0
 8000990:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 8000994:	2200      	movs	r2, #0
 8000996:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 800099a:	2200      	movs	r2, #0
 800099c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_SPI1_Init+0xa4>)
 80009c4:	f006 faac 	bl	8006f20 <HAL_SPI_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80009ce:	f7ff ffab 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	24000084 	.word	0x24000084
 80009dc:	40013000 	.word	0x40013000

080009e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0ba      	sub	sp, #232	@ 0xe8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f8:	f107 0318 	add.w	r3, r7, #24
 80009fc:	22b8      	movs	r2, #184	@ 0xb8
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f00c fb32 	bl	800d06a <memset>
  if(spiHandle->Instance==SPI1)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a3c      	ldr	r2, [pc, #240]	@ (8000afc <HAL_SPI_MspInit+0x11c>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d170      	bne.n	8000af2 <HAL_SPI_MspInit+0x112>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000a10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a20:	f107 0318 	add.w	r3, r7, #24
 8000a24:	4618      	mov	r0, r3
 8000a26:	f004 fcb9 	bl	800539c <HAL_RCCEx_PeriphCLKConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000a30:	f7ff ff7a 	bl	8000928 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a34:	4b32      	ldr	r3, [pc, #200]	@ (8000b00 <HAL_SPI_MspInit+0x120>)
 8000a36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000a3a:	4a31      	ldr	r2, [pc, #196]	@ (8000b00 <HAL_SPI_MspInit+0x120>)
 8000a3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000a44:	4b2e      	ldr	r3, [pc, #184]	@ (8000b00 <HAL_SPI_MspInit+0x120>)
 8000a46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000a4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a52:	4b2b      	ldr	r3, [pc, #172]	@ (8000b00 <HAL_SPI_MspInit+0x120>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a58:	4a29      	ldr	r2, [pc, #164]	@ (8000b00 <HAL_SPI_MspInit+0x120>)
 8000a5a:	f043 0308 	orr.w	r3, r3, #8
 8000a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a62:	4b27      	ldr	r3, [pc, #156]	@ (8000b00 <HAL_SPI_MspInit+0x120>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a68:	f003 0308 	and.w	r3, r3, #8
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a70:	4b23      	ldr	r3, [pc, #140]	@ (8000b00 <HAL_SPI_MspInit+0x120>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a76:	4a22      	ldr	r2, [pc, #136]	@ (8000b00 <HAL_SPI_MspInit+0x120>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a80:	4b1f      	ldr	r3, [pc, #124]	@ (8000b00 <HAL_SPI_MspInit+0x120>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PB4(NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a8e:	2380      	movs	r3, #128	@ 0x80
 8000a90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aa6:	2305      	movs	r3, #5
 8000aa8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4814      	ldr	r0, [pc, #80]	@ (8000b04 <HAL_SPI_MspInit+0x124>)
 8000ab4:	f003 faaa 	bl	800400c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000ab8:	2318      	movs	r3, #24
 8000aba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ad0:	2305      	movs	r3, #5
 8000ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ada:	4619      	mov	r1, r3
 8000adc:	480a      	ldr	r0, [pc, #40]	@ (8000b08 <HAL_SPI_MspInit+0x128>)
 8000ade:	f003 fa95 	bl	800400c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2105      	movs	r1, #5
 8000ae6:	2023      	movs	r0, #35	@ 0x23
 8000ae8:	f000 fc30 	bl	800134c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000aec:	2023      	movs	r0, #35	@ 0x23
 8000aee:	f000 fc47 	bl	8001380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000af2:	bf00      	nop
 8000af4:	37e8      	adds	r7, #232	@ 0xe8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40013000 	.word	0x40013000
 8000b00:	58024400 	.word	0x58024400
 8000b04:	58020c00 	.word	0x58020c00
 8000b08:	58020400 	.word	0x58020400

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <HAL_MspInit+0x38>)
 8000b14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b18:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <HAL_MspInit+0x38>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b22:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <HAL_MspInit+0x38>)
 8000b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	210f      	movs	r1, #15
 8000b34:	f06f 0001 	mvn.w	r0, #1
 8000b38:	f000 fc08 	bl	800134c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	58024400 	.word	0x58024400

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	@ 0x38
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b0f      	cmp	r3, #15
 8000b54:	d844      	bhi.n	8000be0 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	6879      	ldr	r1, [r7, #4]
 8000b5a:	2076      	movs	r0, #118	@ 0x76
 8000b5c:	f000 fbf6 	bl	800134c <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000b60:	2076      	movs	r0, #118	@ 0x76
 8000b62:	f000 fc0d 	bl	8001380 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000b66:	4a24      	ldr	r2, [pc, #144]	@ (8000bf8 <HAL_InitTick+0xb0>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000b6c:	4b23      	ldr	r3, [pc, #140]	@ (8000bfc <HAL_InitTick+0xb4>)
 8000b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b72:	4a22      	ldr	r2, [pc, #136]	@ (8000bfc <HAL_InitTick+0xb4>)
 8000b74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <HAL_InitTick+0xb4>)
 8000b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b8a:	f107 020c 	add.w	r2, r7, #12
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f004 fbbf 	bl	8005318 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b9a:	f004 fba7 	bl	80052ec <HAL_RCC_GetPCLK2Freq>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ba6:	4a16      	ldr	r2, [pc, #88]	@ (8000c00 <HAL_InitTick+0xb8>)
 8000ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bac:	0c9b      	lsrs	r3, r3, #18
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000bb2:	4b14      	ldr	r3, [pc, #80]	@ (8000c04 <HAL_InitTick+0xbc>)
 8000bb4:	4a14      	ldr	r2, [pc, #80]	@ (8000c08 <HAL_InitTick+0xc0>)
 8000bb6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <HAL_InitTick+0xbc>)
 8000bba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bbe:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000bc0:	4a10      	ldr	r2, [pc, #64]	@ (8000c04 <HAL_InitTick+0xbc>)
 8000bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bc4:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c04 <HAL_InitTick+0xbc>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <HAL_InitTick+0xbc>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000bd2:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <HAL_InitTick+0xbc>)
 8000bd4:	f006 fd9d 	bl	8007712 <HAL_TIM_Base_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d107      	bne.n	8000bee <HAL_InitTick+0xa6>
 8000bde:	e001      	b.n	8000be4 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e005      	b.n	8000bf0 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000be4:	4807      	ldr	r0, [pc, #28]	@ (8000c04 <HAL_InitTick+0xbc>)
 8000be6:	f006 fe69 	bl	80078bc <HAL_TIM_Base_Start_IT>
 8000bea:	4603      	mov	r3, r0
 8000bec:	e000      	b.n	8000bf0 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3738      	adds	r7, #56	@ 0x38
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	24000008 	.word	0x24000008
 8000bfc:	58024400 	.word	0x58024400
 8000c00:	431bde83 	.word	0x431bde83
 8000c04:	2400010c 	.word	0x2400010c
 8000c08:	40014800 	.word	0x40014800

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <NMI_Handler+0x4>

08000c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <MemManage_Handler+0x4>

08000c24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <DMA1_Stream0_IRQHandler+0x10>)
 8000c4a:	f001 fecd 	bl	80029e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	24000238 	.word	0x24000238

08000c58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c5c:	2020      	movs	r0, #32
 8000c5e:	f003 fb96 	bl	800438e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c6c:	4802      	ldr	r0, [pc, #8]	@ (8000c78 <SPI1_IRQHandler+0x10>)
 8000c6e:	f006 fa7b 	bl	8007168 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	24000084 	.word	0x24000084

08000c7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c80:	4802      	ldr	r0, [pc, #8]	@ (8000c8c <USART2_IRQHandler+0x10>)
 8000c82:	f007 fb1d 	bl	80082c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	240001a4 	.word	0x240001a4

08000c90 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000c94:	4802      	ldr	r0, [pc, #8]	@ (8000ca0 <TIM17_IRQHandler+0x10>)
 8000c96:	f006 fe97 	bl	80079c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2400010c 	.word	0x2400010c

08000ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b3e      	ldr	r3, [pc, #248]	@ (8000da4 <SystemInit+0x100>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cae:	4a3d      	ldr	r2, [pc, #244]	@ (8000da4 <SystemInit+0x100>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cb8:	4b3b      	ldr	r3, [pc, #236]	@ (8000da8 <SystemInit+0x104>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 030f 	and.w	r3, r3, #15
 8000cc0:	2b06      	cmp	r3, #6
 8000cc2:	d807      	bhi.n	8000cd4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cc4:	4b38      	ldr	r3, [pc, #224]	@ (8000da8 <SystemInit+0x104>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f023 030f 	bic.w	r3, r3, #15
 8000ccc:	4a36      	ldr	r2, [pc, #216]	@ (8000da8 <SystemInit+0x104>)
 8000cce:	f043 0307 	orr.w	r3, r3, #7
 8000cd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cd4:	4b35      	ldr	r3, [pc, #212]	@ (8000dac <SystemInit+0x108>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a34      	ldr	r2, [pc, #208]	@ (8000dac <SystemInit+0x108>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ce0:	4b32      	ldr	r3, [pc, #200]	@ (8000dac <SystemInit+0x108>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ce6:	4b31      	ldr	r3, [pc, #196]	@ (8000dac <SystemInit+0x108>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	4930      	ldr	r1, [pc, #192]	@ (8000dac <SystemInit+0x108>)
 8000cec:	4b30      	ldr	r3, [pc, #192]	@ (8000db0 <SystemInit+0x10c>)
 8000cee:	4013      	ands	r3, r2
 8000cf0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8000da8 <SystemInit+0x104>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d007      	beq.n	8000d0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8000da8 <SystemInit+0x104>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f023 030f 	bic.w	r3, r3, #15
 8000d06:	4a28      	ldr	r2, [pc, #160]	@ (8000da8 <SystemInit+0x104>)
 8000d08:	f043 0307 	orr.w	r3, r3, #7
 8000d0c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d0e:	4b27      	ldr	r3, [pc, #156]	@ (8000dac <SystemInit+0x108>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d14:	4b25      	ldr	r3, [pc, #148]	@ (8000dac <SystemInit+0x108>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d1a:	4b24      	ldr	r3, [pc, #144]	@ (8000dac <SystemInit+0x108>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d20:	4b22      	ldr	r3, [pc, #136]	@ (8000dac <SystemInit+0x108>)
 8000d22:	4a24      	ldr	r2, [pc, #144]	@ (8000db4 <SystemInit+0x110>)
 8000d24:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d26:	4b21      	ldr	r3, [pc, #132]	@ (8000dac <SystemInit+0x108>)
 8000d28:	4a23      	ldr	r2, [pc, #140]	@ (8000db8 <SystemInit+0x114>)
 8000d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dac <SystemInit+0x108>)
 8000d2e:	4a23      	ldr	r2, [pc, #140]	@ (8000dbc <SystemInit+0x118>)
 8000d30:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d32:	4b1e      	ldr	r3, [pc, #120]	@ (8000dac <SystemInit+0x108>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d38:	4b1c      	ldr	r3, [pc, #112]	@ (8000dac <SystemInit+0x108>)
 8000d3a:	4a20      	ldr	r2, [pc, #128]	@ (8000dbc <SystemInit+0x118>)
 8000d3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dac <SystemInit+0x108>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d44:	4b19      	ldr	r3, [pc, #100]	@ (8000dac <SystemInit+0x108>)
 8000d46:	4a1d      	ldr	r2, [pc, #116]	@ (8000dbc <SystemInit+0x118>)
 8000d48:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d4a:	4b18      	ldr	r3, [pc, #96]	@ (8000dac <SystemInit+0x108>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d50:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <SystemInit+0x108>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a15      	ldr	r2, [pc, #84]	@ (8000dac <SystemInit+0x108>)
 8000d56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d5c:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <SystemInit+0x108>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000d62:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <SystemInit+0x108>)
 8000d64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d113      	bne.n	8000d98 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d70:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <SystemInit+0x108>)
 8000d72:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d76:	4a0d      	ldr	r2, [pc, #52]	@ (8000dac <SystemInit+0x108>)
 8000d78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d7c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <SystemInit+0x11c>)
 8000d82:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d86:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <SystemInit+0x108>)
 8000d8a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d8e:	4a07      	ldr	r2, [pc, #28]	@ (8000dac <SystemInit+0x108>)
 8000d90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d94:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00
 8000da8:	52002000 	.word	0x52002000
 8000dac:	58024400 	.word	0x58024400
 8000db0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000db4:	02020200 	.word	0x02020200
 8000db8:	01ff0000 	.word	0x01ff0000
 8000dbc:	01010280 	.word	0x01010280
 8000dc0:	52004000 	.word	0x52004000

08000dc4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <ExitRun0Mode+0x2c>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	4a08      	ldr	r2, [pc, #32]	@ (8000df0 <ExitRun0Mode+0x2c>)
 8000dce:	f043 0302 	orr.w	r3, r3, #2
 8000dd2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000dd4:	bf00      	nop
 8000dd6:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <ExitRun0Mode+0x2c>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f9      	beq.n	8000dd6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	58024800 	.word	0x58024800

08000df4 <MX_TIM23_Init>:

TIM_HandleTypeDef htim23;

/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000e12:	4b1e      	ldr	r3, [pc, #120]	@ (8000e8c <MX_TIM23_Init+0x98>)
 8000e14:	4a1e      	ldr	r2, [pc, #120]	@ (8000e90 <MX_TIM23_Init+0x9c>)
 8000e16:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8000e18:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <MX_TIM23_Init+0x98>)
 8000e1a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000e1e:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <MX_TIM23_Init+0x98>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8000e26:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <MX_TIM23_Init+0x98>)
 8000e28:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2c:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2e:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <MX_TIM23_Init+0x98>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e34:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <MX_TIM23_Init+0x98>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8000e3a:	4814      	ldr	r0, [pc, #80]	@ (8000e8c <MX_TIM23_Init+0x98>)
 8000e3c:	f006 fc69 	bl	8007712 <HAL_TIM_Base_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8000e46:	f7ff fd6f 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8000e50:	f107 0310 	add.w	r3, r7, #16
 8000e54:	4619      	mov	r1, r3
 8000e56:	480d      	ldr	r0, [pc, #52]	@ (8000e8c <MX_TIM23_Init+0x98>)
 8000e58:	f006 febe 	bl	8007bd8 <HAL_TIM_ConfigClockSource>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8000e62:	f7ff fd61 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	4806      	ldr	r0, [pc, #24]	@ (8000e8c <MX_TIM23_Init+0x98>)
 8000e74:	f007 f91a 	bl	80080ac <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8000e7e:	f7ff fd53 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	3720      	adds	r7, #32
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	24000158 	.word	0x24000158
 8000e90:	4000e000 	.word	0x4000e000

08000e94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM23)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed0 <HAL_TIM_Base_MspInit+0x3c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d10e      	bne.n	8000ec4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* TIM23 clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <HAL_TIM_Base_MspInit+0x40>)
 8000ea8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000eac:	4a09      	ldr	r2, [pc, #36]	@ (8000ed4 <HAL_TIM_Base_MspInit+0x40>)
 8000eae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000eb2:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000eb6:	4b07      	ldr	r3, [pc, #28]	@ (8000ed4 <HAL_TIM_Base_MspInit+0x40>)
 8000eb8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000ebc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	4000e000 	.word	0x4000e000
 8000ed4:	58024400 	.word	0x58024400

08000ed8 <micros>:
  /* USER CODE END TIM23_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
uint32_t micros(){
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim23);
 8000edc:	4b03      	ldr	r3, [pc, #12]	@ (8000eec <micros+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	24000158 	.word	0x24000158

08000ef0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef4:	4b22      	ldr	r3, [pc, #136]	@ (8000f80 <MX_USART2_UART_Init+0x90>)
 8000ef6:	4a23      	ldr	r2, [pc, #140]	@ (8000f84 <MX_USART2_UART_Init+0x94>)
 8000ef8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000efa:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <MX_USART2_UART_Init+0x90>)
 8000efc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f02:	4b1f      	ldr	r3, [pc, #124]	@ (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f08:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f14:	4b1a      	ldr	r3, [pc, #104]	@ (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f16:	220c      	movs	r2, #12
 8000f18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1a:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f20:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f26:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f2c:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f32:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f38:	4811      	ldr	r0, [pc, #68]	@ (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f3a:	f007 f971 	bl	8008220 <HAL_UART_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f44:	f7ff fcf0 	bl	8000928 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f4c:	f009 f8b1 	bl	800a0b2 <HAL_UARTEx_SetTxFifoThreshold>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f56:	f7ff fce7 	bl	8000928 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4808      	ldr	r0, [pc, #32]	@ (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f5e:	f009 f8e6 	bl	800a12e <HAL_UARTEx_SetRxFifoThreshold>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f68:	f7ff fcde 	bl	8000928 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f6c:	4804      	ldr	r0, [pc, #16]	@ (8000f80 <MX_USART2_UART_Init+0x90>)
 8000f6e:	f009 f867 	bl	800a040 <HAL_UARTEx_DisableFifoMode>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f78:	f7ff fcd6 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	240001a4 	.word	0x240001a4
 8000f84:	40004400 	.word	0x40004400

08000f88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0b8      	sub	sp, #224	@ 0xe0
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	22b8      	movs	r2, #184	@ 0xb8
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f00c f85e 	bl	800d06a <memset>
  if(uartHandle->Instance==USART2)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a41      	ldr	r2, [pc, #260]	@ (80010b8 <HAL_UART_MspInit+0x130>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d17b      	bne.n	80010b0 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fb8:	f04f 0202 	mov.w	r2, #2
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f004 f9e4 	bl	800539c <HAL_RCCEx_PeriphCLKConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000fda:	f7ff fca5 	bl	8000928 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fde:	4b37      	ldr	r3, [pc, #220]	@ (80010bc <HAL_UART_MspInit+0x134>)
 8000fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fe4:	4a35      	ldr	r2, [pc, #212]	@ (80010bc <HAL_UART_MspInit+0x134>)
 8000fe6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fee:	4b33      	ldr	r3, [pc, #204]	@ (80010bc <HAL_UART_MspInit+0x134>)
 8000ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffc:	4b2f      	ldr	r3, [pc, #188]	@ (80010bc <HAL_UART_MspInit+0x134>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001002:	4a2e      	ldr	r2, [pc, #184]	@ (80010bc <HAL_UART_MspInit+0x134>)
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800100c:	4b2b      	ldr	r3, [pc, #172]	@ (80010bc <HAL_UART_MspInit+0x134>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800101a:	2360      	movs	r3, #96	@ 0x60
 800101c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001032:	2307      	movs	r3, #7
 8001034:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001038:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800103c:	4619      	mov	r1, r3
 800103e:	4820      	ldr	r0, [pc, #128]	@ (80010c0 <HAL_UART_MspInit+0x138>)
 8001040:	f002 ffe4 	bl	800400c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream0;
 8001044:	4b1f      	ldr	r3, [pc, #124]	@ (80010c4 <HAL_UART_MspInit+0x13c>)
 8001046:	4a20      	ldr	r2, [pc, #128]	@ (80010c8 <HAL_UART_MspInit+0x140>)
 8001048:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800104a:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <HAL_UART_MspInit+0x13c>)
 800104c:	222b      	movs	r2, #43	@ 0x2b
 800104e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001050:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <HAL_UART_MspInit+0x13c>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001056:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <HAL_UART_MspInit+0x13c>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800105c:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <HAL_UART_MspInit+0x13c>)
 800105e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001062:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001064:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <HAL_UART_MspInit+0x13c>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <HAL_UART_MspInit+0x13c>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001070:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <HAL_UART_MspInit+0x13c>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001076:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <HAL_UART_MspInit+0x13c>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800107c:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <HAL_UART_MspInit+0x13c>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001082:	4810      	ldr	r0, [pc, #64]	@ (80010c4 <HAL_UART_MspInit+0x13c>)
 8001084:	f000 f98a 	bl	800139c <HAL_DMA_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800108e:	f7ff fc4b 	bl	8000928 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a0b      	ldr	r2, [pc, #44]	@ (80010c4 <HAL_UART_MspInit+0x13c>)
 8001096:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <HAL_UART_MspInit+0x13c>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2105      	movs	r1, #5
 80010a4:	2026      	movs	r0, #38	@ 0x26
 80010a6:	f000 f951 	bl	800134c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010aa:	2026      	movs	r0, #38	@ 0x26
 80010ac:	f000 f968 	bl	8001380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010b0:	bf00      	nop
 80010b2:	37e0      	adds	r7, #224	@ 0xe0
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40004400 	.word	0x40004400
 80010bc:	58024400 	.word	0x58024400
 80010c0:	58020c00 	.word	0x58020c00
 80010c4:	24000238 	.word	0x24000238
 80010c8:	40020010 	.word	0x40020010

080010cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010cc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001108 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80010d0:	f7ff fe78 	bl	8000dc4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010d4:	f7ff fde6 	bl	8000ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d8:	480c      	ldr	r0, [pc, #48]	@ (800110c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010da:	490d      	ldr	r1, [pc, #52]	@ (8001110 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001114 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001118 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f0:	4c0a      	ldr	r4, [pc, #40]	@ (800111c <LoopFillZerobss+0x22>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010fe:	f00c f81b 	bl	800d138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001102:	f7ff fb77 	bl	80007f4 <main>
  bx  lr
 8001106:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001108:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800110c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001110:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001114:	0800d300 	.word	0x0800d300
  ldr r2, =_sbss
 8001118:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 800111c:	24004e30 	.word	0x24004e30

08001120 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC3_IRQHandler>
	...

08001124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112a:	2003      	movs	r0, #3
 800112c:	f000 f903 	bl	8001336 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001130:	f003 ff1c 	bl	8004f6c <HAL_RCC_GetSysClockFreq>
 8001134:	4602      	mov	r2, r0
 8001136:	4b15      	ldr	r3, [pc, #84]	@ (800118c <HAL_Init+0x68>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	f003 030f 	and.w	r3, r3, #15
 8001140:	4913      	ldr	r1, [pc, #76]	@ (8001190 <HAL_Init+0x6c>)
 8001142:	5ccb      	ldrb	r3, [r1, r3]
 8001144:	f003 031f 	and.w	r3, r3, #31
 8001148:	fa22 f303 	lsr.w	r3, r2, r3
 800114c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <HAL_Init+0x68>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	4a0e      	ldr	r2, [pc, #56]	@ (8001190 <HAL_Init+0x6c>)
 8001158:	5cd3      	ldrb	r3, [r2, r3]
 800115a:	f003 031f 	and.w	r3, r3, #31
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	4a0b      	ldr	r2, [pc, #44]	@ (8001194 <HAL_Init+0x70>)
 8001166:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001168:	4a0b      	ldr	r2, [pc, #44]	@ (8001198 <HAL_Init+0x74>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116e:	200f      	movs	r0, #15
 8001170:	f7ff fcea 	bl	8000b48 <HAL_InitTick>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e002      	b.n	8001184 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800117e:	f7ff fcc5 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	58024400 	.word	0x58024400
 8001190:	0800d2ac 	.word	0x0800d2ac
 8001194:	24000004 	.word	0x24000004
 8001198:	24000000 	.word	0x24000000

0800119c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	2400000c 	.word	0x2400000c
 80011c0:	240002b0 	.word	0x240002b0

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	240002b0 	.word	0x240002b0

080011dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ec:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <__NVIC_SetPriorityGrouping+0x40>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011f8:	4013      	ands	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 8001206:	4313      	orrs	r3, r2
 8001208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120a:	4a04      	ldr	r2, [pc, #16]	@ (800121c <__NVIC_SetPriorityGrouping+0x40>)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	60d3      	str	r3, [r2, #12]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00
 8001220:	05fa0000 	.word	0x05fa0000

08001224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001228:	4b04      	ldr	r3, [pc, #16]	@ (800123c <__NVIC_GetPriorityGrouping+0x18>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	f003 0307 	and.w	r3, r3, #7
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800124a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124e:	2b00      	cmp	r3, #0
 8001250:	db0b      	blt.n	800126a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	f003 021f 	and.w	r2, r3, #31
 8001258:	4907      	ldr	r1, [pc, #28]	@ (8001278 <__NVIC_EnableIRQ+0x38>)
 800125a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800125e:	095b      	lsrs	r3, r3, #5
 8001260:	2001      	movs	r0, #1
 8001262:	fa00 f202 	lsl.w	r2, r0, r2
 8001266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000e100 	.word	0xe000e100

0800127c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800128c:	2b00      	cmp	r3, #0
 800128e:	db0a      	blt.n	80012a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	490c      	ldr	r1, [pc, #48]	@ (80012c8 <__NVIC_SetPriority+0x4c>)
 8001296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	440b      	add	r3, r1
 80012a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a4:	e00a      	b.n	80012bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4908      	ldr	r1, [pc, #32]	@ (80012cc <__NVIC_SetPriority+0x50>)
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	3b04      	subs	r3, #4
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	440b      	add	r3, r1
 80012ba:	761a      	strb	r2, [r3, #24]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000e100 	.word	0xe000e100
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	@ 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f1c3 0307 	rsb	r3, r3, #7
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	bf28      	it	cs
 80012ee:	2304      	movcs	r3, #4
 80012f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3304      	adds	r3, #4
 80012f6:	2b06      	cmp	r3, #6
 80012f8:	d902      	bls.n	8001300 <NVIC_EncodePriority+0x30>
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3b03      	subs	r3, #3
 80012fe:	e000      	b.n	8001302 <NVIC_EncodePriority+0x32>
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	f04f 32ff 	mov.w	r2, #4294967295
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001318:	f04f 31ff 	mov.w	r1, #4294967295
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	43d9      	mvns	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	4313      	orrs	r3, r2
         );
}
 800132a:	4618      	mov	r0, r3
 800132c:	3724      	adds	r7, #36	@ 0x24
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ff4c 	bl	80011dc <__NVIC_SetPriorityGrouping>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800135a:	f7ff ff63 	bl	8001224 <__NVIC_GetPriorityGrouping>
 800135e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	68b9      	ldr	r1, [r7, #8]
 8001364:	6978      	ldr	r0, [r7, #20]
 8001366:	f7ff ffb3 	bl	80012d0 <NVIC_EncodePriority>
 800136a:	4602      	mov	r2, r0
 800136c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff82 	bl	800127c <__NVIC_SetPriority>
}
 8001378:	bf00      	nop
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff56 	bl	8001240 <__NVIC_EnableIRQ>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80013a4:	f7ff ff0e 	bl	80011c4 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e312      	b.n	80019da <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a66      	ldr	r2, [pc, #408]	@ (8001554 <HAL_DMA_Init+0x1b8>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d04a      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a65      	ldr	r2, [pc, #404]	@ (8001558 <HAL_DMA_Init+0x1bc>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d045      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a63      	ldr	r2, [pc, #396]	@ (800155c <HAL_DMA_Init+0x1c0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d040      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a62      	ldr	r2, [pc, #392]	@ (8001560 <HAL_DMA_Init+0x1c4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d03b      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a60      	ldr	r2, [pc, #384]	@ (8001564 <HAL_DMA_Init+0x1c8>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d036      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a5f      	ldr	r2, [pc, #380]	@ (8001568 <HAL_DMA_Init+0x1cc>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d031      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a5d      	ldr	r2, [pc, #372]	@ (800156c <HAL_DMA_Init+0x1d0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d02c      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a5c      	ldr	r2, [pc, #368]	@ (8001570 <HAL_DMA_Init+0x1d4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d027      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a5a      	ldr	r2, [pc, #360]	@ (8001574 <HAL_DMA_Init+0x1d8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d022      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a59      	ldr	r2, [pc, #356]	@ (8001578 <HAL_DMA_Init+0x1dc>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d01d      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a57      	ldr	r2, [pc, #348]	@ (800157c <HAL_DMA_Init+0x1e0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d018      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a56      	ldr	r2, [pc, #344]	@ (8001580 <HAL_DMA_Init+0x1e4>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d013      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a54      	ldr	r2, [pc, #336]	@ (8001584 <HAL_DMA_Init+0x1e8>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d00e      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a53      	ldr	r2, [pc, #332]	@ (8001588 <HAL_DMA_Init+0x1ec>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d009      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a51      	ldr	r2, [pc, #324]	@ (800158c <HAL_DMA_Init+0x1f0>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d004      	beq.n	8001454 <HAL_DMA_Init+0xb8>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a50      	ldr	r2, [pc, #320]	@ (8001590 <HAL_DMA_Init+0x1f4>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d101      	bne.n	8001458 <HAL_DMA_Init+0xbc>
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <HAL_DMA_Init+0xbe>
 8001458:	2300      	movs	r3, #0
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 813c 	beq.w	80016d8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2202      	movs	r2, #2
 8001464:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a37      	ldr	r2, [pc, #220]	@ (8001554 <HAL_DMA_Init+0x1b8>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d04a      	beq.n	8001510 <HAL_DMA_Init+0x174>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a36      	ldr	r2, [pc, #216]	@ (8001558 <HAL_DMA_Init+0x1bc>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d045      	beq.n	8001510 <HAL_DMA_Init+0x174>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a34      	ldr	r2, [pc, #208]	@ (800155c <HAL_DMA_Init+0x1c0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d040      	beq.n	8001510 <HAL_DMA_Init+0x174>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a33      	ldr	r2, [pc, #204]	@ (8001560 <HAL_DMA_Init+0x1c4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d03b      	beq.n	8001510 <HAL_DMA_Init+0x174>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a31      	ldr	r2, [pc, #196]	@ (8001564 <HAL_DMA_Init+0x1c8>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d036      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a30      	ldr	r2, [pc, #192]	@ (8001568 <HAL_DMA_Init+0x1cc>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d031      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a2e      	ldr	r2, [pc, #184]	@ (800156c <HAL_DMA_Init+0x1d0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d02c      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001570 <HAL_DMA_Init+0x1d4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d027      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001574 <HAL_DMA_Init+0x1d8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d022      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001578 <HAL_DMA_Init+0x1dc>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d01d      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a28      	ldr	r2, [pc, #160]	@ (800157c <HAL_DMA_Init+0x1e0>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d018      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a27      	ldr	r2, [pc, #156]	@ (8001580 <HAL_DMA_Init+0x1e4>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d013      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a25      	ldr	r2, [pc, #148]	@ (8001584 <HAL_DMA_Init+0x1e8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d00e      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a24      	ldr	r2, [pc, #144]	@ (8001588 <HAL_DMA_Init+0x1ec>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d009      	beq.n	8001510 <HAL_DMA_Init+0x174>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a22      	ldr	r2, [pc, #136]	@ (800158c <HAL_DMA_Init+0x1f0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d004      	beq.n	8001510 <HAL_DMA_Init+0x174>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a21      	ldr	r2, [pc, #132]	@ (8001590 <HAL_DMA_Init+0x1f4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d108      	bne.n	8001522 <HAL_DMA_Init+0x186>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0201 	bic.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e007      	b.n	8001532 <HAL_DMA_Init+0x196>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0201 	bic.w	r2, r2, #1
 8001530:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001532:	e02f      	b.n	8001594 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001534:	f7ff fe46 	bl	80011c4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b05      	cmp	r3, #5
 8001540:	d928      	bls.n	8001594 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2220      	movs	r2, #32
 8001546:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2203      	movs	r2, #3
 800154c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e242      	b.n	80019da <HAL_DMA_Init+0x63e>
 8001554:	40020010 	.word	0x40020010
 8001558:	40020028 	.word	0x40020028
 800155c:	40020040 	.word	0x40020040
 8001560:	40020058 	.word	0x40020058
 8001564:	40020070 	.word	0x40020070
 8001568:	40020088 	.word	0x40020088
 800156c:	400200a0 	.word	0x400200a0
 8001570:	400200b8 	.word	0x400200b8
 8001574:	40020410 	.word	0x40020410
 8001578:	40020428 	.word	0x40020428
 800157c:	40020440 	.word	0x40020440
 8001580:	40020458 	.word	0x40020458
 8001584:	40020470 	.word	0x40020470
 8001588:	40020488 	.word	0x40020488
 800158c:	400204a0 	.word	0x400204a0
 8001590:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1c8      	bne.n	8001534 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4b83      	ldr	r3, [pc, #524]	@ (80017bc <HAL_DMA_Init+0x420>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80015ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4313      	orrs	r3, r2
 80015de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d107      	bne.n	80015f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f0:	4313      	orrs	r3, r2
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b28      	cmp	r3, #40	@ 0x28
 80015fe:	d903      	bls.n	8001608 <HAL_DMA_Init+0x26c>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b2e      	cmp	r3, #46	@ 0x2e
 8001606:	d91f      	bls.n	8001648 <HAL_DMA_Init+0x2ac>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b3e      	cmp	r3, #62	@ 0x3e
 800160e:	d903      	bls.n	8001618 <HAL_DMA_Init+0x27c>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b42      	cmp	r3, #66	@ 0x42
 8001616:	d917      	bls.n	8001648 <HAL_DMA_Init+0x2ac>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b46      	cmp	r3, #70	@ 0x46
 800161e:	d903      	bls.n	8001628 <HAL_DMA_Init+0x28c>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b48      	cmp	r3, #72	@ 0x48
 8001626:	d90f      	bls.n	8001648 <HAL_DMA_Init+0x2ac>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b4e      	cmp	r3, #78	@ 0x4e
 800162e:	d903      	bls.n	8001638 <HAL_DMA_Init+0x29c>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b52      	cmp	r3, #82	@ 0x52
 8001636:	d907      	bls.n	8001648 <HAL_DMA_Init+0x2ac>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b73      	cmp	r3, #115	@ 0x73
 800163e:	d905      	bls.n	800164c <HAL_DMA_Init+0x2b0>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b77      	cmp	r3, #119	@ 0x77
 8001646:	d801      	bhi.n	800164c <HAL_DMA_Init+0x2b0>
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <HAL_DMA_Init+0x2b2>
 800164c:	2300      	movs	r3, #0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001658:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f023 0307 	bic.w	r3, r3, #7
 8001670:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4313      	orrs	r3, r2
 800167a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001680:	2b04      	cmp	r3, #4
 8001682:	d117      	bne.n	80016b4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	4313      	orrs	r3, r2
 800168c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00e      	beq.n	80016b4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f002 fb2e 	bl	8003cf8 <DMA_CheckFifoParam>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d008      	beq.n	80016b4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2240      	movs	r2, #64	@ 0x40
 80016a6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e192      	b.n	80019da <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f002 fa69 	bl	8003b94 <DMA_CalcBaseAndBitshift>
 80016c2:	4603      	mov	r3, r0
 80016c4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	223f      	movs	r2, #63	@ 0x3f
 80016d0:	409a      	lsls	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	e0c8      	b.n	800186a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a38      	ldr	r2, [pc, #224]	@ (80017c0 <HAL_DMA_Init+0x424>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d022      	beq.n	8001728 <HAL_DMA_Init+0x38c>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a37      	ldr	r2, [pc, #220]	@ (80017c4 <HAL_DMA_Init+0x428>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d01d      	beq.n	8001728 <HAL_DMA_Init+0x38c>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a35      	ldr	r2, [pc, #212]	@ (80017c8 <HAL_DMA_Init+0x42c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d018      	beq.n	8001728 <HAL_DMA_Init+0x38c>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a34      	ldr	r2, [pc, #208]	@ (80017cc <HAL_DMA_Init+0x430>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d013      	beq.n	8001728 <HAL_DMA_Init+0x38c>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a32      	ldr	r2, [pc, #200]	@ (80017d0 <HAL_DMA_Init+0x434>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d00e      	beq.n	8001728 <HAL_DMA_Init+0x38c>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a31      	ldr	r2, [pc, #196]	@ (80017d4 <HAL_DMA_Init+0x438>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d009      	beq.n	8001728 <HAL_DMA_Init+0x38c>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a2f      	ldr	r2, [pc, #188]	@ (80017d8 <HAL_DMA_Init+0x43c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d004      	beq.n	8001728 <HAL_DMA_Init+0x38c>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a2e      	ldr	r2, [pc, #184]	@ (80017dc <HAL_DMA_Init+0x440>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d101      	bne.n	800172c <HAL_DMA_Init+0x390>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <HAL_DMA_Init+0x392>
 800172c:	2300      	movs	r3, #0
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8092 	beq.w	8001858 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a21      	ldr	r2, [pc, #132]	@ (80017c0 <HAL_DMA_Init+0x424>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d021      	beq.n	8001782 <HAL_DMA_Init+0x3e6>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a20      	ldr	r2, [pc, #128]	@ (80017c4 <HAL_DMA_Init+0x428>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d01c      	beq.n	8001782 <HAL_DMA_Init+0x3e6>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a1e      	ldr	r2, [pc, #120]	@ (80017c8 <HAL_DMA_Init+0x42c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d017      	beq.n	8001782 <HAL_DMA_Init+0x3e6>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a1d      	ldr	r2, [pc, #116]	@ (80017cc <HAL_DMA_Init+0x430>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d012      	beq.n	8001782 <HAL_DMA_Init+0x3e6>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1b      	ldr	r2, [pc, #108]	@ (80017d0 <HAL_DMA_Init+0x434>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d00d      	beq.n	8001782 <HAL_DMA_Init+0x3e6>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a1a      	ldr	r2, [pc, #104]	@ (80017d4 <HAL_DMA_Init+0x438>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d008      	beq.n	8001782 <HAL_DMA_Init+0x3e6>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a18      	ldr	r2, [pc, #96]	@ (80017d8 <HAL_DMA_Init+0x43c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d003      	beq.n	8001782 <HAL_DMA_Init+0x3e6>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a17      	ldr	r2, [pc, #92]	@ (80017dc <HAL_DMA_Init+0x440>)
 8001780:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2202      	movs	r2, #2
 8001786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <HAL_DMA_Init+0x444>)
 800179e:	4013      	ands	r3, r2
 80017a0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b40      	cmp	r3, #64	@ 0x40
 80017a8:	d01c      	beq.n	80017e4 <HAL_DMA_Init+0x448>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b80      	cmp	r3, #128	@ 0x80
 80017b0:	d102      	bne.n	80017b8 <HAL_DMA_Init+0x41c>
 80017b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017b6:	e016      	b.n	80017e6 <HAL_DMA_Init+0x44a>
 80017b8:	2300      	movs	r3, #0
 80017ba:	e014      	b.n	80017e6 <HAL_DMA_Init+0x44a>
 80017bc:	fe10803f 	.word	0xfe10803f
 80017c0:	58025408 	.word	0x58025408
 80017c4:	5802541c 	.word	0x5802541c
 80017c8:	58025430 	.word	0x58025430
 80017cc:	58025444 	.word	0x58025444
 80017d0:	58025458 	.word	0x58025458
 80017d4:	5802546c 	.word	0x5802546c
 80017d8:	58025480 	.word	0x58025480
 80017dc:	58025494 	.word	0x58025494
 80017e0:	fffe000f 	.word	0xfffe000f
 80017e4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68d2      	ldr	r2, [r2, #12]
 80017ea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80017fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001804:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800180c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001814:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4313      	orrs	r3, r2
 800181a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b6e      	ldr	r3, [pc, #440]	@ (80019e4 <HAL_DMA_Init+0x648>)
 800182c:	4413      	add	r3, r2
 800182e:	4a6e      	ldr	r2, [pc, #440]	@ (80019e8 <HAL_DMA_Init+0x64c>)
 8001830:	fba2 2303 	umull	r2, r3, r2, r3
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	009a      	lsls	r2, r3, #2
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f002 f9a9 	bl	8003b94 <DMA_CalcBaseAndBitshift>
 8001842:	4603      	mov	r3, r0
 8001844:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184a:	f003 031f 	and.w	r3, r3, #31
 800184e:	2201      	movs	r2, #1
 8001850:	409a      	lsls	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	e008      	b.n	800186a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2240      	movs	r2, #64	@ 0x40
 800185c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2203      	movs	r2, #3
 8001862:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0b7      	b.n	80019da <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a5f      	ldr	r2, [pc, #380]	@ (80019ec <HAL_DMA_Init+0x650>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d072      	beq.n	800195a <HAL_DMA_Init+0x5be>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a5d      	ldr	r2, [pc, #372]	@ (80019f0 <HAL_DMA_Init+0x654>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d06d      	beq.n	800195a <HAL_DMA_Init+0x5be>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a5c      	ldr	r2, [pc, #368]	@ (80019f4 <HAL_DMA_Init+0x658>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d068      	beq.n	800195a <HAL_DMA_Init+0x5be>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a5a      	ldr	r2, [pc, #360]	@ (80019f8 <HAL_DMA_Init+0x65c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d063      	beq.n	800195a <HAL_DMA_Init+0x5be>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a59      	ldr	r2, [pc, #356]	@ (80019fc <HAL_DMA_Init+0x660>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d05e      	beq.n	800195a <HAL_DMA_Init+0x5be>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a57      	ldr	r2, [pc, #348]	@ (8001a00 <HAL_DMA_Init+0x664>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d059      	beq.n	800195a <HAL_DMA_Init+0x5be>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a56      	ldr	r2, [pc, #344]	@ (8001a04 <HAL_DMA_Init+0x668>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d054      	beq.n	800195a <HAL_DMA_Init+0x5be>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a54      	ldr	r2, [pc, #336]	@ (8001a08 <HAL_DMA_Init+0x66c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d04f      	beq.n	800195a <HAL_DMA_Init+0x5be>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a53      	ldr	r2, [pc, #332]	@ (8001a0c <HAL_DMA_Init+0x670>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d04a      	beq.n	800195a <HAL_DMA_Init+0x5be>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a51      	ldr	r2, [pc, #324]	@ (8001a10 <HAL_DMA_Init+0x674>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d045      	beq.n	800195a <HAL_DMA_Init+0x5be>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a50      	ldr	r2, [pc, #320]	@ (8001a14 <HAL_DMA_Init+0x678>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d040      	beq.n	800195a <HAL_DMA_Init+0x5be>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001a18 <HAL_DMA_Init+0x67c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d03b      	beq.n	800195a <HAL_DMA_Init+0x5be>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a4d      	ldr	r2, [pc, #308]	@ (8001a1c <HAL_DMA_Init+0x680>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d036      	beq.n	800195a <HAL_DMA_Init+0x5be>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a4b      	ldr	r2, [pc, #300]	@ (8001a20 <HAL_DMA_Init+0x684>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d031      	beq.n	800195a <HAL_DMA_Init+0x5be>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001a24 <HAL_DMA_Init+0x688>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d02c      	beq.n	800195a <HAL_DMA_Init+0x5be>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a48      	ldr	r2, [pc, #288]	@ (8001a28 <HAL_DMA_Init+0x68c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d027      	beq.n	800195a <HAL_DMA_Init+0x5be>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a47      	ldr	r2, [pc, #284]	@ (8001a2c <HAL_DMA_Init+0x690>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d022      	beq.n	800195a <HAL_DMA_Init+0x5be>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a45      	ldr	r2, [pc, #276]	@ (8001a30 <HAL_DMA_Init+0x694>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01d      	beq.n	800195a <HAL_DMA_Init+0x5be>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a44      	ldr	r2, [pc, #272]	@ (8001a34 <HAL_DMA_Init+0x698>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d018      	beq.n	800195a <HAL_DMA_Init+0x5be>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a42      	ldr	r2, [pc, #264]	@ (8001a38 <HAL_DMA_Init+0x69c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d013      	beq.n	800195a <HAL_DMA_Init+0x5be>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a41      	ldr	r2, [pc, #260]	@ (8001a3c <HAL_DMA_Init+0x6a0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d00e      	beq.n	800195a <HAL_DMA_Init+0x5be>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a3f      	ldr	r2, [pc, #252]	@ (8001a40 <HAL_DMA_Init+0x6a4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d009      	beq.n	800195a <HAL_DMA_Init+0x5be>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a3e      	ldr	r2, [pc, #248]	@ (8001a44 <HAL_DMA_Init+0x6a8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d004      	beq.n	800195a <HAL_DMA_Init+0x5be>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a3c      	ldr	r2, [pc, #240]	@ (8001a48 <HAL_DMA_Init+0x6ac>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d101      	bne.n	800195e <HAL_DMA_Init+0x5c2>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <HAL_DMA_Init+0x5c4>
 800195e:	2300      	movs	r3, #0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d032      	beq.n	80019ca <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f002 fa43 	bl	8003df0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b80      	cmp	r3, #128	@ 0x80
 8001970:	d102      	bne.n	8001978 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800198c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d010      	beq.n	80019b8 <HAL_DMA_Init+0x61c>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b08      	cmp	r3, #8
 800199c:	d80c      	bhi.n	80019b8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f002 fac0 	bl	8003f24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	e008      	b.n	80019ca <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	a7fdabf8 	.word	0xa7fdabf8
 80019e8:	cccccccd 	.word	0xcccccccd
 80019ec:	40020010 	.word	0x40020010
 80019f0:	40020028 	.word	0x40020028
 80019f4:	40020040 	.word	0x40020040
 80019f8:	40020058 	.word	0x40020058
 80019fc:	40020070 	.word	0x40020070
 8001a00:	40020088 	.word	0x40020088
 8001a04:	400200a0 	.word	0x400200a0
 8001a08:	400200b8 	.word	0x400200b8
 8001a0c:	40020410 	.word	0x40020410
 8001a10:	40020428 	.word	0x40020428
 8001a14:	40020440 	.word	0x40020440
 8001a18:	40020458 	.word	0x40020458
 8001a1c:	40020470 	.word	0x40020470
 8001a20:	40020488 	.word	0x40020488
 8001a24:	400204a0 	.word	0x400204a0
 8001a28:	400204b8 	.word	0x400204b8
 8001a2c:	58025408 	.word	0x58025408
 8001a30:	5802541c 	.word	0x5802541c
 8001a34:	58025430 	.word	0x58025430
 8001a38:	58025444 	.word	0x58025444
 8001a3c:	58025458 	.word	0x58025458
 8001a40:	5802546c 	.word	0x5802546c
 8001a44:	58025480 	.word	0x58025480
 8001a48:	58025494 	.word	0x58025494

08001a4c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
 8001a58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e226      	b.n	8001eb6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_DMA_Start_IT+0x2a>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e21f      	b.n	8001eb6 <HAL_DMA_Start_IT+0x46a>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	f040 820a 	bne.w	8001ea0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a68      	ldr	r2, [pc, #416]	@ (8001c40 <HAL_DMA_Start_IT+0x1f4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d04a      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a66      	ldr	r2, [pc, #408]	@ (8001c44 <HAL_DMA_Start_IT+0x1f8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d045      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a65      	ldr	r2, [pc, #404]	@ (8001c48 <HAL_DMA_Start_IT+0x1fc>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d040      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a63      	ldr	r2, [pc, #396]	@ (8001c4c <HAL_DMA_Start_IT+0x200>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d03b      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a62      	ldr	r2, [pc, #392]	@ (8001c50 <HAL_DMA_Start_IT+0x204>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d036      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a60      	ldr	r2, [pc, #384]	@ (8001c54 <HAL_DMA_Start_IT+0x208>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d031      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a5f      	ldr	r2, [pc, #380]	@ (8001c58 <HAL_DMA_Start_IT+0x20c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d02c      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a5d      	ldr	r2, [pc, #372]	@ (8001c5c <HAL_DMA_Start_IT+0x210>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d027      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a5c      	ldr	r2, [pc, #368]	@ (8001c60 <HAL_DMA_Start_IT+0x214>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d022      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a5a      	ldr	r2, [pc, #360]	@ (8001c64 <HAL_DMA_Start_IT+0x218>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01d      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a59      	ldr	r2, [pc, #356]	@ (8001c68 <HAL_DMA_Start_IT+0x21c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d018      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a57      	ldr	r2, [pc, #348]	@ (8001c6c <HAL_DMA_Start_IT+0x220>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a56      	ldr	r2, [pc, #344]	@ (8001c70 <HAL_DMA_Start_IT+0x224>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d00e      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a54      	ldr	r2, [pc, #336]	@ (8001c74 <HAL_DMA_Start_IT+0x228>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d009      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a53      	ldr	r2, [pc, #332]	@ (8001c78 <HAL_DMA_Start_IT+0x22c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d004      	beq.n	8001b3a <HAL_DMA_Start_IT+0xee>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a51      	ldr	r2, [pc, #324]	@ (8001c7c <HAL_DMA_Start_IT+0x230>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d108      	bne.n	8001b4c <HAL_DMA_Start_IT+0x100>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e007      	b.n	8001b5c <HAL_DMA_Start_IT+0x110>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0201 	bic.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f001 fe6a 	bl	800383c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a34      	ldr	r2, [pc, #208]	@ (8001c40 <HAL_DMA_Start_IT+0x1f4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d04a      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a33      	ldr	r2, [pc, #204]	@ (8001c44 <HAL_DMA_Start_IT+0x1f8>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d045      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a31      	ldr	r2, [pc, #196]	@ (8001c48 <HAL_DMA_Start_IT+0x1fc>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d040      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a30      	ldr	r2, [pc, #192]	@ (8001c4c <HAL_DMA_Start_IT+0x200>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d03b      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a2e      	ldr	r2, [pc, #184]	@ (8001c50 <HAL_DMA_Start_IT+0x204>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d036      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c54 <HAL_DMA_Start_IT+0x208>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d031      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c58 <HAL_DMA_Start_IT+0x20c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d02c      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a2a      	ldr	r2, [pc, #168]	@ (8001c5c <HAL_DMA_Start_IT+0x210>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d027      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a28      	ldr	r2, [pc, #160]	@ (8001c60 <HAL_DMA_Start_IT+0x214>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d022      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a27      	ldr	r2, [pc, #156]	@ (8001c64 <HAL_DMA_Start_IT+0x218>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d01d      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a25      	ldr	r2, [pc, #148]	@ (8001c68 <HAL_DMA_Start_IT+0x21c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d018      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a24      	ldr	r2, [pc, #144]	@ (8001c6c <HAL_DMA_Start_IT+0x220>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d013      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a22      	ldr	r2, [pc, #136]	@ (8001c70 <HAL_DMA_Start_IT+0x224>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00e      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a21      	ldr	r2, [pc, #132]	@ (8001c74 <HAL_DMA_Start_IT+0x228>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d009      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c78 <HAL_DMA_Start_IT+0x22c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d004      	beq.n	8001c08 <HAL_DMA_Start_IT+0x1bc>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1e      	ldr	r2, [pc, #120]	@ (8001c7c <HAL_DMA_Start_IT+0x230>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d101      	bne.n	8001c0c <HAL_DMA_Start_IT+0x1c0>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <HAL_DMA_Start_IT+0x1c2>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d036      	beq.n	8001c80 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 021e 	bic.w	r2, r3, #30
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 0216 	orr.w	r2, r2, #22
 8001c24:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d03e      	beq.n	8001cac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0208 	orr.w	r2, r2, #8
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e035      	b.n	8001cac <HAL_DMA_Start_IT+0x260>
 8001c40:	40020010 	.word	0x40020010
 8001c44:	40020028 	.word	0x40020028
 8001c48:	40020040 	.word	0x40020040
 8001c4c:	40020058 	.word	0x40020058
 8001c50:	40020070 	.word	0x40020070
 8001c54:	40020088 	.word	0x40020088
 8001c58:	400200a0 	.word	0x400200a0
 8001c5c:	400200b8 	.word	0x400200b8
 8001c60:	40020410 	.word	0x40020410
 8001c64:	40020428 	.word	0x40020428
 8001c68:	40020440 	.word	0x40020440
 8001c6c:	40020458 	.word	0x40020458
 8001c70:	40020470 	.word	0x40020470
 8001c74:	40020488 	.word	0x40020488
 8001c78:	400204a0 	.word	0x400204a0
 8001c7c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 020e 	bic.w	r2, r3, #14
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 020a 	orr.w	r2, r2, #10
 8001c92:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d007      	beq.n	8001cac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0204 	orr.w	r2, r2, #4
 8001caa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a83      	ldr	r2, [pc, #524]	@ (8001ec0 <HAL_DMA_Start_IT+0x474>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d072      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a82      	ldr	r2, [pc, #520]	@ (8001ec4 <HAL_DMA_Start_IT+0x478>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d06d      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a80      	ldr	r2, [pc, #512]	@ (8001ec8 <HAL_DMA_Start_IT+0x47c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d068      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a7f      	ldr	r2, [pc, #508]	@ (8001ecc <HAL_DMA_Start_IT+0x480>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d063      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a7d      	ldr	r2, [pc, #500]	@ (8001ed0 <HAL_DMA_Start_IT+0x484>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d05e      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a7c      	ldr	r2, [pc, #496]	@ (8001ed4 <HAL_DMA_Start_IT+0x488>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d059      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a7a      	ldr	r2, [pc, #488]	@ (8001ed8 <HAL_DMA_Start_IT+0x48c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d054      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a79      	ldr	r2, [pc, #484]	@ (8001edc <HAL_DMA_Start_IT+0x490>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d04f      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a77      	ldr	r2, [pc, #476]	@ (8001ee0 <HAL_DMA_Start_IT+0x494>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d04a      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a76      	ldr	r2, [pc, #472]	@ (8001ee4 <HAL_DMA_Start_IT+0x498>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d045      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a74      	ldr	r2, [pc, #464]	@ (8001ee8 <HAL_DMA_Start_IT+0x49c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d040      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a73      	ldr	r2, [pc, #460]	@ (8001eec <HAL_DMA_Start_IT+0x4a0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d03b      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a71      	ldr	r2, [pc, #452]	@ (8001ef0 <HAL_DMA_Start_IT+0x4a4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d036      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a70      	ldr	r2, [pc, #448]	@ (8001ef4 <HAL_DMA_Start_IT+0x4a8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d031      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a6e      	ldr	r2, [pc, #440]	@ (8001ef8 <HAL_DMA_Start_IT+0x4ac>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d02c      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a6d      	ldr	r2, [pc, #436]	@ (8001efc <HAL_DMA_Start_IT+0x4b0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d027      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a6b      	ldr	r2, [pc, #428]	@ (8001f00 <HAL_DMA_Start_IT+0x4b4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d022      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a6a      	ldr	r2, [pc, #424]	@ (8001f04 <HAL_DMA_Start_IT+0x4b8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d01d      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a68      	ldr	r2, [pc, #416]	@ (8001f08 <HAL_DMA_Start_IT+0x4bc>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d018      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a67      	ldr	r2, [pc, #412]	@ (8001f0c <HAL_DMA_Start_IT+0x4c0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d013      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a65      	ldr	r2, [pc, #404]	@ (8001f10 <HAL_DMA_Start_IT+0x4c4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00e      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a64      	ldr	r2, [pc, #400]	@ (8001f14 <HAL_DMA_Start_IT+0x4c8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d009      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a62      	ldr	r2, [pc, #392]	@ (8001f18 <HAL_DMA_Start_IT+0x4cc>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d004      	beq.n	8001d9c <HAL_DMA_Start_IT+0x350>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a61      	ldr	r2, [pc, #388]	@ (8001f1c <HAL_DMA_Start_IT+0x4d0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_DMA_Start_IT+0x354>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <HAL_DMA_Start_IT+0x356>
 8001da0:	2300      	movs	r3, #0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d01a      	beq.n	8001ddc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d007      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dc2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d007      	beq.n	8001ddc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dda:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a37      	ldr	r2, [pc, #220]	@ (8001ec0 <HAL_DMA_Start_IT+0x474>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d04a      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a36      	ldr	r2, [pc, #216]	@ (8001ec4 <HAL_DMA_Start_IT+0x478>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d045      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a34      	ldr	r2, [pc, #208]	@ (8001ec8 <HAL_DMA_Start_IT+0x47c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d040      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a33      	ldr	r2, [pc, #204]	@ (8001ecc <HAL_DMA_Start_IT+0x480>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d03b      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a31      	ldr	r2, [pc, #196]	@ (8001ed0 <HAL_DMA_Start_IT+0x484>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d036      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a30      	ldr	r2, [pc, #192]	@ (8001ed4 <HAL_DMA_Start_IT+0x488>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d031      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a2e      	ldr	r2, [pc, #184]	@ (8001ed8 <HAL_DMA_Start_IT+0x48c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d02c      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a2d      	ldr	r2, [pc, #180]	@ (8001edc <HAL_DMA_Start_IT+0x490>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d027      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a2b      	ldr	r2, [pc, #172]	@ (8001ee0 <HAL_DMA_Start_IT+0x494>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d022      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ee4 <HAL_DMA_Start_IT+0x498>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d01d      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a28      	ldr	r2, [pc, #160]	@ (8001ee8 <HAL_DMA_Start_IT+0x49c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d018      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a27      	ldr	r2, [pc, #156]	@ (8001eec <HAL_DMA_Start_IT+0x4a0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d013      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a25      	ldr	r2, [pc, #148]	@ (8001ef0 <HAL_DMA_Start_IT+0x4a4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00e      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a24      	ldr	r2, [pc, #144]	@ (8001ef4 <HAL_DMA_Start_IT+0x4a8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d009      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a22      	ldr	r2, [pc, #136]	@ (8001ef8 <HAL_DMA_Start_IT+0x4ac>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d004      	beq.n	8001e7c <HAL_DMA_Start_IT+0x430>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a21      	ldr	r2, [pc, #132]	@ (8001efc <HAL_DMA_Start_IT+0x4b0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d108      	bne.n	8001e8e <HAL_DMA_Start_IT+0x442>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	e012      	b.n	8001eb4 <HAL_DMA_Start_IT+0x468>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0201 	orr.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	e009      	b.n	8001eb4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ea6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40020010 	.word	0x40020010
 8001ec4:	40020028 	.word	0x40020028
 8001ec8:	40020040 	.word	0x40020040
 8001ecc:	40020058 	.word	0x40020058
 8001ed0:	40020070 	.word	0x40020070
 8001ed4:	40020088 	.word	0x40020088
 8001ed8:	400200a0 	.word	0x400200a0
 8001edc:	400200b8 	.word	0x400200b8
 8001ee0:	40020410 	.word	0x40020410
 8001ee4:	40020428 	.word	0x40020428
 8001ee8:	40020440 	.word	0x40020440
 8001eec:	40020458 	.word	0x40020458
 8001ef0:	40020470 	.word	0x40020470
 8001ef4:	40020488 	.word	0x40020488
 8001ef8:	400204a0 	.word	0x400204a0
 8001efc:	400204b8 	.word	0x400204b8
 8001f00:	58025408 	.word	0x58025408
 8001f04:	5802541c 	.word	0x5802541c
 8001f08:	58025430 	.word	0x58025430
 8001f0c:	58025444 	.word	0x58025444
 8001f10:	58025458 	.word	0x58025458
 8001f14:	5802546c 	.word	0x5802546c
 8001f18:	58025480 	.word	0x58025480
 8001f1c:	58025494 	.word	0x58025494

08001f20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001f28:	f7ff f94c 	bl	80011c4 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e2dc      	b.n	80024f2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d008      	beq.n	8001f56 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2280      	movs	r2, #128	@ 0x80
 8001f48:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e2cd      	b.n	80024f2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a76      	ldr	r2, [pc, #472]	@ (8002134 <HAL_DMA_Abort+0x214>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d04a      	beq.n	8001ff6 <HAL_DMA_Abort+0xd6>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a74      	ldr	r2, [pc, #464]	@ (8002138 <HAL_DMA_Abort+0x218>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d045      	beq.n	8001ff6 <HAL_DMA_Abort+0xd6>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a73      	ldr	r2, [pc, #460]	@ (800213c <HAL_DMA_Abort+0x21c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d040      	beq.n	8001ff6 <HAL_DMA_Abort+0xd6>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a71      	ldr	r2, [pc, #452]	@ (8002140 <HAL_DMA_Abort+0x220>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d03b      	beq.n	8001ff6 <HAL_DMA_Abort+0xd6>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a70      	ldr	r2, [pc, #448]	@ (8002144 <HAL_DMA_Abort+0x224>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d036      	beq.n	8001ff6 <HAL_DMA_Abort+0xd6>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a6e      	ldr	r2, [pc, #440]	@ (8002148 <HAL_DMA_Abort+0x228>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d031      	beq.n	8001ff6 <HAL_DMA_Abort+0xd6>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a6d      	ldr	r2, [pc, #436]	@ (800214c <HAL_DMA_Abort+0x22c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d02c      	beq.n	8001ff6 <HAL_DMA_Abort+0xd6>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a6b      	ldr	r2, [pc, #428]	@ (8002150 <HAL_DMA_Abort+0x230>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d027      	beq.n	8001ff6 <HAL_DMA_Abort+0xd6>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a6a      	ldr	r2, [pc, #424]	@ (8002154 <HAL_DMA_Abort+0x234>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d022      	beq.n	8001ff6 <HAL_DMA_Abort+0xd6>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a68      	ldr	r2, [pc, #416]	@ (8002158 <HAL_DMA_Abort+0x238>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01d      	beq.n	8001ff6 <HAL_DMA_Abort+0xd6>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a67      	ldr	r2, [pc, #412]	@ (800215c <HAL_DMA_Abort+0x23c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d018      	beq.n	8001ff6 <HAL_DMA_Abort+0xd6>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a65      	ldr	r2, [pc, #404]	@ (8002160 <HAL_DMA_Abort+0x240>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_DMA_Abort+0xd6>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a64      	ldr	r2, [pc, #400]	@ (8002164 <HAL_DMA_Abort+0x244>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00e      	beq.n	8001ff6 <HAL_DMA_Abort+0xd6>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a62      	ldr	r2, [pc, #392]	@ (8002168 <HAL_DMA_Abort+0x248>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d009      	beq.n	8001ff6 <HAL_DMA_Abort+0xd6>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a61      	ldr	r2, [pc, #388]	@ (800216c <HAL_DMA_Abort+0x24c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d004      	beq.n	8001ff6 <HAL_DMA_Abort+0xd6>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a5f      	ldr	r2, [pc, #380]	@ (8002170 <HAL_DMA_Abort+0x250>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d101      	bne.n	8001ffa <HAL_DMA_Abort+0xda>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_DMA_Abort+0xdc>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d013      	beq.n	8002028 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 021e 	bic.w	r2, r2, #30
 800200e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800201e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	e00a      	b.n	800203e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 020e 	bic.w	r2, r2, #14
 8002036:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a3c      	ldr	r2, [pc, #240]	@ (8002134 <HAL_DMA_Abort+0x214>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d072      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a3a      	ldr	r2, [pc, #232]	@ (8002138 <HAL_DMA_Abort+0x218>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d06d      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a39      	ldr	r2, [pc, #228]	@ (800213c <HAL_DMA_Abort+0x21c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d068      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a37      	ldr	r2, [pc, #220]	@ (8002140 <HAL_DMA_Abort+0x220>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d063      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a36      	ldr	r2, [pc, #216]	@ (8002144 <HAL_DMA_Abort+0x224>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d05e      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a34      	ldr	r2, [pc, #208]	@ (8002148 <HAL_DMA_Abort+0x228>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d059      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a33      	ldr	r2, [pc, #204]	@ (800214c <HAL_DMA_Abort+0x22c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d054      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a31      	ldr	r2, [pc, #196]	@ (8002150 <HAL_DMA_Abort+0x230>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d04f      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a30      	ldr	r2, [pc, #192]	@ (8002154 <HAL_DMA_Abort+0x234>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d04a      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a2e      	ldr	r2, [pc, #184]	@ (8002158 <HAL_DMA_Abort+0x238>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d045      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a2d      	ldr	r2, [pc, #180]	@ (800215c <HAL_DMA_Abort+0x23c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d040      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002160 <HAL_DMA_Abort+0x240>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d03b      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002164 <HAL_DMA_Abort+0x244>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d036      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a28      	ldr	r2, [pc, #160]	@ (8002168 <HAL_DMA_Abort+0x248>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d031      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a27      	ldr	r2, [pc, #156]	@ (800216c <HAL_DMA_Abort+0x24c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d02c      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a25      	ldr	r2, [pc, #148]	@ (8002170 <HAL_DMA_Abort+0x250>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d027      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a24      	ldr	r2, [pc, #144]	@ (8002174 <HAL_DMA_Abort+0x254>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d022      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a22      	ldr	r2, [pc, #136]	@ (8002178 <HAL_DMA_Abort+0x258>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01d      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a21      	ldr	r2, [pc, #132]	@ (800217c <HAL_DMA_Abort+0x25c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d018      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1f      	ldr	r2, [pc, #124]	@ (8002180 <HAL_DMA_Abort+0x260>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1e      	ldr	r2, [pc, #120]	@ (8002184 <HAL_DMA_Abort+0x264>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00e      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1c      	ldr	r2, [pc, #112]	@ (8002188 <HAL_DMA_Abort+0x268>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d009      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a1b      	ldr	r2, [pc, #108]	@ (800218c <HAL_DMA_Abort+0x26c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d004      	beq.n	800212e <HAL_DMA_Abort+0x20e>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a19      	ldr	r2, [pc, #100]	@ (8002190 <HAL_DMA_Abort+0x270>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d132      	bne.n	8002194 <HAL_DMA_Abort+0x274>
 800212e:	2301      	movs	r3, #1
 8002130:	e031      	b.n	8002196 <HAL_DMA_Abort+0x276>
 8002132:	bf00      	nop
 8002134:	40020010 	.word	0x40020010
 8002138:	40020028 	.word	0x40020028
 800213c:	40020040 	.word	0x40020040
 8002140:	40020058 	.word	0x40020058
 8002144:	40020070 	.word	0x40020070
 8002148:	40020088 	.word	0x40020088
 800214c:	400200a0 	.word	0x400200a0
 8002150:	400200b8 	.word	0x400200b8
 8002154:	40020410 	.word	0x40020410
 8002158:	40020428 	.word	0x40020428
 800215c:	40020440 	.word	0x40020440
 8002160:	40020458 	.word	0x40020458
 8002164:	40020470 	.word	0x40020470
 8002168:	40020488 	.word	0x40020488
 800216c:	400204a0 	.word	0x400204a0
 8002170:	400204b8 	.word	0x400204b8
 8002174:	58025408 	.word	0x58025408
 8002178:	5802541c 	.word	0x5802541c
 800217c:	58025430 	.word	0x58025430
 8002180:	58025444 	.word	0x58025444
 8002184:	58025458 	.word	0x58025458
 8002188:	5802546c 	.word	0x5802546c
 800218c:	58025480 	.word	0x58025480
 8002190:	58025494 	.word	0x58025494
 8002194:	2300      	movs	r3, #0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d007      	beq.n	80021aa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a6d      	ldr	r2, [pc, #436]	@ (8002364 <HAL_DMA_Abort+0x444>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d04a      	beq.n	800224a <HAL_DMA_Abort+0x32a>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a6b      	ldr	r2, [pc, #428]	@ (8002368 <HAL_DMA_Abort+0x448>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d045      	beq.n	800224a <HAL_DMA_Abort+0x32a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a6a      	ldr	r2, [pc, #424]	@ (800236c <HAL_DMA_Abort+0x44c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d040      	beq.n	800224a <HAL_DMA_Abort+0x32a>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a68      	ldr	r2, [pc, #416]	@ (8002370 <HAL_DMA_Abort+0x450>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d03b      	beq.n	800224a <HAL_DMA_Abort+0x32a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a67      	ldr	r2, [pc, #412]	@ (8002374 <HAL_DMA_Abort+0x454>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d036      	beq.n	800224a <HAL_DMA_Abort+0x32a>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a65      	ldr	r2, [pc, #404]	@ (8002378 <HAL_DMA_Abort+0x458>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d031      	beq.n	800224a <HAL_DMA_Abort+0x32a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a64      	ldr	r2, [pc, #400]	@ (800237c <HAL_DMA_Abort+0x45c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d02c      	beq.n	800224a <HAL_DMA_Abort+0x32a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a62      	ldr	r2, [pc, #392]	@ (8002380 <HAL_DMA_Abort+0x460>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d027      	beq.n	800224a <HAL_DMA_Abort+0x32a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a61      	ldr	r2, [pc, #388]	@ (8002384 <HAL_DMA_Abort+0x464>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d022      	beq.n	800224a <HAL_DMA_Abort+0x32a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a5f      	ldr	r2, [pc, #380]	@ (8002388 <HAL_DMA_Abort+0x468>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d01d      	beq.n	800224a <HAL_DMA_Abort+0x32a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a5e      	ldr	r2, [pc, #376]	@ (800238c <HAL_DMA_Abort+0x46c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d018      	beq.n	800224a <HAL_DMA_Abort+0x32a>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a5c      	ldr	r2, [pc, #368]	@ (8002390 <HAL_DMA_Abort+0x470>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d013      	beq.n	800224a <HAL_DMA_Abort+0x32a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a5b      	ldr	r2, [pc, #364]	@ (8002394 <HAL_DMA_Abort+0x474>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d00e      	beq.n	800224a <HAL_DMA_Abort+0x32a>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a59      	ldr	r2, [pc, #356]	@ (8002398 <HAL_DMA_Abort+0x478>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d009      	beq.n	800224a <HAL_DMA_Abort+0x32a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a58      	ldr	r2, [pc, #352]	@ (800239c <HAL_DMA_Abort+0x47c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d004      	beq.n	800224a <HAL_DMA_Abort+0x32a>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a56      	ldr	r2, [pc, #344]	@ (80023a0 <HAL_DMA_Abort+0x480>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d108      	bne.n	800225c <HAL_DMA_Abort+0x33c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0201 	bic.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	e007      	b.n	800226c <HAL_DMA_Abort+0x34c>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0201 	bic.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800226c:	e013      	b.n	8002296 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800226e:	f7fe ffa9 	bl	80011c4 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b05      	cmp	r3, #5
 800227a:	d90c      	bls.n	8002296 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2220      	movs	r2, #32
 8002280:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2203      	movs	r2, #3
 8002286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e12d      	b.n	80024f2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1e5      	bne.n	800226e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002364 <HAL_DMA_Abort+0x444>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d04a      	beq.n	8002342 <HAL_DMA_Abort+0x422>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002368 <HAL_DMA_Abort+0x448>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d045      	beq.n	8002342 <HAL_DMA_Abort+0x422>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a2c      	ldr	r2, [pc, #176]	@ (800236c <HAL_DMA_Abort+0x44c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d040      	beq.n	8002342 <HAL_DMA_Abort+0x422>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002370 <HAL_DMA_Abort+0x450>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d03b      	beq.n	8002342 <HAL_DMA_Abort+0x422>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a29      	ldr	r2, [pc, #164]	@ (8002374 <HAL_DMA_Abort+0x454>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d036      	beq.n	8002342 <HAL_DMA_Abort+0x422>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a27      	ldr	r2, [pc, #156]	@ (8002378 <HAL_DMA_Abort+0x458>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d031      	beq.n	8002342 <HAL_DMA_Abort+0x422>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a26      	ldr	r2, [pc, #152]	@ (800237c <HAL_DMA_Abort+0x45c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d02c      	beq.n	8002342 <HAL_DMA_Abort+0x422>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a24      	ldr	r2, [pc, #144]	@ (8002380 <HAL_DMA_Abort+0x460>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d027      	beq.n	8002342 <HAL_DMA_Abort+0x422>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a23      	ldr	r2, [pc, #140]	@ (8002384 <HAL_DMA_Abort+0x464>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d022      	beq.n	8002342 <HAL_DMA_Abort+0x422>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a21      	ldr	r2, [pc, #132]	@ (8002388 <HAL_DMA_Abort+0x468>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d01d      	beq.n	8002342 <HAL_DMA_Abort+0x422>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a20      	ldr	r2, [pc, #128]	@ (800238c <HAL_DMA_Abort+0x46c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d018      	beq.n	8002342 <HAL_DMA_Abort+0x422>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a1e      	ldr	r2, [pc, #120]	@ (8002390 <HAL_DMA_Abort+0x470>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_DMA_Abort+0x422>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a1d      	ldr	r2, [pc, #116]	@ (8002394 <HAL_DMA_Abort+0x474>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d00e      	beq.n	8002342 <HAL_DMA_Abort+0x422>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a1b      	ldr	r2, [pc, #108]	@ (8002398 <HAL_DMA_Abort+0x478>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d009      	beq.n	8002342 <HAL_DMA_Abort+0x422>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a1a      	ldr	r2, [pc, #104]	@ (800239c <HAL_DMA_Abort+0x47c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d004      	beq.n	8002342 <HAL_DMA_Abort+0x422>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a18      	ldr	r2, [pc, #96]	@ (80023a0 <HAL_DMA_Abort+0x480>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d101      	bne.n	8002346 <HAL_DMA_Abort+0x426>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <HAL_DMA_Abort+0x428>
 8002346:	2300      	movs	r3, #0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d02b      	beq.n	80023a4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002350:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002356:	f003 031f 	and.w	r3, r3, #31
 800235a:	223f      	movs	r2, #63	@ 0x3f
 800235c:	409a      	lsls	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	e02a      	b.n	80023ba <HAL_DMA_Abort+0x49a>
 8002364:	40020010 	.word	0x40020010
 8002368:	40020028 	.word	0x40020028
 800236c:	40020040 	.word	0x40020040
 8002370:	40020058 	.word	0x40020058
 8002374:	40020070 	.word	0x40020070
 8002378:	40020088 	.word	0x40020088
 800237c:	400200a0 	.word	0x400200a0
 8002380:	400200b8 	.word	0x400200b8
 8002384:	40020410 	.word	0x40020410
 8002388:	40020428 	.word	0x40020428
 800238c:	40020440 	.word	0x40020440
 8002390:	40020458 	.word	0x40020458
 8002394:	40020470 	.word	0x40020470
 8002398:	40020488 	.word	0x40020488
 800239c:	400204a0 	.word	0x400204a0
 80023a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ae:	f003 031f 	and.w	r3, r3, #31
 80023b2:	2201      	movs	r2, #1
 80023b4:	409a      	lsls	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a4f      	ldr	r2, [pc, #316]	@ (80024fc <HAL_DMA_Abort+0x5dc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d072      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a4d      	ldr	r2, [pc, #308]	@ (8002500 <HAL_DMA_Abort+0x5e0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d06d      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a4c      	ldr	r2, [pc, #304]	@ (8002504 <HAL_DMA_Abort+0x5e4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d068      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a4a      	ldr	r2, [pc, #296]	@ (8002508 <HAL_DMA_Abort+0x5e8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d063      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a49      	ldr	r2, [pc, #292]	@ (800250c <HAL_DMA_Abort+0x5ec>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d05e      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a47      	ldr	r2, [pc, #284]	@ (8002510 <HAL_DMA_Abort+0x5f0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d059      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a46      	ldr	r2, [pc, #280]	@ (8002514 <HAL_DMA_Abort+0x5f4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d054      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a44      	ldr	r2, [pc, #272]	@ (8002518 <HAL_DMA_Abort+0x5f8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d04f      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a43      	ldr	r2, [pc, #268]	@ (800251c <HAL_DMA_Abort+0x5fc>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d04a      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a41      	ldr	r2, [pc, #260]	@ (8002520 <HAL_DMA_Abort+0x600>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d045      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a40      	ldr	r2, [pc, #256]	@ (8002524 <HAL_DMA_Abort+0x604>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d040      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a3e      	ldr	r2, [pc, #248]	@ (8002528 <HAL_DMA_Abort+0x608>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d03b      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a3d      	ldr	r2, [pc, #244]	@ (800252c <HAL_DMA_Abort+0x60c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d036      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a3b      	ldr	r2, [pc, #236]	@ (8002530 <HAL_DMA_Abort+0x610>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d031      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a3a      	ldr	r2, [pc, #232]	@ (8002534 <HAL_DMA_Abort+0x614>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d02c      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a38      	ldr	r2, [pc, #224]	@ (8002538 <HAL_DMA_Abort+0x618>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d027      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a37      	ldr	r2, [pc, #220]	@ (800253c <HAL_DMA_Abort+0x61c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d022      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a35      	ldr	r2, [pc, #212]	@ (8002540 <HAL_DMA_Abort+0x620>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01d      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a34      	ldr	r2, [pc, #208]	@ (8002544 <HAL_DMA_Abort+0x624>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d018      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a32      	ldr	r2, [pc, #200]	@ (8002548 <HAL_DMA_Abort+0x628>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a31      	ldr	r2, [pc, #196]	@ (800254c <HAL_DMA_Abort+0x62c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00e      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a2f      	ldr	r2, [pc, #188]	@ (8002550 <HAL_DMA_Abort+0x630>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d009      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a2e      	ldr	r2, [pc, #184]	@ (8002554 <HAL_DMA_Abort+0x634>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d004      	beq.n	80024aa <HAL_DMA_Abort+0x58a>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002558 <HAL_DMA_Abort+0x638>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_DMA_Abort+0x58e>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_DMA_Abort+0x590>
 80024ae:	2300      	movs	r3, #0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d015      	beq.n	80024e0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80024bc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00c      	beq.n	80024e0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024d4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80024de:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40020010 	.word	0x40020010
 8002500:	40020028 	.word	0x40020028
 8002504:	40020040 	.word	0x40020040
 8002508:	40020058 	.word	0x40020058
 800250c:	40020070 	.word	0x40020070
 8002510:	40020088 	.word	0x40020088
 8002514:	400200a0 	.word	0x400200a0
 8002518:	400200b8 	.word	0x400200b8
 800251c:	40020410 	.word	0x40020410
 8002520:	40020428 	.word	0x40020428
 8002524:	40020440 	.word	0x40020440
 8002528:	40020458 	.word	0x40020458
 800252c:	40020470 	.word	0x40020470
 8002530:	40020488 	.word	0x40020488
 8002534:	400204a0 	.word	0x400204a0
 8002538:	400204b8 	.word	0x400204b8
 800253c:	58025408 	.word	0x58025408
 8002540:	5802541c 	.word	0x5802541c
 8002544:	58025430 	.word	0x58025430
 8002548:	58025444 	.word	0x58025444
 800254c:	58025458 	.word	0x58025458
 8002550:	5802546c 	.word	0x5802546c
 8002554:	58025480 	.word	0x58025480
 8002558:	58025494 	.word	0x58025494

0800255c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e237      	b.n	80029de <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d004      	beq.n	8002584 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2280      	movs	r2, #128	@ 0x80
 800257e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e22c      	b.n	80029de <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a5c      	ldr	r2, [pc, #368]	@ (80026fc <HAL_DMA_Abort_IT+0x1a0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d04a      	beq.n	8002624 <HAL_DMA_Abort_IT+0xc8>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a5b      	ldr	r2, [pc, #364]	@ (8002700 <HAL_DMA_Abort_IT+0x1a4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d045      	beq.n	8002624 <HAL_DMA_Abort_IT+0xc8>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a59      	ldr	r2, [pc, #356]	@ (8002704 <HAL_DMA_Abort_IT+0x1a8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d040      	beq.n	8002624 <HAL_DMA_Abort_IT+0xc8>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a58      	ldr	r2, [pc, #352]	@ (8002708 <HAL_DMA_Abort_IT+0x1ac>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d03b      	beq.n	8002624 <HAL_DMA_Abort_IT+0xc8>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a56      	ldr	r2, [pc, #344]	@ (800270c <HAL_DMA_Abort_IT+0x1b0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d036      	beq.n	8002624 <HAL_DMA_Abort_IT+0xc8>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a55      	ldr	r2, [pc, #340]	@ (8002710 <HAL_DMA_Abort_IT+0x1b4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d031      	beq.n	8002624 <HAL_DMA_Abort_IT+0xc8>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a53      	ldr	r2, [pc, #332]	@ (8002714 <HAL_DMA_Abort_IT+0x1b8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d02c      	beq.n	8002624 <HAL_DMA_Abort_IT+0xc8>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a52      	ldr	r2, [pc, #328]	@ (8002718 <HAL_DMA_Abort_IT+0x1bc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d027      	beq.n	8002624 <HAL_DMA_Abort_IT+0xc8>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a50      	ldr	r2, [pc, #320]	@ (800271c <HAL_DMA_Abort_IT+0x1c0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d022      	beq.n	8002624 <HAL_DMA_Abort_IT+0xc8>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a4f      	ldr	r2, [pc, #316]	@ (8002720 <HAL_DMA_Abort_IT+0x1c4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d01d      	beq.n	8002624 <HAL_DMA_Abort_IT+0xc8>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a4d      	ldr	r2, [pc, #308]	@ (8002724 <HAL_DMA_Abort_IT+0x1c8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d018      	beq.n	8002624 <HAL_DMA_Abort_IT+0xc8>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a4c      	ldr	r2, [pc, #304]	@ (8002728 <HAL_DMA_Abort_IT+0x1cc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d013      	beq.n	8002624 <HAL_DMA_Abort_IT+0xc8>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a4a      	ldr	r2, [pc, #296]	@ (800272c <HAL_DMA_Abort_IT+0x1d0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00e      	beq.n	8002624 <HAL_DMA_Abort_IT+0xc8>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a49      	ldr	r2, [pc, #292]	@ (8002730 <HAL_DMA_Abort_IT+0x1d4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d009      	beq.n	8002624 <HAL_DMA_Abort_IT+0xc8>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a47      	ldr	r2, [pc, #284]	@ (8002734 <HAL_DMA_Abort_IT+0x1d8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d004      	beq.n	8002624 <HAL_DMA_Abort_IT+0xc8>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a46      	ldr	r2, [pc, #280]	@ (8002738 <HAL_DMA_Abort_IT+0x1dc>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d101      	bne.n	8002628 <HAL_DMA_Abort_IT+0xcc>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <HAL_DMA_Abort_IT+0xce>
 8002628:	2300      	movs	r3, #0
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8086 	beq.w	800273c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2204      	movs	r2, #4
 8002634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a2f      	ldr	r2, [pc, #188]	@ (80026fc <HAL_DMA_Abort_IT+0x1a0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d04a      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x17c>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a2e      	ldr	r2, [pc, #184]	@ (8002700 <HAL_DMA_Abort_IT+0x1a4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d045      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x17c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a2c      	ldr	r2, [pc, #176]	@ (8002704 <HAL_DMA_Abort_IT+0x1a8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d040      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x17c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a2b      	ldr	r2, [pc, #172]	@ (8002708 <HAL_DMA_Abort_IT+0x1ac>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d03b      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x17c>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a29      	ldr	r2, [pc, #164]	@ (800270c <HAL_DMA_Abort_IT+0x1b0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d036      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x17c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a28      	ldr	r2, [pc, #160]	@ (8002710 <HAL_DMA_Abort_IT+0x1b4>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d031      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x17c>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a26      	ldr	r2, [pc, #152]	@ (8002714 <HAL_DMA_Abort_IT+0x1b8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d02c      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x17c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a25      	ldr	r2, [pc, #148]	@ (8002718 <HAL_DMA_Abort_IT+0x1bc>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d027      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x17c>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a23      	ldr	r2, [pc, #140]	@ (800271c <HAL_DMA_Abort_IT+0x1c0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d022      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x17c>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a22      	ldr	r2, [pc, #136]	@ (8002720 <HAL_DMA_Abort_IT+0x1c4>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d01d      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x17c>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a20      	ldr	r2, [pc, #128]	@ (8002724 <HAL_DMA_Abort_IT+0x1c8>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d018      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x17c>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002728 <HAL_DMA_Abort_IT+0x1cc>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d013      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x17c>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1d      	ldr	r2, [pc, #116]	@ (800272c <HAL_DMA_Abort_IT+0x1d0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00e      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x17c>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1c      	ldr	r2, [pc, #112]	@ (8002730 <HAL_DMA_Abort_IT+0x1d4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d009      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x17c>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002734 <HAL_DMA_Abort_IT+0x1d8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d004      	beq.n	80026d8 <HAL_DMA_Abort_IT+0x17c>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a19      	ldr	r2, [pc, #100]	@ (8002738 <HAL_DMA_Abort_IT+0x1dc>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d108      	bne.n	80026ea <HAL_DMA_Abort_IT+0x18e>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	e178      	b.n	80029dc <HAL_DMA_Abort_IT+0x480>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0201 	bic.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e16f      	b.n	80029dc <HAL_DMA_Abort_IT+0x480>
 80026fc:	40020010 	.word	0x40020010
 8002700:	40020028 	.word	0x40020028
 8002704:	40020040 	.word	0x40020040
 8002708:	40020058 	.word	0x40020058
 800270c:	40020070 	.word	0x40020070
 8002710:	40020088 	.word	0x40020088
 8002714:	400200a0 	.word	0x400200a0
 8002718:	400200b8 	.word	0x400200b8
 800271c:	40020410 	.word	0x40020410
 8002720:	40020428 	.word	0x40020428
 8002724:	40020440 	.word	0x40020440
 8002728:	40020458 	.word	0x40020458
 800272c:	40020470 	.word	0x40020470
 8002730:	40020488 	.word	0x40020488
 8002734:	400204a0 	.word	0x400204a0
 8002738:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 020e 	bic.w	r2, r2, #14
 800274a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a6c      	ldr	r2, [pc, #432]	@ (8002904 <HAL_DMA_Abort_IT+0x3a8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d04a      	beq.n	80027ec <HAL_DMA_Abort_IT+0x290>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a6b      	ldr	r2, [pc, #428]	@ (8002908 <HAL_DMA_Abort_IT+0x3ac>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d045      	beq.n	80027ec <HAL_DMA_Abort_IT+0x290>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a69      	ldr	r2, [pc, #420]	@ (800290c <HAL_DMA_Abort_IT+0x3b0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d040      	beq.n	80027ec <HAL_DMA_Abort_IT+0x290>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a68      	ldr	r2, [pc, #416]	@ (8002910 <HAL_DMA_Abort_IT+0x3b4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d03b      	beq.n	80027ec <HAL_DMA_Abort_IT+0x290>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a66      	ldr	r2, [pc, #408]	@ (8002914 <HAL_DMA_Abort_IT+0x3b8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d036      	beq.n	80027ec <HAL_DMA_Abort_IT+0x290>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a65      	ldr	r2, [pc, #404]	@ (8002918 <HAL_DMA_Abort_IT+0x3bc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d031      	beq.n	80027ec <HAL_DMA_Abort_IT+0x290>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a63      	ldr	r2, [pc, #396]	@ (800291c <HAL_DMA_Abort_IT+0x3c0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d02c      	beq.n	80027ec <HAL_DMA_Abort_IT+0x290>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a62      	ldr	r2, [pc, #392]	@ (8002920 <HAL_DMA_Abort_IT+0x3c4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d027      	beq.n	80027ec <HAL_DMA_Abort_IT+0x290>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a60      	ldr	r2, [pc, #384]	@ (8002924 <HAL_DMA_Abort_IT+0x3c8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d022      	beq.n	80027ec <HAL_DMA_Abort_IT+0x290>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a5f      	ldr	r2, [pc, #380]	@ (8002928 <HAL_DMA_Abort_IT+0x3cc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d01d      	beq.n	80027ec <HAL_DMA_Abort_IT+0x290>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a5d      	ldr	r2, [pc, #372]	@ (800292c <HAL_DMA_Abort_IT+0x3d0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d018      	beq.n	80027ec <HAL_DMA_Abort_IT+0x290>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a5c      	ldr	r2, [pc, #368]	@ (8002930 <HAL_DMA_Abort_IT+0x3d4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d013      	beq.n	80027ec <HAL_DMA_Abort_IT+0x290>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a5a      	ldr	r2, [pc, #360]	@ (8002934 <HAL_DMA_Abort_IT+0x3d8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00e      	beq.n	80027ec <HAL_DMA_Abort_IT+0x290>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a59      	ldr	r2, [pc, #356]	@ (8002938 <HAL_DMA_Abort_IT+0x3dc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d009      	beq.n	80027ec <HAL_DMA_Abort_IT+0x290>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a57      	ldr	r2, [pc, #348]	@ (800293c <HAL_DMA_Abort_IT+0x3e0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d004      	beq.n	80027ec <HAL_DMA_Abort_IT+0x290>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a56      	ldr	r2, [pc, #344]	@ (8002940 <HAL_DMA_Abort_IT+0x3e4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d108      	bne.n	80027fe <HAL_DMA_Abort_IT+0x2a2>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e007      	b.n	800280e <HAL_DMA_Abort_IT+0x2b2>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0201 	bic.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a3c      	ldr	r2, [pc, #240]	@ (8002904 <HAL_DMA_Abort_IT+0x3a8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d072      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a3a      	ldr	r2, [pc, #232]	@ (8002908 <HAL_DMA_Abort_IT+0x3ac>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d06d      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a39      	ldr	r2, [pc, #228]	@ (800290c <HAL_DMA_Abort_IT+0x3b0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d068      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a37      	ldr	r2, [pc, #220]	@ (8002910 <HAL_DMA_Abort_IT+0x3b4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d063      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a36      	ldr	r2, [pc, #216]	@ (8002914 <HAL_DMA_Abort_IT+0x3b8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d05e      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a34      	ldr	r2, [pc, #208]	@ (8002918 <HAL_DMA_Abort_IT+0x3bc>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d059      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a33      	ldr	r2, [pc, #204]	@ (800291c <HAL_DMA_Abort_IT+0x3c0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d054      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a31      	ldr	r2, [pc, #196]	@ (8002920 <HAL_DMA_Abort_IT+0x3c4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d04f      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a30      	ldr	r2, [pc, #192]	@ (8002924 <HAL_DMA_Abort_IT+0x3c8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d04a      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a2e      	ldr	r2, [pc, #184]	@ (8002928 <HAL_DMA_Abort_IT+0x3cc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d045      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a2d      	ldr	r2, [pc, #180]	@ (800292c <HAL_DMA_Abort_IT+0x3d0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d040      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a2b      	ldr	r2, [pc, #172]	@ (8002930 <HAL_DMA_Abort_IT+0x3d4>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d03b      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a2a      	ldr	r2, [pc, #168]	@ (8002934 <HAL_DMA_Abort_IT+0x3d8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d036      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a28      	ldr	r2, [pc, #160]	@ (8002938 <HAL_DMA_Abort_IT+0x3dc>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d031      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a27      	ldr	r2, [pc, #156]	@ (800293c <HAL_DMA_Abort_IT+0x3e0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d02c      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a25      	ldr	r2, [pc, #148]	@ (8002940 <HAL_DMA_Abort_IT+0x3e4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d027      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a24      	ldr	r2, [pc, #144]	@ (8002944 <HAL_DMA_Abort_IT+0x3e8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d022      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a22      	ldr	r2, [pc, #136]	@ (8002948 <HAL_DMA_Abort_IT+0x3ec>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01d      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a21      	ldr	r2, [pc, #132]	@ (800294c <HAL_DMA_Abort_IT+0x3f0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d018      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002950 <HAL_DMA_Abort_IT+0x3f4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1e      	ldr	r2, [pc, #120]	@ (8002954 <HAL_DMA_Abort_IT+0x3f8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00e      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002958 <HAL_DMA_Abort_IT+0x3fc>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d009      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1b      	ldr	r2, [pc, #108]	@ (800295c <HAL_DMA_Abort_IT+0x400>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d004      	beq.n	80028fe <HAL_DMA_Abort_IT+0x3a2>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a19      	ldr	r2, [pc, #100]	@ (8002960 <HAL_DMA_Abort_IT+0x404>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d132      	bne.n	8002964 <HAL_DMA_Abort_IT+0x408>
 80028fe:	2301      	movs	r3, #1
 8002900:	e031      	b.n	8002966 <HAL_DMA_Abort_IT+0x40a>
 8002902:	bf00      	nop
 8002904:	40020010 	.word	0x40020010
 8002908:	40020028 	.word	0x40020028
 800290c:	40020040 	.word	0x40020040
 8002910:	40020058 	.word	0x40020058
 8002914:	40020070 	.word	0x40020070
 8002918:	40020088 	.word	0x40020088
 800291c:	400200a0 	.word	0x400200a0
 8002920:	400200b8 	.word	0x400200b8
 8002924:	40020410 	.word	0x40020410
 8002928:	40020428 	.word	0x40020428
 800292c:	40020440 	.word	0x40020440
 8002930:	40020458 	.word	0x40020458
 8002934:	40020470 	.word	0x40020470
 8002938:	40020488 	.word	0x40020488
 800293c:	400204a0 	.word	0x400204a0
 8002940:	400204b8 	.word	0x400204b8
 8002944:	58025408 	.word	0x58025408
 8002948:	5802541c 	.word	0x5802541c
 800294c:	58025430 	.word	0x58025430
 8002950:	58025444 	.word	0x58025444
 8002954:	58025458 	.word	0x58025458
 8002958:	5802546c 	.word	0x5802546c
 800295c:	58025480 	.word	0x58025480
 8002960:	58025494 	.word	0x58025494
 8002964:	2300      	movs	r3, #0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d028      	beq.n	80029bc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002974:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002978:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	2201      	movs	r2, #1
 800298a:	409a      	lsls	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002998:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00c      	beq.n	80029bc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80029ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop

080029e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	@ 0x28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029f4:	4b67      	ldr	r3, [pc, #412]	@ (8002b94 <HAL_DMA_IRQHandler+0x1ac>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a67      	ldr	r2, [pc, #412]	@ (8002b98 <HAL_DMA_IRQHandler+0x1b0>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	0a9b      	lsrs	r3, r3, #10
 8002a00:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a06:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a5f      	ldr	r2, [pc, #380]	@ (8002b9c <HAL_DMA_IRQHandler+0x1b4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d04a      	beq.n	8002aba <HAL_DMA_IRQHandler+0xd2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a5d      	ldr	r2, [pc, #372]	@ (8002ba0 <HAL_DMA_IRQHandler+0x1b8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d045      	beq.n	8002aba <HAL_DMA_IRQHandler+0xd2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a5c      	ldr	r2, [pc, #368]	@ (8002ba4 <HAL_DMA_IRQHandler+0x1bc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d040      	beq.n	8002aba <HAL_DMA_IRQHandler+0xd2>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ba8 <HAL_DMA_IRQHandler+0x1c0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d03b      	beq.n	8002aba <HAL_DMA_IRQHandler+0xd2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a59      	ldr	r2, [pc, #356]	@ (8002bac <HAL_DMA_IRQHandler+0x1c4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d036      	beq.n	8002aba <HAL_DMA_IRQHandler+0xd2>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a57      	ldr	r2, [pc, #348]	@ (8002bb0 <HAL_DMA_IRQHandler+0x1c8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d031      	beq.n	8002aba <HAL_DMA_IRQHandler+0xd2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a56      	ldr	r2, [pc, #344]	@ (8002bb4 <HAL_DMA_IRQHandler+0x1cc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d02c      	beq.n	8002aba <HAL_DMA_IRQHandler+0xd2>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a54      	ldr	r2, [pc, #336]	@ (8002bb8 <HAL_DMA_IRQHandler+0x1d0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d027      	beq.n	8002aba <HAL_DMA_IRQHandler+0xd2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a53      	ldr	r2, [pc, #332]	@ (8002bbc <HAL_DMA_IRQHandler+0x1d4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d022      	beq.n	8002aba <HAL_DMA_IRQHandler+0xd2>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a51      	ldr	r2, [pc, #324]	@ (8002bc0 <HAL_DMA_IRQHandler+0x1d8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d01d      	beq.n	8002aba <HAL_DMA_IRQHandler+0xd2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a50      	ldr	r2, [pc, #320]	@ (8002bc4 <HAL_DMA_IRQHandler+0x1dc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d018      	beq.n	8002aba <HAL_DMA_IRQHandler+0xd2>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a4e      	ldr	r2, [pc, #312]	@ (8002bc8 <HAL_DMA_IRQHandler+0x1e0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d013      	beq.n	8002aba <HAL_DMA_IRQHandler+0xd2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a4d      	ldr	r2, [pc, #308]	@ (8002bcc <HAL_DMA_IRQHandler+0x1e4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00e      	beq.n	8002aba <HAL_DMA_IRQHandler+0xd2>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a4b      	ldr	r2, [pc, #300]	@ (8002bd0 <HAL_DMA_IRQHandler+0x1e8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d009      	beq.n	8002aba <HAL_DMA_IRQHandler+0xd2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a4a      	ldr	r2, [pc, #296]	@ (8002bd4 <HAL_DMA_IRQHandler+0x1ec>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d004      	beq.n	8002aba <HAL_DMA_IRQHandler+0xd2>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a48      	ldr	r2, [pc, #288]	@ (8002bd8 <HAL_DMA_IRQHandler+0x1f0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d101      	bne.n	8002abe <HAL_DMA_IRQHandler+0xd6>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <HAL_DMA_IRQHandler+0xd8>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 842b 	beq.w	800331c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aca:	f003 031f 	and.w	r3, r3, #31
 8002ace:	2208      	movs	r2, #8
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80a2 	beq.w	8002c20 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a2e      	ldr	r2, [pc, #184]	@ (8002b9c <HAL_DMA_IRQHandler+0x1b4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d04a      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x194>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a2d      	ldr	r2, [pc, #180]	@ (8002ba0 <HAL_DMA_IRQHandler+0x1b8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d045      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x194>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a2b      	ldr	r2, [pc, #172]	@ (8002ba4 <HAL_DMA_IRQHandler+0x1bc>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d040      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x194>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2a      	ldr	r2, [pc, #168]	@ (8002ba8 <HAL_DMA_IRQHandler+0x1c0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d03b      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x194>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a28      	ldr	r2, [pc, #160]	@ (8002bac <HAL_DMA_IRQHandler+0x1c4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d036      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x194>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a27      	ldr	r2, [pc, #156]	@ (8002bb0 <HAL_DMA_IRQHandler+0x1c8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d031      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x194>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a25      	ldr	r2, [pc, #148]	@ (8002bb4 <HAL_DMA_IRQHandler+0x1cc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d02c      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x194>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a24      	ldr	r2, [pc, #144]	@ (8002bb8 <HAL_DMA_IRQHandler+0x1d0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d027      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x194>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a22      	ldr	r2, [pc, #136]	@ (8002bbc <HAL_DMA_IRQHandler+0x1d4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d022      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x194>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a21      	ldr	r2, [pc, #132]	@ (8002bc0 <HAL_DMA_IRQHandler+0x1d8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d01d      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x194>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc4 <HAL_DMA_IRQHandler+0x1dc>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d018      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x194>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc8 <HAL_DMA_IRQHandler+0x1e0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d013      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x194>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a1c      	ldr	r2, [pc, #112]	@ (8002bcc <HAL_DMA_IRQHandler+0x1e4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00e      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x194>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1b      	ldr	r2, [pc, #108]	@ (8002bd0 <HAL_DMA_IRQHandler+0x1e8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d009      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x194>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a19      	ldr	r2, [pc, #100]	@ (8002bd4 <HAL_DMA_IRQHandler+0x1ec>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d004      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x194>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a18      	ldr	r2, [pc, #96]	@ (8002bd8 <HAL_DMA_IRQHandler+0x1f0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d12f      	bne.n	8002bdc <HAL_DMA_IRQHandler+0x1f4>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	bf14      	ite	ne
 8002b8a:	2301      	movne	r3, #1
 8002b8c:	2300      	moveq	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	e02e      	b.n	8002bf0 <HAL_DMA_IRQHandler+0x208>
 8002b92:	bf00      	nop
 8002b94:	24000000 	.word	0x24000000
 8002b98:	1b4e81b5 	.word	0x1b4e81b5
 8002b9c:	40020010 	.word	0x40020010
 8002ba0:	40020028 	.word	0x40020028
 8002ba4:	40020040 	.word	0x40020040
 8002ba8:	40020058 	.word	0x40020058
 8002bac:	40020070 	.word	0x40020070
 8002bb0:	40020088 	.word	0x40020088
 8002bb4:	400200a0 	.word	0x400200a0
 8002bb8:	400200b8 	.word	0x400200b8
 8002bbc:	40020410 	.word	0x40020410
 8002bc0:	40020428 	.word	0x40020428
 8002bc4:	40020440 	.word	0x40020440
 8002bc8:	40020458 	.word	0x40020458
 8002bcc:	40020470 	.word	0x40020470
 8002bd0:	40020488 	.word	0x40020488
 8002bd4:	400204a0 	.word	0x400204a0
 8002bd8:	400204b8 	.word	0x400204b8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bf14      	ite	ne
 8002bea:	2301      	movne	r3, #1
 8002bec:	2300      	moveq	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d015      	beq.n	8002c20 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0204 	bic.w	r2, r2, #4
 8002c02:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	2208      	movs	r2, #8
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c18:	f043 0201 	orr.w	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c24:	f003 031f 	and.w	r3, r3, #31
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d06e      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a69      	ldr	r2, [pc, #420]	@ (8002de0 <HAL_DMA_IRQHandler+0x3f8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d04a      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x2ee>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a67      	ldr	r2, [pc, #412]	@ (8002de4 <HAL_DMA_IRQHandler+0x3fc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d045      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x2ee>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a66      	ldr	r2, [pc, #408]	@ (8002de8 <HAL_DMA_IRQHandler+0x400>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d040      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x2ee>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a64      	ldr	r2, [pc, #400]	@ (8002dec <HAL_DMA_IRQHandler+0x404>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d03b      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x2ee>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a63      	ldr	r2, [pc, #396]	@ (8002df0 <HAL_DMA_IRQHandler+0x408>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d036      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x2ee>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a61      	ldr	r2, [pc, #388]	@ (8002df4 <HAL_DMA_IRQHandler+0x40c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d031      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x2ee>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a60      	ldr	r2, [pc, #384]	@ (8002df8 <HAL_DMA_IRQHandler+0x410>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d02c      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x2ee>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a5e      	ldr	r2, [pc, #376]	@ (8002dfc <HAL_DMA_IRQHandler+0x414>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d027      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x2ee>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a5d      	ldr	r2, [pc, #372]	@ (8002e00 <HAL_DMA_IRQHandler+0x418>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d022      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x2ee>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a5b      	ldr	r2, [pc, #364]	@ (8002e04 <HAL_DMA_IRQHandler+0x41c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d01d      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x2ee>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a5a      	ldr	r2, [pc, #360]	@ (8002e08 <HAL_DMA_IRQHandler+0x420>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d018      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x2ee>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a58      	ldr	r2, [pc, #352]	@ (8002e0c <HAL_DMA_IRQHandler+0x424>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d013      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x2ee>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a57      	ldr	r2, [pc, #348]	@ (8002e10 <HAL_DMA_IRQHandler+0x428>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00e      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x2ee>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a55      	ldr	r2, [pc, #340]	@ (8002e14 <HAL_DMA_IRQHandler+0x42c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d009      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x2ee>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a54      	ldr	r2, [pc, #336]	@ (8002e18 <HAL_DMA_IRQHandler+0x430>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d004      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x2ee>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a52      	ldr	r2, [pc, #328]	@ (8002e1c <HAL_DMA_IRQHandler+0x434>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d10a      	bne.n	8002cec <HAL_DMA_IRQHandler+0x304>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	bf14      	ite	ne
 8002ce4:	2301      	movne	r3, #1
 8002ce6:	2300      	moveq	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	e003      	b.n	8002cf4 <HAL_DMA_IRQHandler+0x30c>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00d      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfc:	f003 031f 	and.w	r3, r3, #31
 8002d00:	2201      	movs	r2, #1
 8002d02:	409a      	lsls	r2, r3
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0c:	f043 0202 	orr.w	r2, r3, #2
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 808f 	beq.w	8002e48 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a2c      	ldr	r2, [pc, #176]	@ (8002de0 <HAL_DMA_IRQHandler+0x3f8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d04a      	beq.n	8002dca <HAL_DMA_IRQHandler+0x3e2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a2a      	ldr	r2, [pc, #168]	@ (8002de4 <HAL_DMA_IRQHandler+0x3fc>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d045      	beq.n	8002dca <HAL_DMA_IRQHandler+0x3e2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a29      	ldr	r2, [pc, #164]	@ (8002de8 <HAL_DMA_IRQHandler+0x400>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d040      	beq.n	8002dca <HAL_DMA_IRQHandler+0x3e2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a27      	ldr	r2, [pc, #156]	@ (8002dec <HAL_DMA_IRQHandler+0x404>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d03b      	beq.n	8002dca <HAL_DMA_IRQHandler+0x3e2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a26      	ldr	r2, [pc, #152]	@ (8002df0 <HAL_DMA_IRQHandler+0x408>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d036      	beq.n	8002dca <HAL_DMA_IRQHandler+0x3e2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a24      	ldr	r2, [pc, #144]	@ (8002df4 <HAL_DMA_IRQHandler+0x40c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d031      	beq.n	8002dca <HAL_DMA_IRQHandler+0x3e2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a23      	ldr	r2, [pc, #140]	@ (8002df8 <HAL_DMA_IRQHandler+0x410>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d02c      	beq.n	8002dca <HAL_DMA_IRQHandler+0x3e2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a21      	ldr	r2, [pc, #132]	@ (8002dfc <HAL_DMA_IRQHandler+0x414>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d027      	beq.n	8002dca <HAL_DMA_IRQHandler+0x3e2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a20      	ldr	r2, [pc, #128]	@ (8002e00 <HAL_DMA_IRQHandler+0x418>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d022      	beq.n	8002dca <HAL_DMA_IRQHandler+0x3e2>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1e      	ldr	r2, [pc, #120]	@ (8002e04 <HAL_DMA_IRQHandler+0x41c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01d      	beq.n	8002dca <HAL_DMA_IRQHandler+0x3e2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1d      	ldr	r2, [pc, #116]	@ (8002e08 <HAL_DMA_IRQHandler+0x420>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d018      	beq.n	8002dca <HAL_DMA_IRQHandler+0x3e2>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8002e0c <HAL_DMA_IRQHandler+0x424>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d013      	beq.n	8002dca <HAL_DMA_IRQHandler+0x3e2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e10 <HAL_DMA_IRQHandler+0x428>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00e      	beq.n	8002dca <HAL_DMA_IRQHandler+0x3e2>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a18      	ldr	r2, [pc, #96]	@ (8002e14 <HAL_DMA_IRQHandler+0x42c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d009      	beq.n	8002dca <HAL_DMA_IRQHandler+0x3e2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a17      	ldr	r2, [pc, #92]	@ (8002e18 <HAL_DMA_IRQHandler+0x430>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d004      	beq.n	8002dca <HAL_DMA_IRQHandler+0x3e2>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a15      	ldr	r2, [pc, #84]	@ (8002e1c <HAL_DMA_IRQHandler+0x434>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d12a      	bne.n	8002e20 <HAL_DMA_IRQHandler+0x438>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf14      	ite	ne
 8002dd8:	2301      	movne	r3, #1
 8002dda:	2300      	moveq	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	e023      	b.n	8002e28 <HAL_DMA_IRQHandler+0x440>
 8002de0:	40020010 	.word	0x40020010
 8002de4:	40020028 	.word	0x40020028
 8002de8:	40020040 	.word	0x40020040
 8002dec:	40020058 	.word	0x40020058
 8002df0:	40020070 	.word	0x40020070
 8002df4:	40020088 	.word	0x40020088
 8002df8:	400200a0 	.word	0x400200a0
 8002dfc:	400200b8 	.word	0x400200b8
 8002e00:	40020410 	.word	0x40020410
 8002e04:	40020428 	.word	0x40020428
 8002e08:	40020440 	.word	0x40020440
 8002e0c:	40020458 	.word	0x40020458
 8002e10:	40020470 	.word	0x40020470
 8002e14:	40020488 	.word	0x40020488
 8002e18:	400204a0 	.word	0x400204a0
 8002e1c:	400204b8 	.word	0x400204b8
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2300      	movs	r3, #0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00d      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	2204      	movs	r2, #4
 8002e36:	409a      	lsls	r2, r3
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e40:	f043 0204 	orr.w	r2, r3, #4
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	2210      	movs	r2, #16
 8002e52:	409a      	lsls	r2, r3
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80a6 	beq.w	8002faa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a85      	ldr	r2, [pc, #532]	@ (8003078 <HAL_DMA_IRQHandler+0x690>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d04a      	beq.n	8002efe <HAL_DMA_IRQHandler+0x516>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a83      	ldr	r2, [pc, #524]	@ (800307c <HAL_DMA_IRQHandler+0x694>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d045      	beq.n	8002efe <HAL_DMA_IRQHandler+0x516>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a82      	ldr	r2, [pc, #520]	@ (8003080 <HAL_DMA_IRQHandler+0x698>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d040      	beq.n	8002efe <HAL_DMA_IRQHandler+0x516>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a80      	ldr	r2, [pc, #512]	@ (8003084 <HAL_DMA_IRQHandler+0x69c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d03b      	beq.n	8002efe <HAL_DMA_IRQHandler+0x516>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a7f      	ldr	r2, [pc, #508]	@ (8003088 <HAL_DMA_IRQHandler+0x6a0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d036      	beq.n	8002efe <HAL_DMA_IRQHandler+0x516>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a7d      	ldr	r2, [pc, #500]	@ (800308c <HAL_DMA_IRQHandler+0x6a4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d031      	beq.n	8002efe <HAL_DMA_IRQHandler+0x516>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a7c      	ldr	r2, [pc, #496]	@ (8003090 <HAL_DMA_IRQHandler+0x6a8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d02c      	beq.n	8002efe <HAL_DMA_IRQHandler+0x516>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a7a      	ldr	r2, [pc, #488]	@ (8003094 <HAL_DMA_IRQHandler+0x6ac>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d027      	beq.n	8002efe <HAL_DMA_IRQHandler+0x516>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a79      	ldr	r2, [pc, #484]	@ (8003098 <HAL_DMA_IRQHandler+0x6b0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d022      	beq.n	8002efe <HAL_DMA_IRQHandler+0x516>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a77      	ldr	r2, [pc, #476]	@ (800309c <HAL_DMA_IRQHandler+0x6b4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d01d      	beq.n	8002efe <HAL_DMA_IRQHandler+0x516>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a76      	ldr	r2, [pc, #472]	@ (80030a0 <HAL_DMA_IRQHandler+0x6b8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d018      	beq.n	8002efe <HAL_DMA_IRQHandler+0x516>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a74      	ldr	r2, [pc, #464]	@ (80030a4 <HAL_DMA_IRQHandler+0x6bc>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d013      	beq.n	8002efe <HAL_DMA_IRQHandler+0x516>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a73      	ldr	r2, [pc, #460]	@ (80030a8 <HAL_DMA_IRQHandler+0x6c0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00e      	beq.n	8002efe <HAL_DMA_IRQHandler+0x516>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a71      	ldr	r2, [pc, #452]	@ (80030ac <HAL_DMA_IRQHandler+0x6c4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d009      	beq.n	8002efe <HAL_DMA_IRQHandler+0x516>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a70      	ldr	r2, [pc, #448]	@ (80030b0 <HAL_DMA_IRQHandler+0x6c8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d004      	beq.n	8002efe <HAL_DMA_IRQHandler+0x516>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a6e      	ldr	r2, [pc, #440]	@ (80030b4 <HAL_DMA_IRQHandler+0x6cc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d10a      	bne.n	8002f14 <HAL_DMA_IRQHandler+0x52c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf14      	ite	ne
 8002f0c:	2301      	movne	r3, #1
 8002f0e:	2300      	moveq	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	e009      	b.n	8002f28 <HAL_DMA_IRQHandler+0x540>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	bf14      	ite	ne
 8002f22:	2301      	movne	r3, #1
 8002f24:	2300      	moveq	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d03e      	beq.n	8002faa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	2210      	movs	r2, #16
 8002f36:	409a      	lsls	r2, r3
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d018      	beq.n	8002f7c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d108      	bne.n	8002f6a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d024      	beq.n	8002faa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4798      	blx	r3
 8002f68:	e01f      	b.n	8002faa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d01b      	beq.n	8002faa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	4798      	blx	r3
 8002f7a:	e016      	b.n	8002faa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d107      	bne.n	8002f9a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0208 	bic.w	r2, r2, #8
 8002f98:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8110 	beq.w	80031e0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8003078 <HAL_DMA_IRQHandler+0x690>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d04a      	beq.n	8003060 <HAL_DMA_IRQHandler+0x678>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a2b      	ldr	r2, [pc, #172]	@ (800307c <HAL_DMA_IRQHandler+0x694>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d045      	beq.n	8003060 <HAL_DMA_IRQHandler+0x678>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a29      	ldr	r2, [pc, #164]	@ (8003080 <HAL_DMA_IRQHandler+0x698>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d040      	beq.n	8003060 <HAL_DMA_IRQHandler+0x678>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a28      	ldr	r2, [pc, #160]	@ (8003084 <HAL_DMA_IRQHandler+0x69c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d03b      	beq.n	8003060 <HAL_DMA_IRQHandler+0x678>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a26      	ldr	r2, [pc, #152]	@ (8003088 <HAL_DMA_IRQHandler+0x6a0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d036      	beq.n	8003060 <HAL_DMA_IRQHandler+0x678>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a25      	ldr	r2, [pc, #148]	@ (800308c <HAL_DMA_IRQHandler+0x6a4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d031      	beq.n	8003060 <HAL_DMA_IRQHandler+0x678>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a23      	ldr	r2, [pc, #140]	@ (8003090 <HAL_DMA_IRQHandler+0x6a8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d02c      	beq.n	8003060 <HAL_DMA_IRQHandler+0x678>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a22      	ldr	r2, [pc, #136]	@ (8003094 <HAL_DMA_IRQHandler+0x6ac>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d027      	beq.n	8003060 <HAL_DMA_IRQHandler+0x678>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a20      	ldr	r2, [pc, #128]	@ (8003098 <HAL_DMA_IRQHandler+0x6b0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d022      	beq.n	8003060 <HAL_DMA_IRQHandler+0x678>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1f      	ldr	r2, [pc, #124]	@ (800309c <HAL_DMA_IRQHandler+0x6b4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d01d      	beq.n	8003060 <HAL_DMA_IRQHandler+0x678>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1d      	ldr	r2, [pc, #116]	@ (80030a0 <HAL_DMA_IRQHandler+0x6b8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d018      	beq.n	8003060 <HAL_DMA_IRQHandler+0x678>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a1c      	ldr	r2, [pc, #112]	@ (80030a4 <HAL_DMA_IRQHandler+0x6bc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d013      	beq.n	8003060 <HAL_DMA_IRQHandler+0x678>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a1a      	ldr	r2, [pc, #104]	@ (80030a8 <HAL_DMA_IRQHandler+0x6c0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00e      	beq.n	8003060 <HAL_DMA_IRQHandler+0x678>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a19      	ldr	r2, [pc, #100]	@ (80030ac <HAL_DMA_IRQHandler+0x6c4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d009      	beq.n	8003060 <HAL_DMA_IRQHandler+0x678>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a17      	ldr	r2, [pc, #92]	@ (80030b0 <HAL_DMA_IRQHandler+0x6c8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d004      	beq.n	8003060 <HAL_DMA_IRQHandler+0x678>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a16      	ldr	r2, [pc, #88]	@ (80030b4 <HAL_DMA_IRQHandler+0x6cc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d12b      	bne.n	80030b8 <HAL_DMA_IRQHandler+0x6d0>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	2b00      	cmp	r3, #0
 800306c:	bf14      	ite	ne
 800306e:	2301      	movne	r3, #1
 8003070:	2300      	moveq	r3, #0
 8003072:	b2db      	uxtb	r3, r3
 8003074:	e02a      	b.n	80030cc <HAL_DMA_IRQHandler+0x6e4>
 8003076:	bf00      	nop
 8003078:	40020010 	.word	0x40020010
 800307c:	40020028 	.word	0x40020028
 8003080:	40020040 	.word	0x40020040
 8003084:	40020058 	.word	0x40020058
 8003088:	40020070 	.word	0x40020070
 800308c:	40020088 	.word	0x40020088
 8003090:	400200a0 	.word	0x400200a0
 8003094:	400200b8 	.word	0x400200b8
 8003098:	40020410 	.word	0x40020410
 800309c:	40020428 	.word	0x40020428
 80030a0:	40020440 	.word	0x40020440
 80030a4:	40020458 	.word	0x40020458
 80030a8:	40020470 	.word	0x40020470
 80030ac:	40020488 	.word	0x40020488
 80030b0:	400204a0 	.word	0x400204a0
 80030b4:	400204b8 	.word	0x400204b8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf14      	ite	ne
 80030c6:	2301      	movne	r3, #1
 80030c8:	2300      	moveq	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 8087 	beq.w	80031e0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	2220      	movs	r2, #32
 80030dc:	409a      	lsls	r2, r3
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d139      	bne.n	8003162 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0216 	bic.w	r2, r2, #22
 80030fc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800310c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	2b00      	cmp	r3, #0
 8003114:	d103      	bne.n	800311e <HAL_DMA_IRQHandler+0x736>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800311a:	2b00      	cmp	r3, #0
 800311c:	d007      	beq.n	800312e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0208 	bic.w	r2, r2, #8
 800312c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	223f      	movs	r2, #63	@ 0x3f
 8003138:	409a      	lsls	r2, r3
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 834a 	beq.w	80037ec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	4798      	blx	r3
          }
          return;
 8003160:	e344      	b.n	80037ec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d018      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d108      	bne.n	8003190 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003182:	2b00      	cmp	r3, #0
 8003184:	d02c      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	4798      	blx	r3
 800318e:	e027      	b.n	80031e0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003194:	2b00      	cmp	r3, #0
 8003196:	d023      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
 80031a0:	e01e      	b.n	80031e0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10f      	bne.n	80031d0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0210 	bic.w	r2, r2, #16
 80031be:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 8306 	beq.w	80037f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8088 	beq.w	8003308 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2204      	movs	r2, #4
 80031fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a7a      	ldr	r2, [pc, #488]	@ (80033f0 <HAL_DMA_IRQHandler+0xa08>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d04a      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x8b8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a79      	ldr	r2, [pc, #484]	@ (80033f4 <HAL_DMA_IRQHandler+0xa0c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d045      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x8b8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a77      	ldr	r2, [pc, #476]	@ (80033f8 <HAL_DMA_IRQHandler+0xa10>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d040      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x8b8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a76      	ldr	r2, [pc, #472]	@ (80033fc <HAL_DMA_IRQHandler+0xa14>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d03b      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x8b8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a74      	ldr	r2, [pc, #464]	@ (8003400 <HAL_DMA_IRQHandler+0xa18>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d036      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x8b8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a73      	ldr	r2, [pc, #460]	@ (8003404 <HAL_DMA_IRQHandler+0xa1c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d031      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x8b8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a71      	ldr	r2, [pc, #452]	@ (8003408 <HAL_DMA_IRQHandler+0xa20>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d02c      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x8b8>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a70      	ldr	r2, [pc, #448]	@ (800340c <HAL_DMA_IRQHandler+0xa24>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d027      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x8b8>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a6e      	ldr	r2, [pc, #440]	@ (8003410 <HAL_DMA_IRQHandler+0xa28>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d022      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x8b8>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a6d      	ldr	r2, [pc, #436]	@ (8003414 <HAL_DMA_IRQHandler+0xa2c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d01d      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x8b8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a6b      	ldr	r2, [pc, #428]	@ (8003418 <HAL_DMA_IRQHandler+0xa30>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d018      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x8b8>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a6a      	ldr	r2, [pc, #424]	@ (800341c <HAL_DMA_IRQHandler+0xa34>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d013      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x8b8>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a68      	ldr	r2, [pc, #416]	@ (8003420 <HAL_DMA_IRQHandler+0xa38>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00e      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x8b8>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a67      	ldr	r2, [pc, #412]	@ (8003424 <HAL_DMA_IRQHandler+0xa3c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d009      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x8b8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a65      	ldr	r2, [pc, #404]	@ (8003428 <HAL_DMA_IRQHandler+0xa40>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d004      	beq.n	80032a0 <HAL_DMA_IRQHandler+0x8b8>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a64      	ldr	r2, [pc, #400]	@ (800342c <HAL_DMA_IRQHandler+0xa44>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d108      	bne.n	80032b2 <HAL_DMA_IRQHandler+0x8ca>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0201 	bic.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	e007      	b.n	80032c2 <HAL_DMA_IRQHandler+0x8da>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0201 	bic.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3301      	adds	r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d307      	bcc.n	80032de <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1f2      	bne.n	80032c2 <HAL_DMA_IRQHandler+0x8da>
 80032dc:	e000      	b.n	80032e0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80032de:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d004      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2203      	movs	r2, #3
 80032f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80032f6:	e003      	b.n	8003300 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 8272 	beq.w	80037f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	4798      	blx	r3
 800331a:	e26c      	b.n	80037f6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a43      	ldr	r2, [pc, #268]	@ (8003430 <HAL_DMA_IRQHandler+0xa48>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d022      	beq.n	800336c <HAL_DMA_IRQHandler+0x984>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a42      	ldr	r2, [pc, #264]	@ (8003434 <HAL_DMA_IRQHandler+0xa4c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d01d      	beq.n	800336c <HAL_DMA_IRQHandler+0x984>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a40      	ldr	r2, [pc, #256]	@ (8003438 <HAL_DMA_IRQHandler+0xa50>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d018      	beq.n	800336c <HAL_DMA_IRQHandler+0x984>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a3f      	ldr	r2, [pc, #252]	@ (800343c <HAL_DMA_IRQHandler+0xa54>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d013      	beq.n	800336c <HAL_DMA_IRQHandler+0x984>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a3d      	ldr	r2, [pc, #244]	@ (8003440 <HAL_DMA_IRQHandler+0xa58>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00e      	beq.n	800336c <HAL_DMA_IRQHandler+0x984>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a3c      	ldr	r2, [pc, #240]	@ (8003444 <HAL_DMA_IRQHandler+0xa5c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d009      	beq.n	800336c <HAL_DMA_IRQHandler+0x984>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a3a      	ldr	r2, [pc, #232]	@ (8003448 <HAL_DMA_IRQHandler+0xa60>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <HAL_DMA_IRQHandler+0x984>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a39      	ldr	r2, [pc, #228]	@ (800344c <HAL_DMA_IRQHandler+0xa64>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d101      	bne.n	8003370 <HAL_DMA_IRQHandler+0x988>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <HAL_DMA_IRQHandler+0x98a>
 8003370:	2300      	movs	r3, #0
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 823f 	beq.w	80037f6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	2204      	movs	r2, #4
 800338a:	409a      	lsls	r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80cd 	beq.w	8003530 <HAL_DMA_IRQHandler+0xb48>
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80c7 	beq.w	8003530 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	2204      	movs	r2, #4
 80033ac:	409a      	lsls	r2, r3
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d049      	beq.n	8003450 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 8210 	beq.w	80037f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033d8:	e20a      	b.n	80037f0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 8206 	beq.w	80037f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033ec:	e200      	b.n	80037f0 <HAL_DMA_IRQHandler+0xe08>
 80033ee:	bf00      	nop
 80033f0:	40020010 	.word	0x40020010
 80033f4:	40020028 	.word	0x40020028
 80033f8:	40020040 	.word	0x40020040
 80033fc:	40020058 	.word	0x40020058
 8003400:	40020070 	.word	0x40020070
 8003404:	40020088 	.word	0x40020088
 8003408:	400200a0 	.word	0x400200a0
 800340c:	400200b8 	.word	0x400200b8
 8003410:	40020410 	.word	0x40020410
 8003414:	40020428 	.word	0x40020428
 8003418:	40020440 	.word	0x40020440
 800341c:	40020458 	.word	0x40020458
 8003420:	40020470 	.word	0x40020470
 8003424:	40020488 	.word	0x40020488
 8003428:	400204a0 	.word	0x400204a0
 800342c:	400204b8 	.word	0x400204b8
 8003430:	58025408 	.word	0x58025408
 8003434:	5802541c 	.word	0x5802541c
 8003438:	58025430 	.word	0x58025430
 800343c:	58025444 	.word	0x58025444
 8003440:	58025458 	.word	0x58025458
 8003444:	5802546c 	.word	0x5802546c
 8003448:	58025480 	.word	0x58025480
 800344c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d160      	bne.n	800351c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a7f      	ldr	r2, [pc, #508]	@ (800365c <HAL_DMA_IRQHandler+0xc74>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d04a      	beq.n	80034fa <HAL_DMA_IRQHandler+0xb12>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a7d      	ldr	r2, [pc, #500]	@ (8003660 <HAL_DMA_IRQHandler+0xc78>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d045      	beq.n	80034fa <HAL_DMA_IRQHandler+0xb12>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a7c      	ldr	r2, [pc, #496]	@ (8003664 <HAL_DMA_IRQHandler+0xc7c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d040      	beq.n	80034fa <HAL_DMA_IRQHandler+0xb12>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a7a      	ldr	r2, [pc, #488]	@ (8003668 <HAL_DMA_IRQHandler+0xc80>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d03b      	beq.n	80034fa <HAL_DMA_IRQHandler+0xb12>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a79      	ldr	r2, [pc, #484]	@ (800366c <HAL_DMA_IRQHandler+0xc84>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d036      	beq.n	80034fa <HAL_DMA_IRQHandler+0xb12>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a77      	ldr	r2, [pc, #476]	@ (8003670 <HAL_DMA_IRQHandler+0xc88>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d031      	beq.n	80034fa <HAL_DMA_IRQHandler+0xb12>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a76      	ldr	r2, [pc, #472]	@ (8003674 <HAL_DMA_IRQHandler+0xc8c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d02c      	beq.n	80034fa <HAL_DMA_IRQHandler+0xb12>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a74      	ldr	r2, [pc, #464]	@ (8003678 <HAL_DMA_IRQHandler+0xc90>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d027      	beq.n	80034fa <HAL_DMA_IRQHandler+0xb12>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a73      	ldr	r2, [pc, #460]	@ (800367c <HAL_DMA_IRQHandler+0xc94>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d022      	beq.n	80034fa <HAL_DMA_IRQHandler+0xb12>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a71      	ldr	r2, [pc, #452]	@ (8003680 <HAL_DMA_IRQHandler+0xc98>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01d      	beq.n	80034fa <HAL_DMA_IRQHandler+0xb12>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a70      	ldr	r2, [pc, #448]	@ (8003684 <HAL_DMA_IRQHandler+0xc9c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d018      	beq.n	80034fa <HAL_DMA_IRQHandler+0xb12>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a6e      	ldr	r2, [pc, #440]	@ (8003688 <HAL_DMA_IRQHandler+0xca0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d013      	beq.n	80034fa <HAL_DMA_IRQHandler+0xb12>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a6d      	ldr	r2, [pc, #436]	@ (800368c <HAL_DMA_IRQHandler+0xca4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00e      	beq.n	80034fa <HAL_DMA_IRQHandler+0xb12>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a6b      	ldr	r2, [pc, #428]	@ (8003690 <HAL_DMA_IRQHandler+0xca8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d009      	beq.n	80034fa <HAL_DMA_IRQHandler+0xb12>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a6a      	ldr	r2, [pc, #424]	@ (8003694 <HAL_DMA_IRQHandler+0xcac>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_DMA_IRQHandler+0xb12>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a68      	ldr	r2, [pc, #416]	@ (8003698 <HAL_DMA_IRQHandler+0xcb0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d108      	bne.n	800350c <HAL_DMA_IRQHandler+0xb24>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0208 	bic.w	r2, r2, #8
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	e007      	b.n	800351c <HAL_DMA_IRQHandler+0xb34>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0204 	bic.w	r2, r2, #4
 800351a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8165 	beq.w	80037f0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800352e:	e15f      	b.n	80037f0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	2202      	movs	r2, #2
 800353a:	409a      	lsls	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80c5 	beq.w	80036d0 <HAL_DMA_IRQHandler+0xce8>
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80bf 	beq.w	80036d0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	2202      	movs	r2, #2
 800355c:	409a      	lsls	r2, r3
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d018      	beq.n	800359e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d109      	bne.n	800358a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 813a 	beq.w	80037f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003588:	e134      	b.n	80037f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 8130 	beq.w	80037f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800359c:	e12a      	b.n	80037f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f040 8089 	bne.w	80036bc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a2b      	ldr	r2, [pc, #172]	@ (800365c <HAL_DMA_IRQHandler+0xc74>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d04a      	beq.n	800364a <HAL_DMA_IRQHandler+0xc62>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a29      	ldr	r2, [pc, #164]	@ (8003660 <HAL_DMA_IRQHandler+0xc78>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d045      	beq.n	800364a <HAL_DMA_IRQHandler+0xc62>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a28      	ldr	r2, [pc, #160]	@ (8003664 <HAL_DMA_IRQHandler+0xc7c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d040      	beq.n	800364a <HAL_DMA_IRQHandler+0xc62>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a26      	ldr	r2, [pc, #152]	@ (8003668 <HAL_DMA_IRQHandler+0xc80>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d03b      	beq.n	800364a <HAL_DMA_IRQHandler+0xc62>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a25      	ldr	r2, [pc, #148]	@ (800366c <HAL_DMA_IRQHandler+0xc84>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d036      	beq.n	800364a <HAL_DMA_IRQHandler+0xc62>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a23      	ldr	r2, [pc, #140]	@ (8003670 <HAL_DMA_IRQHandler+0xc88>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d031      	beq.n	800364a <HAL_DMA_IRQHandler+0xc62>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a22      	ldr	r2, [pc, #136]	@ (8003674 <HAL_DMA_IRQHandler+0xc8c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d02c      	beq.n	800364a <HAL_DMA_IRQHandler+0xc62>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a20      	ldr	r2, [pc, #128]	@ (8003678 <HAL_DMA_IRQHandler+0xc90>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d027      	beq.n	800364a <HAL_DMA_IRQHandler+0xc62>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a1f      	ldr	r2, [pc, #124]	@ (800367c <HAL_DMA_IRQHandler+0xc94>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d022      	beq.n	800364a <HAL_DMA_IRQHandler+0xc62>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a1d      	ldr	r2, [pc, #116]	@ (8003680 <HAL_DMA_IRQHandler+0xc98>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d01d      	beq.n	800364a <HAL_DMA_IRQHandler+0xc62>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1c      	ldr	r2, [pc, #112]	@ (8003684 <HAL_DMA_IRQHandler+0xc9c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d018      	beq.n	800364a <HAL_DMA_IRQHandler+0xc62>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1a      	ldr	r2, [pc, #104]	@ (8003688 <HAL_DMA_IRQHandler+0xca0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d013      	beq.n	800364a <HAL_DMA_IRQHandler+0xc62>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a19      	ldr	r2, [pc, #100]	@ (800368c <HAL_DMA_IRQHandler+0xca4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00e      	beq.n	800364a <HAL_DMA_IRQHandler+0xc62>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a17      	ldr	r2, [pc, #92]	@ (8003690 <HAL_DMA_IRQHandler+0xca8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d009      	beq.n	800364a <HAL_DMA_IRQHandler+0xc62>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a16      	ldr	r2, [pc, #88]	@ (8003694 <HAL_DMA_IRQHandler+0xcac>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d004      	beq.n	800364a <HAL_DMA_IRQHandler+0xc62>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a14      	ldr	r2, [pc, #80]	@ (8003698 <HAL_DMA_IRQHandler+0xcb0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d128      	bne.n	800369c <HAL_DMA_IRQHandler+0xcb4>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0214 	bic.w	r2, r2, #20
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	e027      	b.n	80036ac <HAL_DMA_IRQHandler+0xcc4>
 800365c:	40020010 	.word	0x40020010
 8003660:	40020028 	.word	0x40020028
 8003664:	40020040 	.word	0x40020040
 8003668:	40020058 	.word	0x40020058
 800366c:	40020070 	.word	0x40020070
 8003670:	40020088 	.word	0x40020088
 8003674:	400200a0 	.word	0x400200a0
 8003678:	400200b8 	.word	0x400200b8
 800367c:	40020410 	.word	0x40020410
 8003680:	40020428 	.word	0x40020428
 8003684:	40020440 	.word	0x40020440
 8003688:	40020458 	.word	0x40020458
 800368c:	40020470 	.word	0x40020470
 8003690:	40020488 	.word	0x40020488
 8003694:	400204a0 	.word	0x400204a0
 8003698:	400204b8 	.word	0x400204b8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 020a 	bic.w	r2, r2, #10
 80036aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8097 	beq.w	80037f4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036ce:	e091      	b.n	80037f4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2208      	movs	r2, #8
 80036da:	409a      	lsls	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 8088 	beq.w	80037f6 <HAL_DMA_IRQHandler+0xe0e>
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 8082 	beq.w	80037f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a41      	ldr	r2, [pc, #260]	@ (80037fc <HAL_DMA_IRQHandler+0xe14>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d04a      	beq.n	8003792 <HAL_DMA_IRQHandler+0xdaa>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a3f      	ldr	r2, [pc, #252]	@ (8003800 <HAL_DMA_IRQHandler+0xe18>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d045      	beq.n	8003792 <HAL_DMA_IRQHandler+0xdaa>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a3e      	ldr	r2, [pc, #248]	@ (8003804 <HAL_DMA_IRQHandler+0xe1c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d040      	beq.n	8003792 <HAL_DMA_IRQHandler+0xdaa>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a3c      	ldr	r2, [pc, #240]	@ (8003808 <HAL_DMA_IRQHandler+0xe20>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d03b      	beq.n	8003792 <HAL_DMA_IRQHandler+0xdaa>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a3b      	ldr	r2, [pc, #236]	@ (800380c <HAL_DMA_IRQHandler+0xe24>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d036      	beq.n	8003792 <HAL_DMA_IRQHandler+0xdaa>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a39      	ldr	r2, [pc, #228]	@ (8003810 <HAL_DMA_IRQHandler+0xe28>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d031      	beq.n	8003792 <HAL_DMA_IRQHandler+0xdaa>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a38      	ldr	r2, [pc, #224]	@ (8003814 <HAL_DMA_IRQHandler+0xe2c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d02c      	beq.n	8003792 <HAL_DMA_IRQHandler+0xdaa>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a36      	ldr	r2, [pc, #216]	@ (8003818 <HAL_DMA_IRQHandler+0xe30>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d027      	beq.n	8003792 <HAL_DMA_IRQHandler+0xdaa>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a35      	ldr	r2, [pc, #212]	@ (800381c <HAL_DMA_IRQHandler+0xe34>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d022      	beq.n	8003792 <HAL_DMA_IRQHandler+0xdaa>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a33      	ldr	r2, [pc, #204]	@ (8003820 <HAL_DMA_IRQHandler+0xe38>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d01d      	beq.n	8003792 <HAL_DMA_IRQHandler+0xdaa>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a32      	ldr	r2, [pc, #200]	@ (8003824 <HAL_DMA_IRQHandler+0xe3c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d018      	beq.n	8003792 <HAL_DMA_IRQHandler+0xdaa>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a30      	ldr	r2, [pc, #192]	@ (8003828 <HAL_DMA_IRQHandler+0xe40>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d013      	beq.n	8003792 <HAL_DMA_IRQHandler+0xdaa>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a2f      	ldr	r2, [pc, #188]	@ (800382c <HAL_DMA_IRQHandler+0xe44>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00e      	beq.n	8003792 <HAL_DMA_IRQHandler+0xdaa>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a2d      	ldr	r2, [pc, #180]	@ (8003830 <HAL_DMA_IRQHandler+0xe48>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d009      	beq.n	8003792 <HAL_DMA_IRQHandler+0xdaa>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a2c      	ldr	r2, [pc, #176]	@ (8003834 <HAL_DMA_IRQHandler+0xe4c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d004      	beq.n	8003792 <HAL_DMA_IRQHandler+0xdaa>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a2a      	ldr	r2, [pc, #168]	@ (8003838 <HAL_DMA_IRQHandler+0xe50>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d108      	bne.n	80037a4 <HAL_DMA_IRQHandler+0xdbc>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 021c 	bic.w	r2, r2, #28
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	e007      	b.n	80037b4 <HAL_DMA_IRQHandler+0xdcc>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 020e 	bic.w	r2, r2, #14
 80037b2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	2201      	movs	r2, #1
 80037be:	409a      	lsls	r2, r3
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	4798      	blx	r3
 80037ea:	e004      	b.n	80037f6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80037ec:	bf00      	nop
 80037ee:	e002      	b.n	80037f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037f0:	bf00      	nop
 80037f2:	e000      	b.n	80037f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037f4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80037f6:	3728      	adds	r7, #40	@ 0x28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40020010 	.word	0x40020010
 8003800:	40020028 	.word	0x40020028
 8003804:	40020040 	.word	0x40020040
 8003808:	40020058 	.word	0x40020058
 800380c:	40020070 	.word	0x40020070
 8003810:	40020088 	.word	0x40020088
 8003814:	400200a0 	.word	0x400200a0
 8003818:	400200b8 	.word	0x400200b8
 800381c:	40020410 	.word	0x40020410
 8003820:	40020428 	.word	0x40020428
 8003824:	40020440 	.word	0x40020440
 8003828:	40020458 	.word	0x40020458
 800382c:	40020470 	.word	0x40020470
 8003830:	40020488 	.word	0x40020488
 8003834:	400204a0 	.word	0x400204a0
 8003838:	400204b8 	.word	0x400204b8

0800383c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003854:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a7f      	ldr	r2, [pc, #508]	@ (8003a58 <DMA_SetConfig+0x21c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d072      	beq.n	8003946 <DMA_SetConfig+0x10a>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a7d      	ldr	r2, [pc, #500]	@ (8003a5c <DMA_SetConfig+0x220>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d06d      	beq.n	8003946 <DMA_SetConfig+0x10a>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a7c      	ldr	r2, [pc, #496]	@ (8003a60 <DMA_SetConfig+0x224>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d068      	beq.n	8003946 <DMA_SetConfig+0x10a>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a7a      	ldr	r2, [pc, #488]	@ (8003a64 <DMA_SetConfig+0x228>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d063      	beq.n	8003946 <DMA_SetConfig+0x10a>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a79      	ldr	r2, [pc, #484]	@ (8003a68 <DMA_SetConfig+0x22c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d05e      	beq.n	8003946 <DMA_SetConfig+0x10a>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a77      	ldr	r2, [pc, #476]	@ (8003a6c <DMA_SetConfig+0x230>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d059      	beq.n	8003946 <DMA_SetConfig+0x10a>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a76      	ldr	r2, [pc, #472]	@ (8003a70 <DMA_SetConfig+0x234>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d054      	beq.n	8003946 <DMA_SetConfig+0x10a>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a74      	ldr	r2, [pc, #464]	@ (8003a74 <DMA_SetConfig+0x238>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d04f      	beq.n	8003946 <DMA_SetConfig+0x10a>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a73      	ldr	r2, [pc, #460]	@ (8003a78 <DMA_SetConfig+0x23c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d04a      	beq.n	8003946 <DMA_SetConfig+0x10a>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a71      	ldr	r2, [pc, #452]	@ (8003a7c <DMA_SetConfig+0x240>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d045      	beq.n	8003946 <DMA_SetConfig+0x10a>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a70      	ldr	r2, [pc, #448]	@ (8003a80 <DMA_SetConfig+0x244>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d040      	beq.n	8003946 <DMA_SetConfig+0x10a>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003a84 <DMA_SetConfig+0x248>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d03b      	beq.n	8003946 <DMA_SetConfig+0x10a>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a6d      	ldr	r2, [pc, #436]	@ (8003a88 <DMA_SetConfig+0x24c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d036      	beq.n	8003946 <DMA_SetConfig+0x10a>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a6b      	ldr	r2, [pc, #428]	@ (8003a8c <DMA_SetConfig+0x250>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d031      	beq.n	8003946 <DMA_SetConfig+0x10a>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a6a      	ldr	r2, [pc, #424]	@ (8003a90 <DMA_SetConfig+0x254>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d02c      	beq.n	8003946 <DMA_SetConfig+0x10a>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a68      	ldr	r2, [pc, #416]	@ (8003a94 <DMA_SetConfig+0x258>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d027      	beq.n	8003946 <DMA_SetConfig+0x10a>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a67      	ldr	r2, [pc, #412]	@ (8003a98 <DMA_SetConfig+0x25c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d022      	beq.n	8003946 <DMA_SetConfig+0x10a>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a65      	ldr	r2, [pc, #404]	@ (8003a9c <DMA_SetConfig+0x260>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d01d      	beq.n	8003946 <DMA_SetConfig+0x10a>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a64      	ldr	r2, [pc, #400]	@ (8003aa0 <DMA_SetConfig+0x264>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d018      	beq.n	8003946 <DMA_SetConfig+0x10a>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a62      	ldr	r2, [pc, #392]	@ (8003aa4 <DMA_SetConfig+0x268>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d013      	beq.n	8003946 <DMA_SetConfig+0x10a>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a61      	ldr	r2, [pc, #388]	@ (8003aa8 <DMA_SetConfig+0x26c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d00e      	beq.n	8003946 <DMA_SetConfig+0x10a>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a5f      	ldr	r2, [pc, #380]	@ (8003aac <DMA_SetConfig+0x270>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d009      	beq.n	8003946 <DMA_SetConfig+0x10a>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a5e      	ldr	r2, [pc, #376]	@ (8003ab0 <DMA_SetConfig+0x274>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d004      	beq.n	8003946 <DMA_SetConfig+0x10a>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a5c      	ldr	r2, [pc, #368]	@ (8003ab4 <DMA_SetConfig+0x278>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <DMA_SetConfig+0x10e>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <DMA_SetConfig+0x110>
 800394a:	2300      	movs	r3, #0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00d      	beq.n	800396c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003958:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d004      	beq.n	800396c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800396a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a39      	ldr	r2, [pc, #228]	@ (8003a58 <DMA_SetConfig+0x21c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d04a      	beq.n	8003a0c <DMA_SetConfig+0x1d0>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a38      	ldr	r2, [pc, #224]	@ (8003a5c <DMA_SetConfig+0x220>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d045      	beq.n	8003a0c <DMA_SetConfig+0x1d0>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a36      	ldr	r2, [pc, #216]	@ (8003a60 <DMA_SetConfig+0x224>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d040      	beq.n	8003a0c <DMA_SetConfig+0x1d0>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a35      	ldr	r2, [pc, #212]	@ (8003a64 <DMA_SetConfig+0x228>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d03b      	beq.n	8003a0c <DMA_SetConfig+0x1d0>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a33      	ldr	r2, [pc, #204]	@ (8003a68 <DMA_SetConfig+0x22c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d036      	beq.n	8003a0c <DMA_SetConfig+0x1d0>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a32      	ldr	r2, [pc, #200]	@ (8003a6c <DMA_SetConfig+0x230>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d031      	beq.n	8003a0c <DMA_SetConfig+0x1d0>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a30      	ldr	r2, [pc, #192]	@ (8003a70 <DMA_SetConfig+0x234>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d02c      	beq.n	8003a0c <DMA_SetConfig+0x1d0>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003a74 <DMA_SetConfig+0x238>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d027      	beq.n	8003a0c <DMA_SetConfig+0x1d0>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003a78 <DMA_SetConfig+0x23c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d022      	beq.n	8003a0c <DMA_SetConfig+0x1d0>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a2c      	ldr	r2, [pc, #176]	@ (8003a7c <DMA_SetConfig+0x240>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d01d      	beq.n	8003a0c <DMA_SetConfig+0x1d0>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003a80 <DMA_SetConfig+0x244>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d018      	beq.n	8003a0c <DMA_SetConfig+0x1d0>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a29      	ldr	r2, [pc, #164]	@ (8003a84 <DMA_SetConfig+0x248>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d013      	beq.n	8003a0c <DMA_SetConfig+0x1d0>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a27      	ldr	r2, [pc, #156]	@ (8003a88 <DMA_SetConfig+0x24c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00e      	beq.n	8003a0c <DMA_SetConfig+0x1d0>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a26      	ldr	r2, [pc, #152]	@ (8003a8c <DMA_SetConfig+0x250>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d009      	beq.n	8003a0c <DMA_SetConfig+0x1d0>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a24      	ldr	r2, [pc, #144]	@ (8003a90 <DMA_SetConfig+0x254>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d004      	beq.n	8003a0c <DMA_SetConfig+0x1d0>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a23      	ldr	r2, [pc, #140]	@ (8003a94 <DMA_SetConfig+0x258>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d101      	bne.n	8003a10 <DMA_SetConfig+0x1d4>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <DMA_SetConfig+0x1d6>
 8003a10:	2300      	movs	r3, #0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d059      	beq.n	8003aca <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	223f      	movs	r2, #63	@ 0x3f
 8003a20:	409a      	lsls	r2, r3
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a34:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b40      	cmp	r3, #64	@ 0x40
 8003a44:	d138      	bne.n	8003ab8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003a56:	e086      	b.n	8003b66 <DMA_SetConfig+0x32a>
 8003a58:	40020010 	.word	0x40020010
 8003a5c:	40020028 	.word	0x40020028
 8003a60:	40020040 	.word	0x40020040
 8003a64:	40020058 	.word	0x40020058
 8003a68:	40020070 	.word	0x40020070
 8003a6c:	40020088 	.word	0x40020088
 8003a70:	400200a0 	.word	0x400200a0
 8003a74:	400200b8 	.word	0x400200b8
 8003a78:	40020410 	.word	0x40020410
 8003a7c:	40020428 	.word	0x40020428
 8003a80:	40020440 	.word	0x40020440
 8003a84:	40020458 	.word	0x40020458
 8003a88:	40020470 	.word	0x40020470
 8003a8c:	40020488 	.word	0x40020488
 8003a90:	400204a0 	.word	0x400204a0
 8003a94:	400204b8 	.word	0x400204b8
 8003a98:	58025408 	.word	0x58025408
 8003a9c:	5802541c 	.word	0x5802541c
 8003aa0:	58025430 	.word	0x58025430
 8003aa4:	58025444 	.word	0x58025444
 8003aa8:	58025458 	.word	0x58025458
 8003aac:	5802546c 	.word	0x5802546c
 8003ab0:	58025480 	.word	0x58025480
 8003ab4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	60da      	str	r2, [r3, #12]
}
 8003ac8:	e04d      	b.n	8003b66 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a29      	ldr	r2, [pc, #164]	@ (8003b74 <DMA_SetConfig+0x338>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d022      	beq.n	8003b1a <DMA_SetConfig+0x2de>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a27      	ldr	r2, [pc, #156]	@ (8003b78 <DMA_SetConfig+0x33c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01d      	beq.n	8003b1a <DMA_SetConfig+0x2de>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a26      	ldr	r2, [pc, #152]	@ (8003b7c <DMA_SetConfig+0x340>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d018      	beq.n	8003b1a <DMA_SetConfig+0x2de>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a24      	ldr	r2, [pc, #144]	@ (8003b80 <DMA_SetConfig+0x344>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <DMA_SetConfig+0x2de>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a23      	ldr	r2, [pc, #140]	@ (8003b84 <DMA_SetConfig+0x348>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00e      	beq.n	8003b1a <DMA_SetConfig+0x2de>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a21      	ldr	r2, [pc, #132]	@ (8003b88 <DMA_SetConfig+0x34c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d009      	beq.n	8003b1a <DMA_SetConfig+0x2de>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a20      	ldr	r2, [pc, #128]	@ (8003b8c <DMA_SetConfig+0x350>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d004      	beq.n	8003b1a <DMA_SetConfig+0x2de>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1e      	ldr	r2, [pc, #120]	@ (8003b90 <DMA_SetConfig+0x354>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d101      	bne.n	8003b1e <DMA_SetConfig+0x2e2>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <DMA_SetConfig+0x2e4>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d020      	beq.n	8003b66 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b40      	cmp	r3, #64	@ 0x40
 8003b42:	d108      	bne.n	8003b56 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	60da      	str	r2, [r3, #12]
}
 8003b54:	e007      	b.n	8003b66 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	60da      	str	r2, [r3, #12]
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	58025408 	.word	0x58025408
 8003b78:	5802541c 	.word	0x5802541c
 8003b7c:	58025430 	.word	0x58025430
 8003b80:	58025444 	.word	0x58025444
 8003b84:	58025458 	.word	0x58025458
 8003b88:	5802546c 	.word	0x5802546c
 8003b8c:	58025480 	.word	0x58025480
 8003b90:	58025494 	.word	0x58025494

08003b94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a42      	ldr	r2, [pc, #264]	@ (8003cac <DMA_CalcBaseAndBitshift+0x118>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d04a      	beq.n	8003c3c <DMA_CalcBaseAndBitshift+0xa8>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a41      	ldr	r2, [pc, #260]	@ (8003cb0 <DMA_CalcBaseAndBitshift+0x11c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d045      	beq.n	8003c3c <DMA_CalcBaseAndBitshift+0xa8>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a3f      	ldr	r2, [pc, #252]	@ (8003cb4 <DMA_CalcBaseAndBitshift+0x120>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d040      	beq.n	8003c3c <DMA_CalcBaseAndBitshift+0xa8>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a3e      	ldr	r2, [pc, #248]	@ (8003cb8 <DMA_CalcBaseAndBitshift+0x124>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d03b      	beq.n	8003c3c <DMA_CalcBaseAndBitshift+0xa8>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a3c      	ldr	r2, [pc, #240]	@ (8003cbc <DMA_CalcBaseAndBitshift+0x128>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d036      	beq.n	8003c3c <DMA_CalcBaseAndBitshift+0xa8>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a3b      	ldr	r2, [pc, #236]	@ (8003cc0 <DMA_CalcBaseAndBitshift+0x12c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d031      	beq.n	8003c3c <DMA_CalcBaseAndBitshift+0xa8>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a39      	ldr	r2, [pc, #228]	@ (8003cc4 <DMA_CalcBaseAndBitshift+0x130>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d02c      	beq.n	8003c3c <DMA_CalcBaseAndBitshift+0xa8>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a38      	ldr	r2, [pc, #224]	@ (8003cc8 <DMA_CalcBaseAndBitshift+0x134>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d027      	beq.n	8003c3c <DMA_CalcBaseAndBitshift+0xa8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a36      	ldr	r2, [pc, #216]	@ (8003ccc <DMA_CalcBaseAndBitshift+0x138>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d022      	beq.n	8003c3c <DMA_CalcBaseAndBitshift+0xa8>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a35      	ldr	r2, [pc, #212]	@ (8003cd0 <DMA_CalcBaseAndBitshift+0x13c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d01d      	beq.n	8003c3c <DMA_CalcBaseAndBitshift+0xa8>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a33      	ldr	r2, [pc, #204]	@ (8003cd4 <DMA_CalcBaseAndBitshift+0x140>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d018      	beq.n	8003c3c <DMA_CalcBaseAndBitshift+0xa8>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a32      	ldr	r2, [pc, #200]	@ (8003cd8 <DMA_CalcBaseAndBitshift+0x144>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d013      	beq.n	8003c3c <DMA_CalcBaseAndBitshift+0xa8>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a30      	ldr	r2, [pc, #192]	@ (8003cdc <DMA_CalcBaseAndBitshift+0x148>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d00e      	beq.n	8003c3c <DMA_CalcBaseAndBitshift+0xa8>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a2f      	ldr	r2, [pc, #188]	@ (8003ce0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d009      	beq.n	8003c3c <DMA_CalcBaseAndBitshift+0xa8>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a2d      	ldr	r2, [pc, #180]	@ (8003ce4 <DMA_CalcBaseAndBitshift+0x150>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d004      	beq.n	8003c3c <DMA_CalcBaseAndBitshift+0xa8>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a2c      	ldr	r2, [pc, #176]	@ (8003ce8 <DMA_CalcBaseAndBitshift+0x154>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d101      	bne.n	8003c40 <DMA_CalcBaseAndBitshift+0xac>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <DMA_CalcBaseAndBitshift+0xae>
 8003c40:	2300      	movs	r3, #0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d024      	beq.n	8003c90 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	3b10      	subs	r3, #16
 8003c4e:	4a27      	ldr	r2, [pc, #156]	@ (8003cec <DMA_CalcBaseAndBitshift+0x158>)
 8003c50:	fba2 2303 	umull	r2, r3, r2, r3
 8003c54:	091b      	lsrs	r3, r3, #4
 8003c56:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	4a24      	ldr	r2, [pc, #144]	@ (8003cf0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003c60:	5cd3      	ldrb	r3, [r2, r3]
 8003c62:	461a      	mov	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d908      	bls.n	8003c80 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf4 <DMA_CalcBaseAndBitshift+0x160>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	1d1a      	adds	r2, r3, #4
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c7e:	e00d      	b.n	8003c9c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf4 <DMA_CalcBaseAndBitshift+0x160>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c8e:	e005      	b.n	8003c9c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	40020010 	.word	0x40020010
 8003cb0:	40020028 	.word	0x40020028
 8003cb4:	40020040 	.word	0x40020040
 8003cb8:	40020058 	.word	0x40020058
 8003cbc:	40020070 	.word	0x40020070
 8003cc0:	40020088 	.word	0x40020088
 8003cc4:	400200a0 	.word	0x400200a0
 8003cc8:	400200b8 	.word	0x400200b8
 8003ccc:	40020410 	.word	0x40020410
 8003cd0:	40020428 	.word	0x40020428
 8003cd4:	40020440 	.word	0x40020440
 8003cd8:	40020458 	.word	0x40020458
 8003cdc:	40020470 	.word	0x40020470
 8003ce0:	40020488 	.word	0x40020488
 8003ce4:	400204a0 	.word	0x400204a0
 8003ce8:	400204b8 	.word	0x400204b8
 8003cec:	aaaaaaab 	.word	0xaaaaaaab
 8003cf0:	0800d2bc 	.word	0x0800d2bc
 8003cf4:	fffffc00 	.word	0xfffffc00

08003cf8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d120      	bne.n	8003d4e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d858      	bhi.n	8003dc6 <DMA_CheckFifoParam+0xce>
 8003d14:	a201      	add	r2, pc, #4	@ (adr r2, 8003d1c <DMA_CheckFifoParam+0x24>)
 8003d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1a:	bf00      	nop
 8003d1c:	08003d2d 	.word	0x08003d2d
 8003d20:	08003d3f 	.word	0x08003d3f
 8003d24:	08003d2d 	.word	0x08003d2d
 8003d28:	08003dc7 	.word	0x08003dc7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d048      	beq.n	8003dca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d3c:	e045      	b.n	8003dca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d46:	d142      	bne.n	8003dce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d4c:	e03f      	b.n	8003dce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d56:	d123      	bne.n	8003da0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d838      	bhi.n	8003dd2 <DMA_CheckFifoParam+0xda>
 8003d60:	a201      	add	r2, pc, #4	@ (adr r2, 8003d68 <DMA_CheckFifoParam+0x70>)
 8003d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d66:	bf00      	nop
 8003d68:	08003d79 	.word	0x08003d79
 8003d6c:	08003d7f 	.word	0x08003d7f
 8003d70:	08003d79 	.word	0x08003d79
 8003d74:	08003d91 	.word	0x08003d91
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
        break;
 8003d7c:	e030      	b.n	8003de0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d025      	beq.n	8003dd6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d8e:	e022      	b.n	8003dd6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d98:	d11f      	bne.n	8003dda <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d9e:	e01c      	b.n	8003dda <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d902      	bls.n	8003dae <DMA_CheckFifoParam+0xb6>
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d003      	beq.n	8003db4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003dac:	e018      	b.n	8003de0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
        break;
 8003db2:	e015      	b.n	8003de0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00e      	beq.n	8003dde <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
    break;
 8003dc4:	e00b      	b.n	8003dde <DMA_CheckFifoParam+0xe6>
        break;
 8003dc6:	bf00      	nop
 8003dc8:	e00a      	b.n	8003de0 <DMA_CheckFifoParam+0xe8>
        break;
 8003dca:	bf00      	nop
 8003dcc:	e008      	b.n	8003de0 <DMA_CheckFifoParam+0xe8>
        break;
 8003dce:	bf00      	nop
 8003dd0:	e006      	b.n	8003de0 <DMA_CheckFifoParam+0xe8>
        break;
 8003dd2:	bf00      	nop
 8003dd4:	e004      	b.n	8003de0 <DMA_CheckFifoParam+0xe8>
        break;
 8003dd6:	bf00      	nop
 8003dd8:	e002      	b.n	8003de0 <DMA_CheckFifoParam+0xe8>
        break;
 8003dda:	bf00      	nop
 8003ddc:	e000      	b.n	8003de0 <DMA_CheckFifoParam+0xe8>
    break;
 8003dde:	bf00      	nop
    }
  }

  return status;
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop

08003df0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a38      	ldr	r2, [pc, #224]	@ (8003ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d022      	beq.n	8003e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a36      	ldr	r2, [pc, #216]	@ (8003ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d01d      	beq.n	8003e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a35      	ldr	r2, [pc, #212]	@ (8003eec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d018      	beq.n	8003e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a33      	ldr	r2, [pc, #204]	@ (8003ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d013      	beq.n	8003e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a32      	ldr	r2, [pc, #200]	@ (8003ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00e      	beq.n	8003e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a30      	ldr	r2, [pc, #192]	@ (8003ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d009      	beq.n	8003e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8003efc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d004      	beq.n	8003e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a2d      	ldr	r2, [pc, #180]	@ (8003f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d101      	bne.n	8003e52 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003e52:	2300      	movs	r3, #0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01a      	beq.n	8003e8e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	3b08      	subs	r3, #8
 8003e60:	4a28      	ldr	r2, [pc, #160]	@ (8003f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	091b      	lsrs	r3, r3, #4
 8003e68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4b26      	ldr	r3, [pc, #152]	@ (8003f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	461a      	mov	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a24      	ldr	r2, [pc, #144]	@ (8003f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003e7c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f003 031f 	and.w	r3, r3, #31
 8003e84:	2201      	movs	r2, #1
 8003e86:	409a      	lsls	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003e8c:	e024      	b.n	8003ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	3b10      	subs	r3, #16
 8003e96:	4a1e      	ldr	r2, [pc, #120]	@ (8003f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d806      	bhi.n	8003eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8003f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d902      	bls.n	8003eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4b18      	ldr	r3, [pc, #96]	@ (8003f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003eba:	4413      	add	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a16      	ldr	r2, [pc, #88]	@ (8003f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003ec8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	58025408 	.word	0x58025408
 8003ee8:	5802541c 	.word	0x5802541c
 8003eec:	58025430 	.word	0x58025430
 8003ef0:	58025444 	.word	0x58025444
 8003ef4:	58025458 	.word	0x58025458
 8003ef8:	5802546c 	.word	0x5802546c
 8003efc:	58025480 	.word	0x58025480
 8003f00:	58025494 	.word	0x58025494
 8003f04:	cccccccd 	.word	0xcccccccd
 8003f08:	16009600 	.word	0x16009600
 8003f0c:	58025880 	.word	0x58025880
 8003f10:	aaaaaaab 	.word	0xaaaaaaab
 8003f14:	400204b8 	.word	0x400204b8
 8003f18:	4002040f 	.word	0x4002040f
 8003f1c:	10008200 	.word	0x10008200
 8003f20:	40020880 	.word	0x40020880

08003f24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d04a      	beq.n	8003fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d847      	bhi.n	8003fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a25      	ldr	r2, [pc, #148]	@ (8003fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d022      	beq.n	8003f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a24      	ldr	r2, [pc, #144]	@ (8003fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d01d      	beq.n	8003f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a22      	ldr	r2, [pc, #136]	@ (8003fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d018      	beq.n	8003f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a21      	ldr	r2, [pc, #132]	@ (8003fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d013      	beq.n	8003f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00e      	beq.n	8003f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d009      	beq.n	8003f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d004      	beq.n	8003f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d101      	bne.n	8003f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003f94:	2300      	movs	r3, #0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4b17      	ldr	r3, [pc, #92]	@ (8003ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a15      	ldr	r2, [pc, #84]	@ (8004000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003fac:	671a      	str	r2, [r3, #112]	@ 0x70
 8003fae:	e009      	b.n	8003fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4b14      	ldr	r3, [pc, #80]	@ (8004004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	461a      	mov	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a11      	ldr	r2, [pc, #68]	@ (8004008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003fc2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	2201      	movs	r2, #1
 8003fca:	409a      	lsls	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	58025408 	.word	0x58025408
 8003fe0:	5802541c 	.word	0x5802541c
 8003fe4:	58025430 	.word	0x58025430
 8003fe8:	58025444 	.word	0x58025444
 8003fec:	58025458 	.word	0x58025458
 8003ff0:	5802546c 	.word	0x5802546c
 8003ff4:	58025480 	.word	0x58025480
 8003ff8:	58025494 	.word	0x58025494
 8003ffc:	1600963f 	.word	0x1600963f
 8004000:	58025940 	.word	0x58025940
 8004004:	1000823f 	.word	0x1000823f
 8004008:	40020940 	.word	0x40020940

0800400c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800400c:	b480      	push	{r7}
 800400e:	b089      	sub	sp, #36	@ 0x24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800401a:	4b86      	ldr	r3, [pc, #536]	@ (8004234 <HAL_GPIO_Init+0x228>)
 800401c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800401e:	e18c      	b.n	800433a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	2101      	movs	r1, #1
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	fa01 f303 	lsl.w	r3, r1, r3
 800402c:	4013      	ands	r3, r2
 800402e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 817e 	beq.w	8004334 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d005      	beq.n	8004050 <HAL_GPIO_Init+0x44>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d130      	bne.n	80040b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	2203      	movs	r2, #3
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4013      	ands	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4313      	orrs	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004086:	2201      	movs	r2, #1
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	43db      	mvns	r3, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4013      	ands	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	091b      	lsrs	r3, r3, #4
 800409c:	f003 0201 	and.w	r2, r3, #1
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d017      	beq.n	80040ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	2203      	movs	r2, #3
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4013      	ands	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d123      	bne.n	8004142 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	08da      	lsrs	r2, r3, #3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3208      	adds	r2, #8
 8004102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	220f      	movs	r2, #15
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	43db      	mvns	r3, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4013      	ands	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4313      	orrs	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	08da      	lsrs	r2, r3, #3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3208      	adds	r2, #8
 800413c:	69b9      	ldr	r1, [r7, #24]
 800413e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	2203      	movs	r2, #3
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43db      	mvns	r3, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4013      	ands	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f003 0203 	and.w	r2, r3, #3
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4313      	orrs	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 80d8 	beq.w	8004334 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004184:	4b2c      	ldr	r3, [pc, #176]	@ (8004238 <HAL_GPIO_Init+0x22c>)
 8004186:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800418a:	4a2b      	ldr	r2, [pc, #172]	@ (8004238 <HAL_GPIO_Init+0x22c>)
 800418c:	f043 0302 	orr.w	r3, r3, #2
 8004190:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004194:	4b28      	ldr	r3, [pc, #160]	@ (8004238 <HAL_GPIO_Init+0x22c>)
 8004196:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041a2:	4a26      	ldr	r2, [pc, #152]	@ (800423c <HAL_GPIO_Init+0x230>)
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	089b      	lsrs	r3, r3, #2
 80041a8:	3302      	adds	r3, #2
 80041aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	220f      	movs	r2, #15
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43db      	mvns	r3, r3
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4013      	ands	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004240 <HAL_GPIO_Init+0x234>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d04a      	beq.n	8004264 <HAL_GPIO_Init+0x258>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004244 <HAL_GPIO_Init+0x238>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d02b      	beq.n	800422e <HAL_GPIO_Init+0x222>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004248 <HAL_GPIO_Init+0x23c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d025      	beq.n	800422a <HAL_GPIO_Init+0x21e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a1a      	ldr	r2, [pc, #104]	@ (800424c <HAL_GPIO_Init+0x240>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d01f      	beq.n	8004226 <HAL_GPIO_Init+0x21a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a19      	ldr	r2, [pc, #100]	@ (8004250 <HAL_GPIO_Init+0x244>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d019      	beq.n	8004222 <HAL_GPIO_Init+0x216>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a18      	ldr	r2, [pc, #96]	@ (8004254 <HAL_GPIO_Init+0x248>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d013      	beq.n	800421e <HAL_GPIO_Init+0x212>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a17      	ldr	r2, [pc, #92]	@ (8004258 <HAL_GPIO_Init+0x24c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00d      	beq.n	800421a <HAL_GPIO_Init+0x20e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a16      	ldr	r2, [pc, #88]	@ (800425c <HAL_GPIO_Init+0x250>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d007      	beq.n	8004216 <HAL_GPIO_Init+0x20a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a15      	ldr	r2, [pc, #84]	@ (8004260 <HAL_GPIO_Init+0x254>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d101      	bne.n	8004212 <HAL_GPIO_Init+0x206>
 800420e:	2309      	movs	r3, #9
 8004210:	e029      	b.n	8004266 <HAL_GPIO_Init+0x25a>
 8004212:	230a      	movs	r3, #10
 8004214:	e027      	b.n	8004266 <HAL_GPIO_Init+0x25a>
 8004216:	2307      	movs	r3, #7
 8004218:	e025      	b.n	8004266 <HAL_GPIO_Init+0x25a>
 800421a:	2306      	movs	r3, #6
 800421c:	e023      	b.n	8004266 <HAL_GPIO_Init+0x25a>
 800421e:	2305      	movs	r3, #5
 8004220:	e021      	b.n	8004266 <HAL_GPIO_Init+0x25a>
 8004222:	2304      	movs	r3, #4
 8004224:	e01f      	b.n	8004266 <HAL_GPIO_Init+0x25a>
 8004226:	2303      	movs	r3, #3
 8004228:	e01d      	b.n	8004266 <HAL_GPIO_Init+0x25a>
 800422a:	2302      	movs	r3, #2
 800422c:	e01b      	b.n	8004266 <HAL_GPIO_Init+0x25a>
 800422e:	2301      	movs	r3, #1
 8004230:	e019      	b.n	8004266 <HAL_GPIO_Init+0x25a>
 8004232:	bf00      	nop
 8004234:	58000080 	.word	0x58000080
 8004238:	58024400 	.word	0x58024400
 800423c:	58000400 	.word	0x58000400
 8004240:	58020000 	.word	0x58020000
 8004244:	58020400 	.word	0x58020400
 8004248:	58020800 	.word	0x58020800
 800424c:	58020c00 	.word	0x58020c00
 8004250:	58021000 	.word	0x58021000
 8004254:	58021400 	.word	0x58021400
 8004258:	58021800 	.word	0x58021800
 800425c:	58021c00 	.word	0x58021c00
 8004260:	58022400 	.word	0x58022400
 8004264:	2300      	movs	r3, #0
 8004266:	69fa      	ldr	r2, [r7, #28]
 8004268:	f002 0203 	and.w	r2, r2, #3
 800426c:	0092      	lsls	r2, r2, #2
 800426e:	4093      	lsls	r3, r2
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4313      	orrs	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004276:	4938      	ldr	r1, [pc, #224]	@ (8004358 <HAL_GPIO_Init+0x34c>)
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	089b      	lsrs	r3, r3, #2
 800427c:	3302      	adds	r3, #2
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	43db      	mvns	r3, r3
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	4013      	ands	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80042aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80042b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	43db      	mvns	r3, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80042d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	43db      	mvns	r3, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4013      	ands	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	43db      	mvns	r3, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4013      	ands	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	3301      	adds	r3, #1
 8004338:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	f47f ae6b 	bne.w	8004020 <HAL_GPIO_Init+0x14>
  }
}
 800434a:	bf00      	nop
 800434c:	bf00      	nop
 800434e:	3724      	adds	r7, #36	@ 0x24
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	58000400 	.word	0x58000400

0800435c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	807b      	strh	r3, [r7, #2]
 8004368:	4613      	mov	r3, r2
 800436a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800436c:	787b      	ldrb	r3, [r7, #1]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004372:	887a      	ldrh	r2, [r7, #2]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004378:	e003      	b.n	8004382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800437a:	887b      	ldrh	r3, [r7, #2]
 800437c:	041a      	lsls	r2, r3, #16
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	619a      	str	r2, [r3, #24]
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	4603      	mov	r3, r0
 8004396:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800439c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80043a0:	88fb      	ldrh	r3, [r7, #6]
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043ac:	88fb      	ldrh	r3, [r7, #6]
 80043ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 f804 	bl	80043c2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	4603      	mov	r3, r0
 80043ca:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80043e0:	4b19      	ldr	r3, [pc, #100]	@ (8004448 <HAL_PWREx_ConfigSupply+0x70>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d00a      	beq.n	8004402 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80043ec:	4b16      	ldr	r3, [pc, #88]	@ (8004448 <HAL_PWREx_ConfigSupply+0x70>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d001      	beq.n	80043fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e01f      	b.n	800443e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e01d      	b.n	800443e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004402:	4b11      	ldr	r3, [pc, #68]	@ (8004448 <HAL_PWREx_ConfigSupply+0x70>)
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f023 0207 	bic.w	r2, r3, #7
 800440a:	490f      	ldr	r1, [pc, #60]	@ (8004448 <HAL_PWREx_ConfigSupply+0x70>)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4313      	orrs	r3, r2
 8004410:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004412:	f7fc fed7 	bl	80011c4 <HAL_GetTick>
 8004416:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004418:	e009      	b.n	800442e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800441a:	f7fc fed3 	bl	80011c4 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004428:	d901      	bls.n	800442e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e007      	b.n	800443e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800442e:	4b06      	ldr	r3, [pc, #24]	@ (8004448 <HAL_PWREx_ConfigSupply+0x70>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800443a:	d1ee      	bne.n	800441a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	58024800 	.word	0x58024800

0800444c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08c      	sub	sp, #48	@ 0x30
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e3c8      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 8087 	beq.w	800457a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800446c:	4b88      	ldr	r3, [pc, #544]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004474:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004476:	4b86      	ldr	r3, [pc, #536]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 8004478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800447c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800447e:	2b10      	cmp	r3, #16
 8004480:	d007      	beq.n	8004492 <HAL_RCC_OscConfig+0x46>
 8004482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004484:	2b18      	cmp	r3, #24
 8004486:	d110      	bne.n	80044aa <HAL_RCC_OscConfig+0x5e>
 8004488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d10b      	bne.n	80044aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004492:	4b7f      	ldr	r3, [pc, #508]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d06c      	beq.n	8004578 <HAL_RCC_OscConfig+0x12c>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d168      	bne.n	8004578 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e3a2      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044b2:	d106      	bne.n	80044c2 <HAL_RCC_OscConfig+0x76>
 80044b4:	4b76      	ldr	r3, [pc, #472]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a75      	ldr	r2, [pc, #468]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 80044ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	e02e      	b.n	8004520 <HAL_RCC_OscConfig+0xd4>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x98>
 80044ca:	4b71      	ldr	r3, [pc, #452]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a70      	ldr	r2, [pc, #448]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 80044d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4b6e      	ldr	r3, [pc, #440]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a6d      	ldr	r2, [pc, #436]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 80044dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e01d      	b.n	8004520 <HAL_RCC_OscConfig+0xd4>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044ec:	d10c      	bne.n	8004508 <HAL_RCC_OscConfig+0xbc>
 80044ee:	4b68      	ldr	r3, [pc, #416]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a67      	ldr	r2, [pc, #412]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 80044f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	4b65      	ldr	r3, [pc, #404]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a64      	ldr	r2, [pc, #400]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 8004500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	e00b      	b.n	8004520 <HAL_RCC_OscConfig+0xd4>
 8004508:	4b61      	ldr	r3, [pc, #388]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a60      	ldr	r2, [pc, #384]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 800450e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	4b5e      	ldr	r3, [pc, #376]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a5d      	ldr	r2, [pc, #372]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 800451a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800451e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d013      	beq.n	8004550 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004528:	f7fc fe4c 	bl	80011c4 <HAL_GetTick>
 800452c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004530:	f7fc fe48 	bl	80011c4 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b64      	cmp	r3, #100	@ 0x64
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e356      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004542:	4b53      	ldr	r3, [pc, #332]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0xe4>
 800454e:	e014      	b.n	800457a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fc fe38 	bl	80011c4 <HAL_GetTick>
 8004554:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004558:	f7fc fe34 	bl	80011c4 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b64      	cmp	r3, #100	@ 0x64
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e342      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800456a:	4b49      	ldr	r3, [pc, #292]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x10c>
 8004576:	e000      	b.n	800457a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 808c 	beq.w	80046a0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004588:	4b41      	ldr	r3, [pc, #260]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004590:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004592:	4b3f      	ldr	r3, [pc, #252]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 8004594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004596:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d007      	beq.n	80045ae <HAL_RCC_OscConfig+0x162>
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	2b18      	cmp	r3, #24
 80045a2:	d137      	bne.n	8004614 <HAL_RCC_OscConfig+0x1c8>
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d132      	bne.n	8004614 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045ae:	4b38      	ldr	r3, [pc, #224]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0304 	and.w	r3, r3, #4
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <HAL_RCC_OscConfig+0x17a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e314      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80045c6:	4b32      	ldr	r3, [pc, #200]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f023 0219 	bic.w	r2, r3, #25
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	492f      	ldr	r1, [pc, #188]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7fc fdf4 	bl	80011c4 <HAL_GetTick>
 80045dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e0:	f7fc fdf0 	bl	80011c4 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e2fe      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045f2:	4b27      	ldr	r3, [pc, #156]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fe:	4b24      	ldr	r3, [pc, #144]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	061b      	lsls	r3, r3, #24
 800460c:	4920      	ldr	r1, [pc, #128]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 800460e:	4313      	orrs	r3, r2
 8004610:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004612:	e045      	b.n	80046a0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d026      	beq.n	800466a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800461c:	4b1c      	ldr	r3, [pc, #112]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f023 0219 	bic.w	r2, r3, #25
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4919      	ldr	r1, [pc, #100]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 800462a:	4313      	orrs	r3, r2
 800462c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462e:	f7fc fdc9 	bl	80011c4 <HAL_GetTick>
 8004632:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004636:	f7fc fdc5 	bl	80011c4 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e2d3      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004648:	4b11      	ldr	r3, [pc, #68]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0f0      	beq.n	8004636 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004654:	4b0e      	ldr	r3, [pc, #56]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	061b      	lsls	r3, r3, #24
 8004662:	490b      	ldr	r1, [pc, #44]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 8004664:	4313      	orrs	r3, r2
 8004666:	604b      	str	r3, [r1, #4]
 8004668:	e01a      	b.n	80046a0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800466a:	4b09      	ldr	r3, [pc, #36]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a08      	ldr	r2, [pc, #32]	@ (8004690 <HAL_RCC_OscConfig+0x244>)
 8004670:	f023 0301 	bic.w	r3, r3, #1
 8004674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004676:	f7fc fda5 	bl	80011c4 <HAL_GetTick>
 800467a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800467c:	e00a      	b.n	8004694 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800467e:	f7fc fda1 	bl	80011c4 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d903      	bls.n	8004694 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e2af      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
 8004690:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004694:	4b96      	ldr	r3, [pc, #600]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1ee      	bne.n	800467e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0310 	and.w	r3, r3, #16
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d06a      	beq.n	8004782 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ac:	4b90      	ldr	r3, [pc, #576]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046b4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046b6:	4b8e      	ldr	r3, [pc, #568]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 80046b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ba:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d007      	beq.n	80046d2 <HAL_RCC_OscConfig+0x286>
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b18      	cmp	r3, #24
 80046c6:	d11b      	bne.n	8004700 <HAL_RCC_OscConfig+0x2b4>
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d116      	bne.n	8004700 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046d2:	4b87      	ldr	r3, [pc, #540]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <HAL_RCC_OscConfig+0x29e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	2b80      	cmp	r3, #128	@ 0x80
 80046e4:	d001      	beq.n	80046ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e282      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046ea:	4b81      	ldr	r3, [pc, #516]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	061b      	lsls	r3, r3, #24
 80046f8:	497d      	ldr	r1, [pc, #500]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046fe:	e040      	b.n	8004782 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d023      	beq.n	8004750 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004708:	4b79      	ldr	r3, [pc, #484]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a78      	ldr	r2, [pc, #480]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 800470e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004714:	f7fc fd56 	bl	80011c4 <HAL_GetTick>
 8004718:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800471c:	f7fc fd52 	bl	80011c4 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e260      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800472e:	4b70      	ldr	r3, [pc, #448]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0f0      	beq.n	800471c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800473a:	4b6d      	ldr	r3, [pc, #436]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	061b      	lsls	r3, r3, #24
 8004748:	4969      	ldr	r1, [pc, #420]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 800474a:	4313      	orrs	r3, r2
 800474c:	60cb      	str	r3, [r1, #12]
 800474e:	e018      	b.n	8004782 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004750:	4b67      	ldr	r3, [pc, #412]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a66      	ldr	r2, [pc, #408]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 8004756:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800475a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475c:	f7fc fd32 	bl	80011c4 <HAL_GetTick>
 8004760:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004764:	f7fc fd2e 	bl	80011c4 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e23c      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004776:	4b5e      	ldr	r3, [pc, #376]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d036      	beq.n	80047fc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d019      	beq.n	80047ca <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004796:	4b56      	ldr	r3, [pc, #344]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 8004798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800479a:	4a55      	ldr	r2, [pc, #340]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 800479c:	f043 0301 	orr.w	r3, r3, #1
 80047a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a2:	f7fc fd0f 	bl	80011c4 <HAL_GetTick>
 80047a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047aa:	f7fc fd0b 	bl	80011c4 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e219      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047bc:	4b4c      	ldr	r3, [pc, #304]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 80047be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCC_OscConfig+0x35e>
 80047c8:	e018      	b.n	80047fc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ca:	4b49      	ldr	r3, [pc, #292]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 80047cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ce:	4a48      	ldr	r2, [pc, #288]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d6:	f7fc fcf5 	bl	80011c4 <HAL_GetTick>
 80047da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047de:	f7fc fcf1 	bl	80011c4 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e1ff      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047f0:	4b3f      	ldr	r3, [pc, #252]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 80047f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f0      	bne.n	80047de <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	d036      	beq.n	8004876 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d019      	beq.n	8004844 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004810:	4b37      	ldr	r3, [pc, #220]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a36      	ldr	r2, [pc, #216]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 8004816:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800481a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800481c:	f7fc fcd2 	bl	80011c4 <HAL_GetTick>
 8004820:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004824:	f7fc fcce 	bl	80011c4 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e1dc      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004836:	4b2e      	ldr	r3, [pc, #184]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0f0      	beq.n	8004824 <HAL_RCC_OscConfig+0x3d8>
 8004842:	e018      	b.n	8004876 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004844:	4b2a      	ldr	r3, [pc, #168]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a29      	ldr	r2, [pc, #164]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 800484a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800484e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004850:	f7fc fcb8 	bl	80011c4 <HAL_GetTick>
 8004854:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004858:	f7fc fcb4 	bl	80011c4 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e1c2      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800486a:	4b21      	ldr	r3, [pc, #132]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f0      	bne.n	8004858 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 8086 	beq.w	8004990 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004884:	4b1b      	ldr	r3, [pc, #108]	@ (80048f4 <HAL_RCC_OscConfig+0x4a8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1a      	ldr	r2, [pc, #104]	@ (80048f4 <HAL_RCC_OscConfig+0x4a8>)
 800488a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800488e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004890:	f7fc fc98 	bl	80011c4 <HAL_GetTick>
 8004894:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004898:	f7fc fc94 	bl	80011c4 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b64      	cmp	r3, #100	@ 0x64
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e1a2      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048aa:	4b12      	ldr	r3, [pc, #72]	@ (80048f4 <HAL_RCC_OscConfig+0x4a8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d106      	bne.n	80048cc <HAL_RCC_OscConfig+0x480>
 80048be:	4b0c      	ldr	r3, [pc, #48]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c2:	4a0b      	ldr	r2, [pc, #44]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ca:	e032      	b.n	8004932 <HAL_RCC_OscConfig+0x4e6>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d111      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4ac>
 80048d4:	4b06      	ldr	r3, [pc, #24]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 80048d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d8:	4a05      	ldr	r2, [pc, #20]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 80048da:	f023 0301 	bic.w	r3, r3, #1
 80048de:	6713      	str	r3, [r2, #112]	@ 0x70
 80048e0:	4b03      	ldr	r3, [pc, #12]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 80048e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e4:	4a02      	ldr	r2, [pc, #8]	@ (80048f0 <HAL_RCC_OscConfig+0x4a4>)
 80048e6:	f023 0304 	bic.w	r3, r3, #4
 80048ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ec:	e021      	b.n	8004932 <HAL_RCC_OscConfig+0x4e6>
 80048ee:	bf00      	nop
 80048f0:	58024400 	.word	0x58024400
 80048f4:	58024800 	.word	0x58024800
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2b05      	cmp	r3, #5
 80048fe:	d10c      	bne.n	800491a <HAL_RCC_OscConfig+0x4ce>
 8004900:	4b83      	ldr	r3, [pc, #524]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004904:	4a82      	ldr	r2, [pc, #520]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004906:	f043 0304 	orr.w	r3, r3, #4
 800490a:	6713      	str	r3, [r2, #112]	@ 0x70
 800490c:	4b80      	ldr	r3, [pc, #512]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 800490e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004910:	4a7f      	ldr	r2, [pc, #508]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	6713      	str	r3, [r2, #112]	@ 0x70
 8004918:	e00b      	b.n	8004932 <HAL_RCC_OscConfig+0x4e6>
 800491a:	4b7d      	ldr	r3, [pc, #500]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 800491c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491e:	4a7c      	ldr	r2, [pc, #496]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004920:	f023 0301 	bic.w	r3, r3, #1
 8004924:	6713      	str	r3, [r2, #112]	@ 0x70
 8004926:	4b7a      	ldr	r3, [pc, #488]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492a:	4a79      	ldr	r2, [pc, #484]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 800492c:	f023 0304 	bic.w	r3, r3, #4
 8004930:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d015      	beq.n	8004966 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493a:	f7fc fc43 	bl	80011c4 <HAL_GetTick>
 800493e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004940:	e00a      	b.n	8004958 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004942:	f7fc fc3f 	bl	80011c4 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004950:	4293      	cmp	r3, r2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e14b      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004958:	4b6d      	ldr	r3, [pc, #436]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 800495a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0ee      	beq.n	8004942 <HAL_RCC_OscConfig+0x4f6>
 8004964:	e014      	b.n	8004990 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004966:	f7fc fc2d 	bl	80011c4 <HAL_GetTick>
 800496a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800496c:	e00a      	b.n	8004984 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496e:	f7fc fc29 	bl	80011c4 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800497c:	4293      	cmp	r3, r2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e135      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004984:	4b62      	ldr	r3, [pc, #392]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1ee      	bne.n	800496e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 812a 	beq.w	8004bee <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800499a:	4b5d      	ldr	r3, [pc, #372]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049a2:	2b18      	cmp	r3, #24
 80049a4:	f000 80ba 	beq.w	8004b1c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	f040 8095 	bne.w	8004adc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b2:	4b57      	ldr	r3, [pc, #348]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a56      	ldr	r2, [pc, #344]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 80049b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049be:	f7fc fc01 	bl	80011c4 <HAL_GetTick>
 80049c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049c4:	e008      	b.n	80049d8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c6:	f7fc fbfd 	bl	80011c4 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e10b      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049d8:	4b4d      	ldr	r3, [pc, #308]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1f0      	bne.n	80049c6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049e4:	4b4a      	ldr	r3, [pc, #296]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 80049e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004b14 <HAL_RCC_OscConfig+0x6c8>)
 80049ea:	4013      	ands	r3, r2
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80049f4:	0112      	lsls	r2, r2, #4
 80049f6:	430a      	orrs	r2, r1
 80049f8:	4945      	ldr	r1, [pc, #276]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	628b      	str	r3, [r1, #40]	@ 0x28
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a02:	3b01      	subs	r3, #1
 8004a04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	025b      	lsls	r3, r3, #9
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	041b      	lsls	r3, r3, #16
 8004a1c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a26:	3b01      	subs	r3, #1
 8004a28:	061b      	lsls	r3, r3, #24
 8004a2a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a2e:	4938      	ldr	r1, [pc, #224]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004a34:	4b36      	ldr	r3, [pc, #216]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	4a35      	ldr	r2, [pc, #212]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004a3a:	f023 0301 	bic.w	r3, r3, #1
 8004a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a40:	4b33      	ldr	r3, [pc, #204]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004a42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a44:	4b34      	ldr	r3, [pc, #208]	@ (8004b18 <HAL_RCC_OscConfig+0x6cc>)
 8004a46:	4013      	ands	r3, r2
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004a4c:	00d2      	lsls	r2, r2, #3
 8004a4e:	4930      	ldr	r1, [pc, #192]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a54:	4b2e      	ldr	r3, [pc, #184]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a58:	f023 020c 	bic.w	r2, r3, #12
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a60:	492b      	ldr	r1, [pc, #172]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a66:	4b2a      	ldr	r3, [pc, #168]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6a:	f023 0202 	bic.w	r2, r3, #2
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a72:	4927      	ldr	r1, [pc, #156]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a78:	4b25      	ldr	r3, [pc, #148]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7c:	4a24      	ldr	r2, [pc, #144]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a84:	4b22      	ldr	r3, [pc, #136]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a88:	4a21      	ldr	r2, [pc, #132]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004a8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a90:	4b1f      	ldr	r3, [pc, #124]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a94:	4a1e      	ldr	r2, [pc, #120]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004a96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aa8:	4b19      	ldr	r3, [pc, #100]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a18      	ldr	r2, [pc, #96]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004aae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fc fb86 	bl	80011c4 <HAL_GetTick>
 8004ab8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fc fb82 	bl	80011c4 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e090      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ace:	4b10      	ldr	r3, [pc, #64]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0x670>
 8004ada:	e088      	b.n	8004bee <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004adc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fc fb6c 	bl	80011c4 <HAL_GetTick>
 8004aec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af0:	f7fc fb68 	bl	80011c4 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e076      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b02:	4b03      	ldr	r3, [pc, #12]	@ (8004b10 <HAL_RCC_OscConfig+0x6c4>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f0      	bne.n	8004af0 <HAL_RCC_OscConfig+0x6a4>
 8004b0e:	e06e      	b.n	8004bee <HAL_RCC_OscConfig+0x7a2>
 8004b10:	58024400 	.word	0x58024400
 8004b14:	fffffc0c 	.word	0xfffffc0c
 8004b18:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b1c:	4b36      	ldr	r3, [pc, #216]	@ (8004bf8 <HAL_RCC_OscConfig+0x7ac>)
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b22:	4b35      	ldr	r3, [pc, #212]	@ (8004bf8 <HAL_RCC_OscConfig+0x7ac>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b26:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d031      	beq.n	8004b94 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f003 0203 	and.w	r2, r3, #3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d12a      	bne.n	8004b94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d122      	bne.n	8004b94 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b58:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d11a      	bne.n	8004b94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	0a5b      	lsrs	r3, r3, #9
 8004b62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b6a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d111      	bne.n	8004b94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	0c1b      	lsrs	r3, r3, #16
 8004b74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d108      	bne.n	8004b94 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	0e1b      	lsrs	r3, r3, #24
 8004b86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b8e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d001      	beq.n	8004b98 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e02b      	b.n	8004bf0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004b98:	4b17      	ldr	r3, [pc, #92]	@ (8004bf8 <HAL_RCC_OscConfig+0x7ac>)
 8004b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b9c:	08db      	lsrs	r3, r3, #3
 8004b9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ba2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d01f      	beq.n	8004bee <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004bae:	4b12      	ldr	r3, [pc, #72]	@ (8004bf8 <HAL_RCC_OscConfig+0x7ac>)
 8004bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb2:	4a11      	ldr	r2, [pc, #68]	@ (8004bf8 <HAL_RCC_OscConfig+0x7ac>)
 8004bb4:	f023 0301 	bic.w	r3, r3, #1
 8004bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bba:	f7fc fb03 	bl	80011c4 <HAL_GetTick>
 8004bbe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004bc0:	bf00      	nop
 8004bc2:	f7fc faff 	bl	80011c4 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d0f9      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004bce:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf8 <HAL_RCC_OscConfig+0x7ac>)
 8004bd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bfc <HAL_RCC_OscConfig+0x7b0>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004bda:	00d2      	lsls	r2, r2, #3
 8004bdc:	4906      	ldr	r1, [pc, #24]	@ (8004bf8 <HAL_RCC_OscConfig+0x7ac>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004be2:	4b05      	ldr	r3, [pc, #20]	@ (8004bf8 <HAL_RCC_OscConfig+0x7ac>)
 8004be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be6:	4a04      	ldr	r2, [pc, #16]	@ (8004bf8 <HAL_RCC_OscConfig+0x7ac>)
 8004be8:	f043 0301 	orr.w	r3, r3, #1
 8004bec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3730      	adds	r7, #48	@ 0x30
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	58024400 	.word	0x58024400
 8004bfc:	ffff0007 	.word	0xffff0007

08004c00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e19c      	b.n	8004f4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c14:	4b8a      	ldr	r3, [pc, #552]	@ (8004e40 <HAL_RCC_ClockConfig+0x240>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 030f 	and.w	r3, r3, #15
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d910      	bls.n	8004c44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c22:	4b87      	ldr	r3, [pc, #540]	@ (8004e40 <HAL_RCC_ClockConfig+0x240>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 020f 	bic.w	r2, r3, #15
 8004c2a:	4985      	ldr	r1, [pc, #532]	@ (8004e40 <HAL_RCC_ClockConfig+0x240>)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c32:	4b83      	ldr	r3, [pc, #524]	@ (8004e40 <HAL_RCC_ClockConfig+0x240>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e184      	b.n	8004f4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d010      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	4b7b      	ldr	r3, [pc, #492]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d908      	bls.n	8004c72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c60:	4b78      	ldr	r3, [pc, #480]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	4975      	ldr	r1, [pc, #468]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d010      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695a      	ldr	r2, [r3, #20]
 8004c82:	4b70      	ldr	r3, [pc, #448]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d908      	bls.n	8004ca0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	496a      	ldr	r1, [pc, #424]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d010      	beq.n	8004cce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699a      	ldr	r2, [r3, #24]
 8004cb0:	4b64      	ldr	r3, [pc, #400]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d908      	bls.n	8004cce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004cbc:	4b61      	ldr	r3, [pc, #388]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	495e      	ldr	r1, [pc, #376]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d010      	beq.n	8004cfc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69da      	ldr	r2, [r3, #28]
 8004cde:	4b59      	ldr	r3, [pc, #356]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d908      	bls.n	8004cfc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004cea:	4b56      	ldr	r3, [pc, #344]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	4953      	ldr	r1, [pc, #332]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d010      	beq.n	8004d2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	4b4d      	ldr	r3, [pc, #308]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d908      	bls.n	8004d2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d18:	4b4a      	ldr	r3, [pc, #296]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	f023 020f 	bic.w	r2, r3, #15
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	4947      	ldr	r1, [pc, #284]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d055      	beq.n	8004de2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004d36:	4b43      	ldr	r3, [pc, #268]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	4940      	ldr	r1, [pc, #256]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d107      	bne.n	8004d60 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d50:	4b3c      	ldr	r3, [pc, #240]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d121      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e0f6      	b.n	8004f4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d107      	bne.n	8004d78 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d68:	4b36      	ldr	r3, [pc, #216]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d115      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e0ea      	b.n	8004f4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d107      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d80:	4b30      	ldr	r3, [pc, #192]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d109      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0de      	b.n	8004f4e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d90:	4b2c      	ldr	r3, [pc, #176]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e0d6      	b.n	8004f4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004da0:	4b28      	ldr	r3, [pc, #160]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	f023 0207 	bic.w	r2, r3, #7
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	4925      	ldr	r1, [pc, #148]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db2:	f7fc fa07 	bl	80011c4 <HAL_GetTick>
 8004db6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db8:	e00a      	b.n	8004dd0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dba:	f7fc fa03 	bl	80011c4 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e0be      	b.n	8004f4e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d1eb      	bne.n	8004dba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d010      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	4b14      	ldr	r3, [pc, #80]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d208      	bcs.n	8004e10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dfe:	4b11      	ldr	r3, [pc, #68]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	f023 020f 	bic.w	r2, r3, #15
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	490e      	ldr	r1, [pc, #56]	@ (8004e44 <HAL_RCC_ClockConfig+0x244>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e10:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <HAL_RCC_ClockConfig+0x240>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 030f 	and.w	r3, r3, #15
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d214      	bcs.n	8004e48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1e:	4b08      	ldr	r3, [pc, #32]	@ (8004e40 <HAL_RCC_ClockConfig+0x240>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f023 020f 	bic.w	r2, r3, #15
 8004e26:	4906      	ldr	r1, [pc, #24]	@ (8004e40 <HAL_RCC_ClockConfig+0x240>)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2e:	4b04      	ldr	r3, [pc, #16]	@ (8004e40 <HAL_RCC_ClockConfig+0x240>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d005      	beq.n	8004e48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e086      	b.n	8004f4e <HAL_RCC_ClockConfig+0x34e>
 8004e40:	52002000 	.word	0x52002000
 8004e44:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d010      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	4b3f      	ldr	r3, [pc, #252]	@ (8004f58 <HAL_RCC_ClockConfig+0x358>)
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d208      	bcs.n	8004e76 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e64:	4b3c      	ldr	r3, [pc, #240]	@ (8004f58 <HAL_RCC_ClockConfig+0x358>)
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	4939      	ldr	r1, [pc, #228]	@ (8004f58 <HAL_RCC_ClockConfig+0x358>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d010      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695a      	ldr	r2, [r3, #20]
 8004e86:	4b34      	ldr	r3, [pc, #208]	@ (8004f58 <HAL_RCC_ClockConfig+0x358>)
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d208      	bcs.n	8004ea4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e92:	4b31      	ldr	r3, [pc, #196]	@ (8004f58 <HAL_RCC_ClockConfig+0x358>)
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	492e      	ldr	r1, [pc, #184]	@ (8004f58 <HAL_RCC_ClockConfig+0x358>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0310 	and.w	r3, r3, #16
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d010      	beq.n	8004ed2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699a      	ldr	r2, [r3, #24]
 8004eb4:	4b28      	ldr	r3, [pc, #160]	@ (8004f58 <HAL_RCC_ClockConfig+0x358>)
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d208      	bcs.n	8004ed2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ec0:	4b25      	ldr	r3, [pc, #148]	@ (8004f58 <HAL_RCC_ClockConfig+0x358>)
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	4922      	ldr	r1, [pc, #136]	@ (8004f58 <HAL_RCC_ClockConfig+0x358>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0320 	and.w	r3, r3, #32
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d010      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69da      	ldr	r2, [r3, #28]
 8004ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f58 <HAL_RCC_ClockConfig+0x358>)
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d208      	bcs.n	8004f00 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004eee:	4b1a      	ldr	r3, [pc, #104]	@ (8004f58 <HAL_RCC_ClockConfig+0x358>)
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	4917      	ldr	r1, [pc, #92]	@ (8004f58 <HAL_RCC_ClockConfig+0x358>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f00:	f000 f834 	bl	8004f6c <HAL_RCC_GetSysClockFreq>
 8004f04:	4602      	mov	r2, r0
 8004f06:	4b14      	ldr	r3, [pc, #80]	@ (8004f58 <HAL_RCC_ClockConfig+0x358>)
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	0a1b      	lsrs	r3, r3, #8
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	4912      	ldr	r1, [pc, #72]	@ (8004f5c <HAL_RCC_ClockConfig+0x35c>)
 8004f12:	5ccb      	ldrb	r3, [r1, r3]
 8004f14:	f003 031f 	and.w	r3, r3, #31
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f58 <HAL_RCC_ClockConfig+0x358>)
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	4a0d      	ldr	r2, [pc, #52]	@ (8004f5c <HAL_RCC_ClockConfig+0x35c>)
 8004f28:	5cd3      	ldrb	r3, [r2, r3]
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	fa22 f303 	lsr.w	r3, r2, r3
 8004f34:	4a0a      	ldr	r2, [pc, #40]	@ (8004f60 <HAL_RCC_ClockConfig+0x360>)
 8004f36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f38:	4a0a      	ldr	r2, [pc, #40]	@ (8004f64 <HAL_RCC_ClockConfig+0x364>)
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f68 <HAL_RCC_ClockConfig+0x368>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fb fe00 	bl	8000b48 <HAL_InitTick>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	58024400 	.word	0x58024400
 8004f5c:	0800d2ac 	.word	0x0800d2ac
 8004f60:	24000004 	.word	0x24000004
 8004f64:	24000000 	.word	0x24000000
 8004f68:	24000008 	.word	0x24000008

08004f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b089      	sub	sp, #36	@ 0x24
 8004f70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f72:	4bb3      	ldr	r3, [pc, #716]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f7a:	2b18      	cmp	r3, #24
 8004f7c:	f200 8155 	bhi.w	800522a <HAL_RCC_GetSysClockFreq+0x2be>
 8004f80:	a201      	add	r2, pc, #4	@ (adr r2, 8004f88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f86:	bf00      	nop
 8004f88:	08004fed 	.word	0x08004fed
 8004f8c:	0800522b 	.word	0x0800522b
 8004f90:	0800522b 	.word	0x0800522b
 8004f94:	0800522b 	.word	0x0800522b
 8004f98:	0800522b 	.word	0x0800522b
 8004f9c:	0800522b 	.word	0x0800522b
 8004fa0:	0800522b 	.word	0x0800522b
 8004fa4:	0800522b 	.word	0x0800522b
 8004fa8:	08005013 	.word	0x08005013
 8004fac:	0800522b 	.word	0x0800522b
 8004fb0:	0800522b 	.word	0x0800522b
 8004fb4:	0800522b 	.word	0x0800522b
 8004fb8:	0800522b 	.word	0x0800522b
 8004fbc:	0800522b 	.word	0x0800522b
 8004fc0:	0800522b 	.word	0x0800522b
 8004fc4:	0800522b 	.word	0x0800522b
 8004fc8:	08005019 	.word	0x08005019
 8004fcc:	0800522b 	.word	0x0800522b
 8004fd0:	0800522b 	.word	0x0800522b
 8004fd4:	0800522b 	.word	0x0800522b
 8004fd8:	0800522b 	.word	0x0800522b
 8004fdc:	0800522b 	.word	0x0800522b
 8004fe0:	0800522b 	.word	0x0800522b
 8004fe4:	0800522b 	.word	0x0800522b
 8004fe8:	0800501f 	.word	0x0800501f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fec:	4b94      	ldr	r3, [pc, #592]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0320 	and.w	r3, r3, #32
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d009      	beq.n	800500c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ff8:	4b91      	ldr	r3, [pc, #580]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	08db      	lsrs	r3, r3, #3
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	4a90      	ldr	r2, [pc, #576]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005004:	fa22 f303 	lsr.w	r3, r2, r3
 8005008:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800500a:	e111      	b.n	8005230 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800500c:	4b8d      	ldr	r3, [pc, #564]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800500e:	61bb      	str	r3, [r7, #24]
      break;
 8005010:	e10e      	b.n	8005230 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005012:	4b8d      	ldr	r3, [pc, #564]	@ (8005248 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005014:	61bb      	str	r3, [r7, #24]
      break;
 8005016:	e10b      	b.n	8005230 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005018:	4b8c      	ldr	r3, [pc, #560]	@ (800524c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800501a:	61bb      	str	r3, [r7, #24]
      break;
 800501c:	e108      	b.n	8005230 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800501e:	4b88      	ldr	r3, [pc, #544]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005028:	4b85      	ldr	r3, [pc, #532]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800502a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502c:	091b      	lsrs	r3, r3, #4
 800502e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005032:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005034:	4b82      	ldr	r3, [pc, #520]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800503e:	4b80      	ldr	r3, [pc, #512]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005042:	08db      	lsrs	r3, r3, #3
 8005044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	fb02 f303 	mul.w	r3, r2, r3
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005056:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80e1 	beq.w	8005224 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b02      	cmp	r3, #2
 8005066:	f000 8083 	beq.w	8005170 <HAL_RCC_GetSysClockFreq+0x204>
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b02      	cmp	r3, #2
 800506e:	f200 80a1 	bhi.w	80051b4 <HAL_RCC_GetSysClockFreq+0x248>
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <HAL_RCC_GetSysClockFreq+0x114>
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d056      	beq.n	800512c <HAL_RCC_GetSysClockFreq+0x1c0>
 800507e:	e099      	b.n	80051b4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005080:	4b6f      	ldr	r3, [pc, #444]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b00      	cmp	r3, #0
 800508a:	d02d      	beq.n	80050e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800508c:	4b6c      	ldr	r3, [pc, #432]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	08db      	lsrs	r3, r3, #3
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	4a6b      	ldr	r2, [pc, #428]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005098:	fa22 f303 	lsr.w	r3, r2, r3
 800509c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	ee07 3a90 	vmov	s15, r3
 80050a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050b6:	4b62      	ldr	r3, [pc, #392]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005250 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80050e6:	e087      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005254 <HAL_RCC_GetSysClockFreq+0x2e8>
 80050f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050fa:	4b51      	ldr	r3, [pc, #324]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800510a:	ed97 6a02 	vldr	s12, [r7, #8]
 800510e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005250 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800511a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800511e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005126:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800512a:	e065      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	ee07 3a90 	vmov	s15, r3
 8005132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005136:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005258 <HAL_RCC_GetSysClockFreq+0x2ec>
 800513a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800513e:	4b40      	ldr	r3, [pc, #256]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800514e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005152:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005250 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800515a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800515e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800516a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800516e:	e043      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	ee07 3a90 	vmov	s15, r3
 8005176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800525c <HAL_RCC_GetSysClockFreq+0x2f0>
 800517e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005182:	4b2f      	ldr	r3, [pc, #188]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005192:	ed97 6a02 	vldr	s12, [r7, #8]
 8005196:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005250 <HAL_RCC_GetSysClockFreq+0x2e4>
 800519a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800519e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051b2:	e021      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	ee07 3a90 	vmov	s15, r3
 80051ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005258 <HAL_RCC_GetSysClockFreq+0x2ec>
 80051c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80051da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005250 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80051f8:	4b11      	ldr	r3, [pc, #68]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fc:	0a5b      	lsrs	r3, r3, #9
 80051fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005202:	3301      	adds	r3, #1
 8005204:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	ee07 3a90 	vmov	s15, r3
 800520c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005210:	edd7 6a07 	vldr	s13, [r7, #28]
 8005214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800521c:	ee17 3a90 	vmov	r3, s15
 8005220:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005222:	e005      	b.n	8005230 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	61bb      	str	r3, [r7, #24]
      break;
 8005228:	e002      	b.n	8005230 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800522a:	4b07      	ldr	r3, [pc, #28]	@ (8005248 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800522c:	61bb      	str	r3, [r7, #24]
      break;
 800522e:	bf00      	nop
  }

  return sysclockfreq;
 8005230:	69bb      	ldr	r3, [r7, #24]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3724      	adds	r7, #36	@ 0x24
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	58024400 	.word	0x58024400
 8005244:	03d09000 	.word	0x03d09000
 8005248:	003d0900 	.word	0x003d0900
 800524c:	017d7840 	.word	0x017d7840
 8005250:	46000000 	.word	0x46000000
 8005254:	4c742400 	.word	0x4c742400
 8005258:	4a742400 	.word	0x4a742400
 800525c:	4bbebc20 	.word	0x4bbebc20

08005260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005266:	f7ff fe81 	bl	8004f6c <HAL_RCC_GetSysClockFreq>
 800526a:	4602      	mov	r2, r0
 800526c:	4b10      	ldr	r3, [pc, #64]	@ (80052b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	0a1b      	lsrs	r3, r3, #8
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	490f      	ldr	r1, [pc, #60]	@ (80052b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005278:	5ccb      	ldrb	r3, [r1, r3]
 800527a:	f003 031f 	and.w	r3, r3, #31
 800527e:	fa22 f303 	lsr.w	r3, r2, r3
 8005282:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005284:	4b0a      	ldr	r3, [pc, #40]	@ (80052b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	f003 030f 	and.w	r3, r3, #15
 800528c:	4a09      	ldr	r2, [pc, #36]	@ (80052b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800528e:	5cd3      	ldrb	r3, [r2, r3]
 8005290:	f003 031f 	and.w	r3, r3, #31
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	fa22 f303 	lsr.w	r3, r2, r3
 800529a:	4a07      	ldr	r2, [pc, #28]	@ (80052b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800529c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800529e:	4a07      	ldr	r2, [pc, #28]	@ (80052bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80052a4:	4b04      	ldr	r3, [pc, #16]	@ (80052b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80052a6:	681b      	ldr	r3, [r3, #0]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	58024400 	.word	0x58024400
 80052b4:	0800d2ac 	.word	0x0800d2ac
 80052b8:	24000004 	.word	0x24000004
 80052bc:	24000000 	.word	0x24000000

080052c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80052c4:	f7ff ffcc 	bl	8005260 <HAL_RCC_GetHCLKFreq>
 80052c8:	4602      	mov	r2, r0
 80052ca:	4b06      	ldr	r3, [pc, #24]	@ (80052e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	091b      	lsrs	r3, r3, #4
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	4904      	ldr	r1, [pc, #16]	@ (80052e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052d6:	5ccb      	ldrb	r3, [r1, r3]
 80052d8:	f003 031f 	and.w	r3, r3, #31
 80052dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	58024400 	.word	0x58024400
 80052e8:	0800d2ac 	.word	0x0800d2ac

080052ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80052f0:	f7ff ffb6 	bl	8005260 <HAL_RCC_GetHCLKFreq>
 80052f4:	4602      	mov	r2, r0
 80052f6:	4b06      	ldr	r3, [pc, #24]	@ (8005310 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	0a1b      	lsrs	r3, r3, #8
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	4904      	ldr	r1, [pc, #16]	@ (8005314 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005302:	5ccb      	ldrb	r3, [r1, r3]
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800530c:	4618      	mov	r0, r3
 800530e:	bd80      	pop	{r7, pc}
 8005310:	58024400 	.word	0x58024400
 8005314:	0800d2ac 	.word	0x0800d2ac

08005318 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	223f      	movs	r2, #63	@ 0x3f
 8005326:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005328:	4b1a      	ldr	r3, [pc, #104]	@ (8005394 <HAL_RCC_GetClockConfig+0x7c>)
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f003 0207 	and.w	r2, r3, #7
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005334:	4b17      	ldr	r3, [pc, #92]	@ (8005394 <HAL_RCC_GetClockConfig+0x7c>)
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005340:	4b14      	ldr	r3, [pc, #80]	@ (8005394 <HAL_RCC_GetClockConfig+0x7c>)
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	f003 020f 	and.w	r2, r3, #15
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800534c:	4b11      	ldr	r3, [pc, #68]	@ (8005394 <HAL_RCC_GetClockConfig+0x7c>)
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005358:	4b0e      	ldr	r3, [pc, #56]	@ (8005394 <HAL_RCC_GetClockConfig+0x7c>)
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005364:	4b0b      	ldr	r3, [pc, #44]	@ (8005394 <HAL_RCC_GetClockConfig+0x7c>)
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005370:	4b08      	ldr	r3, [pc, #32]	@ (8005394 <HAL_RCC_GetClockConfig+0x7c>)
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800537c:	4b06      	ldr	r3, [pc, #24]	@ (8005398 <HAL_RCC_GetClockConfig+0x80>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 020f 	and.w	r2, r3, #15
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	601a      	str	r2, [r3, #0]
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	58024400 	.word	0x58024400
 8005398:	52002000 	.word	0x52002000

0800539c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800539c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053a0:	b0c6      	sub	sp, #280	@ 0x118
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053a8:	2300      	movs	r3, #0
 80053aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053ae:	2300      	movs	r3, #0
 80053b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053bc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80053c0:	2500      	movs	r5, #0
 80053c2:	ea54 0305 	orrs.w	r3, r4, r5
 80053c6:	d049      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80053c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053d2:	d02f      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80053d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80053d8:	d828      	bhi.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80053da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053de:	d01a      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80053e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053e4:	d822      	bhi.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80053ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053ee:	d007      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80053f0:	e01c      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053f2:	4bab      	ldr	r3, [pc, #684]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f6:	4aaa      	ldr	r2, [pc, #680]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80053fe:	e01a      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005404:	3308      	adds	r3, #8
 8005406:	2102      	movs	r1, #2
 8005408:	4618      	mov	r0, r3
 800540a:	f001 fc25 	bl	8006c58 <RCCEx_PLL2_Config>
 800540e:	4603      	mov	r3, r0
 8005410:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005414:	e00f      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800541a:	3328      	adds	r3, #40	@ 0x28
 800541c:	2102      	movs	r1, #2
 800541e:	4618      	mov	r0, r3
 8005420:	f001 fccc 	bl	8006dbc <RCCEx_PLL3_Config>
 8005424:	4603      	mov	r3, r0
 8005426:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800542a:	e004      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005432:	e000      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005436:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800543e:	4b98      	ldr	r3, [pc, #608]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005442:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800544a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800544c:	4a94      	ldr	r2, [pc, #592]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800544e:	430b      	orrs	r3, r1
 8005450:	6513      	str	r3, [r2, #80]	@ 0x50
 8005452:	e003      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005454:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005458:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800545c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005468:	f04f 0900 	mov.w	r9, #0
 800546c:	ea58 0309 	orrs.w	r3, r8, r9
 8005470:	d047      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005478:	2b04      	cmp	r3, #4
 800547a:	d82a      	bhi.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800547c:	a201      	add	r2, pc, #4	@ (adr r2, 8005484 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800547e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005482:	bf00      	nop
 8005484:	08005499 	.word	0x08005499
 8005488:	080054a7 	.word	0x080054a7
 800548c:	080054bd 	.word	0x080054bd
 8005490:	080054db 	.word	0x080054db
 8005494:	080054db 	.word	0x080054db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005498:	4b81      	ldr	r3, [pc, #516]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800549a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549c:	4a80      	ldr	r2, [pc, #512]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800549e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054a4:	e01a      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054aa:	3308      	adds	r3, #8
 80054ac:	2100      	movs	r1, #0
 80054ae:	4618      	mov	r0, r3
 80054b0:	f001 fbd2 	bl	8006c58 <RCCEx_PLL2_Config>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054ba:	e00f      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c0:	3328      	adds	r3, #40	@ 0x28
 80054c2:	2100      	movs	r1, #0
 80054c4:	4618      	mov	r0, r3
 80054c6:	f001 fc79 	bl	8006dbc <RCCEx_PLL3_Config>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054d0:	e004      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054d8:	e000      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80054da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10a      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054e4:	4b6e      	ldr	r3, [pc, #440]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054e8:	f023 0107 	bic.w	r1, r3, #7
 80054ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f2:	4a6b      	ldr	r2, [pc, #428]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80054f8:	e003      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800550e:	f04f 0b00 	mov.w	fp, #0
 8005512:	ea5a 030b 	orrs.w	r3, sl, fp
 8005516:	d05b      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800551c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005520:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005524:	d03b      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005526:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800552a:	d834      	bhi.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800552c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005530:	d037      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005532:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005536:	d82e      	bhi.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005538:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800553c:	d033      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800553e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005542:	d828      	bhi.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005544:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005548:	d01a      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800554a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800554e:	d822      	bhi.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005554:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005558:	d007      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800555a:	e01c      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800555c:	4b50      	ldr	r3, [pc, #320]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005560:	4a4f      	ldr	r2, [pc, #316]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005568:	e01e      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800556a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800556e:	3308      	adds	r3, #8
 8005570:	2100      	movs	r1, #0
 8005572:	4618      	mov	r0, r3
 8005574:	f001 fb70 	bl	8006c58 <RCCEx_PLL2_Config>
 8005578:	4603      	mov	r3, r0
 800557a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800557e:	e013      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005584:	3328      	adds	r3, #40	@ 0x28
 8005586:	2100      	movs	r1, #0
 8005588:	4618      	mov	r0, r3
 800558a:	f001 fc17 	bl	8006dbc <RCCEx_PLL3_Config>
 800558e:	4603      	mov	r3, r0
 8005590:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005594:	e008      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800559c:	e004      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800559e:	bf00      	nop
 80055a0:	e002      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80055a2:	bf00      	nop
 80055a4:	e000      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80055a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10b      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80055b0:	4b3b      	ldr	r3, [pc, #236]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80055b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80055c0:	4a37      	ldr	r2, [pc, #220]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055c2:	430b      	orrs	r3, r1
 80055c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80055c6:	e003      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80055d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80055dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80055e0:	2300      	movs	r3, #0
 80055e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80055e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80055ea:	460b      	mov	r3, r1
 80055ec:	4313      	orrs	r3, r2
 80055ee:	d05d      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80055f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80055f8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80055fc:	d03b      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80055fe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005602:	d834      	bhi.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005604:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005608:	d037      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800560a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800560e:	d82e      	bhi.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005610:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005614:	d033      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005616:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800561a:	d828      	bhi.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800561c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005620:	d01a      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005622:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005626:	d822      	bhi.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800562c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005630:	d007      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005632:	e01c      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005634:	4b1a      	ldr	r3, [pc, #104]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	4a19      	ldr	r2, [pc, #100]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800563a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800563e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005640:	e01e      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005646:	3308      	adds	r3, #8
 8005648:	2100      	movs	r1, #0
 800564a:	4618      	mov	r0, r3
 800564c:	f001 fb04 	bl	8006c58 <RCCEx_PLL2_Config>
 8005650:	4603      	mov	r3, r0
 8005652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005656:	e013      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800565c:	3328      	adds	r3, #40	@ 0x28
 800565e:	2100      	movs	r1, #0
 8005660:	4618      	mov	r0, r3
 8005662:	f001 fbab 	bl	8006dbc <RCCEx_PLL3_Config>
 8005666:	4603      	mov	r3, r0
 8005668:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800566c:	e008      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005674:	e004      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005676:	bf00      	nop
 8005678:	e002      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800567a:	bf00      	nop
 800567c:	e000      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800567e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005680:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10d      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005688:	4b05      	ldr	r3, [pc, #20]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800568a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005694:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005698:	4a01      	ldr	r2, [pc, #4]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800569a:	430b      	orrs	r3, r1
 800569c:	6593      	str	r3, [r2, #88]	@ 0x58
 800569e:	e005      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x310>
 80056a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80056ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80056b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056bc:	2300      	movs	r3, #0
 80056be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80056c2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4313      	orrs	r3, r2
 80056ca:	d03a      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80056cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056d2:	2b30      	cmp	r3, #48	@ 0x30
 80056d4:	d01f      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80056d6:	2b30      	cmp	r3, #48	@ 0x30
 80056d8:	d819      	bhi.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80056da:	2b20      	cmp	r3, #32
 80056dc:	d00c      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d815      	bhi.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d019      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80056e6:	2b10      	cmp	r3, #16
 80056e8:	d111      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ea:	4baa      	ldr	r3, [pc, #680]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80056ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ee:	4aa9      	ldr	r2, [pc, #676]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80056f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80056f6:	e011      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056fc:	3308      	adds	r3, #8
 80056fe:	2102      	movs	r1, #2
 8005700:	4618      	mov	r0, r3
 8005702:	f001 faa9 	bl	8006c58 <RCCEx_PLL2_Config>
 8005706:	4603      	mov	r3, r0
 8005708:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800570c:	e006      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005714:	e002      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005716:	bf00      	nop
 8005718:	e000      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800571a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800571c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10a      	bne.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005724:	4b9b      	ldr	r3, [pc, #620]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005728:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800572c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005732:	4a98      	ldr	r2, [pc, #608]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005734:	430b      	orrs	r3, r1
 8005736:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005738:	e003      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800573e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800574e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005752:	2300      	movs	r3, #0
 8005754:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005758:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800575c:	460b      	mov	r3, r1
 800575e:	4313      	orrs	r3, r2
 8005760:	d051      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005768:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800576c:	d035      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800576e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005772:	d82e      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005774:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005778:	d031      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x442>
 800577a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800577e:	d828      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005784:	d01a      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800578a:	d822      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005794:	d007      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005796:	e01c      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005798:	4b7e      	ldr	r3, [pc, #504]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	4a7d      	ldr	r2, [pc, #500]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800579e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057a4:	e01c      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057aa:	3308      	adds	r3, #8
 80057ac:	2100      	movs	r1, #0
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 fa52 	bl	8006c58 <RCCEx_PLL2_Config>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057ba:	e011      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c0:	3328      	adds	r3, #40	@ 0x28
 80057c2:	2100      	movs	r1, #0
 80057c4:	4618      	mov	r0, r3
 80057c6:	f001 faf9 	bl	8006dbc <RCCEx_PLL3_Config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057d0:	e006      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80057d8:	e002      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80057da:	bf00      	nop
 80057dc:	e000      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80057de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10a      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80057e8:	4b6a      	ldr	r3, [pc, #424]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80057f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f6:	4a67      	ldr	r2, [pc, #412]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057f8:	430b      	orrs	r3, r1
 80057fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80057fc:	e003      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005802:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005812:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005816:	2300      	movs	r3, #0
 8005818:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800581c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005820:	460b      	mov	r3, r1
 8005822:	4313      	orrs	r3, r2
 8005824:	d053      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800582a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800582c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005830:	d033      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005832:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005836:	d82c      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005838:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800583c:	d02f      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800583e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005842:	d826      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005844:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005848:	d02b      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800584a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800584e:	d820      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005850:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005854:	d012      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005856:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800585a:	d81a      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d022      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005864:	d115      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800586a:	3308      	adds	r3, #8
 800586c:	2101      	movs	r1, #1
 800586e:	4618      	mov	r0, r3
 8005870:	f001 f9f2 	bl	8006c58 <RCCEx_PLL2_Config>
 8005874:	4603      	mov	r3, r0
 8005876:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800587a:	e015      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800587c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005880:	3328      	adds	r3, #40	@ 0x28
 8005882:	2101      	movs	r1, #1
 8005884:	4618      	mov	r0, r3
 8005886:	f001 fa99 	bl	8006dbc <RCCEx_PLL3_Config>
 800588a:	4603      	mov	r3, r0
 800588c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005890:	e00a      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005898:	e006      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800589a:	bf00      	nop
 800589c:	e004      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800589e:	bf00      	nop
 80058a0:	e002      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80058a2:	bf00      	nop
 80058a4:	e000      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80058a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10a      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80058b0:	4b38      	ldr	r3, [pc, #224]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80058b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058be:	4a35      	ldr	r2, [pc, #212]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058c0:	430b      	orrs	r3, r1
 80058c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80058c4:	e003      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80058ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80058da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80058de:	2300      	movs	r3, #0
 80058e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80058e4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80058e8:	460b      	mov	r3, r1
 80058ea:	4313      	orrs	r3, r2
 80058ec:	d058      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80058ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80058f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058fa:	d033      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80058fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005900:	d82c      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005906:	d02f      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800590c:	d826      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800590e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005912:	d02b      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005914:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005918:	d820      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800591a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800591e:	d012      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005920:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005924:	d81a      	bhi.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005926:	2b00      	cmp	r3, #0
 8005928:	d022      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800592a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800592e:	d115      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005934:	3308      	adds	r3, #8
 8005936:	2101      	movs	r1, #1
 8005938:	4618      	mov	r0, r3
 800593a:	f001 f98d 	bl	8006c58 <RCCEx_PLL2_Config>
 800593e:	4603      	mov	r3, r0
 8005940:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005944:	e015      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594a:	3328      	adds	r3, #40	@ 0x28
 800594c:	2101      	movs	r1, #1
 800594e:	4618      	mov	r0, r3
 8005950:	f001 fa34 	bl	8006dbc <RCCEx_PLL3_Config>
 8005954:	4603      	mov	r3, r0
 8005956:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800595a:	e00a      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005962:	e006      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005964:	bf00      	nop
 8005966:	e004      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005968:	bf00      	nop
 800596a:	e002      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800596c:	bf00      	nop
 800596e:	e000      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005972:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10e      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800597a:	4b06      	ldr	r3, [pc, #24]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800597c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800597e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005986:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800598a:	4a02      	ldr	r2, [pc, #8]	@ (8005994 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800598c:	430b      	orrs	r3, r1
 800598e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005990:	e006      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005992:	bf00      	nop
 8005994:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005998:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800599c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80059ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059b0:	2300      	movs	r3, #0
 80059b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80059b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4313      	orrs	r3, r2
 80059be:	d037      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80059c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059ca:	d00e      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80059cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059d0:	d816      	bhi.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d018      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80059d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059da:	d111      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059dc:	4bc4      	ldr	r3, [pc, #784]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e0:	4ac3      	ldr	r2, [pc, #780]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059e8:	e00f      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ee:	3308      	adds	r3, #8
 80059f0:	2101      	movs	r1, #1
 80059f2:	4618      	mov	r0, r3
 80059f4:	f001 f930 	bl	8006c58 <RCCEx_PLL2_Config>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059fe:	e004      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a06:	e000      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a12:	4bb7      	ldr	r3, [pc, #732]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a16:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a20:	4ab3      	ldr	r2, [pc, #716]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a22:	430b      	orrs	r3, r1
 8005a24:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a26:	e003      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a38:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a40:	2300      	movs	r3, #0
 8005a42:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	d039      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d81c      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a60 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005a9d 	.word	0x08005a9d
 8005a64:	08005a71 	.word	0x08005a71
 8005a68:	08005a7f 	.word	0x08005a7f
 8005a6c:	08005a9d 	.word	0x08005a9d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a70:	4b9f      	ldr	r3, [pc, #636]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a74:	4a9e      	ldr	r2, [pc, #632]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a7c:	e00f      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a82:	3308      	adds	r3, #8
 8005a84:	2102      	movs	r1, #2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 f8e6 	bl	8006c58 <RCCEx_PLL2_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a92:	e004      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a9a:	e000      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10a      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005aa6:	4b92      	ldr	r3, [pc, #584]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aaa:	f023 0103 	bic.w	r1, r3, #3
 8005aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ab4:	4a8e      	ldr	r2, [pc, #568]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ab6:	430b      	orrs	r3, r1
 8005ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005aba:	e003      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ac0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005ad0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ada:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f000 8099 	beq.w	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ae6:	4b83      	ldr	r3, [pc, #524]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a82      	ldr	r2, [pc, #520]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005af0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005af2:	f7fb fb67 	bl	80011c4 <HAL_GetTick>
 8005af6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005afa:	e00b      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005afc:	f7fb fb62 	bl	80011c4 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b64      	cmp	r3, #100	@ 0x64
 8005b0a:	d903      	bls.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b12:	e005      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b14:	4b77      	ldr	r3, [pc, #476]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0ed      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005b20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d173      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b28:	4b71      	ldr	r3, [pc, #452]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b34:	4053      	eors	r3, r2
 8005b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d015      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b3e:	4b6c      	ldr	r3, [pc, #432]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b46:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b4a:	4b69      	ldr	r3, [pc, #420]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4e:	4a68      	ldr	r2, [pc, #416]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b54:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b56:	4b66      	ldr	r3, [pc, #408]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b5a:	4a65      	ldr	r2, [pc, #404]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b60:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b62:	4a63      	ldr	r2, [pc, #396]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b68:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b76:	d118      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b78:	f7fb fb24 	bl	80011c4 <HAL_GetTick>
 8005b7c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b80:	e00d      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b82:	f7fb fb1f 	bl	80011c4 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005b8c:	1ad2      	subs	r2, r2, r3
 8005b8e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d903      	bls.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005b9c:	e005      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b9e:	4b54      	ldr	r3, [pc, #336]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0eb      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005baa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d129      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bc2:	d10e      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005bc4:	4b4a      	ldr	r3, [pc, #296]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005bd4:	091a      	lsrs	r2, r3, #4
 8005bd6:	4b48      	ldr	r3, [pc, #288]	@ (8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	4a45      	ldr	r2, [pc, #276]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	6113      	str	r3, [r2, #16]
 8005be0:	e005      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005be2:	4b43      	ldr	r3, [pc, #268]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	4a42      	ldr	r2, [pc, #264]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005be8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005bec:	6113      	str	r3, [r2, #16]
 8005bee:	4b40      	ldr	r3, [pc, #256]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bf0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bfe:	4a3c      	ldr	r2, [pc, #240]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c00:	430b      	orrs	r3, r1
 8005c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c04:	e008      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8005c0e:	e003      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	f002 0301 	and.w	r3, r2, #1
 8005c24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005c2e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005c32:	460b      	mov	r3, r1
 8005c34:	4313      	orrs	r3, r2
 8005c36:	f000 808f 	beq.w	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c40:	2b28      	cmp	r3, #40	@ 0x28
 8005c42:	d871      	bhi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005c44:	a201      	add	r2, pc, #4	@ (adr r2, 8005c4c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4a:	bf00      	nop
 8005c4c:	08005d31 	.word	0x08005d31
 8005c50:	08005d29 	.word	0x08005d29
 8005c54:	08005d29 	.word	0x08005d29
 8005c58:	08005d29 	.word	0x08005d29
 8005c5c:	08005d29 	.word	0x08005d29
 8005c60:	08005d29 	.word	0x08005d29
 8005c64:	08005d29 	.word	0x08005d29
 8005c68:	08005d29 	.word	0x08005d29
 8005c6c:	08005cfd 	.word	0x08005cfd
 8005c70:	08005d29 	.word	0x08005d29
 8005c74:	08005d29 	.word	0x08005d29
 8005c78:	08005d29 	.word	0x08005d29
 8005c7c:	08005d29 	.word	0x08005d29
 8005c80:	08005d29 	.word	0x08005d29
 8005c84:	08005d29 	.word	0x08005d29
 8005c88:	08005d29 	.word	0x08005d29
 8005c8c:	08005d13 	.word	0x08005d13
 8005c90:	08005d29 	.word	0x08005d29
 8005c94:	08005d29 	.word	0x08005d29
 8005c98:	08005d29 	.word	0x08005d29
 8005c9c:	08005d29 	.word	0x08005d29
 8005ca0:	08005d29 	.word	0x08005d29
 8005ca4:	08005d29 	.word	0x08005d29
 8005ca8:	08005d29 	.word	0x08005d29
 8005cac:	08005d31 	.word	0x08005d31
 8005cb0:	08005d29 	.word	0x08005d29
 8005cb4:	08005d29 	.word	0x08005d29
 8005cb8:	08005d29 	.word	0x08005d29
 8005cbc:	08005d29 	.word	0x08005d29
 8005cc0:	08005d29 	.word	0x08005d29
 8005cc4:	08005d29 	.word	0x08005d29
 8005cc8:	08005d29 	.word	0x08005d29
 8005ccc:	08005d31 	.word	0x08005d31
 8005cd0:	08005d29 	.word	0x08005d29
 8005cd4:	08005d29 	.word	0x08005d29
 8005cd8:	08005d29 	.word	0x08005d29
 8005cdc:	08005d29 	.word	0x08005d29
 8005ce0:	08005d29 	.word	0x08005d29
 8005ce4:	08005d29 	.word	0x08005d29
 8005ce8:	08005d29 	.word	0x08005d29
 8005cec:	08005d31 	.word	0x08005d31
 8005cf0:	58024400 	.word	0x58024400
 8005cf4:	58024800 	.word	0x58024800
 8005cf8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d00:	3308      	adds	r3, #8
 8005d02:	2101      	movs	r1, #1
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 ffa7 	bl	8006c58 <RCCEx_PLL2_Config>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d10:	e00f      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d16:	3328      	adds	r3, #40	@ 0x28
 8005d18:	2101      	movs	r1, #1
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f001 f84e 	bl	8006dbc <RCCEx_PLL3_Config>
 8005d20:	4603      	mov	r3, r0
 8005d22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d26:	e004      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d2e:	e000      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d3a:	4bbf      	ldr	r3, [pc, #764]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d48:	4abb      	ldr	r2, [pc, #748]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d4e:	e003      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d60:	f002 0302 	and.w	r3, r2, #2
 8005d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d6e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4313      	orrs	r3, r2
 8005d76:	d041      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d7e:	2b05      	cmp	r3, #5
 8005d80:	d824      	bhi.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005d82:	a201      	add	r2, pc, #4	@ (adr r2, 8005d88 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d88:	08005dd5 	.word	0x08005dd5
 8005d8c:	08005da1 	.word	0x08005da1
 8005d90:	08005db7 	.word	0x08005db7
 8005d94:	08005dd5 	.word	0x08005dd5
 8005d98:	08005dd5 	.word	0x08005dd5
 8005d9c:	08005dd5 	.word	0x08005dd5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da4:	3308      	adds	r3, #8
 8005da6:	2101      	movs	r1, #1
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 ff55 	bl	8006c58 <RCCEx_PLL2_Config>
 8005dae:	4603      	mov	r3, r0
 8005db0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005db4:	e00f      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dba:	3328      	adds	r3, #40	@ 0x28
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fffc 	bl	8006dbc <RCCEx_PLL3_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005dca:	e004      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005dd2:	e000      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10a      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005dde:	4b96      	ldr	r3, [pc, #600]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de2:	f023 0107 	bic.w	r1, r3, #7
 8005de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dec:	4a92      	ldr	r2, [pc, #584]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005dee:	430b      	orrs	r3, r1
 8005df0:	6553      	str	r3, [r2, #84]	@ 0x54
 8005df2:	e003      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005df8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f002 0304 	and.w	r3, r2, #4
 8005e08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e12:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e16:	460b      	mov	r3, r1
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	d044      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e24:	2b05      	cmp	r3, #5
 8005e26:	d825      	bhi.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005e28:	a201      	add	r2, pc, #4	@ (adr r2, 8005e30 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2e:	bf00      	nop
 8005e30:	08005e7d 	.word	0x08005e7d
 8005e34:	08005e49 	.word	0x08005e49
 8005e38:	08005e5f 	.word	0x08005e5f
 8005e3c:	08005e7d 	.word	0x08005e7d
 8005e40:	08005e7d 	.word	0x08005e7d
 8005e44:	08005e7d 	.word	0x08005e7d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	2101      	movs	r1, #1
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 ff01 	bl	8006c58 <RCCEx_PLL2_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e5c:	e00f      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e62:	3328      	adds	r3, #40	@ 0x28
 8005e64:	2101      	movs	r1, #1
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 ffa8 	bl	8006dbc <RCCEx_PLL3_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e72:	e004      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e7a:	e000      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10b      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e86:	4b6c      	ldr	r3, [pc, #432]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e8a:	f023 0107 	bic.w	r1, r3, #7
 8005e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e96:	4a68      	ldr	r2, [pc, #416]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e9c:	e003      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ea2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eae:	f002 0320 	and.w	r3, r2, #32
 8005eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005ebc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	d055      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ed2:	d033      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ed8:	d82c      	bhi.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ede:	d02f      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee4:	d826      	bhi.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005ee6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005eea:	d02b      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005eec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ef0:	d820      	bhi.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005ef2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ef6:	d012      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005ef8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005efc:	d81a      	bhi.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d022      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005f02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f06:	d115      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	2100      	movs	r1, #0
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 fea1 	bl	8006c58 <RCCEx_PLL2_Config>
 8005f16:	4603      	mov	r3, r0
 8005f18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f1c:	e015      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f22:	3328      	adds	r3, #40	@ 0x28
 8005f24:	2102      	movs	r1, #2
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 ff48 	bl	8006dbc <RCCEx_PLL3_Config>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f32:	e00a      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f3a:	e006      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005f3c:	bf00      	nop
 8005f3e:	e004      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005f40:	bf00      	nop
 8005f42:	e002      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005f44:	bf00      	nop
 8005f46:	e000      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10b      	bne.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f52:	4b39      	ldr	r3, [pc, #228]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f56:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f62:	4a35      	ldr	r2, [pc, #212]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005f64:	430b      	orrs	r3, r1
 8005f66:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f68:	e003      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005f7e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f82:	2300      	movs	r3, #0
 8005f84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f88:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	d058      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f9a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005f9e:	d033      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005fa0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005fa4:	d82c      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005faa:	d02f      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fb0:	d826      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005fb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fb6:	d02b      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005fb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fbc:	d820      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005fbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fc2:	d012      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005fc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fc8:	d81a      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d022      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fd2:	d115      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd8:	3308      	adds	r3, #8
 8005fda:	2100      	movs	r1, #0
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 fe3b 	bl	8006c58 <RCCEx_PLL2_Config>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005fe8:	e015      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fee:	3328      	adds	r3, #40	@ 0x28
 8005ff0:	2102      	movs	r1, #2
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fee2 	bl	8006dbc <RCCEx_PLL3_Config>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ffe:	e00a      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006006:	e006      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006008:	bf00      	nop
 800600a:	e004      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800600c:	bf00      	nop
 800600e:	e002      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006010:	bf00      	nop
 8006012:	e000      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006016:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10e      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800601e:	4b06      	ldr	r3, [pc, #24]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006022:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800602a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800602e:	4a02      	ldr	r2, [pc, #8]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006030:	430b      	orrs	r3, r1
 8006032:	6593      	str	r3, [r2, #88]	@ 0x58
 8006034:	e006      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006036:	bf00      	nop
 8006038:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006040:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006050:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006054:	2300      	movs	r3, #0
 8006056:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800605a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800605e:	460b      	mov	r3, r1
 8006060:	4313      	orrs	r3, r2
 8006062:	d055      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006068:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800606c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006070:	d033      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006072:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006076:	d82c      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800607c:	d02f      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800607e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006082:	d826      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006084:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006088:	d02b      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800608a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800608e:	d820      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006090:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006094:	d012      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006096:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800609a:	d81a      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d022      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80060a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060a4:	d115      	bne.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060aa:	3308      	adds	r3, #8
 80060ac:	2100      	movs	r1, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fdd2 	bl	8006c58 <RCCEx_PLL2_Config>
 80060b4:	4603      	mov	r3, r0
 80060b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060ba:	e015      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c0:	3328      	adds	r3, #40	@ 0x28
 80060c2:	2102      	movs	r1, #2
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fe79 	bl	8006dbc <RCCEx_PLL3_Config>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060d0:	e00a      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060d8:	e006      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80060da:	bf00      	nop
 80060dc:	e004      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80060de:	bf00      	nop
 80060e0:	e002      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80060e2:	bf00      	nop
 80060e4:	e000      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80060e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10b      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80060f0:	4ba0      	ldr	r3, [pc, #640]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80060f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80060f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006100:	4a9c      	ldr	r2, [pc, #624]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006102:	430b      	orrs	r3, r1
 8006104:	6593      	str	r3, [r2, #88]	@ 0x58
 8006106:	e003      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006108:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800610c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	f002 0308 	and.w	r3, r2, #8
 800611c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006120:	2300      	movs	r3, #0
 8006122:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006126:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800612a:	460b      	mov	r3, r1
 800612c:	4313      	orrs	r3, r2
 800612e:	d01e      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006134:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800613c:	d10c      	bne.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800613e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006142:	3328      	adds	r3, #40	@ 0x28
 8006144:	2102      	movs	r1, #2
 8006146:	4618      	mov	r0, r3
 8006148:	f000 fe38 	bl	8006dbc <RCCEx_PLL3_Config>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006158:	4b86      	ldr	r3, [pc, #536]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800615a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800615c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006164:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006168:	4a82      	ldr	r2, [pc, #520]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800616a:	430b      	orrs	r3, r1
 800616c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800616e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006176:	f002 0310 	and.w	r3, r2, #16
 800617a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800617e:	2300      	movs	r3, #0
 8006180:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006184:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006188:	460b      	mov	r3, r1
 800618a:	4313      	orrs	r3, r2
 800618c:	d01e      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800618e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800619a:	d10c      	bne.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800619c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a0:	3328      	adds	r3, #40	@ 0x28
 80061a2:	2102      	movs	r1, #2
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 fe09 	bl	8006dbc <RCCEx_PLL3_Config>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061b6:	4b6f      	ldr	r3, [pc, #444]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80061b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061c6:	4a6b      	ldr	r2, [pc, #428]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80061c8:	430b      	orrs	r3, r1
 80061ca:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80061d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80061da:	2300      	movs	r3, #0
 80061dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80061de:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80061e2:	460b      	mov	r3, r1
 80061e4:	4313      	orrs	r3, r2
 80061e6:	d03e      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80061e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80061f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061f4:	d022      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80061f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061fa:	d81b      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006204:	d00b      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006206:	e015      	b.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800620c:	3308      	adds	r3, #8
 800620e:	2100      	movs	r1, #0
 8006210:	4618      	mov	r0, r3
 8006212:	f000 fd21 	bl	8006c58 <RCCEx_PLL2_Config>
 8006216:	4603      	mov	r3, r0
 8006218:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800621c:	e00f      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800621e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006222:	3328      	adds	r3, #40	@ 0x28
 8006224:	2102      	movs	r1, #2
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fdc8 	bl	8006dbc <RCCEx_PLL3_Config>
 800622c:	4603      	mov	r3, r0
 800622e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006232:	e004      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800623a:	e000      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800623c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800623e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10b      	bne.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006246:	4b4b      	ldr	r3, [pc, #300]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800624a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800624e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006252:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006256:	4a47      	ldr	r2, [pc, #284]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006258:	430b      	orrs	r3, r1
 800625a:	6593      	str	r3, [r2, #88]	@ 0x58
 800625c:	e003      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006262:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006272:	673b      	str	r3, [r7, #112]	@ 0x70
 8006274:	2300      	movs	r3, #0
 8006276:	677b      	str	r3, [r7, #116]	@ 0x74
 8006278:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800627c:	460b      	mov	r3, r1
 800627e:	4313      	orrs	r3, r2
 8006280:	d03b      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006286:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800628a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800628e:	d01f      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006290:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006294:	d818      	bhi.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006296:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800629a:	d003      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800629c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062a0:	d007      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80062a2:	e011      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a4:	4b33      	ldr	r3, [pc, #204]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80062a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a8:	4a32      	ldr	r2, [pc, #200]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80062aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80062b0:	e00f      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b6:	3328      	adds	r3, #40	@ 0x28
 80062b8:	2101      	movs	r1, #1
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fd7e 	bl	8006dbc <RCCEx_PLL3_Config>
 80062c0:	4603      	mov	r3, r0
 80062c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80062c6:	e004      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062ce:	e000      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80062d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10b      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062da:	4b26      	ldr	r3, [pc, #152]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80062dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80062e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062ea:	4a22      	ldr	r2, [pc, #136]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80062ec:	430b      	orrs	r3, r1
 80062ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80062f0:	e003      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80062fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006302:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006306:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006308:	2300      	movs	r3, #0
 800630a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800630c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006310:	460b      	mov	r3, r1
 8006312:	4313      	orrs	r3, r2
 8006314:	d034      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006324:	d007      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006326:	e011      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006328:	4b12      	ldr	r3, [pc, #72]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800632a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632c:	4a11      	ldr	r2, [pc, #68]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800632e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006332:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006334:	e00e      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633a:	3308      	adds	r3, #8
 800633c:	2102      	movs	r1, #2
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fc8a 	bl	8006c58 <RCCEx_PLL2_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800634a:	e003      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006354:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10d      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800635c:	4b05      	ldr	r3, [pc, #20]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800635e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006360:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800636a:	4a02      	ldr	r2, [pc, #8]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800636c:	430b      	orrs	r3, r1
 800636e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006370:	e006      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006372:	bf00      	nop
 8006374:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006378:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800637c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800638c:	663b      	str	r3, [r7, #96]	@ 0x60
 800638e:	2300      	movs	r3, #0
 8006390:	667b      	str	r3, [r7, #100]	@ 0x64
 8006392:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006396:	460b      	mov	r3, r1
 8006398:	4313      	orrs	r3, r2
 800639a:	d00c      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800639c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a0:	3328      	adds	r3, #40	@ 0x28
 80063a2:	2102      	movs	r1, #2
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 fd09 	bl	8006dbc <RCCEx_PLL3_Config>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80063b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80063c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063c4:	2300      	movs	r3, #0
 80063c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063c8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80063cc:	460b      	mov	r3, r1
 80063ce:	4313      	orrs	r3, r2
 80063d0:	d036      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80063d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063dc:	d018      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80063de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063e2:	d811      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80063e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063e8:	d014      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80063ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063ee:	d80b      	bhi.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d011      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80063f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063f8:	d106      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063fa:	4bb7      	ldr	r3, [pc, #732]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80063fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fe:	4ab6      	ldr	r2, [pc, #728]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006404:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006406:	e008      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800640e:	e004      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006410:	bf00      	nop
 8006412:	e002      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006414:	bf00      	nop
 8006416:	e000      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800641a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10a      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006422:	4bad      	ldr	r3, [pc, #692]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006426:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800642a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006430:	4aa9      	ldr	r2, [pc, #676]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006432:	430b      	orrs	r3, r1
 8006434:	6553      	str	r3, [r2, #84]	@ 0x54
 8006436:	e003      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006438:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800643c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006448:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800644c:	653b      	str	r3, [r7, #80]	@ 0x50
 800644e:	2300      	movs	r3, #0
 8006450:	657b      	str	r3, [r7, #84]	@ 0x54
 8006452:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006456:	460b      	mov	r3, r1
 8006458:	4313      	orrs	r3, r2
 800645a:	d009      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800645c:	4b9e      	ldr	r3, [pc, #632]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800645e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006460:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800646a:	4a9b      	ldr	r2, [pc, #620]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800646c:	430b      	orrs	r3, r1
 800646e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800647c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800647e:	2300      	movs	r3, #0
 8006480:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006482:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006486:	460b      	mov	r3, r1
 8006488:	4313      	orrs	r3, r2
 800648a:	d009      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800648c:	4b92      	ldr	r3, [pc, #584]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800648e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006490:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006498:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800649a:	4a8f      	ldr	r2, [pc, #572]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800649c:	430b      	orrs	r3, r1
 800649e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80064a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80064ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80064ae:	2300      	movs	r3, #0
 80064b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80064b2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80064b6:	460b      	mov	r3, r1
 80064b8:	4313      	orrs	r3, r2
 80064ba:	d00e      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064bc:	4b86      	ldr	r3, [pc, #536]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	4a85      	ldr	r2, [pc, #532]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80064c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064c6:	6113      	str	r3, [r2, #16]
 80064c8:	4b83      	ldr	r3, [pc, #524]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80064ca:	6919      	ldr	r1, [r3, #16]
 80064cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80064d4:	4a80      	ldr	r2, [pc, #512]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80064d6:	430b      	orrs	r3, r1
 80064d8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80064da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80064e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064e8:	2300      	movs	r3, #0
 80064ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064ec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80064f0:	460b      	mov	r3, r1
 80064f2:	4313      	orrs	r3, r2
 80064f4:	d009      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80064f6:	4b78      	ldr	r3, [pc, #480]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80064f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064fa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80064fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006504:	4a74      	ldr	r2, [pc, #464]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006506:	430b      	orrs	r3, r1
 8006508:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800650a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800650e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006512:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006516:	633b      	str	r3, [r7, #48]	@ 0x30
 8006518:	2300      	movs	r3, #0
 800651a:	637b      	str	r3, [r7, #52]	@ 0x34
 800651c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006520:	460b      	mov	r3, r1
 8006522:	4313      	orrs	r3, r2
 8006524:	d00a      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006526:	4b6c      	ldr	r3, [pc, #432]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800652a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800652e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006536:	4a68      	ldr	r2, [pc, #416]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006538:	430b      	orrs	r3, r1
 800653a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800653c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	2100      	movs	r1, #0
 8006546:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800654e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006552:	460b      	mov	r3, r1
 8006554:	4313      	orrs	r3, r2
 8006556:	d011      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800655c:	3308      	adds	r3, #8
 800655e:	2100      	movs	r1, #0
 8006560:	4618      	mov	r0, r3
 8006562:	f000 fb79 	bl	8006c58 <RCCEx_PLL2_Config>
 8006566:	4603      	mov	r3, r0
 8006568:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800656c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006570:	2b00      	cmp	r3, #0
 8006572:	d003      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006574:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006578:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800657c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006584:	2100      	movs	r1, #0
 8006586:	6239      	str	r1, [r7, #32]
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	627b      	str	r3, [r7, #36]	@ 0x24
 800658e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006592:	460b      	mov	r3, r1
 8006594:	4313      	orrs	r3, r2
 8006596:	d011      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659c:	3308      	adds	r3, #8
 800659e:	2101      	movs	r1, #1
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 fb59 	bl	8006c58 <RCCEx_PLL2_Config>
 80065a6:	4603      	mov	r3, r0
 80065a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80065ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80065bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c4:	2100      	movs	r1, #0
 80065c6:	61b9      	str	r1, [r7, #24]
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	61fb      	str	r3, [r7, #28]
 80065ce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80065d2:	460b      	mov	r3, r1
 80065d4:	4313      	orrs	r3, r2
 80065d6:	d011      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065dc:	3308      	adds	r3, #8
 80065de:	2102      	movs	r1, #2
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 fb39 	bl	8006c58 <RCCEx_PLL2_Config>
 80065e6:	4603      	mov	r3, r0
 80065e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80065ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80065fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006604:	2100      	movs	r1, #0
 8006606:	6139      	str	r1, [r7, #16]
 8006608:	f003 0308 	and.w	r3, r3, #8
 800660c:	617b      	str	r3, [r7, #20]
 800660e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006612:	460b      	mov	r3, r1
 8006614:	4313      	orrs	r3, r2
 8006616:	d011      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800661c:	3328      	adds	r3, #40	@ 0x28
 800661e:	2100      	movs	r1, #0
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fbcb 	bl	8006dbc <RCCEx_PLL3_Config>
 8006626:	4603      	mov	r3, r0
 8006628:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800662c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006630:	2b00      	cmp	r3, #0
 8006632:	d003      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006634:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006638:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800663c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	2100      	movs	r1, #0
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	f003 0310 	and.w	r3, r3, #16
 800664c:	60fb      	str	r3, [r7, #12]
 800664e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006652:	460b      	mov	r3, r1
 8006654:	4313      	orrs	r3, r2
 8006656:	d011      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800665c:	3328      	adds	r3, #40	@ 0x28
 800665e:	2101      	movs	r1, #1
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fbab 	bl	8006dbc <RCCEx_PLL3_Config>
 8006666:	4603      	mov	r3, r0
 8006668:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800666c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006674:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006678:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800667c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	2100      	movs	r1, #0
 8006686:	6039      	str	r1, [r7, #0]
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	607b      	str	r3, [r7, #4]
 800668e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006692:	460b      	mov	r3, r1
 8006694:	4313      	orrs	r3, r2
 8006696:	d011      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800669c:	3328      	adds	r3, #40	@ 0x28
 800669e:	2102      	movs	r1, #2
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 fb8b 	bl	8006dbc <RCCEx_PLL3_Config>
 80066a6:	4603      	mov	r3, r0
 80066a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80066ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80066bc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	e000      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80066d0:	46bd      	mov	sp, r7
 80066d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066d6:	bf00      	nop
 80066d8:	58024400 	.word	0x58024400

080066dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80066e0:	f7fe fdbe 	bl	8005260 <HAL_RCC_GetHCLKFreq>
 80066e4:	4602      	mov	r2, r0
 80066e6:	4b06      	ldr	r3, [pc, #24]	@ (8006700 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	091b      	lsrs	r3, r3, #4
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	4904      	ldr	r1, [pc, #16]	@ (8006704 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80066f2:	5ccb      	ldrb	r3, [r1, r3]
 80066f4:	f003 031f 	and.w	r3, r3, #31
 80066f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	58024400 	.word	0x58024400
 8006704:	0800d2ac 	.word	0x0800d2ac

08006708 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006708:	b480      	push	{r7}
 800670a:	b089      	sub	sp, #36	@ 0x24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006710:	4ba1      	ldr	r3, [pc, #644]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006714:	f003 0303 	and.w	r3, r3, #3
 8006718:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800671a:	4b9f      	ldr	r3, [pc, #636]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800671c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671e:	0b1b      	lsrs	r3, r3, #12
 8006720:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006724:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006726:	4b9c      	ldr	r3, [pc, #624]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672a:	091b      	lsrs	r3, r3, #4
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006732:	4b99      	ldr	r3, [pc, #612]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006736:	08db      	lsrs	r3, r3, #3
 8006738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	fb02 f303 	mul.w	r3, r2, r3
 8006742:	ee07 3a90 	vmov	s15, r3
 8006746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8111 	beq.w	8006978 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	2b02      	cmp	r3, #2
 800675a:	f000 8083 	beq.w	8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	2b02      	cmp	r3, #2
 8006762:	f200 80a1 	bhi.w	80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d056      	beq.n	8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006772:	e099      	b.n	80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006774:	4b88      	ldr	r3, [pc, #544]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b00      	cmp	r3, #0
 800677e:	d02d      	beq.n	80067dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006780:	4b85      	ldr	r3, [pc, #532]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	08db      	lsrs	r3, r3, #3
 8006786:	f003 0303 	and.w	r3, r3, #3
 800678a:	4a84      	ldr	r2, [pc, #528]	@ (800699c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
 8006790:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	ee07 3a90 	vmov	s15, r3
 8006798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	ee07 3a90 	vmov	s15, r3
 80067a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067aa:	4b7b      	ldr	r3, [pc, #492]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b2:	ee07 3a90 	vmov	s15, r3
 80067b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80067be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80069a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80067da:	e087      	b.n	80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80069a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80067ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ee:	4b6a      	ldr	r3, [pc, #424]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f6:	ee07 3a90 	vmov	s15, r3
 80067fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006802:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80069a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800680a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800680e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800681a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800681e:	e065      	b.n	80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800682e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006832:	4b59      	ldr	r3, [pc, #356]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683a:	ee07 3a90 	vmov	s15, r3
 800683e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006842:	ed97 6a03 	vldr	s12, [r7, #12]
 8006846:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80069a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800684a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800684e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006852:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800685a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800685e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006862:	e043      	b.n	80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006876:	4b48      	ldr	r3, [pc, #288]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800687e:	ee07 3a90 	vmov	s15, r3
 8006882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006886:	ed97 6a03 	vldr	s12, [r7, #12]
 800688a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80069a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800688e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800689a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800689e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068a6:	e021      	b.n	80068ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	ee07 3a90 	vmov	s15, r3
 80068ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ba:	4b37      	ldr	r3, [pc, #220]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c2:	ee07 3a90 	vmov	s15, r3
 80068c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80068ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80069a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80068ec:	4b2a      	ldr	r3, [pc, #168]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f0:	0a5b      	lsrs	r3, r3, #9
 80068f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068f6:	ee07 3a90 	vmov	s15, r3
 80068fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006902:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006906:	edd7 6a07 	vldr	s13, [r7, #28]
 800690a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800690e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006912:	ee17 2a90 	vmov	r2, s15
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800691a:	4b1f      	ldr	r3, [pc, #124]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800691c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691e:	0c1b      	lsrs	r3, r3, #16
 8006920:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006924:	ee07 3a90 	vmov	s15, r3
 8006928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006930:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006934:	edd7 6a07 	vldr	s13, [r7, #28]
 8006938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800693c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006940:	ee17 2a90 	vmov	r2, s15
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006948:	4b13      	ldr	r3, [pc, #76]	@ (8006998 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800694a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800694c:	0e1b      	lsrs	r3, r3, #24
 800694e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006952:	ee07 3a90 	vmov	s15, r3
 8006956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800695e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006962:	edd7 6a07 	vldr	s13, [r7, #28]
 8006966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800696a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800696e:	ee17 2a90 	vmov	r2, s15
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006976:	e008      	b.n	800698a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	609a      	str	r2, [r3, #8]
}
 800698a:	bf00      	nop
 800698c:	3724      	adds	r7, #36	@ 0x24
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	58024400 	.word	0x58024400
 800699c:	03d09000 	.word	0x03d09000
 80069a0:	46000000 	.word	0x46000000
 80069a4:	4c742400 	.word	0x4c742400
 80069a8:	4a742400 	.word	0x4a742400
 80069ac:	4bbebc20 	.word	0x4bbebc20

080069b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b089      	sub	sp, #36	@ 0x24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069b8:	4ba1      	ldr	r3, [pc, #644]	@ (8006c40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069bc:	f003 0303 	and.w	r3, r3, #3
 80069c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80069c2:	4b9f      	ldr	r3, [pc, #636]	@ (8006c40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c6:	0d1b      	lsrs	r3, r3, #20
 80069c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80069ce:	4b9c      	ldr	r3, [pc, #624]	@ (8006c40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d2:	0a1b      	lsrs	r3, r3, #8
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80069da:	4b99      	ldr	r3, [pc, #612]	@ (8006c40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069de:	08db      	lsrs	r3, r3, #3
 80069e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	fb02 f303 	mul.w	r3, r2, r3
 80069ea:	ee07 3a90 	vmov	s15, r3
 80069ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 8111 	beq.w	8006c20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	f000 8083 	beq.w	8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	f200 80a1 	bhi.w	8006b50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d056      	beq.n	8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a1a:	e099      	b.n	8006b50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a1c:	4b88      	ldr	r3, [pc, #544]	@ (8006c40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d02d      	beq.n	8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a28:	4b85      	ldr	r3, [pc, #532]	@ (8006c40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	08db      	lsrs	r3, r3, #3
 8006a2e:	f003 0303 	and.w	r3, r3, #3
 8006a32:	4a84      	ldr	r2, [pc, #528]	@ (8006c44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a34:	fa22 f303 	lsr.w	r3, r2, r3
 8006a38:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	ee07 3a90 	vmov	s15, r3
 8006a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	ee07 3a90 	vmov	s15, r3
 8006a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a52:	4b7b      	ldr	r3, [pc, #492]	@ (8006c40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5a:	ee07 3a90 	vmov	s15, r3
 8006a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a66:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006c48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006a82:	e087      	b.n	8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	ee07 3a90 	vmov	s15, r3
 8006a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006c4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a96:	4b6a      	ldr	r3, [pc, #424]	@ (8006c40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a9e:	ee07 3a90 	vmov	s15, r3
 8006aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aaa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006c48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ac6:	e065      	b.n	8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ada:	4b59      	ldr	r3, [pc, #356]	@ (8006c40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006c48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b0a:	e043      	b.n	8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b16:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b1e:	4b48      	ldr	r3, [pc, #288]	@ (8006c40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b32:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006c48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b4e:	e021      	b.n	8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b62:	4b37      	ldr	r3, [pc, #220]	@ (8006c40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b76:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006c48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006b94:	4b2a      	ldr	r3, [pc, #168]	@ (8006c40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b98:	0a5b      	lsrs	r3, r3, #9
 8006b9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006baa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bae:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bba:	ee17 2a90 	vmov	r2, s15
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8006c40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc6:	0c1b      	lsrs	r3, r3, #16
 8006bc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bcc:	ee07 3a90 	vmov	s15, r3
 8006bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006be8:	ee17 2a90 	vmov	r2, s15
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006bf0:	4b13      	ldr	r3, [pc, #76]	@ (8006c40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf4:	0e1b      	lsrs	r3, r3, #24
 8006bf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c16:	ee17 2a90 	vmov	r2, s15
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c1e:	e008      	b.n	8006c32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	609a      	str	r2, [r3, #8]
}
 8006c32:	bf00      	nop
 8006c34:	3724      	adds	r7, #36	@ 0x24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	58024400 	.word	0x58024400
 8006c44:	03d09000 	.word	0x03d09000
 8006c48:	46000000 	.word	0x46000000
 8006c4c:	4c742400 	.word	0x4c742400
 8006c50:	4a742400 	.word	0x4a742400
 8006c54:	4bbebc20 	.word	0x4bbebc20

08006c58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c66:	4b53      	ldr	r3, [pc, #332]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6a:	f003 0303 	and.w	r3, r3, #3
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d101      	bne.n	8006c76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e099      	b.n	8006daa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006c76:	4b4f      	ldr	r3, [pc, #316]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a4e      	ldr	r2, [pc, #312]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006c7c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c82:	f7fa fa9f 	bl	80011c4 <HAL_GetTick>
 8006c86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c88:	e008      	b.n	8006c9c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006c8a:	f7fa fa9b 	bl	80011c4 <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d901      	bls.n	8006c9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e086      	b.n	8006daa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c9c:	4b45      	ldr	r3, [pc, #276]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1f0      	bne.n	8006c8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006ca8:	4b42      	ldr	r3, [pc, #264]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	031b      	lsls	r3, r3, #12
 8006cb6:	493f      	ldr	r1, [pc, #252]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	628b      	str	r3, [r1, #40]	@ 0x28
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	025b      	lsls	r3, r3, #9
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	041b      	lsls	r3, r3, #16
 8006cda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	061b      	lsls	r3, r3, #24
 8006ce8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006cec:	4931      	ldr	r1, [pc, #196]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006cf2:	4b30      	ldr	r3, [pc, #192]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	492d      	ldr	r1, [pc, #180]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d04:	4b2b      	ldr	r3, [pc, #172]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d08:	f023 0220 	bic.w	r2, r3, #32
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	4928      	ldr	r1, [pc, #160]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d16:	4b27      	ldr	r3, [pc, #156]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1a:	4a26      	ldr	r2, [pc, #152]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006d1c:	f023 0310 	bic.w	r3, r3, #16
 8006d20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d22:	4b24      	ldr	r3, [pc, #144]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006d24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d26:	4b24      	ldr	r3, [pc, #144]	@ (8006db8 <RCCEx_PLL2_Config+0x160>)
 8006d28:	4013      	ands	r3, r2
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	69d2      	ldr	r2, [r2, #28]
 8006d2e:	00d2      	lsls	r2, r2, #3
 8006d30:	4920      	ldr	r1, [pc, #128]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006d36:	4b1f      	ldr	r3, [pc, #124]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006d3c:	f043 0310 	orr.w	r3, r3, #16
 8006d40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d106      	bne.n	8006d56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d48:	4b1a      	ldr	r3, [pc, #104]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4c:	4a19      	ldr	r2, [pc, #100]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006d4e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d54:	e00f      	b.n	8006d76 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d106      	bne.n	8006d6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006d5c:	4b15      	ldr	r3, [pc, #84]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d60:	4a14      	ldr	r2, [pc, #80]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006d62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d68:	e005      	b.n	8006d76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006d6a:	4b12      	ldr	r3, [pc, #72]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d6e:	4a11      	ldr	r2, [pc, #68]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006d70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006d74:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006d76:	4b0f      	ldr	r3, [pc, #60]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006d7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d82:	f7fa fa1f 	bl	80011c4 <HAL_GetTick>
 8006d86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d88:	e008      	b.n	8006d9c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d8a:	f7fa fa1b 	bl	80011c4 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e006      	b.n	8006daa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d9c:	4b05      	ldr	r3, [pc, #20]	@ (8006db4 <RCCEx_PLL2_Config+0x15c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0f0      	beq.n	8006d8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	58024400 	.word	0x58024400
 8006db8:	ffff0007 	.word	0xffff0007

08006dbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006dca:	4b53      	ldr	r3, [pc, #332]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dce:	f003 0303 	and.w	r3, r3, #3
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d101      	bne.n	8006dda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e099      	b.n	8006f0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006dda:	4b4f      	ldr	r3, [pc, #316]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a4e      	ldr	r2, [pc, #312]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006de4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006de6:	f7fa f9ed 	bl	80011c4 <HAL_GetTick>
 8006dea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006dec:	e008      	b.n	8006e00 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006dee:	f7fa f9e9 	bl	80011c4 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d901      	bls.n	8006e00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e086      	b.n	8006f0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e00:	4b45      	ldr	r3, [pc, #276]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1f0      	bne.n	8006dee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e0c:	4b42      	ldr	r3, [pc, #264]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e10:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	051b      	lsls	r3, r3, #20
 8006e1a:	493f      	ldr	r1, [pc, #252]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	025b      	lsls	r3, r3, #9
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	431a      	orrs	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	041b      	lsls	r3, r3, #16
 8006e3e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e42:	431a      	orrs	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	061b      	lsls	r3, r3, #24
 8006e4c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e50:	4931      	ldr	r1, [pc, #196]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e56:	4b30      	ldr	r3, [pc, #192]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e5a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	492d      	ldr	r1, [pc, #180]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006e68:	4b2b      	ldr	r3, [pc, #172]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	4928      	ldr	r1, [pc, #160]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006e7a:	4b27      	ldr	r3, [pc, #156]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7e:	4a26      	ldr	r2, [pc, #152]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006e80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006e86:	4b24      	ldr	r3, [pc, #144]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006e88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e8a:	4b24      	ldr	r3, [pc, #144]	@ (8006f1c <RCCEx_PLL3_Config+0x160>)
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	69d2      	ldr	r2, [r2, #28]
 8006e92:	00d2      	lsls	r2, r2, #3
 8006e94:	4920      	ldr	r1, [pc, #128]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d106      	bne.n	8006eba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006eac:	4b1a      	ldr	r3, [pc, #104]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb0:	4a19      	ldr	r2, [pc, #100]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006eb2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006eb8:	e00f      	b.n	8006eda <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d106      	bne.n	8006ece <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ec0:	4b15      	ldr	r3, [pc, #84]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec4:	4a14      	ldr	r2, [pc, #80]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006ec6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006eca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ecc:	e005      	b.n	8006eda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006ece:	4b12      	ldr	r3, [pc, #72]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed2:	4a11      	ldr	r2, [pc, #68]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006ed4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006eda:	4b0f      	ldr	r3, [pc, #60]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a0e      	ldr	r2, [pc, #56]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ee4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ee6:	f7fa f96d 	bl	80011c4 <HAL_GetTick>
 8006eea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006eec:	e008      	b.n	8006f00 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006eee:	f7fa f969 	bl	80011c4 <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d901      	bls.n	8006f00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e006      	b.n	8006f0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f00:	4b05      	ldr	r3, [pc, #20]	@ (8006f18 <RCCEx_PLL3_Config+0x15c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0f0      	beq.n	8006eee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	58024400 	.word	0x58024400
 8006f1c:	ffff0007 	.word	0xffff0007

08006f20 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e10f      	b.n	8007152 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a87      	ldr	r2, [pc, #540]	@ (800715c <HAL_SPI_Init+0x23c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d00f      	beq.n	8006f62 <HAL_SPI_Init+0x42>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a86      	ldr	r2, [pc, #536]	@ (8007160 <HAL_SPI_Init+0x240>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00a      	beq.n	8006f62 <HAL_SPI_Init+0x42>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a84      	ldr	r2, [pc, #528]	@ (8007164 <HAL_SPI_Init+0x244>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d005      	beq.n	8006f62 <HAL_SPI_Init+0x42>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	2b0f      	cmp	r3, #15
 8006f5c:	d901      	bls.n	8006f62 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e0f7      	b.n	8007152 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fbba 	bl	80076dc <SPI_GetPacketSize>
 8006f68:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a7b      	ldr	r2, [pc, #492]	@ (800715c <HAL_SPI_Init+0x23c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d00c      	beq.n	8006f8e <HAL_SPI_Init+0x6e>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a79      	ldr	r2, [pc, #484]	@ (8007160 <HAL_SPI_Init+0x240>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d007      	beq.n	8006f8e <HAL_SPI_Init+0x6e>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a78      	ldr	r2, [pc, #480]	@ (8007164 <HAL_SPI_Init+0x244>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d002      	beq.n	8006f8e <HAL_SPI_Init+0x6e>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b08      	cmp	r3, #8
 8006f8c:	d811      	bhi.n	8006fb2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006f92:	4a72      	ldr	r2, [pc, #456]	@ (800715c <HAL_SPI_Init+0x23c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d009      	beq.n	8006fac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a70      	ldr	r2, [pc, #448]	@ (8007160 <HAL_SPI_Init+0x240>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d004      	beq.n	8006fac <HAL_SPI_Init+0x8c>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a6f      	ldr	r2, [pc, #444]	@ (8007164 <HAL_SPI_Init+0x244>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d104      	bne.n	8006fb6 <HAL_SPI_Init+0x96>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2b10      	cmp	r3, #16
 8006fb0:	d901      	bls.n	8006fb6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e0cd      	b.n	8007152 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d106      	bne.n	8006fd0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7f9 fd08 	bl	80009e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0201 	bic.w	r2, r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006ff2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ffc:	d119      	bne.n	8007032 <HAL_SPI_Init+0x112>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007006:	d103      	bne.n	8007010 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800700c:	2b00      	cmp	r3, #0
 800700e:	d008      	beq.n	8007022 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10c      	bne.n	8007032 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800701c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007020:	d107      	bne.n	8007032 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007030:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00f      	beq.n	800705e <HAL_SPI_Init+0x13e>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	2b06      	cmp	r3, #6
 8007044:	d90b      	bls.n	800705e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	430a      	orrs	r2, r1
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	e007      	b.n	800706e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800706c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	69da      	ldr	r2, [r3, #28]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007076:	431a      	orrs	r2, r3
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	431a      	orrs	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007080:	ea42 0103 	orr.w	r1, r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68da      	ldr	r2, [r3, #12]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	430a      	orrs	r2, r1
 800708e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007098:	431a      	orrs	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	431a      	orrs	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	431a      	orrs	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	431a      	orrs	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	431a      	orrs	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	431a      	orrs	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070c2:	431a      	orrs	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	431a      	orrs	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070ce:	ea42 0103 	orr.w	r1, r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d113      	bne.n	800710e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800710c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 0201 	bic.w	r2, r2, #1
 800711c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	40013000 	.word	0x40013000
 8007160:	40003800 	.word	0x40003800
 8007164:	40003c00 	.word	0x40003c00

08007168 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08a      	sub	sp, #40	@ 0x28
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007180:	6a3a      	ldr	r2, [r7, #32]
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	4013      	ands	r3, r2
 8007186:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007190:	2300      	movs	r3, #0
 8007192:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800719a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3330      	adds	r3, #48	@ 0x30
 80071a2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d010      	beq.n	80071d0 <HAL_SPI_IRQHandler+0x68>
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	f003 0308 	and.w	r3, r3, #8
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00b      	beq.n	80071d0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	699a      	ldr	r2, [r3, #24]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071c6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f9c3 	bl	8007554 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80071ce:	e192      	b.n	80074f6 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d113      	bne.n	8007202 <HAL_SPI_IRQHandler+0x9a>
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10e      	bne.n	8007202 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d009      	beq.n	8007202 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
    hspi->RxISR(hspi);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	4798      	blx	r3
    handled = 1UL;
 80071fe:	2301      	movs	r3, #1
 8007200:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10f      	bne.n	800722c <HAL_SPI_IRQHandler+0xc4>
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800721c:	2b00      	cmp	r3, #0
 800721e:	d105      	bne.n	800722c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	4798      	blx	r3
    handled = 1UL;
 8007228:	2301      	movs	r3, #1
 800722a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10f      	bne.n	8007256 <HAL_SPI_IRQHandler+0xee>
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00a      	beq.n	8007256 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007246:	2b00      	cmp	r3, #0
 8007248:	d105      	bne.n	8007256 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	4798      	blx	r3
    handled = 1UL;
 8007252:	2301      	movs	r3, #1
 8007254:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	2b00      	cmp	r3, #0
 800725a:	f040 8147 	bne.w	80074ec <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	f003 0308 	and.w	r3, r3, #8
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 808b 	beq.w	8007380 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699a      	ldr	r2, [r3, #24]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f042 0208 	orr.w	r2, r2, #8
 8007278:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	699a      	ldr	r2, [r3, #24]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 0210 	orr.w	r2, r2, #16
 8007288:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	699a      	ldr	r2, [r3, #24]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007298:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	691a      	ldr	r2, [r3, #16]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f022 0208 	bic.w	r2, r2, #8
 80072a8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d13d      	bne.n	8007334 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80072b8:	e036      	b.n	8007328 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	2b0f      	cmp	r3, #15
 80072c0:	d90b      	bls.n	80072da <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072ca:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80072cc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072d2:	1d1a      	adds	r2, r3, #4
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	665a      	str	r2, [r3, #100]	@ 0x64
 80072d8:	e01d      	b.n	8007316 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	2b07      	cmp	r3, #7
 80072e0:	d90b      	bls.n	80072fa <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	8812      	ldrh	r2, [r2, #0]
 80072ea:	b292      	uxth	r2, r2
 80072ec:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072f2:	1c9a      	adds	r2, r3, #2
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	665a      	str	r2, [r3, #100]	@ 0x64
 80072f8:	e00d      	b.n	8007316 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007306:	7812      	ldrb	r2, [r2, #0]
 8007308:	b2d2      	uxtb	r2, r2
 800730a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800731c:	b29b      	uxth	r3, r3
 800731e:	3b01      	subs	r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800732e:	b29b      	uxth	r3, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1c2      	bne.n	80072ba <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f931 	bl	800759c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f8f7 	bl	8007540 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007352:	e0d0      	b.n	80074f6 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007354:	7cfb      	ldrb	r3, [r7, #19]
 8007356:	2b05      	cmp	r3, #5
 8007358:	d103      	bne.n	8007362 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f8e6 	bl	800752c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007360:	e0c6      	b.n	80074f0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007362:	7cfb      	ldrb	r3, [r7, #19]
 8007364:	2b04      	cmp	r3, #4
 8007366:	d103      	bne.n	8007370 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f8d5 	bl	8007518 <HAL_SPI_RxCpltCallback>
    return;
 800736e:	e0bf      	b.n	80074f0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007370:	7cfb      	ldrb	r3, [r7, #19]
 8007372:	2b03      	cmp	r3, #3
 8007374:	f040 80bc 	bne.w	80074f0 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f8c3 	bl	8007504 <HAL_SPI_TxCpltCallback>
    return;
 800737e:	e0b7      	b.n	80074f0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 80b5 	beq.w	80074f6 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00f      	beq.n	80073b6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800739c:	f043 0204 	orr.w	r2, r3, #4
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	699a      	ldr	r2, [r3, #24]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073b4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00f      	beq.n	80073e0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073c6:	f043 0201 	orr.w	r2, r3, #1
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699a      	ldr	r2, [r3, #24]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073de:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00f      	beq.n	800740a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073f0:	f043 0208 	orr.w	r2, r3, #8
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	699a      	ldr	r2, [r3, #24]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007408:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	f003 0320 	and.w	r3, r3, #32
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00f      	beq.n	8007434 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800741a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	699a      	ldr	r2, [r3, #24]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0220 	orr.w	r2, r2, #32
 8007432:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800743a:	2b00      	cmp	r3, #0
 800743c:	d05a      	beq.n	80074f4 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0201 	bic.w	r2, r2, #1
 800744c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6919      	ldr	r1, [r3, #16]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	4b28      	ldr	r3, [pc, #160]	@ (80074fc <HAL_SPI_IRQHandler+0x394>)
 800745a:	400b      	ands	r3, r1
 800745c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007464:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007468:	d138      	bne.n	80074dc <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	689a      	ldr	r2, [r3, #8]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007478:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d013      	beq.n	80074aa <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007486:	4a1e      	ldr	r2, [pc, #120]	@ (8007500 <HAL_SPI_IRQHandler+0x398>)
 8007488:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800748e:	4618      	mov	r0, r3
 8007490:	f7fb f864 	bl	800255c <HAL_DMA_Abort_IT>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d007      	beq.n	80074aa <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d020      	beq.n	80074f4 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074b6:	4a12      	ldr	r2, [pc, #72]	@ (8007500 <HAL_SPI_IRQHandler+0x398>)
 80074b8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fb f84c 	bl	800255c <HAL_DMA_Abort_IT>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d014      	beq.n	80074f4 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80074da:	e00b      	b.n	80074f4 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f82b 	bl	8007540 <HAL_SPI_ErrorCallback>
    return;
 80074ea:	e003      	b.n	80074f4 <HAL_SPI_IRQHandler+0x38c>
    return;
 80074ec:	bf00      	nop
 80074ee:	e002      	b.n	80074f6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80074f0:	bf00      	nop
 80074f2:	e000      	b.n	80074f6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80074f4:	bf00      	nop
  }
}
 80074f6:	3728      	adds	r7, #40	@ 0x28
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	fffffc94 	.word	0xfffffc94
 8007500:	08007569 	.word	0x08007569

08007504 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007574:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f7ff ffd6 	bl	8007540 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007594:	bf00      	nop
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	699a      	ldr	r2, [r3, #24]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f042 0208 	orr.w	r2, r2, #8
 80075ba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	699a      	ldr	r2, [r3, #24]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f042 0210 	orr.w	r2, r2, #16
 80075ca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0201 	bic.w	r2, r2, #1
 80075da:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6919      	ldr	r1, [r3, #16]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	4b3c      	ldr	r3, [pc, #240]	@ (80076d8 <SPI_CloseTransfer+0x13c>)
 80075e8:	400b      	ands	r3, r1
 80075ea:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689a      	ldr	r2, [r3, #8]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80075fa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b04      	cmp	r3, #4
 8007606:	d014      	beq.n	8007632 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f003 0320 	and.w	r3, r3, #32
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00f      	beq.n	8007632 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007618:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	699a      	ldr	r2, [r3, #24]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f042 0220 	orr.w	r2, r2, #32
 8007630:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b03      	cmp	r3, #3
 800763c:	d014      	beq.n	8007668 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00f      	beq.n	8007668 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800764e:	f043 0204 	orr.w	r2, r3, #4
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007666:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00f      	beq.n	8007692 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007678:	f043 0201 	orr.w	r2, r3, #1
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	699a      	ldr	r2, [r3, #24]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007690:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00f      	beq.n	80076bc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076a2:	f043 0208 	orr.w	r2, r3, #8
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	699a      	ldr	r2, [r3, #24]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80076ba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80076cc:	bf00      	nop
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	fffffc90 	.word	0xfffffc90

080076dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e8:	095b      	lsrs	r3, r3, #5
 80076ea:	3301      	adds	r3, #1
 80076ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	3301      	adds	r3, #1
 80076f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	3307      	adds	r3, #7
 80076fa:	08db      	lsrs	r3, r3, #3
 80076fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	fb02 f303 	mul.w	r3, r2, r3
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b082      	sub	sp, #8
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d101      	bne.n	8007724 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e049      	b.n	80077b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d106      	bne.n	800773e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7f9 fbab 	bl	8000e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2202      	movs	r2, #2
 8007742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3304      	adds	r3, #4
 800774e:	4619      	mov	r1, r3
 8007750:	4610      	mov	r0, r2
 8007752:	f000 fb61 	bl	8007e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d001      	beq.n	80077d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e056      	b.n	8007886 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a2b      	ldr	r2, [pc, #172]	@ (8007894 <HAL_TIM_Base_Start+0xd4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d02c      	beq.n	8007844 <HAL_TIM_Base_Start+0x84>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077f2:	d027      	beq.n	8007844 <HAL_TIM_Base_Start+0x84>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a27      	ldr	r2, [pc, #156]	@ (8007898 <HAL_TIM_Base_Start+0xd8>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d022      	beq.n	8007844 <HAL_TIM_Base_Start+0x84>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a26      	ldr	r2, [pc, #152]	@ (800789c <HAL_TIM_Base_Start+0xdc>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d01d      	beq.n	8007844 <HAL_TIM_Base_Start+0x84>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a24      	ldr	r2, [pc, #144]	@ (80078a0 <HAL_TIM_Base_Start+0xe0>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d018      	beq.n	8007844 <HAL_TIM_Base_Start+0x84>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a23      	ldr	r2, [pc, #140]	@ (80078a4 <HAL_TIM_Base_Start+0xe4>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d013      	beq.n	8007844 <HAL_TIM_Base_Start+0x84>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a21      	ldr	r2, [pc, #132]	@ (80078a8 <HAL_TIM_Base_Start+0xe8>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d00e      	beq.n	8007844 <HAL_TIM_Base_Start+0x84>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a20      	ldr	r2, [pc, #128]	@ (80078ac <HAL_TIM_Base_Start+0xec>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d009      	beq.n	8007844 <HAL_TIM_Base_Start+0x84>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a1e      	ldr	r2, [pc, #120]	@ (80078b0 <HAL_TIM_Base_Start+0xf0>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d004      	beq.n	8007844 <HAL_TIM_Base_Start+0x84>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a1d      	ldr	r2, [pc, #116]	@ (80078b4 <HAL_TIM_Base_Start+0xf4>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d115      	bne.n	8007870 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689a      	ldr	r2, [r3, #8]
 800784a:	4b1b      	ldr	r3, [pc, #108]	@ (80078b8 <HAL_TIM_Base_Start+0xf8>)
 800784c:	4013      	ands	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b06      	cmp	r3, #6
 8007854:	d015      	beq.n	8007882 <HAL_TIM_Base_Start+0xc2>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800785c:	d011      	beq.n	8007882 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f042 0201 	orr.w	r2, r2, #1
 800786c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800786e:	e008      	b.n	8007882 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f042 0201 	orr.w	r2, r2, #1
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	e000      	b.n	8007884 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007882:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	40010000 	.word	0x40010000
 8007898:	40000400 	.word	0x40000400
 800789c:	40000800 	.word	0x40000800
 80078a0:	40000c00 	.word	0x40000c00
 80078a4:	40010400 	.word	0x40010400
 80078a8:	40001800 	.word	0x40001800
 80078ac:	40014000 	.word	0x40014000
 80078b0:	4000e000 	.word	0x4000e000
 80078b4:	4000e400 	.word	0x4000e400
 80078b8:	00010007 	.word	0x00010007

080078bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d001      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e05e      	b.n	8007992 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68da      	ldr	r2, [r3, #12]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f042 0201 	orr.w	r2, r2, #1
 80078ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a2b      	ldr	r2, [pc, #172]	@ (80079a0 <HAL_TIM_Base_Start_IT+0xe4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d02c      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x94>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078fe:	d027      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x94>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a27      	ldr	r2, [pc, #156]	@ (80079a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d022      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x94>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a26      	ldr	r2, [pc, #152]	@ (80079a8 <HAL_TIM_Base_Start_IT+0xec>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d01d      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x94>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a24      	ldr	r2, [pc, #144]	@ (80079ac <HAL_TIM_Base_Start_IT+0xf0>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d018      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x94>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a23      	ldr	r2, [pc, #140]	@ (80079b0 <HAL_TIM_Base_Start_IT+0xf4>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d013      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x94>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a21      	ldr	r2, [pc, #132]	@ (80079b4 <HAL_TIM_Base_Start_IT+0xf8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d00e      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x94>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a20      	ldr	r2, [pc, #128]	@ (80079b8 <HAL_TIM_Base_Start_IT+0xfc>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d009      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x94>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a1e      	ldr	r2, [pc, #120]	@ (80079bc <HAL_TIM_Base_Start_IT+0x100>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d004      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x94>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a1d      	ldr	r2, [pc, #116]	@ (80079c0 <HAL_TIM_Base_Start_IT+0x104>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d115      	bne.n	800797c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689a      	ldr	r2, [r3, #8]
 8007956:	4b1b      	ldr	r3, [pc, #108]	@ (80079c4 <HAL_TIM_Base_Start_IT+0x108>)
 8007958:	4013      	ands	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2b06      	cmp	r3, #6
 8007960:	d015      	beq.n	800798e <HAL_TIM_Base_Start_IT+0xd2>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007968:	d011      	beq.n	800798e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f042 0201 	orr.w	r2, r2, #1
 8007978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800797a:	e008      	b.n	800798e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0201 	orr.w	r2, r2, #1
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	e000      	b.n	8007990 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800798e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	40010000 	.word	0x40010000
 80079a4:	40000400 	.word	0x40000400
 80079a8:	40000800 	.word	0x40000800
 80079ac:	40000c00 	.word	0x40000c00
 80079b0:	40010400 	.word	0x40010400
 80079b4:	40001800 	.word	0x40001800
 80079b8:	40014000 	.word	0x40014000
 80079bc:	4000e000 	.word	0x4000e000
 80079c0:	4000e400 	.word	0x4000e400
 80079c4:	00010007 	.word	0x00010007

080079c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	f003 0302 	and.w	r3, r3, #2
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d020      	beq.n	8007a2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d01b      	beq.n	8007a2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f06f 0202 	mvn.w	r2, #2
 80079fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d003      	beq.n	8007a1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f9e2 	bl	8007ddc <HAL_TIM_IC_CaptureCallback>
 8007a18:	e005      	b.n	8007a26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f9d4 	bl	8007dc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f9e5 	bl	8007df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	f003 0304 	and.w	r3, r3, #4
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d020      	beq.n	8007a78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f003 0304 	and.w	r3, r3, #4
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d01b      	beq.n	8007a78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f06f 0204 	mvn.w	r2, #4
 8007a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f9bc 	bl	8007ddc <HAL_TIM_IC_CaptureCallback>
 8007a64:	e005      	b.n	8007a72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f9ae 	bl	8007dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f9bf 	bl	8007df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	f003 0308 	and.w	r3, r3, #8
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d020      	beq.n	8007ac4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f003 0308 	and.w	r3, r3, #8
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d01b      	beq.n	8007ac4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f06f 0208 	mvn.w	r2, #8
 8007a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2204      	movs	r2, #4
 8007a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f996 	bl	8007ddc <HAL_TIM_IC_CaptureCallback>
 8007ab0:	e005      	b.n	8007abe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f988 	bl	8007dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f999 	bl	8007df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	f003 0310 	and.w	r3, r3, #16
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d020      	beq.n	8007b10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f003 0310 	and.w	r3, r3, #16
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01b      	beq.n	8007b10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f06f 0210 	mvn.w	r2, #16
 8007ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2208      	movs	r2, #8
 8007ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f970 	bl	8007ddc <HAL_TIM_IC_CaptureCallback>
 8007afc:	e005      	b.n	8007b0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f962 	bl	8007dc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f973 	bl	8007df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00c      	beq.n	8007b34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f003 0301 	and.w	r3, r3, #1
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d007      	beq.n	8007b34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f06f 0201 	mvn.w	r2, #1
 8007b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7f8 fee8 	bl	8000904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d104      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00c      	beq.n	8007b62 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d007      	beq.n	8007b62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fb4b 	bl	80081f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00c      	beq.n	8007b86 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d007      	beq.n	8007b86 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fb43 	bl	800820c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00c      	beq.n	8007baa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d007      	beq.n	8007baa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f92d 	bl	8007e04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	f003 0320 	and.w	r3, r3, #32
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00c      	beq.n	8007bce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f003 0320 	and.w	r3, r3, #32
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d007      	beq.n	8007bce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f06f 0220 	mvn.w	r2, #32
 8007bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fb0b 	bl	80081e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bce:	bf00      	nop
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
	...

08007bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d101      	bne.n	8007bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	e0dc      	b.n	8007dae <HAL_TIM_ConfigClockSource+0x1d6>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	4b6a      	ldr	r3, [pc, #424]	@ (8007db8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007c10:	4013      	ands	r3, r2
 8007c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a64      	ldr	r2, [pc, #400]	@ (8007dbc <HAL_TIM_ConfigClockSource+0x1e4>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	f000 80a9 	beq.w	8007d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8007c30:	4a62      	ldr	r2, [pc, #392]	@ (8007dbc <HAL_TIM_ConfigClockSource+0x1e4>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	f200 80ae 	bhi.w	8007d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c38:	4a61      	ldr	r2, [pc, #388]	@ (8007dc0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	f000 80a1 	beq.w	8007d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8007c40:	4a5f      	ldr	r2, [pc, #380]	@ (8007dc0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	f200 80a6 	bhi.w	8007d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c48:	4a5e      	ldr	r2, [pc, #376]	@ (8007dc4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	f000 8099 	beq.w	8007d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8007c50:	4a5c      	ldr	r2, [pc, #368]	@ (8007dc4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	f200 809e 	bhi.w	8007d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c58:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007c5c:	f000 8091 	beq.w	8007d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8007c60:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007c64:	f200 8096 	bhi.w	8007d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c6c:	f000 8089 	beq.w	8007d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8007c70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c74:	f200 808e 	bhi.w	8007d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c7c:	d03e      	beq.n	8007cfc <HAL_TIM_ConfigClockSource+0x124>
 8007c7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c82:	f200 8087 	bhi.w	8007d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c8a:	f000 8086 	beq.w	8007d9a <HAL_TIM_ConfigClockSource+0x1c2>
 8007c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c92:	d87f      	bhi.n	8007d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c94:	2b70      	cmp	r3, #112	@ 0x70
 8007c96:	d01a      	beq.n	8007cce <HAL_TIM_ConfigClockSource+0xf6>
 8007c98:	2b70      	cmp	r3, #112	@ 0x70
 8007c9a:	d87b      	bhi.n	8007d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c9c:	2b60      	cmp	r3, #96	@ 0x60
 8007c9e:	d050      	beq.n	8007d42 <HAL_TIM_ConfigClockSource+0x16a>
 8007ca0:	2b60      	cmp	r3, #96	@ 0x60
 8007ca2:	d877      	bhi.n	8007d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ca4:	2b50      	cmp	r3, #80	@ 0x50
 8007ca6:	d03c      	beq.n	8007d22 <HAL_TIM_ConfigClockSource+0x14a>
 8007ca8:	2b50      	cmp	r3, #80	@ 0x50
 8007caa:	d873      	bhi.n	8007d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cac:	2b40      	cmp	r3, #64	@ 0x40
 8007cae:	d058      	beq.n	8007d62 <HAL_TIM_ConfigClockSource+0x18a>
 8007cb0:	2b40      	cmp	r3, #64	@ 0x40
 8007cb2:	d86f      	bhi.n	8007d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cb4:	2b30      	cmp	r3, #48	@ 0x30
 8007cb6:	d064      	beq.n	8007d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8007cb8:	2b30      	cmp	r3, #48	@ 0x30
 8007cba:	d86b      	bhi.n	8007d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cbc:	2b20      	cmp	r3, #32
 8007cbe:	d060      	beq.n	8007d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8007cc0:	2b20      	cmp	r3, #32
 8007cc2:	d867      	bhi.n	8007d94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d05c      	beq.n	8007d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8007cc8:	2b10      	cmp	r3, #16
 8007cca:	d05a      	beq.n	8007d82 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ccc:	e062      	b.n	8007d94 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007cde:	f000 f9c5 	bl	800806c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007cf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	609a      	str	r2, [r3, #8]
      break;
 8007cfa:	e04f      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d0c:	f000 f9ae 	bl	800806c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689a      	ldr	r2, [r3, #8]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d1e:	609a      	str	r2, [r3, #8]
      break;
 8007d20:	e03c      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f000 f91e 	bl	8007f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2150      	movs	r1, #80	@ 0x50
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 f978 	bl	8008030 <TIM_ITRx_SetConfig>
      break;
 8007d40:	e02c      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d4e:	461a      	mov	r2, r3
 8007d50:	f000 f93d 	bl	8007fce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2160      	movs	r1, #96	@ 0x60
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 f968 	bl	8008030 <TIM_ITRx_SetConfig>
      break;
 8007d60:	e01c      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d6e:	461a      	mov	r2, r3
 8007d70:	f000 f8fe 	bl	8007f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2140      	movs	r1, #64	@ 0x40
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 f958 	bl	8008030 <TIM_ITRx_SetConfig>
      break;
 8007d80:	e00c      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	f000 f94f 	bl	8008030 <TIM_ITRx_SetConfig>
      break;
 8007d92:	e003      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	73fb      	strb	r3, [r7, #15]
      break;
 8007d98:	e000      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007d9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	ffceff88 	.word	0xffceff88
 8007dbc:	00100040 	.word	0x00100040
 8007dc0:	00100030 	.word	0x00100030
 8007dc4:	00100020 	.word	0x00100020

08007dc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a47      	ldr	r2, [pc, #284]	@ (8007f48 <TIM_Base_SetConfig+0x130>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d013      	beq.n	8007e58 <TIM_Base_SetConfig+0x40>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e36:	d00f      	beq.n	8007e58 <TIM_Base_SetConfig+0x40>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a44      	ldr	r2, [pc, #272]	@ (8007f4c <TIM_Base_SetConfig+0x134>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d00b      	beq.n	8007e58 <TIM_Base_SetConfig+0x40>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a43      	ldr	r2, [pc, #268]	@ (8007f50 <TIM_Base_SetConfig+0x138>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d007      	beq.n	8007e58 <TIM_Base_SetConfig+0x40>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a42      	ldr	r2, [pc, #264]	@ (8007f54 <TIM_Base_SetConfig+0x13c>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d003      	beq.n	8007e58 <TIM_Base_SetConfig+0x40>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a41      	ldr	r2, [pc, #260]	@ (8007f58 <TIM_Base_SetConfig+0x140>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d108      	bne.n	8007e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a36      	ldr	r2, [pc, #216]	@ (8007f48 <TIM_Base_SetConfig+0x130>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d027      	beq.n	8007ec2 <TIM_Base_SetConfig+0xaa>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e78:	d023      	beq.n	8007ec2 <TIM_Base_SetConfig+0xaa>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a33      	ldr	r2, [pc, #204]	@ (8007f4c <TIM_Base_SetConfig+0x134>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d01f      	beq.n	8007ec2 <TIM_Base_SetConfig+0xaa>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a32      	ldr	r2, [pc, #200]	@ (8007f50 <TIM_Base_SetConfig+0x138>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d01b      	beq.n	8007ec2 <TIM_Base_SetConfig+0xaa>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a31      	ldr	r2, [pc, #196]	@ (8007f54 <TIM_Base_SetConfig+0x13c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d017      	beq.n	8007ec2 <TIM_Base_SetConfig+0xaa>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a30      	ldr	r2, [pc, #192]	@ (8007f58 <TIM_Base_SetConfig+0x140>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d013      	beq.n	8007ec2 <TIM_Base_SetConfig+0xaa>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a2f      	ldr	r2, [pc, #188]	@ (8007f5c <TIM_Base_SetConfig+0x144>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d00f      	beq.n	8007ec2 <TIM_Base_SetConfig+0xaa>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a2e      	ldr	r2, [pc, #184]	@ (8007f60 <TIM_Base_SetConfig+0x148>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d00b      	beq.n	8007ec2 <TIM_Base_SetConfig+0xaa>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a2d      	ldr	r2, [pc, #180]	@ (8007f64 <TIM_Base_SetConfig+0x14c>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d007      	beq.n	8007ec2 <TIM_Base_SetConfig+0xaa>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a2c      	ldr	r2, [pc, #176]	@ (8007f68 <TIM_Base_SetConfig+0x150>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d003      	beq.n	8007ec2 <TIM_Base_SetConfig+0xaa>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a2b      	ldr	r2, [pc, #172]	@ (8007f6c <TIM_Base_SetConfig+0x154>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d108      	bne.n	8007ed4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	689a      	ldr	r2, [r3, #8]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a14      	ldr	r2, [pc, #80]	@ (8007f48 <TIM_Base_SetConfig+0x130>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d00f      	beq.n	8007f1a <TIM_Base_SetConfig+0x102>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a16      	ldr	r2, [pc, #88]	@ (8007f58 <TIM_Base_SetConfig+0x140>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d00b      	beq.n	8007f1a <TIM_Base_SetConfig+0x102>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a15      	ldr	r2, [pc, #84]	@ (8007f5c <TIM_Base_SetConfig+0x144>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d007      	beq.n	8007f1a <TIM_Base_SetConfig+0x102>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a14      	ldr	r2, [pc, #80]	@ (8007f60 <TIM_Base_SetConfig+0x148>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d003      	beq.n	8007f1a <TIM_Base_SetConfig+0x102>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a13      	ldr	r2, [pc, #76]	@ (8007f64 <TIM_Base_SetConfig+0x14c>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d103      	bne.n	8007f22 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	691a      	ldr	r2, [r3, #16]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f043 0204 	orr.w	r2, r3, #4
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	601a      	str	r2, [r3, #0]
}
 8007f3a:	bf00      	nop
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	40010000 	.word	0x40010000
 8007f4c:	40000400 	.word	0x40000400
 8007f50:	40000800 	.word	0x40000800
 8007f54:	40000c00 	.word	0x40000c00
 8007f58:	40010400 	.word	0x40010400
 8007f5c:	40014000 	.word	0x40014000
 8007f60:	40014400 	.word	0x40014400
 8007f64:	40014800 	.word	0x40014800
 8007f68:	4000e000 	.word	0x4000e000
 8007f6c:	4000e400 	.word	0x4000e400

08007f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	f023 0201 	bic.w	r2, r3, #1
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	011b      	lsls	r3, r3, #4
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f023 030a 	bic.w	r3, r3, #10
 8007fac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	621a      	str	r2, [r3, #32]
}
 8007fc2:	bf00      	nop
 8007fc4:	371c      	adds	r7, #28
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b087      	sub	sp, #28
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	60f8      	str	r0, [r7, #12]
 8007fd6:	60b9      	str	r1, [r7, #8]
 8007fd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6a1b      	ldr	r3, [r3, #32]
 8007fe4:	f023 0210 	bic.w	r2, r3, #16
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	031b      	lsls	r3, r3, #12
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	4313      	orrs	r3, r2
 8008002:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800800a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	011b      	lsls	r3, r3, #4
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	4313      	orrs	r3, r2
 8008014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	621a      	str	r2, [r3, #32]
}
 8008022:	bf00      	nop
 8008024:	371c      	adds	r7, #28
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
	...

08008030 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	4b09      	ldr	r3, [pc, #36]	@ (8008068 <TIM_ITRx_SetConfig+0x38>)
 8008044:	4013      	ands	r3, r2
 8008046:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	4313      	orrs	r3, r2
 800804e:	f043 0307 	orr.w	r3, r3, #7
 8008052:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	609a      	str	r2, [r3, #8]
}
 800805a:	bf00      	nop
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	ffcfff8f 	.word	0xffcfff8f

0800806c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	021a      	lsls	r2, r3, #8
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	431a      	orrs	r2, r3
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	4313      	orrs	r3, r2
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	4313      	orrs	r3, r2
 8008098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	609a      	str	r2, [r3, #8]
}
 80080a0:	bf00      	nop
 80080a2:	371c      	adds	r7, #28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d101      	bne.n	80080c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080c0:	2302      	movs	r3, #2
 80080c2:	e077      	b.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2202      	movs	r2, #2
 80080d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a35      	ldr	r2, [pc, #212]	@ (80081c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d004      	beq.n	80080f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a34      	ldr	r2, [pc, #208]	@ (80081c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d108      	bne.n	800810a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80080fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	4313      	orrs	r3, r2
 8008108:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008110:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	4313      	orrs	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a25      	ldr	r2, [pc, #148]	@ (80081c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d02c      	beq.n	8008188 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008136:	d027      	beq.n	8008188 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a22      	ldr	r2, [pc, #136]	@ (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d022      	beq.n	8008188 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a21      	ldr	r2, [pc, #132]	@ (80081cc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d01d      	beq.n	8008188 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a1f      	ldr	r2, [pc, #124]	@ (80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d018      	beq.n	8008188 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a1a      	ldr	r2, [pc, #104]	@ (80081c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d013      	beq.n	8008188 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a1b      	ldr	r2, [pc, #108]	@ (80081d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d00e      	beq.n	8008188 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a1a      	ldr	r2, [pc, #104]	@ (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d009      	beq.n	8008188 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a18      	ldr	r2, [pc, #96]	@ (80081dc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d004      	beq.n	8008188 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a17      	ldr	r2, [pc, #92]	@ (80081e0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d10c      	bne.n	80081a2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800818e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	4313      	orrs	r3, r2
 8008198:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	40010000 	.word	0x40010000
 80081c4:	40010400 	.word	0x40010400
 80081c8:	40000400 	.word	0x40000400
 80081cc:	40000800 	.word	0x40000800
 80081d0:	40000c00 	.word	0x40000c00
 80081d4:	40001800 	.word	0x40001800
 80081d8:	40014000 	.word	0x40014000
 80081dc:	4000e000 	.word	0x4000e000
 80081e0:	4000e400 	.word	0x4000e400

080081e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e042      	b.n	80082b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008238:	2b00      	cmp	r3, #0
 800823a:	d106      	bne.n	800824a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7f8 fe9f 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2224      	movs	r2, #36	@ 0x24
 800824e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0201 	bic.w	r2, r2, #1
 8008260:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008266:	2b00      	cmp	r3, #0
 8008268:	d002      	beq.n	8008270 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f001 fa92 	bl	8009794 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fc23 	bl	8008abc <UART_SetConfig>
 8008276:	4603      	mov	r3, r0
 8008278:	2b01      	cmp	r3, #1
 800827a:	d101      	bne.n	8008280 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e01b      	b.n	80082b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800828e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689a      	ldr	r2, [r3, #8]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800829e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f042 0201 	orr.w	r2, r2, #1
 80082ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 fb11 	bl	80098d8 <UART_CheckIdleState>
 80082b6:	4603      	mov	r3, r0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b0ba      	sub	sp, #232	@ 0xe8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80082e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80082ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80082ee:	4013      	ands	r3, r2
 80082f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80082f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d11b      	bne.n	8008334 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008300:	f003 0320 	and.w	r3, r3, #32
 8008304:	2b00      	cmp	r3, #0
 8008306:	d015      	beq.n	8008334 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800830c:	f003 0320 	and.w	r3, r3, #32
 8008310:	2b00      	cmp	r3, #0
 8008312:	d105      	bne.n	8008320 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d009      	beq.n	8008334 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 8393 	beq.w	8008a50 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	4798      	blx	r3
      }
      return;
 8008332:	e38d      	b.n	8008a50 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008334:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008338:	2b00      	cmp	r3, #0
 800833a:	f000 8123 	beq.w	8008584 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800833e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008342:	4b8d      	ldr	r3, [pc, #564]	@ (8008578 <HAL_UART_IRQHandler+0x2b8>)
 8008344:	4013      	ands	r3, r2
 8008346:	2b00      	cmp	r3, #0
 8008348:	d106      	bne.n	8008358 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800834a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800834e:	4b8b      	ldr	r3, [pc, #556]	@ (800857c <HAL_UART_IRQHandler+0x2bc>)
 8008350:	4013      	ands	r3, r2
 8008352:	2b00      	cmp	r3, #0
 8008354:	f000 8116 	beq.w	8008584 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800835c:	f003 0301 	and.w	r3, r3, #1
 8008360:	2b00      	cmp	r3, #0
 8008362:	d011      	beq.n	8008388 <HAL_UART_IRQHandler+0xc8>
 8008364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00b      	beq.n	8008388 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2201      	movs	r2, #1
 8008376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800837e:	f043 0201 	orr.w	r2, r3, #1
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800838c:	f003 0302 	and.w	r3, r3, #2
 8008390:	2b00      	cmp	r3, #0
 8008392:	d011      	beq.n	80083b8 <HAL_UART_IRQHandler+0xf8>
 8008394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00b      	beq.n	80083b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2202      	movs	r2, #2
 80083a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083ae:	f043 0204 	orr.w	r2, r3, #4
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d011      	beq.n	80083e8 <HAL_UART_IRQHandler+0x128>
 80083c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083c8:	f003 0301 	and.w	r3, r3, #1
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00b      	beq.n	80083e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2204      	movs	r2, #4
 80083d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083de:	f043 0202 	orr.w	r2, r3, #2
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80083e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083ec:	f003 0308 	and.w	r3, r3, #8
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d017      	beq.n	8008424 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80083f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083f8:	f003 0320 	and.w	r3, r3, #32
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d105      	bne.n	800840c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008400:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008404:	4b5c      	ldr	r3, [pc, #368]	@ (8008578 <HAL_UART_IRQHandler+0x2b8>)
 8008406:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00b      	beq.n	8008424 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2208      	movs	r2, #8
 8008412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800841a:	f043 0208 	orr.w	r2, r3, #8
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008428:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800842c:	2b00      	cmp	r3, #0
 800842e:	d012      	beq.n	8008456 <HAL_UART_IRQHandler+0x196>
 8008430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008434:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00c      	beq.n	8008456 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008444:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800844c:	f043 0220 	orr.w	r2, r3, #32
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 82f9 	beq.w	8008a54 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008466:	f003 0320 	and.w	r3, r3, #32
 800846a:	2b00      	cmp	r3, #0
 800846c:	d013      	beq.n	8008496 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800846e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008472:	f003 0320 	and.w	r3, r3, #32
 8008476:	2b00      	cmp	r3, #0
 8008478:	d105      	bne.n	8008486 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800847a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800847e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d007      	beq.n	8008496 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800848a:	2b00      	cmp	r3, #0
 800848c:	d003      	beq.n	8008496 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800849c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084aa:	2b40      	cmp	r3, #64	@ 0x40
 80084ac:	d005      	beq.n	80084ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80084ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80084b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d054      	beq.n	8008564 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f001 fc0c 	bl	8009cd8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ca:	2b40      	cmp	r3, #64	@ 0x40
 80084cc:	d146      	bne.n	800855c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3308      	adds	r3, #8
 80084d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084dc:	e853 3f00 	ldrex	r3, [r3]
 80084e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80084e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80084e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3308      	adds	r3, #8
 80084f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80084fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80084fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008502:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008506:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800850a:	e841 2300 	strex	r3, r2, [r1]
 800850e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1d9      	bne.n	80084ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008520:	2b00      	cmp	r3, #0
 8008522:	d017      	beq.n	8008554 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800852a:	4a15      	ldr	r2, [pc, #84]	@ (8008580 <HAL_UART_IRQHandler+0x2c0>)
 800852c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008534:	4618      	mov	r0, r3
 8008536:	f7fa f811 	bl	800255c <HAL_DMA_Abort_IT>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d019      	beq.n	8008574 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800854e:	4610      	mov	r0, r2
 8008550:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008552:	e00f      	b.n	8008574 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 faa7 	bl	8008aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800855a:	e00b      	b.n	8008574 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 faa3 	bl	8008aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008562:	e007      	b.n	8008574 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fa9f 	bl	8008aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008572:	e26f      	b.n	8008a54 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008574:	bf00      	nop
    return;
 8008576:	e26d      	b.n	8008a54 <HAL_UART_IRQHandler+0x794>
 8008578:	10000001 	.word	0x10000001
 800857c:	04000120 	.word	0x04000120
 8008580:	08009f8b 	.word	0x08009f8b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008588:	2b01      	cmp	r3, #1
 800858a:	f040 8203 	bne.w	8008994 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800858e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008592:	f003 0310 	and.w	r3, r3, #16
 8008596:	2b00      	cmp	r3, #0
 8008598:	f000 81fc 	beq.w	8008994 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800859c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085a0:	f003 0310 	and.w	r3, r3, #16
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f000 81f5 	beq.w	8008994 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2210      	movs	r2, #16
 80085b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085bc:	2b40      	cmp	r3, #64	@ 0x40
 80085be:	f040 816d 	bne.w	800889c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4aa4      	ldr	r2, [pc, #656]	@ (800885c <HAL_UART_IRQHandler+0x59c>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d068      	beq.n	80086a2 <HAL_UART_IRQHandler+0x3e2>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4aa1      	ldr	r2, [pc, #644]	@ (8008860 <HAL_UART_IRQHandler+0x5a0>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d061      	beq.n	80086a2 <HAL_UART_IRQHandler+0x3e2>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a9f      	ldr	r2, [pc, #636]	@ (8008864 <HAL_UART_IRQHandler+0x5a4>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d05a      	beq.n	80086a2 <HAL_UART_IRQHandler+0x3e2>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a9c      	ldr	r2, [pc, #624]	@ (8008868 <HAL_UART_IRQHandler+0x5a8>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d053      	beq.n	80086a2 <HAL_UART_IRQHandler+0x3e2>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a9a      	ldr	r2, [pc, #616]	@ (800886c <HAL_UART_IRQHandler+0x5ac>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d04c      	beq.n	80086a2 <HAL_UART_IRQHandler+0x3e2>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a97      	ldr	r2, [pc, #604]	@ (8008870 <HAL_UART_IRQHandler+0x5b0>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d045      	beq.n	80086a2 <HAL_UART_IRQHandler+0x3e2>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a95      	ldr	r2, [pc, #596]	@ (8008874 <HAL_UART_IRQHandler+0x5b4>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d03e      	beq.n	80086a2 <HAL_UART_IRQHandler+0x3e2>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a92      	ldr	r2, [pc, #584]	@ (8008878 <HAL_UART_IRQHandler+0x5b8>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d037      	beq.n	80086a2 <HAL_UART_IRQHandler+0x3e2>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a90      	ldr	r2, [pc, #576]	@ (800887c <HAL_UART_IRQHandler+0x5bc>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d030      	beq.n	80086a2 <HAL_UART_IRQHandler+0x3e2>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a8d      	ldr	r2, [pc, #564]	@ (8008880 <HAL_UART_IRQHandler+0x5c0>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d029      	beq.n	80086a2 <HAL_UART_IRQHandler+0x3e2>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a8b      	ldr	r2, [pc, #556]	@ (8008884 <HAL_UART_IRQHandler+0x5c4>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d022      	beq.n	80086a2 <HAL_UART_IRQHandler+0x3e2>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a88      	ldr	r2, [pc, #544]	@ (8008888 <HAL_UART_IRQHandler+0x5c8>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d01b      	beq.n	80086a2 <HAL_UART_IRQHandler+0x3e2>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a86      	ldr	r2, [pc, #536]	@ (800888c <HAL_UART_IRQHandler+0x5cc>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d014      	beq.n	80086a2 <HAL_UART_IRQHandler+0x3e2>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a83      	ldr	r2, [pc, #524]	@ (8008890 <HAL_UART_IRQHandler+0x5d0>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d00d      	beq.n	80086a2 <HAL_UART_IRQHandler+0x3e2>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a81      	ldr	r2, [pc, #516]	@ (8008894 <HAL_UART_IRQHandler+0x5d4>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d006      	beq.n	80086a2 <HAL_UART_IRQHandler+0x3e2>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a7e      	ldr	r2, [pc, #504]	@ (8008898 <HAL_UART_IRQHandler+0x5d8>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d106      	bne.n	80086b0 <HAL_UART_IRQHandler+0x3f0>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	e005      	b.n	80086bc <HAL_UART_IRQHandler+0x3fc>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80086c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 80ad 	beq.w	8008824 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80086d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80086d4:	429a      	cmp	r2, r3
 80086d6:	f080 80a5 	bcs.w	8008824 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80086e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086f0:	f000 8087 	beq.w	8008802 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008700:	e853 3f00 	ldrex	r3, [r3]
 8008704:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008708:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800870c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008710:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	461a      	mov	r2, r3
 800871a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800871e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008722:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008726:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800872a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008736:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1da      	bne.n	80086f4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3308      	adds	r3, #8
 8008744:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008746:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008748:	e853 3f00 	ldrex	r3, [r3]
 800874c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800874e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008750:	f023 0301 	bic.w	r3, r3, #1
 8008754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3308      	adds	r3, #8
 800875e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008762:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008766:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008768:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800876a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800876e:	e841 2300 	strex	r3, r2, [r1]
 8008772:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008774:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1e1      	bne.n	800873e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	3308      	adds	r3, #8
 8008780:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008782:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008784:	e853 3f00 	ldrex	r3, [r3]
 8008788:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800878a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800878c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008790:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	3308      	adds	r3, #8
 800879a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800879e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80087a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80087a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80087a6:	e841 2300 	strex	r3, r2, [r1]
 80087aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80087ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1e3      	bne.n	800877a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2220      	movs	r2, #32
 80087b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087c8:	e853 3f00 	ldrex	r3, [r3]
 80087cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80087ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087d0:	f023 0310 	bic.w	r3, r3, #16
 80087d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	461a      	mov	r2, r3
 80087de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80087e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80087e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80087ea:	e841 2300 	strex	r3, r2, [r1]
 80087ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80087f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1e4      	bne.n	80087c0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7f9 fb8f 	bl	8001f20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2202      	movs	r2, #2
 8008806:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008814:	b29b      	uxth	r3, r3
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	b29b      	uxth	r3, r3
 800881a:	4619      	mov	r1, r3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f004 fbf1 	bl	800d004 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008822:	e119      	b.n	8008a58 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800882a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800882e:	429a      	cmp	r2, r3
 8008830:	f040 8112 	bne.w	8008a58 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008840:	f040 810a 	bne.w	8008a58 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2202      	movs	r2, #2
 8008848:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f004 fbd6 	bl	800d004 <HAL_UARTEx_RxEventCallback>
      return;
 8008858:	e0fe      	b.n	8008a58 <HAL_UART_IRQHandler+0x798>
 800885a:	bf00      	nop
 800885c:	40020010 	.word	0x40020010
 8008860:	40020028 	.word	0x40020028
 8008864:	40020040 	.word	0x40020040
 8008868:	40020058 	.word	0x40020058
 800886c:	40020070 	.word	0x40020070
 8008870:	40020088 	.word	0x40020088
 8008874:	400200a0 	.word	0x400200a0
 8008878:	400200b8 	.word	0x400200b8
 800887c:	40020410 	.word	0x40020410
 8008880:	40020428 	.word	0x40020428
 8008884:	40020440 	.word	0x40020440
 8008888:	40020458 	.word	0x40020458
 800888c:	40020470 	.word	0x40020470
 8008890:	40020488 	.word	0x40020488
 8008894:	400204a0 	.word	0x400204a0
 8008898:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 80cf 	beq.w	8008a5c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80088be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f000 80ca 	beq.w	8008a5c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d0:	e853 3f00 	ldrex	r3, [r3]
 80088d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	461a      	mov	r2, r3
 80088e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80088ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80088ec:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088f2:	e841 2300 	strex	r3, r2, [r1]
 80088f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1e4      	bne.n	80088c8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3308      	adds	r3, #8
 8008904:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008908:	e853 3f00 	ldrex	r3, [r3]
 800890c:	623b      	str	r3, [r7, #32]
   return(result);
 800890e:	6a3a      	ldr	r2, [r7, #32]
 8008910:	4b55      	ldr	r3, [pc, #340]	@ (8008a68 <HAL_UART_IRQHandler+0x7a8>)
 8008912:	4013      	ands	r3, r2
 8008914:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3308      	adds	r3, #8
 800891e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008922:	633a      	str	r2, [r7, #48]	@ 0x30
 8008924:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008926:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800892a:	e841 2300 	strex	r3, r2, [r1]
 800892e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1e3      	bne.n	80088fe <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2220      	movs	r2, #32
 800893a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	e853 3f00 	ldrex	r3, [r3]
 8008956:	60fb      	str	r3, [r7, #12]
   return(result);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f023 0310 	bic.w	r3, r3, #16
 800895e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800896c:	61fb      	str	r3, [r7, #28]
 800896e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008970:	69b9      	ldr	r1, [r7, #24]
 8008972:	69fa      	ldr	r2, [r7, #28]
 8008974:	e841 2300 	strex	r3, r2, [r1]
 8008978:	617b      	str	r3, [r7, #20]
   return(result);
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1e4      	bne.n	800894a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2202      	movs	r2, #2
 8008984:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008986:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f004 fb39 	bl	800d004 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008992:	e063      	b.n	8008a5c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008998:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00e      	beq.n	80089be <HAL_UART_IRQHandler+0x6fe>
 80089a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d008      	beq.n	80089be <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80089b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f001 fb24 	bl	800a004 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089bc:	e051      	b.n	8008a62 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80089be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d014      	beq.n	80089f4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80089ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d105      	bne.n	80089e2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80089d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d008      	beq.n	80089f4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d03a      	beq.n	8008a60 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	4798      	blx	r3
    }
    return;
 80089f2:	e035      	b.n	8008a60 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d009      	beq.n	8008a14 <HAL_UART_IRQHandler+0x754>
 8008a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f001 face 	bl	8009fae <UART_EndTransmit_IT>
    return;
 8008a12:	e026      	b.n	8008a62 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d009      	beq.n	8008a34 <HAL_UART_IRQHandler+0x774>
 8008a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a24:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d003      	beq.n	8008a34 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f001 fafd 	bl	800a02c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a32:	e016      	b.n	8008a62 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d010      	beq.n	8008a62 <HAL_UART_IRQHandler+0x7a2>
 8008a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	da0c      	bge.n	8008a62 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f001 fae5 	bl	800a018 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a4e:	e008      	b.n	8008a62 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008a50:	bf00      	nop
 8008a52:	e006      	b.n	8008a62 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008a54:	bf00      	nop
 8008a56:	e004      	b.n	8008a62 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008a58:	bf00      	nop
 8008a5a:	e002      	b.n	8008a62 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008a5c:	bf00      	nop
 8008a5e:	e000      	b.n	8008a62 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008a60:	bf00      	nop
  }
}
 8008a62:	37e8      	adds	r7, #232	@ 0xe8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	effffffe 	.word	0xeffffffe

08008a6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a9c:	bf00      	nop
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ac0:	b092      	sub	sp, #72	@ 0x48
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	689a      	ldr	r2, [r3, #8]
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	431a      	orrs	r2, r3
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	431a      	orrs	r2, r3
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	4bbe      	ldr	r3, [pc, #760]	@ (8008de4 <UART_SetConfig+0x328>)
 8008aec:	4013      	ands	r3, r2
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	6812      	ldr	r2, [r2, #0]
 8008af2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008af4:	430b      	orrs	r3, r1
 8008af6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	68da      	ldr	r2, [r3, #12]
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4ab3      	ldr	r2, [pc, #716]	@ (8008de8 <UART_SetConfig+0x32c>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d004      	beq.n	8008b28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b24:	4313      	orrs	r3, r2
 8008b26:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	689a      	ldr	r2, [r3, #8]
 8008b2e:	4baf      	ldr	r3, [pc, #700]	@ (8008dec <UART_SetConfig+0x330>)
 8008b30:	4013      	ands	r3, r2
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	6812      	ldr	r2, [r2, #0]
 8008b36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b38:	430b      	orrs	r3, r1
 8008b3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b42:	f023 010f 	bic.w	r1, r3, #15
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	430a      	orrs	r2, r1
 8008b50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4aa6      	ldr	r2, [pc, #664]	@ (8008df0 <UART_SetConfig+0x334>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d177      	bne.n	8008c4c <UART_SetConfig+0x190>
 8008b5c:	4ba5      	ldr	r3, [pc, #660]	@ (8008df4 <UART_SetConfig+0x338>)
 8008b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b64:	2b28      	cmp	r3, #40	@ 0x28
 8008b66:	d86d      	bhi.n	8008c44 <UART_SetConfig+0x188>
 8008b68:	a201      	add	r2, pc, #4	@ (adr r2, 8008b70 <UART_SetConfig+0xb4>)
 8008b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6e:	bf00      	nop
 8008b70:	08008c15 	.word	0x08008c15
 8008b74:	08008c45 	.word	0x08008c45
 8008b78:	08008c45 	.word	0x08008c45
 8008b7c:	08008c45 	.word	0x08008c45
 8008b80:	08008c45 	.word	0x08008c45
 8008b84:	08008c45 	.word	0x08008c45
 8008b88:	08008c45 	.word	0x08008c45
 8008b8c:	08008c45 	.word	0x08008c45
 8008b90:	08008c1d 	.word	0x08008c1d
 8008b94:	08008c45 	.word	0x08008c45
 8008b98:	08008c45 	.word	0x08008c45
 8008b9c:	08008c45 	.word	0x08008c45
 8008ba0:	08008c45 	.word	0x08008c45
 8008ba4:	08008c45 	.word	0x08008c45
 8008ba8:	08008c45 	.word	0x08008c45
 8008bac:	08008c45 	.word	0x08008c45
 8008bb0:	08008c25 	.word	0x08008c25
 8008bb4:	08008c45 	.word	0x08008c45
 8008bb8:	08008c45 	.word	0x08008c45
 8008bbc:	08008c45 	.word	0x08008c45
 8008bc0:	08008c45 	.word	0x08008c45
 8008bc4:	08008c45 	.word	0x08008c45
 8008bc8:	08008c45 	.word	0x08008c45
 8008bcc:	08008c45 	.word	0x08008c45
 8008bd0:	08008c2d 	.word	0x08008c2d
 8008bd4:	08008c45 	.word	0x08008c45
 8008bd8:	08008c45 	.word	0x08008c45
 8008bdc:	08008c45 	.word	0x08008c45
 8008be0:	08008c45 	.word	0x08008c45
 8008be4:	08008c45 	.word	0x08008c45
 8008be8:	08008c45 	.word	0x08008c45
 8008bec:	08008c45 	.word	0x08008c45
 8008bf0:	08008c35 	.word	0x08008c35
 8008bf4:	08008c45 	.word	0x08008c45
 8008bf8:	08008c45 	.word	0x08008c45
 8008bfc:	08008c45 	.word	0x08008c45
 8008c00:	08008c45 	.word	0x08008c45
 8008c04:	08008c45 	.word	0x08008c45
 8008c08:	08008c45 	.word	0x08008c45
 8008c0c:	08008c45 	.word	0x08008c45
 8008c10:	08008c3d 	.word	0x08008c3d
 8008c14:	2301      	movs	r3, #1
 8008c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1a:	e326      	b.n	800926a <UART_SetConfig+0x7ae>
 8008c1c:	2304      	movs	r3, #4
 8008c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c22:	e322      	b.n	800926a <UART_SetConfig+0x7ae>
 8008c24:	2308      	movs	r3, #8
 8008c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c2a:	e31e      	b.n	800926a <UART_SetConfig+0x7ae>
 8008c2c:	2310      	movs	r3, #16
 8008c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c32:	e31a      	b.n	800926a <UART_SetConfig+0x7ae>
 8008c34:	2320      	movs	r3, #32
 8008c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c3a:	e316      	b.n	800926a <UART_SetConfig+0x7ae>
 8008c3c:	2340      	movs	r3, #64	@ 0x40
 8008c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c42:	e312      	b.n	800926a <UART_SetConfig+0x7ae>
 8008c44:	2380      	movs	r3, #128	@ 0x80
 8008c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4a:	e30e      	b.n	800926a <UART_SetConfig+0x7ae>
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a69      	ldr	r2, [pc, #420]	@ (8008df8 <UART_SetConfig+0x33c>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d130      	bne.n	8008cb8 <UART_SetConfig+0x1fc>
 8008c56:	4b67      	ldr	r3, [pc, #412]	@ (8008df4 <UART_SetConfig+0x338>)
 8008c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c5a:	f003 0307 	and.w	r3, r3, #7
 8008c5e:	2b05      	cmp	r3, #5
 8008c60:	d826      	bhi.n	8008cb0 <UART_SetConfig+0x1f4>
 8008c62:	a201      	add	r2, pc, #4	@ (adr r2, 8008c68 <UART_SetConfig+0x1ac>)
 8008c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c68:	08008c81 	.word	0x08008c81
 8008c6c:	08008c89 	.word	0x08008c89
 8008c70:	08008c91 	.word	0x08008c91
 8008c74:	08008c99 	.word	0x08008c99
 8008c78:	08008ca1 	.word	0x08008ca1
 8008c7c:	08008ca9 	.word	0x08008ca9
 8008c80:	2300      	movs	r3, #0
 8008c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c86:	e2f0      	b.n	800926a <UART_SetConfig+0x7ae>
 8008c88:	2304      	movs	r3, #4
 8008c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8e:	e2ec      	b.n	800926a <UART_SetConfig+0x7ae>
 8008c90:	2308      	movs	r3, #8
 8008c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c96:	e2e8      	b.n	800926a <UART_SetConfig+0x7ae>
 8008c98:	2310      	movs	r3, #16
 8008c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c9e:	e2e4      	b.n	800926a <UART_SetConfig+0x7ae>
 8008ca0:	2320      	movs	r3, #32
 8008ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca6:	e2e0      	b.n	800926a <UART_SetConfig+0x7ae>
 8008ca8:	2340      	movs	r3, #64	@ 0x40
 8008caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cae:	e2dc      	b.n	800926a <UART_SetConfig+0x7ae>
 8008cb0:	2380      	movs	r3, #128	@ 0x80
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb6:	e2d8      	b.n	800926a <UART_SetConfig+0x7ae>
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a4f      	ldr	r2, [pc, #316]	@ (8008dfc <UART_SetConfig+0x340>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d130      	bne.n	8008d24 <UART_SetConfig+0x268>
 8008cc2:	4b4c      	ldr	r3, [pc, #304]	@ (8008df4 <UART_SetConfig+0x338>)
 8008cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc6:	f003 0307 	and.w	r3, r3, #7
 8008cca:	2b05      	cmp	r3, #5
 8008ccc:	d826      	bhi.n	8008d1c <UART_SetConfig+0x260>
 8008cce:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd4 <UART_SetConfig+0x218>)
 8008cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd4:	08008ced 	.word	0x08008ced
 8008cd8:	08008cf5 	.word	0x08008cf5
 8008cdc:	08008cfd 	.word	0x08008cfd
 8008ce0:	08008d05 	.word	0x08008d05
 8008ce4:	08008d0d 	.word	0x08008d0d
 8008ce8:	08008d15 	.word	0x08008d15
 8008cec:	2300      	movs	r3, #0
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf2:	e2ba      	b.n	800926a <UART_SetConfig+0x7ae>
 8008cf4:	2304      	movs	r3, #4
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfa:	e2b6      	b.n	800926a <UART_SetConfig+0x7ae>
 8008cfc:	2308      	movs	r3, #8
 8008cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d02:	e2b2      	b.n	800926a <UART_SetConfig+0x7ae>
 8008d04:	2310      	movs	r3, #16
 8008d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0a:	e2ae      	b.n	800926a <UART_SetConfig+0x7ae>
 8008d0c:	2320      	movs	r3, #32
 8008d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d12:	e2aa      	b.n	800926a <UART_SetConfig+0x7ae>
 8008d14:	2340      	movs	r3, #64	@ 0x40
 8008d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d1a:	e2a6      	b.n	800926a <UART_SetConfig+0x7ae>
 8008d1c:	2380      	movs	r3, #128	@ 0x80
 8008d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d22:	e2a2      	b.n	800926a <UART_SetConfig+0x7ae>
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a35      	ldr	r2, [pc, #212]	@ (8008e00 <UART_SetConfig+0x344>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d130      	bne.n	8008d90 <UART_SetConfig+0x2d4>
 8008d2e:	4b31      	ldr	r3, [pc, #196]	@ (8008df4 <UART_SetConfig+0x338>)
 8008d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d32:	f003 0307 	and.w	r3, r3, #7
 8008d36:	2b05      	cmp	r3, #5
 8008d38:	d826      	bhi.n	8008d88 <UART_SetConfig+0x2cc>
 8008d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d40 <UART_SetConfig+0x284>)
 8008d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d40:	08008d59 	.word	0x08008d59
 8008d44:	08008d61 	.word	0x08008d61
 8008d48:	08008d69 	.word	0x08008d69
 8008d4c:	08008d71 	.word	0x08008d71
 8008d50:	08008d79 	.word	0x08008d79
 8008d54:	08008d81 	.word	0x08008d81
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d5e:	e284      	b.n	800926a <UART_SetConfig+0x7ae>
 8008d60:	2304      	movs	r3, #4
 8008d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d66:	e280      	b.n	800926a <UART_SetConfig+0x7ae>
 8008d68:	2308      	movs	r3, #8
 8008d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d6e:	e27c      	b.n	800926a <UART_SetConfig+0x7ae>
 8008d70:	2310      	movs	r3, #16
 8008d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d76:	e278      	b.n	800926a <UART_SetConfig+0x7ae>
 8008d78:	2320      	movs	r3, #32
 8008d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d7e:	e274      	b.n	800926a <UART_SetConfig+0x7ae>
 8008d80:	2340      	movs	r3, #64	@ 0x40
 8008d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d86:	e270      	b.n	800926a <UART_SetConfig+0x7ae>
 8008d88:	2380      	movs	r3, #128	@ 0x80
 8008d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d8e:	e26c      	b.n	800926a <UART_SetConfig+0x7ae>
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a1b      	ldr	r2, [pc, #108]	@ (8008e04 <UART_SetConfig+0x348>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d142      	bne.n	8008e20 <UART_SetConfig+0x364>
 8008d9a:	4b16      	ldr	r3, [pc, #88]	@ (8008df4 <UART_SetConfig+0x338>)
 8008d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d9e:	f003 0307 	and.w	r3, r3, #7
 8008da2:	2b05      	cmp	r3, #5
 8008da4:	d838      	bhi.n	8008e18 <UART_SetConfig+0x35c>
 8008da6:	a201      	add	r2, pc, #4	@ (adr r2, 8008dac <UART_SetConfig+0x2f0>)
 8008da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dac:	08008dc5 	.word	0x08008dc5
 8008db0:	08008dcd 	.word	0x08008dcd
 8008db4:	08008dd5 	.word	0x08008dd5
 8008db8:	08008ddd 	.word	0x08008ddd
 8008dbc:	08008e09 	.word	0x08008e09
 8008dc0:	08008e11 	.word	0x08008e11
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dca:	e24e      	b.n	800926a <UART_SetConfig+0x7ae>
 8008dcc:	2304      	movs	r3, #4
 8008dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dd2:	e24a      	b.n	800926a <UART_SetConfig+0x7ae>
 8008dd4:	2308      	movs	r3, #8
 8008dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dda:	e246      	b.n	800926a <UART_SetConfig+0x7ae>
 8008ddc:	2310      	movs	r3, #16
 8008dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de2:	e242      	b.n	800926a <UART_SetConfig+0x7ae>
 8008de4:	cfff69f3 	.word	0xcfff69f3
 8008de8:	58000c00 	.word	0x58000c00
 8008dec:	11fff4ff 	.word	0x11fff4ff
 8008df0:	40011000 	.word	0x40011000
 8008df4:	58024400 	.word	0x58024400
 8008df8:	40004400 	.word	0x40004400
 8008dfc:	40004800 	.word	0x40004800
 8008e00:	40004c00 	.word	0x40004c00
 8008e04:	40005000 	.word	0x40005000
 8008e08:	2320      	movs	r3, #32
 8008e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0e:	e22c      	b.n	800926a <UART_SetConfig+0x7ae>
 8008e10:	2340      	movs	r3, #64	@ 0x40
 8008e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e16:	e228      	b.n	800926a <UART_SetConfig+0x7ae>
 8008e18:	2380      	movs	r3, #128	@ 0x80
 8008e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e1e:	e224      	b.n	800926a <UART_SetConfig+0x7ae>
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4ab1      	ldr	r2, [pc, #708]	@ (80090ec <UART_SetConfig+0x630>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d176      	bne.n	8008f18 <UART_SetConfig+0x45c>
 8008e2a:	4bb1      	ldr	r3, [pc, #708]	@ (80090f0 <UART_SetConfig+0x634>)
 8008e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e32:	2b28      	cmp	r3, #40	@ 0x28
 8008e34:	d86c      	bhi.n	8008f10 <UART_SetConfig+0x454>
 8008e36:	a201      	add	r2, pc, #4	@ (adr r2, 8008e3c <UART_SetConfig+0x380>)
 8008e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3c:	08008ee1 	.word	0x08008ee1
 8008e40:	08008f11 	.word	0x08008f11
 8008e44:	08008f11 	.word	0x08008f11
 8008e48:	08008f11 	.word	0x08008f11
 8008e4c:	08008f11 	.word	0x08008f11
 8008e50:	08008f11 	.word	0x08008f11
 8008e54:	08008f11 	.word	0x08008f11
 8008e58:	08008f11 	.word	0x08008f11
 8008e5c:	08008ee9 	.word	0x08008ee9
 8008e60:	08008f11 	.word	0x08008f11
 8008e64:	08008f11 	.word	0x08008f11
 8008e68:	08008f11 	.word	0x08008f11
 8008e6c:	08008f11 	.word	0x08008f11
 8008e70:	08008f11 	.word	0x08008f11
 8008e74:	08008f11 	.word	0x08008f11
 8008e78:	08008f11 	.word	0x08008f11
 8008e7c:	08008ef1 	.word	0x08008ef1
 8008e80:	08008f11 	.word	0x08008f11
 8008e84:	08008f11 	.word	0x08008f11
 8008e88:	08008f11 	.word	0x08008f11
 8008e8c:	08008f11 	.word	0x08008f11
 8008e90:	08008f11 	.word	0x08008f11
 8008e94:	08008f11 	.word	0x08008f11
 8008e98:	08008f11 	.word	0x08008f11
 8008e9c:	08008ef9 	.word	0x08008ef9
 8008ea0:	08008f11 	.word	0x08008f11
 8008ea4:	08008f11 	.word	0x08008f11
 8008ea8:	08008f11 	.word	0x08008f11
 8008eac:	08008f11 	.word	0x08008f11
 8008eb0:	08008f11 	.word	0x08008f11
 8008eb4:	08008f11 	.word	0x08008f11
 8008eb8:	08008f11 	.word	0x08008f11
 8008ebc:	08008f01 	.word	0x08008f01
 8008ec0:	08008f11 	.word	0x08008f11
 8008ec4:	08008f11 	.word	0x08008f11
 8008ec8:	08008f11 	.word	0x08008f11
 8008ecc:	08008f11 	.word	0x08008f11
 8008ed0:	08008f11 	.word	0x08008f11
 8008ed4:	08008f11 	.word	0x08008f11
 8008ed8:	08008f11 	.word	0x08008f11
 8008edc:	08008f09 	.word	0x08008f09
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee6:	e1c0      	b.n	800926a <UART_SetConfig+0x7ae>
 8008ee8:	2304      	movs	r3, #4
 8008eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eee:	e1bc      	b.n	800926a <UART_SetConfig+0x7ae>
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef6:	e1b8      	b.n	800926a <UART_SetConfig+0x7ae>
 8008ef8:	2310      	movs	r3, #16
 8008efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efe:	e1b4      	b.n	800926a <UART_SetConfig+0x7ae>
 8008f00:	2320      	movs	r3, #32
 8008f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f06:	e1b0      	b.n	800926a <UART_SetConfig+0x7ae>
 8008f08:	2340      	movs	r3, #64	@ 0x40
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0e:	e1ac      	b.n	800926a <UART_SetConfig+0x7ae>
 8008f10:	2380      	movs	r3, #128	@ 0x80
 8008f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f16:	e1a8      	b.n	800926a <UART_SetConfig+0x7ae>
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a75      	ldr	r2, [pc, #468]	@ (80090f4 <UART_SetConfig+0x638>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d130      	bne.n	8008f84 <UART_SetConfig+0x4c8>
 8008f22:	4b73      	ldr	r3, [pc, #460]	@ (80090f0 <UART_SetConfig+0x634>)
 8008f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f26:	f003 0307 	and.w	r3, r3, #7
 8008f2a:	2b05      	cmp	r3, #5
 8008f2c:	d826      	bhi.n	8008f7c <UART_SetConfig+0x4c0>
 8008f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f34 <UART_SetConfig+0x478>)
 8008f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f34:	08008f4d 	.word	0x08008f4d
 8008f38:	08008f55 	.word	0x08008f55
 8008f3c:	08008f5d 	.word	0x08008f5d
 8008f40:	08008f65 	.word	0x08008f65
 8008f44:	08008f6d 	.word	0x08008f6d
 8008f48:	08008f75 	.word	0x08008f75
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f52:	e18a      	b.n	800926a <UART_SetConfig+0x7ae>
 8008f54:	2304      	movs	r3, #4
 8008f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f5a:	e186      	b.n	800926a <UART_SetConfig+0x7ae>
 8008f5c:	2308      	movs	r3, #8
 8008f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f62:	e182      	b.n	800926a <UART_SetConfig+0x7ae>
 8008f64:	2310      	movs	r3, #16
 8008f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6a:	e17e      	b.n	800926a <UART_SetConfig+0x7ae>
 8008f6c:	2320      	movs	r3, #32
 8008f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f72:	e17a      	b.n	800926a <UART_SetConfig+0x7ae>
 8008f74:	2340      	movs	r3, #64	@ 0x40
 8008f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f7a:	e176      	b.n	800926a <UART_SetConfig+0x7ae>
 8008f7c:	2380      	movs	r3, #128	@ 0x80
 8008f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f82:	e172      	b.n	800926a <UART_SetConfig+0x7ae>
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a5b      	ldr	r2, [pc, #364]	@ (80090f8 <UART_SetConfig+0x63c>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d130      	bne.n	8008ff0 <UART_SetConfig+0x534>
 8008f8e:	4b58      	ldr	r3, [pc, #352]	@ (80090f0 <UART_SetConfig+0x634>)
 8008f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f92:	f003 0307 	and.w	r3, r3, #7
 8008f96:	2b05      	cmp	r3, #5
 8008f98:	d826      	bhi.n	8008fe8 <UART_SetConfig+0x52c>
 8008f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8008fa0 <UART_SetConfig+0x4e4>)
 8008f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa0:	08008fb9 	.word	0x08008fb9
 8008fa4:	08008fc1 	.word	0x08008fc1
 8008fa8:	08008fc9 	.word	0x08008fc9
 8008fac:	08008fd1 	.word	0x08008fd1
 8008fb0:	08008fd9 	.word	0x08008fd9
 8008fb4:	08008fe1 	.word	0x08008fe1
 8008fb8:	2300      	movs	r3, #0
 8008fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fbe:	e154      	b.n	800926a <UART_SetConfig+0x7ae>
 8008fc0:	2304      	movs	r3, #4
 8008fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc6:	e150      	b.n	800926a <UART_SetConfig+0x7ae>
 8008fc8:	2308      	movs	r3, #8
 8008fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fce:	e14c      	b.n	800926a <UART_SetConfig+0x7ae>
 8008fd0:	2310      	movs	r3, #16
 8008fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd6:	e148      	b.n	800926a <UART_SetConfig+0x7ae>
 8008fd8:	2320      	movs	r3, #32
 8008fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fde:	e144      	b.n	800926a <UART_SetConfig+0x7ae>
 8008fe0:	2340      	movs	r3, #64	@ 0x40
 8008fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe6:	e140      	b.n	800926a <UART_SetConfig+0x7ae>
 8008fe8:	2380      	movs	r3, #128	@ 0x80
 8008fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fee:	e13c      	b.n	800926a <UART_SetConfig+0x7ae>
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a41      	ldr	r2, [pc, #260]	@ (80090fc <UART_SetConfig+0x640>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	f040 8082 	bne.w	8009100 <UART_SetConfig+0x644>
 8008ffc:	4b3c      	ldr	r3, [pc, #240]	@ (80090f0 <UART_SetConfig+0x634>)
 8008ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009000:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009004:	2b28      	cmp	r3, #40	@ 0x28
 8009006:	d86d      	bhi.n	80090e4 <UART_SetConfig+0x628>
 8009008:	a201      	add	r2, pc, #4	@ (adr r2, 8009010 <UART_SetConfig+0x554>)
 800900a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900e:	bf00      	nop
 8009010:	080090b5 	.word	0x080090b5
 8009014:	080090e5 	.word	0x080090e5
 8009018:	080090e5 	.word	0x080090e5
 800901c:	080090e5 	.word	0x080090e5
 8009020:	080090e5 	.word	0x080090e5
 8009024:	080090e5 	.word	0x080090e5
 8009028:	080090e5 	.word	0x080090e5
 800902c:	080090e5 	.word	0x080090e5
 8009030:	080090bd 	.word	0x080090bd
 8009034:	080090e5 	.word	0x080090e5
 8009038:	080090e5 	.word	0x080090e5
 800903c:	080090e5 	.word	0x080090e5
 8009040:	080090e5 	.word	0x080090e5
 8009044:	080090e5 	.word	0x080090e5
 8009048:	080090e5 	.word	0x080090e5
 800904c:	080090e5 	.word	0x080090e5
 8009050:	080090c5 	.word	0x080090c5
 8009054:	080090e5 	.word	0x080090e5
 8009058:	080090e5 	.word	0x080090e5
 800905c:	080090e5 	.word	0x080090e5
 8009060:	080090e5 	.word	0x080090e5
 8009064:	080090e5 	.word	0x080090e5
 8009068:	080090e5 	.word	0x080090e5
 800906c:	080090e5 	.word	0x080090e5
 8009070:	080090cd 	.word	0x080090cd
 8009074:	080090e5 	.word	0x080090e5
 8009078:	080090e5 	.word	0x080090e5
 800907c:	080090e5 	.word	0x080090e5
 8009080:	080090e5 	.word	0x080090e5
 8009084:	080090e5 	.word	0x080090e5
 8009088:	080090e5 	.word	0x080090e5
 800908c:	080090e5 	.word	0x080090e5
 8009090:	080090d5 	.word	0x080090d5
 8009094:	080090e5 	.word	0x080090e5
 8009098:	080090e5 	.word	0x080090e5
 800909c:	080090e5 	.word	0x080090e5
 80090a0:	080090e5 	.word	0x080090e5
 80090a4:	080090e5 	.word	0x080090e5
 80090a8:	080090e5 	.word	0x080090e5
 80090ac:	080090e5 	.word	0x080090e5
 80090b0:	080090dd 	.word	0x080090dd
 80090b4:	2301      	movs	r3, #1
 80090b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ba:	e0d6      	b.n	800926a <UART_SetConfig+0x7ae>
 80090bc:	2304      	movs	r3, #4
 80090be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c2:	e0d2      	b.n	800926a <UART_SetConfig+0x7ae>
 80090c4:	2308      	movs	r3, #8
 80090c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ca:	e0ce      	b.n	800926a <UART_SetConfig+0x7ae>
 80090cc:	2310      	movs	r3, #16
 80090ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d2:	e0ca      	b.n	800926a <UART_SetConfig+0x7ae>
 80090d4:	2320      	movs	r3, #32
 80090d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090da:	e0c6      	b.n	800926a <UART_SetConfig+0x7ae>
 80090dc:	2340      	movs	r3, #64	@ 0x40
 80090de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e2:	e0c2      	b.n	800926a <UART_SetConfig+0x7ae>
 80090e4:	2380      	movs	r3, #128	@ 0x80
 80090e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ea:	e0be      	b.n	800926a <UART_SetConfig+0x7ae>
 80090ec:	40011400 	.word	0x40011400
 80090f0:	58024400 	.word	0x58024400
 80090f4:	40007800 	.word	0x40007800
 80090f8:	40007c00 	.word	0x40007c00
 80090fc:	40011800 	.word	0x40011800
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4aad      	ldr	r2, [pc, #692]	@ (80093bc <UART_SetConfig+0x900>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d176      	bne.n	80091f8 <UART_SetConfig+0x73c>
 800910a:	4bad      	ldr	r3, [pc, #692]	@ (80093c0 <UART_SetConfig+0x904>)
 800910c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800910e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009112:	2b28      	cmp	r3, #40	@ 0x28
 8009114:	d86c      	bhi.n	80091f0 <UART_SetConfig+0x734>
 8009116:	a201      	add	r2, pc, #4	@ (adr r2, 800911c <UART_SetConfig+0x660>)
 8009118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911c:	080091c1 	.word	0x080091c1
 8009120:	080091f1 	.word	0x080091f1
 8009124:	080091f1 	.word	0x080091f1
 8009128:	080091f1 	.word	0x080091f1
 800912c:	080091f1 	.word	0x080091f1
 8009130:	080091f1 	.word	0x080091f1
 8009134:	080091f1 	.word	0x080091f1
 8009138:	080091f1 	.word	0x080091f1
 800913c:	080091c9 	.word	0x080091c9
 8009140:	080091f1 	.word	0x080091f1
 8009144:	080091f1 	.word	0x080091f1
 8009148:	080091f1 	.word	0x080091f1
 800914c:	080091f1 	.word	0x080091f1
 8009150:	080091f1 	.word	0x080091f1
 8009154:	080091f1 	.word	0x080091f1
 8009158:	080091f1 	.word	0x080091f1
 800915c:	080091d1 	.word	0x080091d1
 8009160:	080091f1 	.word	0x080091f1
 8009164:	080091f1 	.word	0x080091f1
 8009168:	080091f1 	.word	0x080091f1
 800916c:	080091f1 	.word	0x080091f1
 8009170:	080091f1 	.word	0x080091f1
 8009174:	080091f1 	.word	0x080091f1
 8009178:	080091f1 	.word	0x080091f1
 800917c:	080091d9 	.word	0x080091d9
 8009180:	080091f1 	.word	0x080091f1
 8009184:	080091f1 	.word	0x080091f1
 8009188:	080091f1 	.word	0x080091f1
 800918c:	080091f1 	.word	0x080091f1
 8009190:	080091f1 	.word	0x080091f1
 8009194:	080091f1 	.word	0x080091f1
 8009198:	080091f1 	.word	0x080091f1
 800919c:	080091e1 	.word	0x080091e1
 80091a0:	080091f1 	.word	0x080091f1
 80091a4:	080091f1 	.word	0x080091f1
 80091a8:	080091f1 	.word	0x080091f1
 80091ac:	080091f1 	.word	0x080091f1
 80091b0:	080091f1 	.word	0x080091f1
 80091b4:	080091f1 	.word	0x080091f1
 80091b8:	080091f1 	.word	0x080091f1
 80091bc:	080091e9 	.word	0x080091e9
 80091c0:	2301      	movs	r3, #1
 80091c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091c6:	e050      	b.n	800926a <UART_SetConfig+0x7ae>
 80091c8:	2304      	movs	r3, #4
 80091ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ce:	e04c      	b.n	800926a <UART_SetConfig+0x7ae>
 80091d0:	2308      	movs	r3, #8
 80091d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091d6:	e048      	b.n	800926a <UART_SetConfig+0x7ae>
 80091d8:	2310      	movs	r3, #16
 80091da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091de:	e044      	b.n	800926a <UART_SetConfig+0x7ae>
 80091e0:	2320      	movs	r3, #32
 80091e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091e6:	e040      	b.n	800926a <UART_SetConfig+0x7ae>
 80091e8:	2340      	movs	r3, #64	@ 0x40
 80091ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ee:	e03c      	b.n	800926a <UART_SetConfig+0x7ae>
 80091f0:	2380      	movs	r3, #128	@ 0x80
 80091f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091f6:	e038      	b.n	800926a <UART_SetConfig+0x7ae>
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a71      	ldr	r2, [pc, #452]	@ (80093c4 <UART_SetConfig+0x908>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d130      	bne.n	8009264 <UART_SetConfig+0x7a8>
 8009202:	4b6f      	ldr	r3, [pc, #444]	@ (80093c0 <UART_SetConfig+0x904>)
 8009204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009206:	f003 0307 	and.w	r3, r3, #7
 800920a:	2b05      	cmp	r3, #5
 800920c:	d826      	bhi.n	800925c <UART_SetConfig+0x7a0>
 800920e:	a201      	add	r2, pc, #4	@ (adr r2, 8009214 <UART_SetConfig+0x758>)
 8009210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009214:	0800922d 	.word	0x0800922d
 8009218:	08009235 	.word	0x08009235
 800921c:	0800923d 	.word	0x0800923d
 8009220:	08009245 	.word	0x08009245
 8009224:	0800924d 	.word	0x0800924d
 8009228:	08009255 	.word	0x08009255
 800922c:	2302      	movs	r3, #2
 800922e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009232:	e01a      	b.n	800926a <UART_SetConfig+0x7ae>
 8009234:	2304      	movs	r3, #4
 8009236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923a:	e016      	b.n	800926a <UART_SetConfig+0x7ae>
 800923c:	2308      	movs	r3, #8
 800923e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009242:	e012      	b.n	800926a <UART_SetConfig+0x7ae>
 8009244:	2310      	movs	r3, #16
 8009246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800924a:	e00e      	b.n	800926a <UART_SetConfig+0x7ae>
 800924c:	2320      	movs	r3, #32
 800924e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009252:	e00a      	b.n	800926a <UART_SetConfig+0x7ae>
 8009254:	2340      	movs	r3, #64	@ 0x40
 8009256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800925a:	e006      	b.n	800926a <UART_SetConfig+0x7ae>
 800925c:	2380      	movs	r3, #128	@ 0x80
 800925e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009262:	e002      	b.n	800926a <UART_SetConfig+0x7ae>
 8009264:	2380      	movs	r3, #128	@ 0x80
 8009266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a55      	ldr	r2, [pc, #340]	@ (80093c4 <UART_SetConfig+0x908>)
 8009270:	4293      	cmp	r3, r2
 8009272:	f040 80f8 	bne.w	8009466 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009276:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800927a:	2b20      	cmp	r3, #32
 800927c:	dc46      	bgt.n	800930c <UART_SetConfig+0x850>
 800927e:	2b02      	cmp	r3, #2
 8009280:	db75      	blt.n	800936e <UART_SetConfig+0x8b2>
 8009282:	3b02      	subs	r3, #2
 8009284:	2b1e      	cmp	r3, #30
 8009286:	d872      	bhi.n	800936e <UART_SetConfig+0x8b2>
 8009288:	a201      	add	r2, pc, #4	@ (adr r2, 8009290 <UART_SetConfig+0x7d4>)
 800928a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928e:	bf00      	nop
 8009290:	08009313 	.word	0x08009313
 8009294:	0800936f 	.word	0x0800936f
 8009298:	0800931b 	.word	0x0800931b
 800929c:	0800936f 	.word	0x0800936f
 80092a0:	0800936f 	.word	0x0800936f
 80092a4:	0800936f 	.word	0x0800936f
 80092a8:	0800932b 	.word	0x0800932b
 80092ac:	0800936f 	.word	0x0800936f
 80092b0:	0800936f 	.word	0x0800936f
 80092b4:	0800936f 	.word	0x0800936f
 80092b8:	0800936f 	.word	0x0800936f
 80092bc:	0800936f 	.word	0x0800936f
 80092c0:	0800936f 	.word	0x0800936f
 80092c4:	0800936f 	.word	0x0800936f
 80092c8:	0800933b 	.word	0x0800933b
 80092cc:	0800936f 	.word	0x0800936f
 80092d0:	0800936f 	.word	0x0800936f
 80092d4:	0800936f 	.word	0x0800936f
 80092d8:	0800936f 	.word	0x0800936f
 80092dc:	0800936f 	.word	0x0800936f
 80092e0:	0800936f 	.word	0x0800936f
 80092e4:	0800936f 	.word	0x0800936f
 80092e8:	0800936f 	.word	0x0800936f
 80092ec:	0800936f 	.word	0x0800936f
 80092f0:	0800936f 	.word	0x0800936f
 80092f4:	0800936f 	.word	0x0800936f
 80092f8:	0800936f 	.word	0x0800936f
 80092fc:	0800936f 	.word	0x0800936f
 8009300:	0800936f 	.word	0x0800936f
 8009304:	0800936f 	.word	0x0800936f
 8009308:	08009361 	.word	0x08009361
 800930c:	2b40      	cmp	r3, #64	@ 0x40
 800930e:	d02a      	beq.n	8009366 <UART_SetConfig+0x8aa>
 8009310:	e02d      	b.n	800936e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009312:	f7fd f9e3 	bl	80066dc <HAL_RCCEx_GetD3PCLK1Freq>
 8009316:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009318:	e02f      	b.n	800937a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800931a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800931e:	4618      	mov	r0, r3
 8009320:	f7fd f9f2 	bl	8006708 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009328:	e027      	b.n	800937a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800932a:	f107 0318 	add.w	r3, r7, #24
 800932e:	4618      	mov	r0, r3
 8009330:	f7fd fb3e 	bl	80069b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009338:	e01f      	b.n	800937a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800933a:	4b21      	ldr	r3, [pc, #132]	@ (80093c0 <UART_SetConfig+0x904>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 0320 	and.w	r3, r3, #32
 8009342:	2b00      	cmp	r3, #0
 8009344:	d009      	beq.n	800935a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009346:	4b1e      	ldr	r3, [pc, #120]	@ (80093c0 <UART_SetConfig+0x904>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	08db      	lsrs	r3, r3, #3
 800934c:	f003 0303 	and.w	r3, r3, #3
 8009350:	4a1d      	ldr	r2, [pc, #116]	@ (80093c8 <UART_SetConfig+0x90c>)
 8009352:	fa22 f303 	lsr.w	r3, r2, r3
 8009356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009358:	e00f      	b.n	800937a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800935a:	4b1b      	ldr	r3, [pc, #108]	@ (80093c8 <UART_SetConfig+0x90c>)
 800935c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800935e:	e00c      	b.n	800937a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009360:	4b1a      	ldr	r3, [pc, #104]	@ (80093cc <UART_SetConfig+0x910>)
 8009362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009364:	e009      	b.n	800937a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800936a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800936c:	e005      	b.n	800937a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800936e:	2300      	movs	r3, #0
 8009370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009378:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800937a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800937c:	2b00      	cmp	r3, #0
 800937e:	f000 81ee 	beq.w	800975e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009386:	4a12      	ldr	r2, [pc, #72]	@ (80093d0 <UART_SetConfig+0x914>)
 8009388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800938c:	461a      	mov	r2, r3
 800938e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009390:	fbb3 f3f2 	udiv	r3, r3, r2
 8009394:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	685a      	ldr	r2, [r3, #4]
 800939a:	4613      	mov	r3, r2
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	4413      	add	r3, r2
 80093a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d305      	bcc.n	80093b2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d910      	bls.n	80093d4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80093b8:	e1d1      	b.n	800975e <UART_SetConfig+0xca2>
 80093ba:	bf00      	nop
 80093bc:	40011c00 	.word	0x40011c00
 80093c0:	58024400 	.word	0x58024400
 80093c4:	58000c00 	.word	0x58000c00
 80093c8:	03d09000 	.word	0x03d09000
 80093cc:	003d0900 	.word	0x003d0900
 80093d0:	0800d2c4 	.word	0x0800d2c4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093d6:	2200      	movs	r2, #0
 80093d8:	60bb      	str	r3, [r7, #8]
 80093da:	60fa      	str	r2, [r7, #12]
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e0:	4ac0      	ldr	r2, [pc, #768]	@ (80096e4 <UART_SetConfig+0xc28>)
 80093e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	2200      	movs	r2, #0
 80093ea:	603b      	str	r3, [r7, #0]
 80093ec:	607a      	str	r2, [r7, #4]
 80093ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80093f6:	f7f6 ff8b 	bl	8000310 <__aeabi_uldivmod>
 80093fa:	4602      	mov	r2, r0
 80093fc:	460b      	mov	r3, r1
 80093fe:	4610      	mov	r0, r2
 8009400:	4619      	mov	r1, r3
 8009402:	f04f 0200 	mov.w	r2, #0
 8009406:	f04f 0300 	mov.w	r3, #0
 800940a:	020b      	lsls	r3, r1, #8
 800940c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009410:	0202      	lsls	r2, r0, #8
 8009412:	6979      	ldr	r1, [r7, #20]
 8009414:	6849      	ldr	r1, [r1, #4]
 8009416:	0849      	lsrs	r1, r1, #1
 8009418:	2000      	movs	r0, #0
 800941a:	460c      	mov	r4, r1
 800941c:	4605      	mov	r5, r0
 800941e:	eb12 0804 	adds.w	r8, r2, r4
 8009422:	eb43 0905 	adc.w	r9, r3, r5
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	469a      	mov	sl, r3
 800942e:	4693      	mov	fp, r2
 8009430:	4652      	mov	r2, sl
 8009432:	465b      	mov	r3, fp
 8009434:	4640      	mov	r0, r8
 8009436:	4649      	mov	r1, r9
 8009438:	f7f6 ff6a 	bl	8000310 <__aeabi_uldivmod>
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	4613      	mov	r3, r2
 8009442:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009446:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800944a:	d308      	bcc.n	800945e <UART_SetConfig+0x9a2>
 800944c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800944e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009452:	d204      	bcs.n	800945e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800945a:	60da      	str	r2, [r3, #12]
 800945c:	e17f      	b.n	800975e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009464:	e17b      	b.n	800975e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	69db      	ldr	r3, [r3, #28]
 800946a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800946e:	f040 80bd 	bne.w	80095ec <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009472:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009476:	2b20      	cmp	r3, #32
 8009478:	dc48      	bgt.n	800950c <UART_SetConfig+0xa50>
 800947a:	2b00      	cmp	r3, #0
 800947c:	db7b      	blt.n	8009576 <UART_SetConfig+0xaba>
 800947e:	2b20      	cmp	r3, #32
 8009480:	d879      	bhi.n	8009576 <UART_SetConfig+0xaba>
 8009482:	a201      	add	r2, pc, #4	@ (adr r2, 8009488 <UART_SetConfig+0x9cc>)
 8009484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009488:	08009513 	.word	0x08009513
 800948c:	0800951b 	.word	0x0800951b
 8009490:	08009577 	.word	0x08009577
 8009494:	08009577 	.word	0x08009577
 8009498:	08009523 	.word	0x08009523
 800949c:	08009577 	.word	0x08009577
 80094a0:	08009577 	.word	0x08009577
 80094a4:	08009577 	.word	0x08009577
 80094a8:	08009533 	.word	0x08009533
 80094ac:	08009577 	.word	0x08009577
 80094b0:	08009577 	.word	0x08009577
 80094b4:	08009577 	.word	0x08009577
 80094b8:	08009577 	.word	0x08009577
 80094bc:	08009577 	.word	0x08009577
 80094c0:	08009577 	.word	0x08009577
 80094c4:	08009577 	.word	0x08009577
 80094c8:	08009543 	.word	0x08009543
 80094cc:	08009577 	.word	0x08009577
 80094d0:	08009577 	.word	0x08009577
 80094d4:	08009577 	.word	0x08009577
 80094d8:	08009577 	.word	0x08009577
 80094dc:	08009577 	.word	0x08009577
 80094e0:	08009577 	.word	0x08009577
 80094e4:	08009577 	.word	0x08009577
 80094e8:	08009577 	.word	0x08009577
 80094ec:	08009577 	.word	0x08009577
 80094f0:	08009577 	.word	0x08009577
 80094f4:	08009577 	.word	0x08009577
 80094f8:	08009577 	.word	0x08009577
 80094fc:	08009577 	.word	0x08009577
 8009500:	08009577 	.word	0x08009577
 8009504:	08009577 	.word	0x08009577
 8009508:	08009569 	.word	0x08009569
 800950c:	2b40      	cmp	r3, #64	@ 0x40
 800950e:	d02e      	beq.n	800956e <UART_SetConfig+0xab2>
 8009510:	e031      	b.n	8009576 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009512:	f7fb fed5 	bl	80052c0 <HAL_RCC_GetPCLK1Freq>
 8009516:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009518:	e033      	b.n	8009582 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800951a:	f7fb fee7 	bl	80052ec <HAL_RCC_GetPCLK2Freq>
 800951e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009520:	e02f      	b.n	8009582 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009526:	4618      	mov	r0, r3
 8009528:	f7fd f8ee 	bl	8006708 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800952c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009530:	e027      	b.n	8009582 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009532:	f107 0318 	add.w	r3, r7, #24
 8009536:	4618      	mov	r0, r3
 8009538:	f7fd fa3a 	bl	80069b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009540:	e01f      	b.n	8009582 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009542:	4b69      	ldr	r3, [pc, #420]	@ (80096e8 <UART_SetConfig+0xc2c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 0320 	and.w	r3, r3, #32
 800954a:	2b00      	cmp	r3, #0
 800954c:	d009      	beq.n	8009562 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800954e:	4b66      	ldr	r3, [pc, #408]	@ (80096e8 <UART_SetConfig+0xc2c>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	08db      	lsrs	r3, r3, #3
 8009554:	f003 0303 	and.w	r3, r3, #3
 8009558:	4a64      	ldr	r2, [pc, #400]	@ (80096ec <UART_SetConfig+0xc30>)
 800955a:	fa22 f303 	lsr.w	r3, r2, r3
 800955e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009560:	e00f      	b.n	8009582 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009562:	4b62      	ldr	r3, [pc, #392]	@ (80096ec <UART_SetConfig+0xc30>)
 8009564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009566:	e00c      	b.n	8009582 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009568:	4b61      	ldr	r3, [pc, #388]	@ (80096f0 <UART_SetConfig+0xc34>)
 800956a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800956c:	e009      	b.n	8009582 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800956e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009574:	e005      	b.n	8009582 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009576:	2300      	movs	r3, #0
 8009578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009580:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009584:	2b00      	cmp	r3, #0
 8009586:	f000 80ea 	beq.w	800975e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800958e:	4a55      	ldr	r2, [pc, #340]	@ (80096e4 <UART_SetConfig+0xc28>)
 8009590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009594:	461a      	mov	r2, r3
 8009596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009598:	fbb3 f3f2 	udiv	r3, r3, r2
 800959c:	005a      	lsls	r2, r3, #1
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	085b      	lsrs	r3, r3, #1
 80095a4:	441a      	add	r2, r3
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b2:	2b0f      	cmp	r3, #15
 80095b4:	d916      	bls.n	80095e4 <UART_SetConfig+0xb28>
 80095b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095bc:	d212      	bcs.n	80095e4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	f023 030f 	bic.w	r3, r3, #15
 80095c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ca:	085b      	lsrs	r3, r3, #1
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	f003 0307 	and.w	r3, r3, #7
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80095d6:	4313      	orrs	r3, r2
 80095d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80095e0:	60da      	str	r2, [r3, #12]
 80095e2:	e0bc      	b.n	800975e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80095ea:	e0b8      	b.n	800975e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80095ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80095f0:	2b20      	cmp	r3, #32
 80095f2:	dc4b      	bgt.n	800968c <UART_SetConfig+0xbd0>
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f2c0 8087 	blt.w	8009708 <UART_SetConfig+0xc4c>
 80095fa:	2b20      	cmp	r3, #32
 80095fc:	f200 8084 	bhi.w	8009708 <UART_SetConfig+0xc4c>
 8009600:	a201      	add	r2, pc, #4	@ (adr r2, 8009608 <UART_SetConfig+0xb4c>)
 8009602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009606:	bf00      	nop
 8009608:	08009693 	.word	0x08009693
 800960c:	0800969b 	.word	0x0800969b
 8009610:	08009709 	.word	0x08009709
 8009614:	08009709 	.word	0x08009709
 8009618:	080096a3 	.word	0x080096a3
 800961c:	08009709 	.word	0x08009709
 8009620:	08009709 	.word	0x08009709
 8009624:	08009709 	.word	0x08009709
 8009628:	080096b3 	.word	0x080096b3
 800962c:	08009709 	.word	0x08009709
 8009630:	08009709 	.word	0x08009709
 8009634:	08009709 	.word	0x08009709
 8009638:	08009709 	.word	0x08009709
 800963c:	08009709 	.word	0x08009709
 8009640:	08009709 	.word	0x08009709
 8009644:	08009709 	.word	0x08009709
 8009648:	080096c3 	.word	0x080096c3
 800964c:	08009709 	.word	0x08009709
 8009650:	08009709 	.word	0x08009709
 8009654:	08009709 	.word	0x08009709
 8009658:	08009709 	.word	0x08009709
 800965c:	08009709 	.word	0x08009709
 8009660:	08009709 	.word	0x08009709
 8009664:	08009709 	.word	0x08009709
 8009668:	08009709 	.word	0x08009709
 800966c:	08009709 	.word	0x08009709
 8009670:	08009709 	.word	0x08009709
 8009674:	08009709 	.word	0x08009709
 8009678:	08009709 	.word	0x08009709
 800967c:	08009709 	.word	0x08009709
 8009680:	08009709 	.word	0x08009709
 8009684:	08009709 	.word	0x08009709
 8009688:	080096fb 	.word	0x080096fb
 800968c:	2b40      	cmp	r3, #64	@ 0x40
 800968e:	d037      	beq.n	8009700 <UART_SetConfig+0xc44>
 8009690:	e03a      	b.n	8009708 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009692:	f7fb fe15 	bl	80052c0 <HAL_RCC_GetPCLK1Freq>
 8009696:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009698:	e03c      	b.n	8009714 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800969a:	f7fb fe27 	bl	80052ec <HAL_RCC_GetPCLK2Freq>
 800969e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096a0:	e038      	b.n	8009714 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fd f82e 	bl	8006708 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096b0:	e030      	b.n	8009714 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096b2:	f107 0318 	add.w	r3, r7, #24
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fd f97a 	bl	80069b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096c0:	e028      	b.n	8009714 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096c2:	4b09      	ldr	r3, [pc, #36]	@ (80096e8 <UART_SetConfig+0xc2c>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 0320 	and.w	r3, r3, #32
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d012      	beq.n	80096f4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80096ce:	4b06      	ldr	r3, [pc, #24]	@ (80096e8 <UART_SetConfig+0xc2c>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	08db      	lsrs	r3, r3, #3
 80096d4:	f003 0303 	and.w	r3, r3, #3
 80096d8:	4a04      	ldr	r2, [pc, #16]	@ (80096ec <UART_SetConfig+0xc30>)
 80096da:	fa22 f303 	lsr.w	r3, r2, r3
 80096de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80096e0:	e018      	b.n	8009714 <UART_SetConfig+0xc58>
 80096e2:	bf00      	nop
 80096e4:	0800d2c4 	.word	0x0800d2c4
 80096e8:	58024400 	.word	0x58024400
 80096ec:	03d09000 	.word	0x03d09000
 80096f0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80096f4:	4b24      	ldr	r3, [pc, #144]	@ (8009788 <UART_SetConfig+0xccc>)
 80096f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096f8:	e00c      	b.n	8009714 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80096fa:	4b24      	ldr	r3, [pc, #144]	@ (800978c <UART_SetConfig+0xcd0>)
 80096fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096fe:	e009      	b.n	8009714 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009700:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009706:	e005      	b.n	8009714 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009708:	2300      	movs	r3, #0
 800970a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009712:	bf00      	nop
    }

    if (pclk != 0U)
 8009714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009716:	2b00      	cmp	r3, #0
 8009718:	d021      	beq.n	800975e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800971e:	4a1c      	ldr	r2, [pc, #112]	@ (8009790 <UART_SetConfig+0xcd4>)
 8009720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009724:	461a      	mov	r2, r3
 8009726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009728:	fbb3 f2f2 	udiv	r2, r3, r2
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	085b      	lsrs	r3, r3, #1
 8009732:	441a      	add	r2, r3
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	fbb2 f3f3 	udiv	r3, r2, r3
 800973c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800973e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009740:	2b0f      	cmp	r3, #15
 8009742:	d909      	bls.n	8009758 <UART_SetConfig+0xc9c>
 8009744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800974a:	d205      	bcs.n	8009758 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800974c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974e:	b29a      	uxth	r2, r3
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	60da      	str	r2, [r3, #12]
 8009756:	e002      	b.n	800975e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	2201      	movs	r2, #1
 8009762:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	2201      	movs	r2, #1
 800976a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	2200      	movs	r2, #0
 8009772:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	2200      	movs	r2, #0
 8009778:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800977a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800977e:	4618      	mov	r0, r3
 8009780:	3748      	adds	r7, #72	@ 0x48
 8009782:	46bd      	mov	sp, r7
 8009784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009788:	03d09000 	.word	0x03d09000
 800978c:	003d0900 	.word	0x003d0900
 8009790:	0800d2c4 	.word	0x0800d2c4

08009794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097a0:	f003 0308 	and.w	r3, r3, #8
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00a      	beq.n	80097be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	430a      	orrs	r2, r1
 80097bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00a      	beq.n	80097e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	430a      	orrs	r2, r1
 80097de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097e4:	f003 0302 	and.w	r3, r3, #2
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00a      	beq.n	8009802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	430a      	orrs	r2, r1
 8009800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009806:	f003 0304 	and.w	r3, r3, #4
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00a      	beq.n	8009824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	430a      	orrs	r2, r1
 8009822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009828:	f003 0310 	and.w	r3, r3, #16
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00a      	beq.n	8009846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	430a      	orrs	r2, r1
 8009844:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800984a:	f003 0320 	and.w	r3, r3, #32
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00a      	beq.n	8009868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	430a      	orrs	r2, r1
 8009866:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800986c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009870:	2b00      	cmp	r3, #0
 8009872:	d01a      	beq.n	80098aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	430a      	orrs	r2, r1
 8009888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800988e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009892:	d10a      	bne.n	80098aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00a      	beq.n	80098cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	430a      	orrs	r2, r1
 80098ca:	605a      	str	r2, [r3, #4]
  }
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b098      	sub	sp, #96	@ 0x60
 80098dc:	af02      	add	r7, sp, #8
 80098de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098e8:	f7f7 fc6c 	bl	80011c4 <HAL_GetTick>
 80098ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 0308 	and.w	r3, r3, #8
 80098f8:	2b08      	cmp	r3, #8
 80098fa:	d12f      	bne.n	800995c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009900:	9300      	str	r3, [sp, #0]
 8009902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009904:	2200      	movs	r2, #0
 8009906:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f88e 	bl	8009a2c <UART_WaitOnFlagUntilTimeout>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d022      	beq.n	800995c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991e:	e853 3f00 	ldrex	r3, [r3]
 8009922:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009926:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800992a:	653b      	str	r3, [r7, #80]	@ 0x50
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	461a      	mov	r2, r3
 8009932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009934:	647b      	str	r3, [r7, #68]	@ 0x44
 8009936:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009938:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800993a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800993c:	e841 2300 	strex	r3, r2, [r1]
 8009940:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009944:	2b00      	cmp	r3, #0
 8009946:	d1e6      	bne.n	8009916 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2220      	movs	r2, #32
 800994c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009958:	2303      	movs	r3, #3
 800995a:	e063      	b.n	8009a24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f003 0304 	and.w	r3, r3, #4
 8009966:	2b04      	cmp	r3, #4
 8009968:	d149      	bne.n	80099fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800996a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009972:	2200      	movs	r2, #0
 8009974:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f857 	bl	8009a2c <UART_WaitOnFlagUntilTimeout>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d03c      	beq.n	80099fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998c:	e853 3f00 	ldrex	r3, [r3]
 8009990:	623b      	str	r3, [r7, #32]
   return(result);
 8009992:	6a3b      	ldr	r3, [r7, #32]
 8009994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009998:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	461a      	mov	r2, r3
 80099a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80099a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099aa:	e841 2300 	strex	r3, r2, [r1]
 80099ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1e6      	bne.n	8009984 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3308      	adds	r3, #8
 80099bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	e853 3f00 	ldrex	r3, [r3]
 80099c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f023 0301 	bic.w	r3, r3, #1
 80099cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	3308      	adds	r3, #8
 80099d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099d6:	61fa      	str	r2, [r7, #28]
 80099d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099da:	69b9      	ldr	r1, [r7, #24]
 80099dc:	69fa      	ldr	r2, [r7, #28]
 80099de:	e841 2300 	strex	r3, r2, [r1]
 80099e2:	617b      	str	r3, [r7, #20]
   return(result);
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1e5      	bne.n	80099b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2220      	movs	r2, #32
 80099ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099fa:	2303      	movs	r3, #3
 80099fc:	e012      	b.n	8009a24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2220      	movs	r2, #32
 8009a02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2220      	movs	r2, #32
 8009a0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2200      	movs	r2, #0
 8009a12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3758      	adds	r7, #88	@ 0x58
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a3c:	e04f      	b.n	8009ade <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a44:	d04b      	beq.n	8009ade <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a46:	f7f7 fbbd 	bl	80011c4 <HAL_GetTick>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	1ad3      	subs	r3, r2, r3
 8009a50:	69ba      	ldr	r2, [r7, #24]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d302      	bcc.n	8009a5c <UART_WaitOnFlagUntilTimeout+0x30>
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e04e      	b.n	8009afe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 0304 	and.w	r3, r3, #4
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d037      	beq.n	8009ade <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	2b80      	cmp	r3, #128	@ 0x80
 8009a72:	d034      	beq.n	8009ade <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	2b40      	cmp	r3, #64	@ 0x40
 8009a78:	d031      	beq.n	8009ade <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	69db      	ldr	r3, [r3, #28]
 8009a80:	f003 0308 	and.w	r3, r3, #8
 8009a84:	2b08      	cmp	r3, #8
 8009a86:	d110      	bne.n	8009aaa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2208      	movs	r2, #8
 8009a8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f000 f921 	bl	8009cd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2208      	movs	r2, #8
 8009a9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e029      	b.n	8009afe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	69db      	ldr	r3, [r3, #28]
 8009ab0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ab4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ab8:	d111      	bne.n	8009ade <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ac2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f000 f907 	bl	8009cd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2220      	movs	r2, #32
 8009ace:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e00f      	b.n	8009afe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	69da      	ldr	r2, [r3, #28]
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	bf0c      	ite	eq
 8009aee:	2301      	moveq	r3, #1
 8009af0:	2300      	movne	r3, #0
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	461a      	mov	r2, r3
 8009af6:	79fb      	ldrb	r3, [r7, #7]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d0a0      	beq.n	8009a3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
	...

08009b08 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b096      	sub	sp, #88	@ 0x58
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	4613      	mov	r3, r2
 8009b14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	88fa      	ldrh	r2, [r7, #6]
 8009b20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2222      	movs	r2, #34	@ 0x22
 8009b30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d02d      	beq.n	8009b9a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b44:	4a40      	ldr	r2, [pc, #256]	@ (8009c48 <UART_Start_Receive_DMA+0x140>)
 8009b46:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b4e:	4a3f      	ldr	r2, [pc, #252]	@ (8009c4c <UART_Start_Receive_DMA+0x144>)
 8009b50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b58:	4a3d      	ldr	r2, [pc, #244]	@ (8009c50 <UART_Start_Receive_DMA+0x148>)
 8009b5a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b62:	2200      	movs	r2, #0
 8009b64:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	3324      	adds	r3, #36	@ 0x24
 8009b72:	4619      	mov	r1, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b78:	461a      	mov	r2, r3
 8009b7a:	88fb      	ldrh	r3, [r7, #6]
 8009b7c:	f7f7 ff66 	bl	8001a4c <HAL_DMA_Start_IT>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d009      	beq.n	8009b9a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2210      	movs	r2, #16
 8009b8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2220      	movs	r2, #32
 8009b92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e051      	b.n	8009c3e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d018      	beq.n	8009bd4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009baa:	e853 3f00 	ldrex	r3, [r3]
 8009bae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009bb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bc2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009bc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bc8:	e841 2300 	strex	r3, r2, [r1]
 8009bcc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1e6      	bne.n	8009ba2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	3308      	adds	r3, #8
 8009bda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bde:	e853 3f00 	ldrex	r3, [r3]
 8009be2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be6:	f043 0301 	orr.w	r3, r3, #1
 8009bea:	653b      	str	r3, [r7, #80]	@ 0x50
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009bf4:	637a      	str	r2, [r7, #52]	@ 0x34
 8009bf6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009bfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009bfc:	e841 2300 	strex	r3, r2, [r1]
 8009c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e5      	bne.n	8009bd4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3308      	adds	r3, #8
 8009c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	e853 3f00 	ldrex	r3, [r3]
 8009c16:	613b      	str	r3, [r7, #16]
   return(result);
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	3308      	adds	r3, #8
 8009c26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009c28:	623a      	str	r2, [r7, #32]
 8009c2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2c:	69f9      	ldr	r1, [r7, #28]
 8009c2e:	6a3a      	ldr	r2, [r7, #32]
 8009c30:	e841 2300 	strex	r3, r2, [r1]
 8009c34:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1e5      	bne.n	8009c08 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3758      	adds	r7, #88	@ 0x58
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	08009da5 	.word	0x08009da5
 8009c4c:	08009ecd 	.word	0x08009ecd
 8009c50:	08009f0b 	.word	0x08009f0b

08009c54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b08f      	sub	sp, #60	@ 0x3c
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c62:	6a3b      	ldr	r3, [r7, #32]
 8009c64:	e853 3f00 	ldrex	r3, [r3]
 8009c68:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	461a      	mov	r2, r3
 8009c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c7c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c82:	e841 2300 	strex	r3, r2, [r1]
 8009c86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d1e6      	bne.n	8009c5c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3308      	adds	r3, #8
 8009c94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	e853 3f00 	ldrex	r3, [r3]
 8009c9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009ca4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3308      	adds	r3, #8
 8009cac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cae:	61ba      	str	r2, [r7, #24]
 8009cb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb2:	6979      	ldr	r1, [r7, #20]
 8009cb4:	69ba      	ldr	r2, [r7, #24]
 8009cb6:	e841 2300 	strex	r3, r2, [r1]
 8009cba:	613b      	str	r3, [r7, #16]
   return(result);
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1e5      	bne.n	8009c8e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2220      	movs	r2, #32
 8009cc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009cca:	bf00      	nop
 8009ccc:	373c      	adds	r7, #60	@ 0x3c
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
	...

08009cd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b095      	sub	sp, #84	@ 0x54
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce8:	e853 3f00 	ldrex	r3, [r3]
 8009cec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cfe:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d00:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d06:	e841 2300 	strex	r3, r2, [r1]
 8009d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1e6      	bne.n	8009ce0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	3308      	adds	r3, #8
 8009d18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1a:	6a3b      	ldr	r3, [r7, #32]
 8009d1c:	e853 3f00 	ldrex	r3, [r3]
 8009d20:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d22:	69fa      	ldr	r2, [r7, #28]
 8009d24:	4b1e      	ldr	r3, [pc, #120]	@ (8009da0 <UART_EndRxTransfer+0xc8>)
 8009d26:	4013      	ands	r3, r2
 8009d28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3308      	adds	r3, #8
 8009d30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d3a:	e841 2300 	strex	r3, r2, [r1]
 8009d3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1e5      	bne.n	8009d12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d118      	bne.n	8009d80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	e853 3f00 	ldrex	r3, [r3]
 8009d5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	f023 0310 	bic.w	r3, r3, #16
 8009d62:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d6c:	61bb      	str	r3, [r7, #24]
 8009d6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d70:	6979      	ldr	r1, [r7, #20]
 8009d72:	69ba      	ldr	r2, [r7, #24]
 8009d74:	e841 2300 	strex	r3, r2, [r1]
 8009d78:	613b      	str	r3, [r7, #16]
   return(result);
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d1e6      	bne.n	8009d4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2220      	movs	r2, #32
 8009d84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009d94:	bf00      	nop
 8009d96:	3754      	adds	r7, #84	@ 0x54
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	effffffe 	.word	0xeffffffe

08009da4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b09c      	sub	sp, #112	@ 0x70
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009db0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	69db      	ldr	r3, [r3, #28]
 8009db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dba:	d071      	beq.n	8009ea0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009dbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dcc:	e853 3f00 	ldrex	r3, [r3]
 8009dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009dda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	461a      	mov	r2, r3
 8009de0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009de2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009de4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009de8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009dea:	e841 2300 	strex	r3, r2, [r1]
 8009dee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009df0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1e6      	bne.n	8009dc4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009df6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3308      	adds	r3, #8
 8009dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e00:	e853 3f00 	ldrex	r3, [r3]
 8009e04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e08:	f023 0301 	bic.w	r3, r3, #1
 8009e0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	3308      	adds	r3, #8
 8009e14:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009e16:	647a      	str	r2, [r7, #68]	@ 0x44
 8009e18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e1e:	e841 2300 	strex	r3, r2, [r1]
 8009e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1e5      	bne.n	8009df6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	3308      	adds	r3, #8
 8009e30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e34:	e853 3f00 	ldrex	r3, [r3]
 8009e38:	623b      	str	r3, [r7, #32]
   return(result);
 8009e3a:	6a3b      	ldr	r3, [r7, #32]
 8009e3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e40:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3308      	adds	r3, #8
 8009e48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e52:	e841 2300 	strex	r3, r2, [r1]
 8009e56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1e5      	bne.n	8009e2a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e60:	2220      	movs	r2, #32
 8009e62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d118      	bne.n	8009ea0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	e853 3f00 	ldrex	r3, [r3]
 8009e7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f023 0310 	bic.w	r3, r3, #16
 8009e82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e8c:	61fb      	str	r3, [r7, #28]
 8009e8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e90:	69b9      	ldr	r1, [r7, #24]
 8009e92:	69fa      	ldr	r2, [r7, #28]
 8009e94:	e841 2300 	strex	r3, r2, [r1]
 8009e98:	617b      	str	r3, [r7, #20]
   return(result);
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1e6      	bne.n	8009e6e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ea0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ea6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ea8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d107      	bne.n	8009ebe <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009eae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009eb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009eb8:	f003 f8a4 	bl	800d004 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ebc:	e002      	b.n	8009ec4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009ebe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ec0:	f7fe fdde 	bl	8008a80 <HAL_UART_RxCpltCallback>
}
 8009ec4:	bf00      	nop
 8009ec6:	3770      	adds	r7, #112	@ 0x70
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2201      	movs	r2, #1
 8009ede:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d109      	bne.n	8009efc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009eee:	085b      	lsrs	r3, r3, #1
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f003 f885 	bl	800d004 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009efa:	e002      	b.n	8009f02 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	f7fe fdc9 	bl	8008a94 <HAL_UART_RxHalfCpltCallback>
}
 8009f02:	bf00      	nop
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b086      	sub	sp, #24
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f16:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f1e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f26:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f32:	2b80      	cmp	r3, #128	@ 0x80
 8009f34:	d109      	bne.n	8009f4a <UART_DMAError+0x40>
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	2b21      	cmp	r3, #33	@ 0x21
 8009f3a:	d106      	bne.n	8009f4a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009f44:	6978      	ldr	r0, [r7, #20]
 8009f46:	f7ff fe85 	bl	8009c54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f54:	2b40      	cmp	r3, #64	@ 0x40
 8009f56:	d109      	bne.n	8009f6c <UART_DMAError+0x62>
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2b22      	cmp	r3, #34	@ 0x22
 8009f5c:	d106      	bne.n	8009f6c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009f66:	6978      	ldr	r0, [r7, #20]
 8009f68:	f7ff feb6 	bl	8009cd8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f72:	f043 0210 	orr.w	r2, r3, #16
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f7c:	6978      	ldr	r0, [r7, #20]
 8009f7e:	f7fe fd93 	bl	8008aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f82:	bf00      	nop
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b084      	sub	sp, #16
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f7fe fd81 	bl	8008aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fa6:	bf00      	nop
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b088      	sub	sp, #32
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	e853 3f00 	ldrex	r3, [r3]
 8009fc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fca:	61fb      	str	r3, [r7, #28]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	61bb      	str	r3, [r7, #24]
 8009fd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd8:	6979      	ldr	r1, [r7, #20]
 8009fda:	69ba      	ldr	r2, [r7, #24]
 8009fdc:	e841 2300 	strex	r3, r2, [r1]
 8009fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1e6      	bne.n	8009fb6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2220      	movs	r2, #32
 8009fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f7fe fd38 	bl	8008a6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ffc:	bf00      	nop
 8009ffe:	3720      	adds	r7, #32
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a00c:	bf00      	nop
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a020:	bf00      	nop
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a034:	bf00      	nop
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d101      	bne.n	800a056 <HAL_UARTEx_DisableFifoMode+0x16>
 800a052:	2302      	movs	r3, #2
 800a054:	e027      	b.n	800a0a6 <HAL_UARTEx_DisableFifoMode+0x66>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2224      	movs	r2, #36	@ 0x24
 800a062:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f022 0201 	bic.w	r2, r2, #1
 800a07c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a084:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2220      	movs	r2, #32
 800a098:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3714      	adds	r7, #20
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr

0800a0b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b084      	sub	sp, #16
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d101      	bne.n	800a0ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	e02d      	b.n	800a126 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2224      	movs	r2, #36	@ 0x24
 800a0d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f022 0201 	bic.w	r2, r2, #1
 800a0f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	683a      	ldr	r2, [r7, #0]
 800a102:	430a      	orrs	r2, r1
 800a104:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f8a4 	bl	800a254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2220      	movs	r2, #32
 800a118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b084      	sub	sp, #16
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
 800a136:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d101      	bne.n	800a146 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a142:	2302      	movs	r3, #2
 800a144:	e02d      	b.n	800a1a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2201      	movs	r2, #1
 800a14a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2224      	movs	r2, #36	@ 0x24
 800a152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f022 0201 	bic.w	r2, r2, #1
 800a16c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	683a      	ldr	r2, [r7, #0]
 800a17e:	430a      	orrs	r2, r1
 800a180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f866 	bl	800a254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2220      	movs	r2, #32
 800a194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b08c      	sub	sp, #48	@ 0x30
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	60f8      	str	r0, [r7, #12]
 800a1b2:	60b9      	str	r1, [r7, #8]
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1be:	2b20      	cmp	r3, #32
 800a1c0:	d142      	bne.n	800a248 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d002      	beq.n	800a1ce <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a1c8:	88fb      	ldrh	r3, [r7, #6]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d101      	bne.n	800a1d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e03b      	b.n	800a24a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a1de:	88fb      	ldrh	r3, [r7, #6]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	68b9      	ldr	r1, [r7, #8]
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f7ff fc8f 	bl	8009b08 <UART_Start_Receive_DMA>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a1f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d124      	bne.n	800a242 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d11d      	bne.n	800a23c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2210      	movs	r2, #16
 800a206:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	e853 3f00 	ldrex	r3, [r3]
 800a214:	617b      	str	r3, [r7, #20]
   return(result);
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	f043 0310 	orr.w	r3, r3, #16
 800a21c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	461a      	mov	r2, r3
 800a224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a226:	627b      	str	r3, [r7, #36]	@ 0x24
 800a228:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22a:	6a39      	ldr	r1, [r7, #32]
 800a22c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a22e:	e841 2300 	strex	r3, r2, [r1]
 800a232:	61fb      	str	r3, [r7, #28]
   return(result);
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d1e6      	bne.n	800a208 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800a23a:	e002      	b.n	800a242 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a242:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a246:	e000      	b.n	800a24a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a248:	2302      	movs	r3, #2
  }
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3730      	adds	r7, #48	@ 0x30
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
	...

0800a254 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a260:	2b00      	cmp	r3, #0
 800a262:	d108      	bne.n	800a276 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2201      	movs	r2, #1
 800a270:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a274:	e031      	b.n	800a2da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a276:	2310      	movs	r3, #16
 800a278:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a27a:	2310      	movs	r3, #16
 800a27c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	0e5b      	lsrs	r3, r3, #25
 800a286:	b2db      	uxtb	r3, r3
 800a288:	f003 0307 	and.w	r3, r3, #7
 800a28c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	0f5b      	lsrs	r3, r3, #29
 800a296:	b2db      	uxtb	r3, r3
 800a298:	f003 0307 	and.w	r3, r3, #7
 800a29c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a29e:	7bbb      	ldrb	r3, [r7, #14]
 800a2a0:	7b3a      	ldrb	r2, [r7, #12]
 800a2a2:	4911      	ldr	r1, [pc, #68]	@ (800a2e8 <UARTEx_SetNbDataToProcess+0x94>)
 800a2a4:	5c8a      	ldrb	r2, [r1, r2]
 800a2a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a2aa:	7b3a      	ldrb	r2, [r7, #12]
 800a2ac:	490f      	ldr	r1, [pc, #60]	@ (800a2ec <UARTEx_SetNbDataToProcess+0x98>)
 800a2ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2bc:	7bfb      	ldrb	r3, [r7, #15]
 800a2be:	7b7a      	ldrb	r2, [r7, #13]
 800a2c0:	4909      	ldr	r1, [pc, #36]	@ (800a2e8 <UARTEx_SetNbDataToProcess+0x94>)
 800a2c2:	5c8a      	ldrb	r2, [r1, r2]
 800a2c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a2c8:	7b7a      	ldrb	r2, [r7, #13]
 800a2ca:	4908      	ldr	r1, [pc, #32]	@ (800a2ec <UARTEx_SetNbDataToProcess+0x98>)
 800a2cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a2da:	bf00      	nop
 800a2dc:	3714      	adds	r7, #20
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	0800d2dc 	.word	0x0800d2dc
 800a2ec:	0800d2e4 	.word	0x0800d2e4

0800a2f0 <__NVIC_SetPriority>:
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	6039      	str	r1, [r7, #0]
 800a2fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a2fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a300:	2b00      	cmp	r3, #0
 800a302:	db0a      	blt.n	800a31a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	b2da      	uxtb	r2, r3
 800a308:	490c      	ldr	r1, [pc, #48]	@ (800a33c <__NVIC_SetPriority+0x4c>)
 800a30a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a30e:	0112      	lsls	r2, r2, #4
 800a310:	b2d2      	uxtb	r2, r2
 800a312:	440b      	add	r3, r1
 800a314:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a318:	e00a      	b.n	800a330 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	4908      	ldr	r1, [pc, #32]	@ (800a340 <__NVIC_SetPriority+0x50>)
 800a320:	88fb      	ldrh	r3, [r7, #6]
 800a322:	f003 030f 	and.w	r3, r3, #15
 800a326:	3b04      	subs	r3, #4
 800a328:	0112      	lsls	r2, r2, #4
 800a32a:	b2d2      	uxtb	r2, r2
 800a32c:	440b      	add	r3, r1
 800a32e:	761a      	strb	r2, [r3, #24]
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	e000e100 	.word	0xe000e100
 800a340:	e000ed00 	.word	0xe000ed00

0800a344 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a344:	b580      	push	{r7, lr}
 800a346:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a348:	4b05      	ldr	r3, [pc, #20]	@ (800a360 <SysTick_Handler+0x1c>)
 800a34a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a34c:	f001 fd46 	bl	800bddc <xTaskGetSchedulerState>
 800a350:	4603      	mov	r3, r0
 800a352:	2b01      	cmp	r3, #1
 800a354:	d001      	beq.n	800a35a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a356:	f002 fb3f 	bl	800c9d8 <xPortSysTickHandler>
  }
}
 800a35a:	bf00      	nop
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	e000e010 	.word	0xe000e010

0800a364 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a364:	b580      	push	{r7, lr}
 800a366:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a368:	2100      	movs	r1, #0
 800a36a:	f06f 0004 	mvn.w	r0, #4
 800a36e:	f7ff ffbf 	bl	800a2f0 <__NVIC_SetPriority>
#endif
}
 800a372:	bf00      	nop
 800a374:	bd80      	pop	{r7, pc}
	...

0800a378 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a37e:	f3ef 8305 	mrs	r3, IPSR
 800a382:	603b      	str	r3, [r7, #0]
  return(result);
 800a384:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a38a:	f06f 0305 	mvn.w	r3, #5
 800a38e:	607b      	str	r3, [r7, #4]
 800a390:	e00c      	b.n	800a3ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a392:	4b0a      	ldr	r3, [pc, #40]	@ (800a3bc <osKernelInitialize+0x44>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d105      	bne.n	800a3a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a39a:	4b08      	ldr	r3, [pc, #32]	@ (800a3bc <osKernelInitialize+0x44>)
 800a39c:	2201      	movs	r2, #1
 800a39e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	607b      	str	r3, [r7, #4]
 800a3a4:	e002      	b.n	800a3ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a3a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a3ac:	687b      	ldr	r3, [r7, #4]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	240002b4 	.word	0x240002b4

0800a3c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3c6:	f3ef 8305 	mrs	r3, IPSR
 800a3ca:	603b      	str	r3, [r7, #0]
  return(result);
 800a3cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <osKernelStart+0x1a>
    stat = osErrorISR;
 800a3d2:	f06f 0305 	mvn.w	r3, #5
 800a3d6:	607b      	str	r3, [r7, #4]
 800a3d8:	e010      	b.n	800a3fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a3da:	4b0b      	ldr	r3, [pc, #44]	@ (800a408 <osKernelStart+0x48>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d109      	bne.n	800a3f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a3e2:	f7ff ffbf 	bl	800a364 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a3e6:	4b08      	ldr	r3, [pc, #32]	@ (800a408 <osKernelStart+0x48>)
 800a3e8:	2202      	movs	r2, #2
 800a3ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a3ec:	f001 f892 	bl	800b514 <vTaskStartScheduler>
      stat = osOK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	607b      	str	r3, [r7, #4]
 800a3f4:	e002      	b.n	800a3fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a3f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a3fc:	687b      	ldr	r3, [r7, #4]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3708      	adds	r7, #8
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	240002b4 	.word	0x240002b4

0800a40c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b08e      	sub	sp, #56	@ 0x38
 800a410:	af04      	add	r7, sp, #16
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a418:	2300      	movs	r3, #0
 800a41a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a41c:	f3ef 8305 	mrs	r3, IPSR
 800a420:	617b      	str	r3, [r7, #20]
  return(result);
 800a422:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a424:	2b00      	cmp	r3, #0
 800a426:	d17e      	bne.n	800a526 <osThreadNew+0x11a>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d07b      	beq.n	800a526 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a42e:	2380      	movs	r3, #128	@ 0x80
 800a430:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a432:	2318      	movs	r3, #24
 800a434:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a436:	2300      	movs	r3, #0
 800a438:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a43a:	f04f 33ff 	mov.w	r3, #4294967295
 800a43e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d045      	beq.n	800a4d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <osThreadNew+0x48>
        name = attr->name;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d008      	beq.n	800a47a <osThreadNew+0x6e>
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	2b38      	cmp	r3, #56	@ 0x38
 800a46c:	d805      	bhi.n	800a47a <osThreadNew+0x6e>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	f003 0301 	and.w	r3, r3, #1
 800a476:	2b00      	cmp	r3, #0
 800a478:	d001      	beq.n	800a47e <osThreadNew+0x72>
        return (NULL);
 800a47a:	2300      	movs	r3, #0
 800a47c:	e054      	b.n	800a528 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d003      	beq.n	800a48e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	089b      	lsrs	r3, r3, #2
 800a48c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00e      	beq.n	800a4b4 <osThreadNew+0xa8>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	2ba7      	cmp	r3, #167	@ 0xa7
 800a49c:	d90a      	bls.n	800a4b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d006      	beq.n	800a4b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	695b      	ldr	r3, [r3, #20]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d002      	beq.n	800a4b4 <osThreadNew+0xa8>
        mem = 1;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	61bb      	str	r3, [r7, #24]
 800a4b2:	e010      	b.n	800a4d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d10c      	bne.n	800a4d6 <osThreadNew+0xca>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d108      	bne.n	800a4d6 <osThreadNew+0xca>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	691b      	ldr	r3, [r3, #16]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d104      	bne.n	800a4d6 <osThreadNew+0xca>
          mem = 0;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	61bb      	str	r3, [r7, #24]
 800a4d0:	e001      	b.n	800a4d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d110      	bne.n	800a4fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a4e4:	9202      	str	r2, [sp, #8]
 800a4e6:	9301      	str	r3, [sp, #4]
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	9300      	str	r3, [sp, #0]
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	6a3a      	ldr	r2, [r7, #32]
 800a4f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f000 fe1a 	bl	800b12c <xTaskCreateStatic>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	613b      	str	r3, [r7, #16]
 800a4fc:	e013      	b.n	800a526 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d110      	bne.n	800a526 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a504:	6a3b      	ldr	r3, [r7, #32]
 800a506:	b29a      	uxth	r2, r3
 800a508:	f107 0310 	add.w	r3, r7, #16
 800a50c:	9301      	str	r3, [sp, #4]
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f000 fe68 	bl	800b1ec <xTaskCreate>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d001      	beq.n	800a526 <osThreadNew+0x11a>
            hTask = NULL;
 800a522:	2300      	movs	r3, #0
 800a524:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a526:	693b      	ldr	r3, [r7, #16]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3728      	adds	r7, #40	@ 0x28
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a538:	f3ef 8305 	mrs	r3, IPSR
 800a53c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a53e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a540:	2b00      	cmp	r3, #0
 800a542:	d003      	beq.n	800a54c <osDelay+0x1c>
    stat = osErrorISR;
 800a544:	f06f 0305 	mvn.w	r3, #5
 800a548:	60fb      	str	r3, [r7, #12]
 800a54a:	e007      	b.n	800a55c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a54c:	2300      	movs	r3, #0
 800a54e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d002      	beq.n	800a55c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 ffa6 	bl	800b4a8 <vTaskDelay>
    }
  }

  return (stat);
 800a55c:	68fb      	ldr	r3, [r7, #12]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
	...

0800a568 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a568:	b480      	push	{r7}
 800a56a:	b085      	sub	sp, #20
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	4a07      	ldr	r2, [pc, #28]	@ (800a594 <vApplicationGetIdleTaskMemory+0x2c>)
 800a578:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	4a06      	ldr	r2, [pc, #24]	@ (800a598 <vApplicationGetIdleTaskMemory+0x30>)
 800a57e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2280      	movs	r2, #128	@ 0x80
 800a584:	601a      	str	r2, [r3, #0]
}
 800a586:	bf00      	nop
 800a588:	3714      	adds	r7, #20
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	240002b8 	.word	0x240002b8
 800a598:	24000360 	.word	0x24000360

0800a59c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	4a07      	ldr	r2, [pc, #28]	@ (800a5c8 <vApplicationGetTimerTaskMemory+0x2c>)
 800a5ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	4a06      	ldr	r2, [pc, #24]	@ (800a5cc <vApplicationGetTimerTaskMemory+0x30>)
 800a5b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a5ba:	601a      	str	r2, [r3, #0]
}
 800a5bc:	bf00      	nop
 800a5be:	3714      	adds	r7, #20
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	24000560 	.word	0x24000560
 800a5cc:	24000608 	.word	0x24000608

0800a5d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f103 0208 	add.w	r2, r3, #8
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f103 0208 	add.w	r2, r3, #8
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f103 0208 	add.w	r2, r3, #8
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a604:	bf00      	nop
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a61e:	bf00      	nop
 800a620:	370c      	adds	r7, #12
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr

0800a62a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a62a:	b480      	push	{r7}
 800a62c:	b085      	sub	sp, #20
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
 800a632:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	689a      	ldr	r2, [r3, #8]
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	683a      	ldr	r2, [r7, #0]
 800a64e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	1c5a      	adds	r2, r3, #1
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	601a      	str	r2, [r3, #0]
}
 800a666:	bf00      	nop
 800a668:	3714      	adds	r7, #20
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a672:	b480      	push	{r7}
 800a674:	b085      	sub	sp, #20
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a688:	d103      	bne.n	800a692 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	60fb      	str	r3, [r7, #12]
 800a690:	e00c      	b.n	800a6ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	3308      	adds	r3, #8
 800a696:	60fb      	str	r3, [r7, #12]
 800a698:	e002      	b.n	800a6a0 <vListInsert+0x2e>
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	60fb      	str	r3, [r7, #12]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68ba      	ldr	r2, [r7, #8]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d2f6      	bcs.n	800a69a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	685a      	ldr	r2, [r3, #4]
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	683a      	ldr	r2, [r7, #0]
 800a6ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	683a      	ldr	r2, [r7, #0]
 800a6c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	1c5a      	adds	r2, r3, #1
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	601a      	str	r2, [r3, #0]
}
 800a6d8:	bf00      	nop
 800a6da:	3714      	adds	r7, #20
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	6892      	ldr	r2, [r2, #8]
 800a6fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	6852      	ldr	r2, [r2, #4]
 800a704:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d103      	bne.n	800a718 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	689a      	ldr	r2, [r3, #8]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	1e5a      	subs	r2, r3, #1
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3714      	adds	r7, #20
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d10b      	bne.n	800a764 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a750:	f383 8811 	msr	BASEPRI, r3
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a75e:	bf00      	nop
 800a760:	bf00      	nop
 800a762:	e7fd      	b.n	800a760 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a764:	f002 f8a8 	bl	800c8b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a770:	68f9      	ldr	r1, [r7, #12]
 800a772:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a774:	fb01 f303 	mul.w	r3, r1, r3
 800a778:	441a      	add	r2, r3
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a794:	3b01      	subs	r3, #1
 800a796:	68f9      	ldr	r1, [r7, #12]
 800a798:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a79a:	fb01 f303 	mul.w	r3, r1, r3
 800a79e:	441a      	add	r2, r3
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	22ff      	movs	r2, #255	@ 0xff
 800a7a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	22ff      	movs	r2, #255	@ 0xff
 800a7b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d114      	bne.n	800a7e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d01a      	beq.n	800a7f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	3310      	adds	r3, #16
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f001 f942 	bl	800ba50 <xTaskRemoveFromEventList>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d012      	beq.n	800a7f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a808 <xQueueGenericReset+0xd0>)
 800a7d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7d8:	601a      	str	r2, [r3, #0]
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	e009      	b.n	800a7f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	3310      	adds	r3, #16
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7ff fef1 	bl	800a5d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	3324      	adds	r3, #36	@ 0x24
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff feec 	bl	800a5d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a7f8:	f002 f890 	bl	800c91c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a7fc:	2301      	movs	r3, #1
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	e000ed04 	.word	0xe000ed04

0800a80c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b08e      	sub	sp, #56	@ 0x38
 800a810:	af02      	add	r7, sp, #8
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10b      	bne.n	800a838 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a832:	bf00      	nop
 800a834:	bf00      	nop
 800a836:	e7fd      	b.n	800a834 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10b      	bne.n	800a856 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a850:	bf00      	nop
 800a852:	bf00      	nop
 800a854:	e7fd      	b.n	800a852 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <xQueueGenericCreateStatic+0x56>
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d001      	beq.n	800a866 <xQueueGenericCreateStatic+0x5a>
 800a862:	2301      	movs	r3, #1
 800a864:	e000      	b.n	800a868 <xQueueGenericCreateStatic+0x5c>
 800a866:	2300      	movs	r3, #0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d10b      	bne.n	800a884 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a870:	f383 8811 	msr	BASEPRI, r3
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	623b      	str	r3, [r7, #32]
}
 800a87e:	bf00      	nop
 800a880:	bf00      	nop
 800a882:	e7fd      	b.n	800a880 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d102      	bne.n	800a890 <xQueueGenericCreateStatic+0x84>
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d101      	bne.n	800a894 <xQueueGenericCreateStatic+0x88>
 800a890:	2301      	movs	r3, #1
 800a892:	e000      	b.n	800a896 <xQueueGenericCreateStatic+0x8a>
 800a894:	2300      	movs	r3, #0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10b      	bne.n	800a8b2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a89e:	f383 8811 	msr	BASEPRI, r3
 800a8a2:	f3bf 8f6f 	isb	sy
 800a8a6:	f3bf 8f4f 	dsb	sy
 800a8aa:	61fb      	str	r3, [r7, #28]
}
 800a8ac:	bf00      	nop
 800a8ae:	bf00      	nop
 800a8b0:	e7fd      	b.n	800a8ae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a8b2:	2350      	movs	r3, #80	@ 0x50
 800a8b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	2b50      	cmp	r3, #80	@ 0x50
 800a8ba:	d00b      	beq.n	800a8d4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a8bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	61bb      	str	r3, [r7, #24]
}
 800a8ce:	bf00      	nop
 800a8d0:	bf00      	nop
 800a8d2:	e7fd      	b.n	800a8d0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a8d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00d      	beq.n	800a8fc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a8e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	68b9      	ldr	r1, [r7, #8]
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f000 f805 	bl	800a906 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3730      	adds	r7, #48	@ 0x30
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b084      	sub	sp, #16
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	60f8      	str	r0, [r7, #12]
 800a90e:	60b9      	str	r1, [r7, #8]
 800a910:	607a      	str	r2, [r7, #4]
 800a912:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d103      	bne.n	800a922 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	69ba      	ldr	r2, [r7, #24]
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	e002      	b.n	800a928 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a934:	2101      	movs	r1, #1
 800a936:	69b8      	ldr	r0, [r7, #24]
 800a938:	f7ff fefe 	bl	800a738 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	78fa      	ldrb	r2, [r7, #3]
 800a940:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a944:	bf00      	nop
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b08e      	sub	sp, #56	@ 0x38
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
 800a958:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a95a:	2300      	movs	r3, #0
 800a95c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10b      	bne.n	800a980 <xQueueGenericSend+0x34>
	__asm volatile
 800a968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a96c:	f383 8811 	msr	BASEPRI, r3
 800a970:	f3bf 8f6f 	isb	sy
 800a974:	f3bf 8f4f 	dsb	sy
 800a978:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a97a:	bf00      	nop
 800a97c:	bf00      	nop
 800a97e:	e7fd      	b.n	800a97c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d103      	bne.n	800a98e <xQueueGenericSend+0x42>
 800a986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d101      	bne.n	800a992 <xQueueGenericSend+0x46>
 800a98e:	2301      	movs	r3, #1
 800a990:	e000      	b.n	800a994 <xQueueGenericSend+0x48>
 800a992:	2300      	movs	r3, #0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10b      	bne.n	800a9b0 <xQueueGenericSend+0x64>
	__asm volatile
 800a998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a99c:	f383 8811 	msr	BASEPRI, r3
 800a9a0:	f3bf 8f6f 	isb	sy
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a9aa:	bf00      	nop
 800a9ac:	bf00      	nop
 800a9ae:	e7fd      	b.n	800a9ac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	2b02      	cmp	r3, #2
 800a9b4:	d103      	bne.n	800a9be <xQueueGenericSend+0x72>
 800a9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d101      	bne.n	800a9c2 <xQueueGenericSend+0x76>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e000      	b.n	800a9c4 <xQueueGenericSend+0x78>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d10b      	bne.n	800a9e0 <xQueueGenericSend+0x94>
	__asm volatile
 800a9c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9cc:	f383 8811 	msr	BASEPRI, r3
 800a9d0:	f3bf 8f6f 	isb	sy
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	623b      	str	r3, [r7, #32]
}
 800a9da:	bf00      	nop
 800a9dc:	bf00      	nop
 800a9de:	e7fd      	b.n	800a9dc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9e0:	f001 f9fc 	bl	800bddc <xTaskGetSchedulerState>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d102      	bne.n	800a9f0 <xQueueGenericSend+0xa4>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d101      	bne.n	800a9f4 <xQueueGenericSend+0xa8>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e000      	b.n	800a9f6 <xQueueGenericSend+0xaa>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10b      	bne.n	800aa12 <xQueueGenericSend+0xc6>
	__asm volatile
 800a9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9fe:	f383 8811 	msr	BASEPRI, r3
 800aa02:	f3bf 8f6f 	isb	sy
 800aa06:	f3bf 8f4f 	dsb	sy
 800aa0a:	61fb      	str	r3, [r7, #28]
}
 800aa0c:	bf00      	nop
 800aa0e:	bf00      	nop
 800aa10:	e7fd      	b.n	800aa0e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa12:	f001 ff51 	bl	800c8b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d302      	bcc.n	800aa28 <xQueueGenericSend+0xdc>
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d129      	bne.n	800aa7c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa28:	683a      	ldr	r2, [r7, #0]
 800aa2a:	68b9      	ldr	r1, [r7, #8]
 800aa2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa2e:	f000 fa0f 	bl	800ae50 <prvCopyDataToQueue>
 800aa32:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d010      	beq.n	800aa5e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3e:	3324      	adds	r3, #36	@ 0x24
 800aa40:	4618      	mov	r0, r3
 800aa42:	f001 f805 	bl	800ba50 <xTaskRemoveFromEventList>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d013      	beq.n	800aa74 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aa4c:	4b3f      	ldr	r3, [pc, #252]	@ (800ab4c <xQueueGenericSend+0x200>)
 800aa4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa52:	601a      	str	r2, [r3, #0]
 800aa54:	f3bf 8f4f 	dsb	sy
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	e00a      	b.n	800aa74 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aa5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d007      	beq.n	800aa74 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aa64:	4b39      	ldr	r3, [pc, #228]	@ (800ab4c <xQueueGenericSend+0x200>)
 800aa66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aa74:	f001 ff52 	bl	800c91c <vPortExitCritical>
				return pdPASS;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e063      	b.n	800ab44 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d103      	bne.n	800aa8a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa82:	f001 ff4b 	bl	800c91c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aa86:	2300      	movs	r3, #0
 800aa88:	e05c      	b.n	800ab44 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d106      	bne.n	800aa9e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa90:	f107 0314 	add.w	r3, r7, #20
 800aa94:	4618      	mov	r0, r3
 800aa96:	f001 f83f 	bl	800bb18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa9e:	f001 ff3d 	bl	800c91c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aaa2:	f000 fda7 	bl	800b5f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aaa6:	f001 ff07 	bl	800c8b8 <vPortEnterCritical>
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aab0:	b25b      	sxtb	r3, r3
 800aab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab6:	d103      	bne.n	800aac0 <xQueueGenericSend+0x174>
 800aab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaba:	2200      	movs	r2, #0
 800aabc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aac6:	b25b      	sxtb	r3, r3
 800aac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aacc:	d103      	bne.n	800aad6 <xQueueGenericSend+0x18a>
 800aace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad0:	2200      	movs	r2, #0
 800aad2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aad6:	f001 ff21 	bl	800c91c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aada:	1d3a      	adds	r2, r7, #4
 800aadc:	f107 0314 	add.w	r3, r7, #20
 800aae0:	4611      	mov	r1, r2
 800aae2:	4618      	mov	r0, r3
 800aae4:	f001 f82e 	bl	800bb44 <xTaskCheckForTimeOut>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d124      	bne.n	800ab38 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aaee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aaf0:	f000 faa6 	bl	800b040 <prvIsQueueFull>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d018      	beq.n	800ab2c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafc:	3310      	adds	r3, #16
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	4611      	mov	r1, r2
 800ab02:	4618      	mov	r0, r3
 800ab04:	f000 ff52 	bl	800b9ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ab08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab0a:	f000 fa31 	bl	800af70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ab0e:	f000 fd7f 	bl	800b610 <xTaskResumeAll>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f47f af7c 	bne.w	800aa12 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ab1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ab4c <xQueueGenericSend+0x200>)
 800ab1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab20:	601a      	str	r2, [r3, #0]
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	e772      	b.n	800aa12 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ab2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab2e:	f000 fa1f 	bl	800af70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab32:	f000 fd6d 	bl	800b610 <xTaskResumeAll>
 800ab36:	e76c      	b.n	800aa12 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ab38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab3a:	f000 fa19 	bl	800af70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab3e:	f000 fd67 	bl	800b610 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ab42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3738      	adds	r7, #56	@ 0x38
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	e000ed04 	.word	0xe000ed04

0800ab50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b090      	sub	sp, #64	@ 0x40
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
 800ab5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ab62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d10b      	bne.n	800ab80 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ab68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab6c:	f383 8811 	msr	BASEPRI, r3
 800ab70:	f3bf 8f6f 	isb	sy
 800ab74:	f3bf 8f4f 	dsb	sy
 800ab78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ab7a:	bf00      	nop
 800ab7c:	bf00      	nop
 800ab7e:	e7fd      	b.n	800ab7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d103      	bne.n	800ab8e <xQueueGenericSendFromISR+0x3e>
 800ab86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d101      	bne.n	800ab92 <xQueueGenericSendFromISR+0x42>
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e000      	b.n	800ab94 <xQueueGenericSendFromISR+0x44>
 800ab92:	2300      	movs	r3, #0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10b      	bne.n	800abb0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ab98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab9c:	f383 8811 	msr	BASEPRI, r3
 800aba0:	f3bf 8f6f 	isb	sy
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800abaa:	bf00      	nop
 800abac:	bf00      	nop
 800abae:	e7fd      	b.n	800abac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	d103      	bne.n	800abbe <xQueueGenericSendFromISR+0x6e>
 800abb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d101      	bne.n	800abc2 <xQueueGenericSendFromISR+0x72>
 800abbe:	2301      	movs	r3, #1
 800abc0:	e000      	b.n	800abc4 <xQueueGenericSendFromISR+0x74>
 800abc2:	2300      	movs	r3, #0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10b      	bne.n	800abe0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800abc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abcc:	f383 8811 	msr	BASEPRI, r3
 800abd0:	f3bf 8f6f 	isb	sy
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	623b      	str	r3, [r7, #32]
}
 800abda:	bf00      	nop
 800abdc:	bf00      	nop
 800abde:	e7fd      	b.n	800abdc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abe0:	f001 ff4a 	bl	800ca78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800abe4:	f3ef 8211 	mrs	r2, BASEPRI
 800abe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abec:	f383 8811 	msr	BASEPRI, r3
 800abf0:	f3bf 8f6f 	isb	sy
 800abf4:	f3bf 8f4f 	dsb	sy
 800abf8:	61fa      	str	r2, [r7, #28]
 800abfa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800abfc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abfe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d302      	bcc.n	800ac12 <xQueueGenericSendFromISR+0xc2>
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d12f      	bne.n	800ac72 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ac12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac20:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	68b9      	ldr	r1, [r7, #8]
 800ac26:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ac28:	f000 f912 	bl	800ae50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac2c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ac30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac34:	d112      	bne.n	800ac5c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d016      	beq.n	800ac6c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac40:	3324      	adds	r3, #36	@ 0x24
 800ac42:	4618      	mov	r0, r3
 800ac44:	f000 ff04 	bl	800ba50 <xTaskRemoveFromEventList>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d00e      	beq.n	800ac6c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00b      	beq.n	800ac6c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2201      	movs	r2, #1
 800ac58:	601a      	str	r2, [r3, #0]
 800ac5a:	e007      	b.n	800ac6c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ac60:	3301      	adds	r3, #1
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	b25a      	sxtb	r2, r3
 800ac66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ac70:	e001      	b.n	800ac76 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac72:	2300      	movs	r3, #0
 800ac74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac78:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac80:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3740      	adds	r7, #64	@ 0x40
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b08c      	sub	sp, #48	@ 0x30
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d10b      	bne.n	800acbe <xQueueReceive+0x32>
	__asm volatile
 800aca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acaa:	f383 8811 	msr	BASEPRI, r3
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f3bf 8f4f 	dsb	sy
 800acb6:	623b      	str	r3, [r7, #32]
}
 800acb8:	bf00      	nop
 800acba:	bf00      	nop
 800acbc:	e7fd      	b.n	800acba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d103      	bne.n	800accc <xQueueReceive+0x40>
 800acc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d101      	bne.n	800acd0 <xQueueReceive+0x44>
 800accc:	2301      	movs	r3, #1
 800acce:	e000      	b.n	800acd2 <xQueueReceive+0x46>
 800acd0:	2300      	movs	r3, #0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d10b      	bne.n	800acee <xQueueReceive+0x62>
	__asm volatile
 800acd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acda:	f383 8811 	msr	BASEPRI, r3
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	f3bf 8f4f 	dsb	sy
 800ace6:	61fb      	str	r3, [r7, #28]
}
 800ace8:	bf00      	nop
 800acea:	bf00      	nop
 800acec:	e7fd      	b.n	800acea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acee:	f001 f875 	bl	800bddc <xTaskGetSchedulerState>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d102      	bne.n	800acfe <xQueueReceive+0x72>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d101      	bne.n	800ad02 <xQueueReceive+0x76>
 800acfe:	2301      	movs	r3, #1
 800ad00:	e000      	b.n	800ad04 <xQueueReceive+0x78>
 800ad02:	2300      	movs	r3, #0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10b      	bne.n	800ad20 <xQueueReceive+0x94>
	__asm volatile
 800ad08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad0c:	f383 8811 	msr	BASEPRI, r3
 800ad10:	f3bf 8f6f 	isb	sy
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	61bb      	str	r3, [r7, #24]
}
 800ad1a:	bf00      	nop
 800ad1c:	bf00      	nop
 800ad1e:	e7fd      	b.n	800ad1c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad20:	f001 fdca 	bl	800c8b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad28:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d01f      	beq.n	800ad70 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad30:	68b9      	ldr	r1, [r7, #8]
 800ad32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad34:	f000 f8f6 	bl	800af24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad3a:	1e5a      	subs	r2, r3, #1
 800ad3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad3e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad42:	691b      	ldr	r3, [r3, #16]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00f      	beq.n	800ad68 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad4a:	3310      	adds	r3, #16
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f000 fe7f 	bl	800ba50 <xTaskRemoveFromEventList>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d007      	beq.n	800ad68 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad58:	4b3c      	ldr	r3, [pc, #240]	@ (800ae4c <xQueueReceive+0x1c0>)
 800ad5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad5e:	601a      	str	r2, [r3, #0]
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad68:	f001 fdd8 	bl	800c91c <vPortExitCritical>
				return pdPASS;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e069      	b.n	800ae44 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d103      	bne.n	800ad7e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad76:	f001 fdd1 	bl	800c91c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	e062      	b.n	800ae44 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d106      	bne.n	800ad92 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad84:	f107 0310 	add.w	r3, r7, #16
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 fec5 	bl	800bb18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad92:	f001 fdc3 	bl	800c91c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad96:	f000 fc2d 	bl	800b5f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad9a:	f001 fd8d 	bl	800c8b8 <vPortEnterCritical>
 800ad9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ada4:	b25b      	sxtb	r3, r3
 800ada6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adaa:	d103      	bne.n	800adb4 <xQueueReceive+0x128>
 800adac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800adb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800adba:	b25b      	sxtb	r3, r3
 800adbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc0:	d103      	bne.n	800adca <xQueueReceive+0x13e>
 800adc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adca:	f001 fda7 	bl	800c91c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800adce:	1d3a      	adds	r2, r7, #4
 800add0:	f107 0310 	add.w	r3, r7, #16
 800add4:	4611      	mov	r1, r2
 800add6:	4618      	mov	r0, r3
 800add8:	f000 feb4 	bl	800bb44 <xTaskCheckForTimeOut>
 800addc:	4603      	mov	r3, r0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d123      	bne.n	800ae2a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ade2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ade4:	f000 f916 	bl	800b014 <prvIsQueueEmpty>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d017      	beq.n	800ae1e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800adee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf0:	3324      	adds	r3, #36	@ 0x24
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	4611      	mov	r1, r2
 800adf6:	4618      	mov	r0, r3
 800adf8:	f000 fdd8 	bl	800b9ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800adfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adfe:	f000 f8b7 	bl	800af70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae02:	f000 fc05 	bl	800b610 <xTaskResumeAll>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d189      	bne.n	800ad20 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ae0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ae4c <xQueueReceive+0x1c0>)
 800ae0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae12:	601a      	str	r2, [r3, #0]
 800ae14:	f3bf 8f4f 	dsb	sy
 800ae18:	f3bf 8f6f 	isb	sy
 800ae1c:	e780      	b.n	800ad20 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae20:	f000 f8a6 	bl	800af70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae24:	f000 fbf4 	bl	800b610 <xTaskResumeAll>
 800ae28:	e77a      	b.n	800ad20 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae2c:	f000 f8a0 	bl	800af70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae30:	f000 fbee 	bl	800b610 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae36:	f000 f8ed 	bl	800b014 <prvIsQueueEmpty>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f43f af6f 	beq.w	800ad20 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae42:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3730      	adds	r7, #48	@ 0x30
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	e000ed04 	.word	0xe000ed04

0800ae50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b086      	sub	sp, #24
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10d      	bne.n	800ae8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d14d      	bne.n	800af12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f000 ffcc 	bl	800be18 <xTaskPriorityDisinherit>
 800ae80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2200      	movs	r2, #0
 800ae86:	609a      	str	r2, [r3, #8]
 800ae88:	e043      	b.n	800af12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d119      	bne.n	800aec4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6858      	ldr	r0, [r3, #4]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae98:	461a      	mov	r2, r3
 800ae9a:	68b9      	ldr	r1, [r7, #8]
 800ae9c:	f002 f972 	bl	800d184 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	685a      	ldr	r2, [r3, #4]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aea8:	441a      	add	r2, r3
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	685a      	ldr	r2, [r3, #4]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d32b      	bcc.n	800af12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	605a      	str	r2, [r3, #4]
 800aec2:	e026      	b.n	800af12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	68d8      	ldr	r0, [r3, #12]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aecc:	461a      	mov	r2, r3
 800aece:	68b9      	ldr	r1, [r7, #8]
 800aed0:	f002 f958 	bl	800d184 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	68da      	ldr	r2, [r3, #12]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aedc:	425b      	negs	r3, r3
 800aede:	441a      	add	r2, r3
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	68da      	ldr	r2, [r3, #12]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d207      	bcs.n	800af00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	689a      	ldr	r2, [r3, #8]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aef8:	425b      	negs	r3, r3
 800aefa:	441a      	add	r2, r3
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b02      	cmp	r3, #2
 800af04:	d105      	bne.n	800af12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d002      	beq.n	800af12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	3b01      	subs	r3, #1
 800af10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	1c5a      	adds	r2, r3, #1
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800af1a:	697b      	ldr	r3, [r7, #20]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3718      	adds	r7, #24
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af32:	2b00      	cmp	r3, #0
 800af34:	d018      	beq.n	800af68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	68da      	ldr	r2, [r3, #12]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af3e:	441a      	add	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68da      	ldr	r2, [r3, #12]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d303      	bcc.n	800af58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	68d9      	ldr	r1, [r3, #12]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af60:	461a      	mov	r2, r3
 800af62:	6838      	ldr	r0, [r7, #0]
 800af64:	f002 f90e 	bl	800d184 <memcpy>
	}
}
 800af68:	bf00      	nop
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af78:	f001 fc9e 	bl	800c8b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af84:	e011      	b.n	800afaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d012      	beq.n	800afb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	3324      	adds	r3, #36	@ 0x24
 800af92:	4618      	mov	r0, r3
 800af94:	f000 fd5c 	bl	800ba50 <xTaskRemoveFromEventList>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d001      	beq.n	800afa2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af9e:	f000 fe35 	bl	800bc0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800afa2:	7bfb      	ldrb	r3, [r7, #15]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	dce9      	bgt.n	800af86 <prvUnlockQueue+0x16>
 800afb2:	e000      	b.n	800afb6 <prvUnlockQueue+0x46>
					break;
 800afb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	22ff      	movs	r2, #255	@ 0xff
 800afba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800afbe:	f001 fcad 	bl	800c91c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800afc2:	f001 fc79 	bl	800c8b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800afcc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afce:	e011      	b.n	800aff4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	691b      	ldr	r3, [r3, #16]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d012      	beq.n	800affe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	3310      	adds	r3, #16
 800afdc:	4618      	mov	r0, r3
 800afde:	f000 fd37 	bl	800ba50 <xTaskRemoveFromEventList>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d001      	beq.n	800afec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800afe8:	f000 fe10 	bl	800bc0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800afec:	7bbb      	ldrb	r3, [r7, #14]
 800afee:	3b01      	subs	r3, #1
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aff4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	dce9      	bgt.n	800afd0 <prvUnlockQueue+0x60>
 800affc:	e000      	b.n	800b000 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800affe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	22ff      	movs	r2, #255	@ 0xff
 800b004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b008:	f001 fc88 	bl	800c91c <vPortExitCritical>
}
 800b00c:	bf00      	nop
 800b00e:	3710      	adds	r7, #16
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b01c:	f001 fc4c 	bl	800c8b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b024:	2b00      	cmp	r3, #0
 800b026:	d102      	bne.n	800b02e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b028:	2301      	movs	r3, #1
 800b02a:	60fb      	str	r3, [r7, #12]
 800b02c:	e001      	b.n	800b032 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b02e:	2300      	movs	r3, #0
 800b030:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b032:	f001 fc73 	bl	800c91c <vPortExitCritical>

	return xReturn;
 800b036:	68fb      	ldr	r3, [r7, #12]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b048:	f001 fc36 	bl	800c8b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b054:	429a      	cmp	r2, r3
 800b056:	d102      	bne.n	800b05e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b058:	2301      	movs	r3, #1
 800b05a:	60fb      	str	r3, [r7, #12]
 800b05c:	e001      	b.n	800b062 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b05e:	2300      	movs	r3, #0
 800b060:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b062:	f001 fc5b 	bl	800c91c <vPortExitCritical>

	return xReturn;
 800b066:	68fb      	ldr	r3, [r7, #12]
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b070:	b480      	push	{r7}
 800b072:	b085      	sub	sp, #20
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b07a:	2300      	movs	r3, #0
 800b07c:	60fb      	str	r3, [r7, #12]
 800b07e:	e014      	b.n	800b0aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b080:	4a0f      	ldr	r2, [pc, #60]	@ (800b0c0 <vQueueAddToRegistry+0x50>)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d10b      	bne.n	800b0a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b08c:	490c      	ldr	r1, [pc, #48]	@ (800b0c0 <vQueueAddToRegistry+0x50>)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	683a      	ldr	r2, [r7, #0]
 800b092:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b096:	4a0a      	ldr	r2, [pc, #40]	@ (800b0c0 <vQueueAddToRegistry+0x50>)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	00db      	lsls	r3, r3, #3
 800b09c:	4413      	add	r3, r2
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b0a2:	e006      	b.n	800b0b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	60fb      	str	r3, [r7, #12]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2b07      	cmp	r3, #7
 800b0ae:	d9e7      	bls.n	800b080 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b0b0:	bf00      	nop
 800b0b2:	bf00      	nop
 800b0b4:	3714      	adds	r7, #20
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	24000a08 	.word	0x24000a08

0800b0c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b086      	sub	sp, #24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0d4:	f001 fbf0 	bl	800c8b8 <vPortEnterCritical>
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0de:	b25b      	sxtb	r3, r3
 800b0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e4:	d103      	bne.n	800b0ee <vQueueWaitForMessageRestricted+0x2a>
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0f4:	b25b      	sxtb	r3, r3
 800b0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fa:	d103      	bne.n	800b104 <vQueueWaitForMessageRestricted+0x40>
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b104:	f001 fc0a 	bl	800c91c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d106      	bne.n	800b11e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	3324      	adds	r3, #36	@ 0x24
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	68b9      	ldr	r1, [r7, #8]
 800b118:	4618      	mov	r0, r3
 800b11a:	f000 fc6d 	bl	800b9f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b11e:	6978      	ldr	r0, [r7, #20]
 800b120:	f7ff ff26 	bl	800af70 <prvUnlockQueue>
	}
 800b124:	bf00      	nop
 800b126:	3718      	adds	r7, #24
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b08e      	sub	sp, #56	@ 0x38
 800b130:	af04      	add	r7, sp, #16
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
 800b138:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b13a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d10b      	bne.n	800b158 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	623b      	str	r3, [r7, #32]
}
 800b152:	bf00      	nop
 800b154:	bf00      	nop
 800b156:	e7fd      	b.n	800b154 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d10b      	bne.n	800b176 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b162:	f383 8811 	msr	BASEPRI, r3
 800b166:	f3bf 8f6f 	isb	sy
 800b16a:	f3bf 8f4f 	dsb	sy
 800b16e:	61fb      	str	r3, [r7, #28]
}
 800b170:	bf00      	nop
 800b172:	bf00      	nop
 800b174:	e7fd      	b.n	800b172 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b176:	23a8      	movs	r3, #168	@ 0xa8
 800b178:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	2ba8      	cmp	r3, #168	@ 0xa8
 800b17e:	d00b      	beq.n	800b198 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b184:	f383 8811 	msr	BASEPRI, r3
 800b188:	f3bf 8f6f 	isb	sy
 800b18c:	f3bf 8f4f 	dsb	sy
 800b190:	61bb      	str	r3, [r7, #24]
}
 800b192:	bf00      	nop
 800b194:	bf00      	nop
 800b196:	e7fd      	b.n	800b194 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b198:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d01e      	beq.n	800b1de <xTaskCreateStatic+0xb2>
 800b1a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d01b      	beq.n	800b1de <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b2:	2202      	movs	r2, #2
 800b1b4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	9303      	str	r3, [sp, #12]
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1be:	9302      	str	r3, [sp, #8]
 800b1c0:	f107 0314 	add.w	r3, r7, #20
 800b1c4:	9301      	str	r3, [sp, #4]
 800b1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c8:	9300      	str	r3, [sp, #0]
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	68b9      	ldr	r1, [r7, #8]
 800b1d0:	68f8      	ldr	r0, [r7, #12]
 800b1d2:	f000 f851 	bl	800b278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b1d8:	f000 f8f6 	bl	800b3c8 <prvAddNewTaskToReadyList>
 800b1dc:	e001      	b.n	800b1e2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b1e2:	697b      	ldr	r3, [r7, #20]
	}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3728      	adds	r7, #40	@ 0x28
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b08c      	sub	sp, #48	@ 0x30
 800b1f0:	af04      	add	r7, sp, #16
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	603b      	str	r3, [r7, #0]
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b1fc:	88fb      	ldrh	r3, [r7, #6]
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	4618      	mov	r0, r3
 800b202:	f001 fc7b 	bl	800cafc <pvPortMalloc>
 800b206:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00e      	beq.n	800b22c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b20e:	20a8      	movs	r0, #168	@ 0xa8
 800b210:	f001 fc74 	bl	800cafc <pvPortMalloc>
 800b214:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d003      	beq.n	800b224 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	697a      	ldr	r2, [r7, #20]
 800b220:	631a      	str	r2, [r3, #48]	@ 0x30
 800b222:	e005      	b.n	800b230 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b224:	6978      	ldr	r0, [r7, #20]
 800b226:	f001 fd37 	bl	800cc98 <vPortFree>
 800b22a:	e001      	b.n	800b230 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b22c:	2300      	movs	r3, #0
 800b22e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d017      	beq.n	800b266 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	2200      	movs	r2, #0
 800b23a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b23e:	88fa      	ldrh	r2, [r7, #6]
 800b240:	2300      	movs	r3, #0
 800b242:	9303      	str	r3, [sp, #12]
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	9302      	str	r3, [sp, #8]
 800b248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b24a:	9301      	str	r3, [sp, #4]
 800b24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24e:	9300      	str	r3, [sp, #0]
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	68b9      	ldr	r1, [r7, #8]
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f000 f80f 	bl	800b278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b25a:	69f8      	ldr	r0, [r7, #28]
 800b25c:	f000 f8b4 	bl	800b3c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b260:	2301      	movs	r3, #1
 800b262:	61bb      	str	r3, [r7, #24]
 800b264:	e002      	b.n	800b26c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b266:	f04f 33ff 	mov.w	r3, #4294967295
 800b26a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b26c:	69bb      	ldr	r3, [r7, #24]
	}
 800b26e:	4618      	mov	r0, r3
 800b270:	3720      	adds	r7, #32
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
	...

0800b278 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b088      	sub	sp, #32
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]
 800b284:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b288:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	461a      	mov	r2, r3
 800b290:	21a5      	movs	r1, #165	@ 0xa5
 800b292:	f001 feea 	bl	800d06a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b298:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b29a:	6879      	ldr	r1, [r7, #4]
 800b29c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b2a0:	440b      	add	r3, r1
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	4413      	add	r3, r2
 800b2a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	f023 0307 	bic.w	r3, r3, #7
 800b2ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	f003 0307 	and.w	r3, r3, #7
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00b      	beq.n	800b2d2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	617b      	str	r3, [r7, #20]
}
 800b2cc:	bf00      	nop
 800b2ce:	bf00      	nop
 800b2d0:	e7fd      	b.n	800b2ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d01f      	beq.n	800b318 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2d8:	2300      	movs	r3, #0
 800b2da:	61fb      	str	r3, [r7, #28]
 800b2dc:	e012      	b.n	800b304 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2de:	68ba      	ldr	r2, [r7, #8]
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	7819      	ldrb	r1, [r3, #0]
 800b2e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	3334      	adds	r3, #52	@ 0x34
 800b2ee:	460a      	mov	r2, r1
 800b2f0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d006      	beq.n	800b30c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	3301      	adds	r3, #1
 800b302:	61fb      	str	r3, [r7, #28]
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	2b0f      	cmp	r3, #15
 800b308:	d9e9      	bls.n	800b2de <prvInitialiseNewTask+0x66>
 800b30a:	e000      	b.n	800b30e <prvInitialiseNewTask+0x96>
			{
				break;
 800b30c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b310:	2200      	movs	r2, #0
 800b312:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b316:	e003      	b.n	800b320 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31a:	2200      	movs	r2, #0
 800b31c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b322:	2b37      	cmp	r3, #55	@ 0x37
 800b324:	d901      	bls.n	800b32a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b326:	2337      	movs	r3, #55	@ 0x37
 800b328:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b32e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b332:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b334:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b338:	2200      	movs	r2, #0
 800b33a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33e:	3304      	adds	r3, #4
 800b340:	4618      	mov	r0, r3
 800b342:	f7ff f965 	bl	800a610 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b348:	3318      	adds	r3, #24
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7ff f960 	bl	800a610 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b354:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b358:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b35e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b364:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b368:	2200      	movs	r2, #0
 800b36a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b370:	2200      	movs	r2, #0
 800b372:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b378:	3354      	adds	r3, #84	@ 0x54
 800b37a:	224c      	movs	r2, #76	@ 0x4c
 800b37c:	2100      	movs	r1, #0
 800b37e:	4618      	mov	r0, r3
 800b380:	f001 fe73 	bl	800d06a <memset>
 800b384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b386:	4a0d      	ldr	r2, [pc, #52]	@ (800b3bc <prvInitialiseNewTask+0x144>)
 800b388:	659a      	str	r2, [r3, #88]	@ 0x58
 800b38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b38c:	4a0c      	ldr	r2, [pc, #48]	@ (800b3c0 <prvInitialiseNewTask+0x148>)
 800b38e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b392:	4a0c      	ldr	r2, [pc, #48]	@ (800b3c4 <prvInitialiseNewTask+0x14c>)
 800b394:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b396:	683a      	ldr	r2, [r7, #0]
 800b398:	68f9      	ldr	r1, [r7, #12]
 800b39a:	69b8      	ldr	r0, [r7, #24]
 800b39c:	f001 f95a 	bl	800c654 <pxPortInitialiseStack>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d002      	beq.n	800b3b2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3b2:	bf00      	nop
 800b3b4:	3720      	adds	r7, #32
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	24004cf0 	.word	0x24004cf0
 800b3c0:	24004d58 	.word	0x24004d58
 800b3c4:	24004dc0 	.word	0x24004dc0

0800b3c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3d0:	f001 fa72 	bl	800c8b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3d4:	4b2d      	ldr	r3, [pc, #180]	@ (800b48c <prvAddNewTaskToReadyList+0xc4>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	4a2c      	ldr	r2, [pc, #176]	@ (800b48c <prvAddNewTaskToReadyList+0xc4>)
 800b3dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b3de:	4b2c      	ldr	r3, [pc, #176]	@ (800b490 <prvAddNewTaskToReadyList+0xc8>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d109      	bne.n	800b3fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3e6:	4a2a      	ldr	r2, [pc, #168]	@ (800b490 <prvAddNewTaskToReadyList+0xc8>)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3ec:	4b27      	ldr	r3, [pc, #156]	@ (800b48c <prvAddNewTaskToReadyList+0xc4>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d110      	bne.n	800b416 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3f4:	f000 fc2e 	bl	800bc54 <prvInitialiseTaskLists>
 800b3f8:	e00d      	b.n	800b416 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3fa:	4b26      	ldr	r3, [pc, #152]	@ (800b494 <prvAddNewTaskToReadyList+0xcc>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d109      	bne.n	800b416 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b402:	4b23      	ldr	r3, [pc, #140]	@ (800b490 <prvAddNewTaskToReadyList+0xc8>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d802      	bhi.n	800b416 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b410:	4a1f      	ldr	r2, [pc, #124]	@ (800b490 <prvAddNewTaskToReadyList+0xc8>)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b416:	4b20      	ldr	r3, [pc, #128]	@ (800b498 <prvAddNewTaskToReadyList+0xd0>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	3301      	adds	r3, #1
 800b41c:	4a1e      	ldr	r2, [pc, #120]	@ (800b498 <prvAddNewTaskToReadyList+0xd0>)
 800b41e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b420:	4b1d      	ldr	r3, [pc, #116]	@ (800b498 <prvAddNewTaskToReadyList+0xd0>)
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b42c:	4b1b      	ldr	r3, [pc, #108]	@ (800b49c <prvAddNewTaskToReadyList+0xd4>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	429a      	cmp	r2, r3
 800b432:	d903      	bls.n	800b43c <prvAddNewTaskToReadyList+0x74>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b438:	4a18      	ldr	r2, [pc, #96]	@ (800b49c <prvAddNewTaskToReadyList+0xd4>)
 800b43a:	6013      	str	r3, [r2, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b440:	4613      	mov	r3, r2
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	4413      	add	r3, r2
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	4a15      	ldr	r2, [pc, #84]	@ (800b4a0 <prvAddNewTaskToReadyList+0xd8>)
 800b44a:	441a      	add	r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	3304      	adds	r3, #4
 800b450:	4619      	mov	r1, r3
 800b452:	4610      	mov	r0, r2
 800b454:	f7ff f8e9 	bl	800a62a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b458:	f001 fa60 	bl	800c91c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b45c:	4b0d      	ldr	r3, [pc, #52]	@ (800b494 <prvAddNewTaskToReadyList+0xcc>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00e      	beq.n	800b482 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b464:	4b0a      	ldr	r3, [pc, #40]	@ (800b490 <prvAddNewTaskToReadyList+0xc8>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b46e:	429a      	cmp	r2, r3
 800b470:	d207      	bcs.n	800b482 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b472:	4b0c      	ldr	r3, [pc, #48]	@ (800b4a4 <prvAddNewTaskToReadyList+0xdc>)
 800b474:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b478:	601a      	str	r2, [r3, #0]
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b482:	bf00      	nop
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	24000f1c 	.word	0x24000f1c
 800b490:	24000a48 	.word	0x24000a48
 800b494:	24000f28 	.word	0x24000f28
 800b498:	24000f38 	.word	0x24000f38
 800b49c:	24000f24 	.word	0x24000f24
 800b4a0:	24000a4c 	.word	0x24000a4c
 800b4a4:	e000ed04 	.word	0xe000ed04

0800b4a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d018      	beq.n	800b4ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b4ba:	4b14      	ldr	r3, [pc, #80]	@ (800b50c <vTaskDelay+0x64>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00b      	beq.n	800b4da <vTaskDelay+0x32>
	__asm volatile
 800b4c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c6:	f383 8811 	msr	BASEPRI, r3
 800b4ca:	f3bf 8f6f 	isb	sy
 800b4ce:	f3bf 8f4f 	dsb	sy
 800b4d2:	60bb      	str	r3, [r7, #8]
}
 800b4d4:	bf00      	nop
 800b4d6:	bf00      	nop
 800b4d8:	e7fd      	b.n	800b4d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b4da:	f000 f88b 	bl	800b5f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b4de:	2100      	movs	r1, #0
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 fd09 	bl	800bef8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b4e6:	f000 f893 	bl	800b610 <xTaskResumeAll>
 800b4ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d107      	bne.n	800b502 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b4f2:	4b07      	ldr	r3, [pc, #28]	@ (800b510 <vTaskDelay+0x68>)
 800b4f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4f8:	601a      	str	r2, [r3, #0]
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b502:	bf00      	nop
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	24000f44 	.word	0x24000f44
 800b510:	e000ed04 	.word	0xe000ed04

0800b514 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b08a      	sub	sp, #40	@ 0x28
 800b518:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b51a:	2300      	movs	r3, #0
 800b51c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b51e:	2300      	movs	r3, #0
 800b520:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b522:	463a      	mov	r2, r7
 800b524:	1d39      	adds	r1, r7, #4
 800b526:	f107 0308 	add.w	r3, r7, #8
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7ff f81c 	bl	800a568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b530:	6839      	ldr	r1, [r7, #0]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	68ba      	ldr	r2, [r7, #8]
 800b536:	9202      	str	r2, [sp, #8]
 800b538:	9301      	str	r3, [sp, #4]
 800b53a:	2300      	movs	r3, #0
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	2300      	movs	r3, #0
 800b540:	460a      	mov	r2, r1
 800b542:	4924      	ldr	r1, [pc, #144]	@ (800b5d4 <vTaskStartScheduler+0xc0>)
 800b544:	4824      	ldr	r0, [pc, #144]	@ (800b5d8 <vTaskStartScheduler+0xc4>)
 800b546:	f7ff fdf1 	bl	800b12c <xTaskCreateStatic>
 800b54a:	4603      	mov	r3, r0
 800b54c:	4a23      	ldr	r2, [pc, #140]	@ (800b5dc <vTaskStartScheduler+0xc8>)
 800b54e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b550:	4b22      	ldr	r3, [pc, #136]	@ (800b5dc <vTaskStartScheduler+0xc8>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b558:	2301      	movs	r3, #1
 800b55a:	617b      	str	r3, [r7, #20]
 800b55c:	e001      	b.n	800b562 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b55e:	2300      	movs	r3, #0
 800b560:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d102      	bne.n	800b56e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b568:	f000 fd1a 	bl	800bfa0 <xTimerCreateTimerTask>
 800b56c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	2b01      	cmp	r3, #1
 800b572:	d11b      	bne.n	800b5ac <vTaskStartScheduler+0x98>
	__asm volatile
 800b574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b578:	f383 8811 	msr	BASEPRI, r3
 800b57c:	f3bf 8f6f 	isb	sy
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	613b      	str	r3, [r7, #16]
}
 800b586:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b588:	4b15      	ldr	r3, [pc, #84]	@ (800b5e0 <vTaskStartScheduler+0xcc>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3354      	adds	r3, #84	@ 0x54
 800b58e:	4a15      	ldr	r2, [pc, #84]	@ (800b5e4 <vTaskStartScheduler+0xd0>)
 800b590:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b592:	4b15      	ldr	r3, [pc, #84]	@ (800b5e8 <vTaskStartScheduler+0xd4>)
 800b594:	f04f 32ff 	mov.w	r2, #4294967295
 800b598:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b59a:	4b14      	ldr	r3, [pc, #80]	@ (800b5ec <vTaskStartScheduler+0xd8>)
 800b59c:	2201      	movs	r2, #1
 800b59e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b5a0:	4b13      	ldr	r3, [pc, #76]	@ (800b5f0 <vTaskStartScheduler+0xdc>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b5a6:	f001 f8e3 	bl	800c770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b5aa:	e00f      	b.n	800b5cc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5b2:	d10b      	bne.n	800b5cc <vTaskStartScheduler+0xb8>
	__asm volatile
 800b5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	60fb      	str	r3, [r7, #12]
}
 800b5c6:	bf00      	nop
 800b5c8:	bf00      	nop
 800b5ca:	e7fd      	b.n	800b5c8 <vTaskStartScheduler+0xb4>
}
 800b5cc:	bf00      	nop
 800b5ce:	3718      	adds	r7, #24
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	0800d270 	.word	0x0800d270
 800b5d8:	0800bc25 	.word	0x0800bc25
 800b5dc:	24000f40 	.word	0x24000f40
 800b5e0:	24000a48 	.word	0x24000a48
 800b5e4:	24000014 	.word	0x24000014
 800b5e8:	24000f3c 	.word	0x24000f3c
 800b5ec:	24000f28 	.word	0x24000f28
 800b5f0:	24000f20 	.word	0x24000f20

0800b5f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b5f8:	4b04      	ldr	r3, [pc, #16]	@ (800b60c <vTaskSuspendAll+0x18>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	4a03      	ldr	r2, [pc, #12]	@ (800b60c <vTaskSuspendAll+0x18>)
 800b600:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b602:	bf00      	nop
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	24000f44 	.word	0x24000f44

0800b610 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b616:	2300      	movs	r3, #0
 800b618:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b61a:	2300      	movs	r3, #0
 800b61c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b61e:	4b42      	ldr	r3, [pc, #264]	@ (800b728 <xTaskResumeAll+0x118>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10b      	bne.n	800b63e <xTaskResumeAll+0x2e>
	__asm volatile
 800b626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b62a:	f383 8811 	msr	BASEPRI, r3
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f3bf 8f4f 	dsb	sy
 800b636:	603b      	str	r3, [r7, #0]
}
 800b638:	bf00      	nop
 800b63a:	bf00      	nop
 800b63c:	e7fd      	b.n	800b63a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b63e:	f001 f93b 	bl	800c8b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b642:	4b39      	ldr	r3, [pc, #228]	@ (800b728 <xTaskResumeAll+0x118>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	3b01      	subs	r3, #1
 800b648:	4a37      	ldr	r2, [pc, #220]	@ (800b728 <xTaskResumeAll+0x118>)
 800b64a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b64c:	4b36      	ldr	r3, [pc, #216]	@ (800b728 <xTaskResumeAll+0x118>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d162      	bne.n	800b71a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b654:	4b35      	ldr	r3, [pc, #212]	@ (800b72c <xTaskResumeAll+0x11c>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d05e      	beq.n	800b71a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b65c:	e02f      	b.n	800b6be <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b65e:	4b34      	ldr	r3, [pc, #208]	@ (800b730 <xTaskResumeAll+0x120>)
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	3318      	adds	r3, #24
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7ff f83a 	bl	800a6e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	3304      	adds	r3, #4
 800b674:	4618      	mov	r0, r3
 800b676:	f7ff f835 	bl	800a6e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b67e:	4b2d      	ldr	r3, [pc, #180]	@ (800b734 <xTaskResumeAll+0x124>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	429a      	cmp	r2, r3
 800b684:	d903      	bls.n	800b68e <xTaskResumeAll+0x7e>
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b68a:	4a2a      	ldr	r2, [pc, #168]	@ (800b734 <xTaskResumeAll+0x124>)
 800b68c:	6013      	str	r3, [r2, #0]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b692:	4613      	mov	r3, r2
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	4413      	add	r3, r2
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	4a27      	ldr	r2, [pc, #156]	@ (800b738 <xTaskResumeAll+0x128>)
 800b69c:	441a      	add	r2, r3
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	3304      	adds	r3, #4
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	4610      	mov	r0, r2
 800b6a6:	f7fe ffc0 	bl	800a62a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ae:	4b23      	ldr	r3, [pc, #140]	@ (800b73c <xTaskResumeAll+0x12c>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d302      	bcc.n	800b6be <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b6b8:	4b21      	ldr	r3, [pc, #132]	@ (800b740 <xTaskResumeAll+0x130>)
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6be:	4b1c      	ldr	r3, [pc, #112]	@ (800b730 <xTaskResumeAll+0x120>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1cb      	bne.n	800b65e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d001      	beq.n	800b6d0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b6cc:	f000 fb66 	bl	800bd9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b6d0:	4b1c      	ldr	r3, [pc, #112]	@ (800b744 <xTaskResumeAll+0x134>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d010      	beq.n	800b6fe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b6dc:	f000 f846 	bl	800b76c <xTaskIncrementTick>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d002      	beq.n	800b6ec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b6e6:	4b16      	ldr	r3, [pc, #88]	@ (800b740 <xTaskResumeAll+0x130>)
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d1f1      	bne.n	800b6dc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b6f8:	4b12      	ldr	r3, [pc, #72]	@ (800b744 <xTaskResumeAll+0x134>)
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b6fe:	4b10      	ldr	r3, [pc, #64]	@ (800b740 <xTaskResumeAll+0x130>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d009      	beq.n	800b71a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b706:	2301      	movs	r3, #1
 800b708:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b70a:	4b0f      	ldr	r3, [pc, #60]	@ (800b748 <xTaskResumeAll+0x138>)
 800b70c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b710:	601a      	str	r2, [r3, #0]
 800b712:	f3bf 8f4f 	dsb	sy
 800b716:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b71a:	f001 f8ff 	bl	800c91c <vPortExitCritical>

	return xAlreadyYielded;
 800b71e:	68bb      	ldr	r3, [r7, #8]
}
 800b720:	4618      	mov	r0, r3
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	24000f44 	.word	0x24000f44
 800b72c:	24000f1c 	.word	0x24000f1c
 800b730:	24000edc 	.word	0x24000edc
 800b734:	24000f24 	.word	0x24000f24
 800b738:	24000a4c 	.word	0x24000a4c
 800b73c:	24000a48 	.word	0x24000a48
 800b740:	24000f30 	.word	0x24000f30
 800b744:	24000f2c 	.word	0x24000f2c
 800b748:	e000ed04 	.word	0xe000ed04

0800b74c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b752:	4b05      	ldr	r3, [pc, #20]	@ (800b768 <xTaskGetTickCount+0x1c>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b758:	687b      	ldr	r3, [r7, #4]
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	370c      	adds	r7, #12
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	24000f20 	.word	0x24000f20

0800b76c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b772:	2300      	movs	r3, #0
 800b774:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b776:	4b4f      	ldr	r3, [pc, #316]	@ (800b8b4 <xTaskIncrementTick+0x148>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f040 8090 	bne.w	800b8a0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b780:	4b4d      	ldr	r3, [pc, #308]	@ (800b8b8 <xTaskIncrementTick+0x14c>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	3301      	adds	r3, #1
 800b786:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b788:	4a4b      	ldr	r2, [pc, #300]	@ (800b8b8 <xTaskIncrementTick+0x14c>)
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d121      	bne.n	800b7d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b794:	4b49      	ldr	r3, [pc, #292]	@ (800b8bc <xTaskIncrementTick+0x150>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00b      	beq.n	800b7b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a2:	f383 8811 	msr	BASEPRI, r3
 800b7a6:	f3bf 8f6f 	isb	sy
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	603b      	str	r3, [r7, #0]
}
 800b7b0:	bf00      	nop
 800b7b2:	bf00      	nop
 800b7b4:	e7fd      	b.n	800b7b2 <xTaskIncrementTick+0x46>
 800b7b6:	4b41      	ldr	r3, [pc, #260]	@ (800b8bc <xTaskIncrementTick+0x150>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	60fb      	str	r3, [r7, #12]
 800b7bc:	4b40      	ldr	r3, [pc, #256]	@ (800b8c0 <xTaskIncrementTick+0x154>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a3e      	ldr	r2, [pc, #248]	@ (800b8bc <xTaskIncrementTick+0x150>)
 800b7c2:	6013      	str	r3, [r2, #0]
 800b7c4:	4a3e      	ldr	r2, [pc, #248]	@ (800b8c0 <xTaskIncrementTick+0x154>)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6013      	str	r3, [r2, #0]
 800b7ca:	4b3e      	ldr	r3, [pc, #248]	@ (800b8c4 <xTaskIncrementTick+0x158>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	4a3c      	ldr	r2, [pc, #240]	@ (800b8c4 <xTaskIncrementTick+0x158>)
 800b7d2:	6013      	str	r3, [r2, #0]
 800b7d4:	f000 fae2 	bl	800bd9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b7d8:	4b3b      	ldr	r3, [pc, #236]	@ (800b8c8 <xTaskIncrementTick+0x15c>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	693a      	ldr	r2, [r7, #16]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d349      	bcc.n	800b876 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7e2:	4b36      	ldr	r3, [pc, #216]	@ (800b8bc <xTaskIncrementTick+0x150>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d104      	bne.n	800b7f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7ec:	4b36      	ldr	r3, [pc, #216]	@ (800b8c8 <xTaskIncrementTick+0x15c>)
 800b7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f2:	601a      	str	r2, [r3, #0]
					break;
 800b7f4:	e03f      	b.n	800b876 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7f6:	4b31      	ldr	r3, [pc, #196]	@ (800b8bc <xTaskIncrementTick+0x150>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d203      	bcs.n	800b816 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b80e:	4a2e      	ldr	r2, [pc, #184]	@ (800b8c8 <xTaskIncrementTick+0x15c>)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b814:	e02f      	b.n	800b876 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	3304      	adds	r3, #4
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7fe ff62 	bl	800a6e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b824:	2b00      	cmp	r3, #0
 800b826:	d004      	beq.n	800b832 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	3318      	adds	r3, #24
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7fe ff59 	bl	800a6e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b836:	4b25      	ldr	r3, [pc, #148]	@ (800b8cc <xTaskIncrementTick+0x160>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d903      	bls.n	800b846 <xTaskIncrementTick+0xda>
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b842:	4a22      	ldr	r2, [pc, #136]	@ (800b8cc <xTaskIncrementTick+0x160>)
 800b844:	6013      	str	r3, [r2, #0]
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b84a:	4613      	mov	r3, r2
 800b84c:	009b      	lsls	r3, r3, #2
 800b84e:	4413      	add	r3, r2
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	4a1f      	ldr	r2, [pc, #124]	@ (800b8d0 <xTaskIncrementTick+0x164>)
 800b854:	441a      	add	r2, r3
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	3304      	adds	r3, #4
 800b85a:	4619      	mov	r1, r3
 800b85c:	4610      	mov	r0, r2
 800b85e:	f7fe fee4 	bl	800a62a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b866:	4b1b      	ldr	r3, [pc, #108]	@ (800b8d4 <xTaskIncrementTick+0x168>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d3b8      	bcc.n	800b7e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b870:	2301      	movs	r3, #1
 800b872:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b874:	e7b5      	b.n	800b7e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b876:	4b17      	ldr	r3, [pc, #92]	@ (800b8d4 <xTaskIncrementTick+0x168>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b87c:	4914      	ldr	r1, [pc, #80]	@ (800b8d0 <xTaskIncrementTick+0x164>)
 800b87e:	4613      	mov	r3, r2
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	4413      	add	r3, r2
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	440b      	add	r3, r1
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d901      	bls.n	800b892 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b88e:	2301      	movs	r3, #1
 800b890:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b892:	4b11      	ldr	r3, [pc, #68]	@ (800b8d8 <xTaskIncrementTick+0x16c>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d007      	beq.n	800b8aa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b89a:	2301      	movs	r3, #1
 800b89c:	617b      	str	r3, [r7, #20]
 800b89e:	e004      	b.n	800b8aa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b8a0:	4b0e      	ldr	r3, [pc, #56]	@ (800b8dc <xTaskIncrementTick+0x170>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	4a0d      	ldr	r2, [pc, #52]	@ (800b8dc <xTaskIncrementTick+0x170>)
 800b8a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b8aa:	697b      	ldr	r3, [r7, #20]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3718      	adds	r7, #24
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	24000f44 	.word	0x24000f44
 800b8b8:	24000f20 	.word	0x24000f20
 800b8bc:	24000ed4 	.word	0x24000ed4
 800b8c0:	24000ed8 	.word	0x24000ed8
 800b8c4:	24000f34 	.word	0x24000f34
 800b8c8:	24000f3c 	.word	0x24000f3c
 800b8cc:	24000f24 	.word	0x24000f24
 800b8d0:	24000a4c 	.word	0x24000a4c
 800b8d4:	24000a48 	.word	0x24000a48
 800b8d8:	24000f30 	.word	0x24000f30
 800b8dc:	24000f2c 	.word	0x24000f2c

0800b8e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b8e6:	4b2b      	ldr	r3, [pc, #172]	@ (800b994 <vTaskSwitchContext+0xb4>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d003      	beq.n	800b8f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b8ee:	4b2a      	ldr	r3, [pc, #168]	@ (800b998 <vTaskSwitchContext+0xb8>)
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b8f4:	e047      	b.n	800b986 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b8f6:	4b28      	ldr	r3, [pc, #160]	@ (800b998 <vTaskSwitchContext+0xb8>)
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8fc:	4b27      	ldr	r3, [pc, #156]	@ (800b99c <vTaskSwitchContext+0xbc>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	60fb      	str	r3, [r7, #12]
 800b902:	e011      	b.n	800b928 <vTaskSwitchContext+0x48>
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d10b      	bne.n	800b922 <vTaskSwitchContext+0x42>
	__asm volatile
 800b90a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b90e:	f383 8811 	msr	BASEPRI, r3
 800b912:	f3bf 8f6f 	isb	sy
 800b916:	f3bf 8f4f 	dsb	sy
 800b91a:	607b      	str	r3, [r7, #4]
}
 800b91c:	bf00      	nop
 800b91e:	bf00      	nop
 800b920:	e7fd      	b.n	800b91e <vTaskSwitchContext+0x3e>
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	3b01      	subs	r3, #1
 800b926:	60fb      	str	r3, [r7, #12]
 800b928:	491d      	ldr	r1, [pc, #116]	@ (800b9a0 <vTaskSwitchContext+0xc0>)
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	4613      	mov	r3, r2
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	4413      	add	r3, r2
 800b932:	009b      	lsls	r3, r3, #2
 800b934:	440b      	add	r3, r1
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d0e3      	beq.n	800b904 <vTaskSwitchContext+0x24>
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	4613      	mov	r3, r2
 800b940:	009b      	lsls	r3, r3, #2
 800b942:	4413      	add	r3, r2
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	4a16      	ldr	r2, [pc, #88]	@ (800b9a0 <vTaskSwitchContext+0xc0>)
 800b948:	4413      	add	r3, r2
 800b94a:	60bb      	str	r3, [r7, #8]
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	685a      	ldr	r2, [r3, #4]
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	605a      	str	r2, [r3, #4]
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	685a      	ldr	r2, [r3, #4]
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	3308      	adds	r3, #8
 800b95e:	429a      	cmp	r2, r3
 800b960:	d104      	bne.n	800b96c <vTaskSwitchContext+0x8c>
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	685a      	ldr	r2, [r3, #4]
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	605a      	str	r2, [r3, #4]
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	4a0c      	ldr	r2, [pc, #48]	@ (800b9a4 <vTaskSwitchContext+0xc4>)
 800b974:	6013      	str	r3, [r2, #0]
 800b976:	4a09      	ldr	r2, [pc, #36]	@ (800b99c <vTaskSwitchContext+0xbc>)
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b97c:	4b09      	ldr	r3, [pc, #36]	@ (800b9a4 <vTaskSwitchContext+0xc4>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	3354      	adds	r3, #84	@ 0x54
 800b982:	4a09      	ldr	r2, [pc, #36]	@ (800b9a8 <vTaskSwitchContext+0xc8>)
 800b984:	6013      	str	r3, [r2, #0]
}
 800b986:	bf00      	nop
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	24000f44 	.word	0x24000f44
 800b998:	24000f30 	.word	0x24000f30
 800b99c:	24000f24 	.word	0x24000f24
 800b9a0:	24000a4c 	.word	0x24000a4c
 800b9a4:	24000a48 	.word	0x24000a48
 800b9a8:	24000014 	.word	0x24000014

0800b9ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10b      	bne.n	800b9d4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	60fb      	str	r3, [r7, #12]
}
 800b9ce:	bf00      	nop
 800b9d0:	bf00      	nop
 800b9d2:	e7fd      	b.n	800b9d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9d4:	4b07      	ldr	r3, [pc, #28]	@ (800b9f4 <vTaskPlaceOnEventList+0x48>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	3318      	adds	r3, #24
 800b9da:	4619      	mov	r1, r3
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f7fe fe48 	bl	800a672 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b9e2:	2101      	movs	r1, #1
 800b9e4:	6838      	ldr	r0, [r7, #0]
 800b9e6:	f000 fa87 	bl	800bef8 <prvAddCurrentTaskToDelayedList>
}
 800b9ea:	bf00      	nop
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	24000a48 	.word	0x24000a48

0800b9f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d10b      	bne.n	800ba22 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ba0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	617b      	str	r3, [r7, #20]
}
 800ba1c:	bf00      	nop
 800ba1e:	bf00      	nop
 800ba20:	e7fd      	b.n	800ba1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba22:	4b0a      	ldr	r3, [pc, #40]	@ (800ba4c <vTaskPlaceOnEventListRestricted+0x54>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	3318      	adds	r3, #24
 800ba28:	4619      	mov	r1, r3
 800ba2a:	68f8      	ldr	r0, [r7, #12]
 800ba2c:	f7fe fdfd 	bl	800a62a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d002      	beq.n	800ba3c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ba36:	f04f 33ff 	mov.w	r3, #4294967295
 800ba3a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ba3c:	6879      	ldr	r1, [r7, #4]
 800ba3e:	68b8      	ldr	r0, [r7, #8]
 800ba40:	f000 fa5a 	bl	800bef8 <prvAddCurrentTaskToDelayedList>
	}
 800ba44:	bf00      	nop
 800ba46:	3718      	adds	r7, #24
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	24000a48 	.word	0x24000a48

0800ba50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b086      	sub	sp, #24
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10b      	bne.n	800ba7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ba66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba6a:	f383 8811 	msr	BASEPRI, r3
 800ba6e:	f3bf 8f6f 	isb	sy
 800ba72:	f3bf 8f4f 	dsb	sy
 800ba76:	60fb      	str	r3, [r7, #12]
}
 800ba78:	bf00      	nop
 800ba7a:	bf00      	nop
 800ba7c:	e7fd      	b.n	800ba7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	3318      	adds	r3, #24
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7fe fe2e 	bl	800a6e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba88:	4b1d      	ldr	r3, [pc, #116]	@ (800bb00 <xTaskRemoveFromEventList+0xb0>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d11d      	bne.n	800bacc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	3304      	adds	r3, #4
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7fe fe25 	bl	800a6e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba9e:	4b19      	ldr	r3, [pc, #100]	@ (800bb04 <xTaskRemoveFromEventList+0xb4>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d903      	bls.n	800baae <xTaskRemoveFromEventList+0x5e>
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baaa:	4a16      	ldr	r2, [pc, #88]	@ (800bb04 <xTaskRemoveFromEventList+0xb4>)
 800baac:	6013      	str	r3, [r2, #0]
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bab2:	4613      	mov	r3, r2
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	4413      	add	r3, r2
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	4a13      	ldr	r2, [pc, #76]	@ (800bb08 <xTaskRemoveFromEventList+0xb8>)
 800babc:	441a      	add	r2, r3
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	3304      	adds	r3, #4
 800bac2:	4619      	mov	r1, r3
 800bac4:	4610      	mov	r0, r2
 800bac6:	f7fe fdb0 	bl	800a62a <vListInsertEnd>
 800baca:	e005      	b.n	800bad8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	3318      	adds	r3, #24
 800bad0:	4619      	mov	r1, r3
 800bad2:	480e      	ldr	r0, [pc, #56]	@ (800bb0c <xTaskRemoveFromEventList+0xbc>)
 800bad4:	f7fe fda9 	bl	800a62a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800badc:	4b0c      	ldr	r3, [pc, #48]	@ (800bb10 <xTaskRemoveFromEventList+0xc0>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d905      	bls.n	800baf2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bae6:	2301      	movs	r3, #1
 800bae8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800baea:	4b0a      	ldr	r3, [pc, #40]	@ (800bb14 <xTaskRemoveFromEventList+0xc4>)
 800baec:	2201      	movs	r2, #1
 800baee:	601a      	str	r2, [r3, #0]
 800baf0:	e001      	b.n	800baf6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800baf2:	2300      	movs	r3, #0
 800baf4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800baf6:	697b      	ldr	r3, [r7, #20]
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3718      	adds	r7, #24
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	24000f44 	.word	0x24000f44
 800bb04:	24000f24 	.word	0x24000f24
 800bb08:	24000a4c 	.word	0x24000a4c
 800bb0c:	24000edc 	.word	0x24000edc
 800bb10:	24000a48 	.word	0x24000a48
 800bb14:	24000f30 	.word	0x24000f30

0800bb18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb20:	4b06      	ldr	r3, [pc, #24]	@ (800bb3c <vTaskInternalSetTimeOutState+0x24>)
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb28:	4b05      	ldr	r3, [pc, #20]	@ (800bb40 <vTaskInternalSetTimeOutState+0x28>)
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	605a      	str	r2, [r3, #4]
}
 800bb30:	bf00      	nop
 800bb32:	370c      	adds	r7, #12
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr
 800bb3c:	24000f34 	.word	0x24000f34
 800bb40:	24000f20 	.word	0x24000f20

0800bb44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b088      	sub	sp, #32
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d10b      	bne.n	800bb6c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bb54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb58:	f383 8811 	msr	BASEPRI, r3
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	613b      	str	r3, [r7, #16]
}
 800bb66:	bf00      	nop
 800bb68:	bf00      	nop
 800bb6a:	e7fd      	b.n	800bb68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d10b      	bne.n	800bb8a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bb72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb76:	f383 8811 	msr	BASEPRI, r3
 800bb7a:	f3bf 8f6f 	isb	sy
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	60fb      	str	r3, [r7, #12]
}
 800bb84:	bf00      	nop
 800bb86:	bf00      	nop
 800bb88:	e7fd      	b.n	800bb86 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bb8a:	f000 fe95 	bl	800c8b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bb8e:	4b1d      	ldr	r3, [pc, #116]	@ (800bc04 <xTaskCheckForTimeOut+0xc0>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	69ba      	ldr	r2, [r7, #24]
 800bb9a:	1ad3      	subs	r3, r2, r3
 800bb9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba6:	d102      	bne.n	800bbae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	61fb      	str	r3, [r7, #28]
 800bbac:	e023      	b.n	800bbf6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	4b15      	ldr	r3, [pc, #84]	@ (800bc08 <xTaskCheckForTimeOut+0xc4>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d007      	beq.n	800bbca <xTaskCheckForTimeOut+0x86>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	69ba      	ldr	r2, [r7, #24]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d302      	bcc.n	800bbca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	61fb      	str	r3, [r7, #28]
 800bbc8:	e015      	b.n	800bbf6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	697a      	ldr	r2, [r7, #20]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d20b      	bcs.n	800bbec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	1ad2      	subs	r2, r2, r3
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f7ff ff99 	bl	800bb18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	61fb      	str	r3, [r7, #28]
 800bbea:	e004      	b.n	800bbf6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bbf6:	f000 fe91 	bl	800c91c <vPortExitCritical>

	return xReturn;
 800bbfa:	69fb      	ldr	r3, [r7, #28]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3720      	adds	r7, #32
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	24000f20 	.word	0x24000f20
 800bc08:	24000f34 	.word	0x24000f34

0800bc0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc10:	4b03      	ldr	r3, [pc, #12]	@ (800bc20 <vTaskMissedYield+0x14>)
 800bc12:	2201      	movs	r2, #1
 800bc14:	601a      	str	r2, [r3, #0]
}
 800bc16:	bf00      	nop
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr
 800bc20:	24000f30 	.word	0x24000f30

0800bc24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bc2c:	f000 f852 	bl	800bcd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc30:	4b06      	ldr	r3, [pc, #24]	@ (800bc4c <prvIdleTask+0x28>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d9f9      	bls.n	800bc2c <prvIdleTask+0x8>
			{
				taskYIELD();
 800bc38:	4b05      	ldr	r3, [pc, #20]	@ (800bc50 <prvIdleTask+0x2c>)
 800bc3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc3e:	601a      	str	r2, [r3, #0]
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bc48:	e7f0      	b.n	800bc2c <prvIdleTask+0x8>
 800bc4a:	bf00      	nop
 800bc4c:	24000a4c 	.word	0x24000a4c
 800bc50:	e000ed04 	.word	0xe000ed04

0800bc54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	607b      	str	r3, [r7, #4]
 800bc5e:	e00c      	b.n	800bc7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	4613      	mov	r3, r2
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	4413      	add	r3, r2
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	4a12      	ldr	r2, [pc, #72]	@ (800bcb4 <prvInitialiseTaskLists+0x60>)
 800bc6c:	4413      	add	r3, r2
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fe fcae 	bl	800a5d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	3301      	adds	r3, #1
 800bc78:	607b      	str	r3, [r7, #4]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2b37      	cmp	r3, #55	@ 0x37
 800bc7e:	d9ef      	bls.n	800bc60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bc80:	480d      	ldr	r0, [pc, #52]	@ (800bcb8 <prvInitialiseTaskLists+0x64>)
 800bc82:	f7fe fca5 	bl	800a5d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bc86:	480d      	ldr	r0, [pc, #52]	@ (800bcbc <prvInitialiseTaskLists+0x68>)
 800bc88:	f7fe fca2 	bl	800a5d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bc8c:	480c      	ldr	r0, [pc, #48]	@ (800bcc0 <prvInitialiseTaskLists+0x6c>)
 800bc8e:	f7fe fc9f 	bl	800a5d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc92:	480c      	ldr	r0, [pc, #48]	@ (800bcc4 <prvInitialiseTaskLists+0x70>)
 800bc94:	f7fe fc9c 	bl	800a5d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc98:	480b      	ldr	r0, [pc, #44]	@ (800bcc8 <prvInitialiseTaskLists+0x74>)
 800bc9a:	f7fe fc99 	bl	800a5d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc9e:	4b0b      	ldr	r3, [pc, #44]	@ (800bccc <prvInitialiseTaskLists+0x78>)
 800bca0:	4a05      	ldr	r2, [pc, #20]	@ (800bcb8 <prvInitialiseTaskLists+0x64>)
 800bca2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bca4:	4b0a      	ldr	r3, [pc, #40]	@ (800bcd0 <prvInitialiseTaskLists+0x7c>)
 800bca6:	4a05      	ldr	r2, [pc, #20]	@ (800bcbc <prvInitialiseTaskLists+0x68>)
 800bca8:	601a      	str	r2, [r3, #0]
}
 800bcaa:	bf00      	nop
 800bcac:	3708      	adds	r7, #8
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	24000a4c 	.word	0x24000a4c
 800bcb8:	24000eac 	.word	0x24000eac
 800bcbc:	24000ec0 	.word	0x24000ec0
 800bcc0:	24000edc 	.word	0x24000edc
 800bcc4:	24000ef0 	.word	0x24000ef0
 800bcc8:	24000f08 	.word	0x24000f08
 800bccc:	24000ed4 	.word	0x24000ed4
 800bcd0:	24000ed8 	.word	0x24000ed8

0800bcd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bcda:	e019      	b.n	800bd10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bcdc:	f000 fdec 	bl	800c8b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bce0:	4b10      	ldr	r3, [pc, #64]	@ (800bd24 <prvCheckTasksWaitingTermination+0x50>)
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	3304      	adds	r3, #4
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7fe fcf9 	bl	800a6e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bcf2:	4b0d      	ldr	r3, [pc, #52]	@ (800bd28 <prvCheckTasksWaitingTermination+0x54>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	4a0b      	ldr	r2, [pc, #44]	@ (800bd28 <prvCheckTasksWaitingTermination+0x54>)
 800bcfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bcfc:	4b0b      	ldr	r3, [pc, #44]	@ (800bd2c <prvCheckTasksWaitingTermination+0x58>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	3b01      	subs	r3, #1
 800bd02:	4a0a      	ldr	r2, [pc, #40]	@ (800bd2c <prvCheckTasksWaitingTermination+0x58>)
 800bd04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bd06:	f000 fe09 	bl	800c91c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f000 f810 	bl	800bd30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd10:	4b06      	ldr	r3, [pc, #24]	@ (800bd2c <prvCheckTasksWaitingTermination+0x58>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d1e1      	bne.n	800bcdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bd18:	bf00      	nop
 800bd1a:	bf00      	nop
 800bd1c:	3708      	adds	r7, #8
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	24000ef0 	.word	0x24000ef0
 800bd28:	24000f1c 	.word	0x24000f1c
 800bd2c:	24000f04 	.word	0x24000f04

0800bd30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	3354      	adds	r3, #84	@ 0x54
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f001 f99d 	bl	800d07c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d108      	bne.n	800bd5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd50:	4618      	mov	r0, r3
 800bd52:	f000 ffa1 	bl	800cc98 <vPortFree>
				vPortFree( pxTCB );
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 ff9e 	bl	800cc98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bd5c:	e019      	b.n	800bd92 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d103      	bne.n	800bd70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 ff95 	bl	800cc98 <vPortFree>
	}
 800bd6e:	e010      	b.n	800bd92 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800bd76:	2b02      	cmp	r3, #2
 800bd78:	d00b      	beq.n	800bd92 <prvDeleteTCB+0x62>
	__asm volatile
 800bd7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	60fb      	str	r3, [r7, #12]
}
 800bd8c:	bf00      	nop
 800bd8e:	bf00      	nop
 800bd90:	e7fd      	b.n	800bd8e <prvDeleteTCB+0x5e>
	}
 800bd92:	bf00      	nop
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
	...

0800bd9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bda2:	4b0c      	ldr	r3, [pc, #48]	@ (800bdd4 <prvResetNextTaskUnblockTime+0x38>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d104      	bne.n	800bdb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bdac:	4b0a      	ldr	r3, [pc, #40]	@ (800bdd8 <prvResetNextTaskUnblockTime+0x3c>)
 800bdae:	f04f 32ff 	mov.w	r2, #4294967295
 800bdb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bdb4:	e008      	b.n	800bdc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdb6:	4b07      	ldr	r3, [pc, #28]	@ (800bdd4 <prvResetNextTaskUnblockTime+0x38>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	4a04      	ldr	r2, [pc, #16]	@ (800bdd8 <prvResetNextTaskUnblockTime+0x3c>)
 800bdc6:	6013      	str	r3, [r2, #0]
}
 800bdc8:	bf00      	nop
 800bdca:	370c      	adds	r7, #12
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr
 800bdd4:	24000ed4 	.word	0x24000ed4
 800bdd8:	24000f3c 	.word	0x24000f3c

0800bddc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bde2:	4b0b      	ldr	r3, [pc, #44]	@ (800be10 <xTaskGetSchedulerState+0x34>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d102      	bne.n	800bdf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bdea:	2301      	movs	r3, #1
 800bdec:	607b      	str	r3, [r7, #4]
 800bdee:	e008      	b.n	800be02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdf0:	4b08      	ldr	r3, [pc, #32]	@ (800be14 <xTaskGetSchedulerState+0x38>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d102      	bne.n	800bdfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bdf8:	2302      	movs	r3, #2
 800bdfa:	607b      	str	r3, [r7, #4]
 800bdfc:	e001      	b.n	800be02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bdfe:	2300      	movs	r3, #0
 800be00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be02:	687b      	ldr	r3, [r7, #4]
	}
 800be04:	4618      	mov	r0, r3
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	24000f28 	.word	0x24000f28
 800be14:	24000f44 	.word	0x24000f44

0800be18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b086      	sub	sp, #24
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be24:	2300      	movs	r3, #0
 800be26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d058      	beq.n	800bee0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be2e:	4b2f      	ldr	r3, [pc, #188]	@ (800beec <xTaskPriorityDisinherit+0xd4>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	693a      	ldr	r2, [r7, #16]
 800be34:	429a      	cmp	r2, r3
 800be36:	d00b      	beq.n	800be50 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800be38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be3c:	f383 8811 	msr	BASEPRI, r3
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	60fb      	str	r3, [r7, #12]
}
 800be4a:	bf00      	nop
 800be4c:	bf00      	nop
 800be4e:	e7fd      	b.n	800be4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be54:	2b00      	cmp	r3, #0
 800be56:	d10b      	bne.n	800be70 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800be58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be5c:	f383 8811 	msr	BASEPRI, r3
 800be60:	f3bf 8f6f 	isb	sy
 800be64:	f3bf 8f4f 	dsb	sy
 800be68:	60bb      	str	r3, [r7, #8]
}
 800be6a:	bf00      	nop
 800be6c:	bf00      	nop
 800be6e:	e7fd      	b.n	800be6c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be74:	1e5a      	subs	r2, r3, #1
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be82:	429a      	cmp	r2, r3
 800be84:	d02c      	beq.n	800bee0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d128      	bne.n	800bee0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	3304      	adds	r3, #4
 800be92:	4618      	mov	r0, r3
 800be94:	f7fe fc26 	bl	800a6e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bea4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800beb0:	4b0f      	ldr	r3, [pc, #60]	@ (800bef0 <xTaskPriorityDisinherit+0xd8>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d903      	bls.n	800bec0 <xTaskPriorityDisinherit+0xa8>
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bebc:	4a0c      	ldr	r2, [pc, #48]	@ (800bef0 <xTaskPriorityDisinherit+0xd8>)
 800bebe:	6013      	str	r3, [r2, #0]
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bec4:	4613      	mov	r3, r2
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	4413      	add	r3, r2
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4a09      	ldr	r2, [pc, #36]	@ (800bef4 <xTaskPriorityDisinherit+0xdc>)
 800bece:	441a      	add	r2, r3
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	3304      	adds	r3, #4
 800bed4:	4619      	mov	r1, r3
 800bed6:	4610      	mov	r0, r2
 800bed8:	f7fe fba7 	bl	800a62a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bedc:	2301      	movs	r3, #1
 800bede:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bee0:	697b      	ldr	r3, [r7, #20]
	}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3718      	adds	r7, #24
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	24000a48 	.word	0x24000a48
 800bef0:	24000f24 	.word	0x24000f24
 800bef4:	24000a4c 	.word	0x24000a4c

0800bef8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf02:	4b21      	ldr	r3, [pc, #132]	@ (800bf88 <prvAddCurrentTaskToDelayedList+0x90>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf08:	4b20      	ldr	r3, [pc, #128]	@ (800bf8c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	3304      	adds	r3, #4
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7fe fbe8 	bl	800a6e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf1a:	d10a      	bne.n	800bf32 <prvAddCurrentTaskToDelayedList+0x3a>
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d007      	beq.n	800bf32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf22:	4b1a      	ldr	r3, [pc, #104]	@ (800bf8c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	3304      	adds	r3, #4
 800bf28:	4619      	mov	r1, r3
 800bf2a:	4819      	ldr	r0, [pc, #100]	@ (800bf90 <prvAddCurrentTaskToDelayedList+0x98>)
 800bf2c:	f7fe fb7d 	bl	800a62a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf30:	e026      	b.n	800bf80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	4413      	add	r3, r2
 800bf38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf3a:	4b14      	ldr	r3, [pc, #80]	@ (800bf8c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68ba      	ldr	r2, [r7, #8]
 800bf40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf42:	68ba      	ldr	r2, [r7, #8]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d209      	bcs.n	800bf5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf4a:	4b12      	ldr	r3, [pc, #72]	@ (800bf94 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	4b0f      	ldr	r3, [pc, #60]	@ (800bf8c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	3304      	adds	r3, #4
 800bf54:	4619      	mov	r1, r3
 800bf56:	4610      	mov	r0, r2
 800bf58:	f7fe fb8b 	bl	800a672 <vListInsert>
}
 800bf5c:	e010      	b.n	800bf80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf5e:	4b0e      	ldr	r3, [pc, #56]	@ (800bf98 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	4b0a      	ldr	r3, [pc, #40]	@ (800bf8c <prvAddCurrentTaskToDelayedList+0x94>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	3304      	adds	r3, #4
 800bf68:	4619      	mov	r1, r3
 800bf6a:	4610      	mov	r0, r2
 800bf6c:	f7fe fb81 	bl	800a672 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf70:	4b0a      	ldr	r3, [pc, #40]	@ (800bf9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	68ba      	ldr	r2, [r7, #8]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d202      	bcs.n	800bf80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bf7a:	4a08      	ldr	r2, [pc, #32]	@ (800bf9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	6013      	str	r3, [r2, #0]
}
 800bf80:	bf00      	nop
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	24000f20 	.word	0x24000f20
 800bf8c:	24000a48 	.word	0x24000a48
 800bf90:	24000f08 	.word	0x24000f08
 800bf94:	24000ed8 	.word	0x24000ed8
 800bf98:	24000ed4 	.word	0x24000ed4
 800bf9c:	24000f3c 	.word	0x24000f3c

0800bfa0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b08a      	sub	sp, #40	@ 0x28
 800bfa4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bfaa:	f000 fb13 	bl	800c5d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bfae:	4b1d      	ldr	r3, [pc, #116]	@ (800c024 <xTimerCreateTimerTask+0x84>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d021      	beq.n	800bffa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bfbe:	1d3a      	adds	r2, r7, #4
 800bfc0:	f107 0108 	add.w	r1, r7, #8
 800bfc4:	f107 030c 	add.w	r3, r7, #12
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7fe fae7 	bl	800a59c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bfce:	6879      	ldr	r1, [r7, #4]
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	68fa      	ldr	r2, [r7, #12]
 800bfd4:	9202      	str	r2, [sp, #8]
 800bfd6:	9301      	str	r3, [sp, #4]
 800bfd8:	2302      	movs	r3, #2
 800bfda:	9300      	str	r3, [sp, #0]
 800bfdc:	2300      	movs	r3, #0
 800bfde:	460a      	mov	r2, r1
 800bfe0:	4911      	ldr	r1, [pc, #68]	@ (800c028 <xTimerCreateTimerTask+0x88>)
 800bfe2:	4812      	ldr	r0, [pc, #72]	@ (800c02c <xTimerCreateTimerTask+0x8c>)
 800bfe4:	f7ff f8a2 	bl	800b12c <xTaskCreateStatic>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	4a11      	ldr	r2, [pc, #68]	@ (800c030 <xTimerCreateTimerTask+0x90>)
 800bfec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bfee:	4b10      	ldr	r3, [pc, #64]	@ (800c030 <xTimerCreateTimerTask+0x90>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d001      	beq.n	800bffa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bff6:	2301      	movs	r3, #1
 800bff8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d10b      	bne.n	800c018 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c004:	f383 8811 	msr	BASEPRI, r3
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	613b      	str	r3, [r7, #16]
}
 800c012:	bf00      	nop
 800c014:	bf00      	nop
 800c016:	e7fd      	b.n	800c014 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c018:	697b      	ldr	r3, [r7, #20]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3718      	adds	r7, #24
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	24000f78 	.word	0x24000f78
 800c028:	0800d278 	.word	0x0800d278
 800c02c:	0800c16d 	.word	0x0800c16d
 800c030:	24000f7c 	.word	0x24000f7c

0800c034 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b08a      	sub	sp, #40	@ 0x28
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]
 800c040:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c042:	2300      	movs	r3, #0
 800c044:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d10b      	bne.n	800c064 <xTimerGenericCommand+0x30>
	__asm volatile
 800c04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c050:	f383 8811 	msr	BASEPRI, r3
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	f3bf 8f4f 	dsb	sy
 800c05c:	623b      	str	r3, [r7, #32]
}
 800c05e:	bf00      	nop
 800c060:	bf00      	nop
 800c062:	e7fd      	b.n	800c060 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c064:	4b19      	ldr	r3, [pc, #100]	@ (800c0cc <xTimerGenericCommand+0x98>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d02a      	beq.n	800c0c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	2b05      	cmp	r3, #5
 800c07c:	dc18      	bgt.n	800c0b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c07e:	f7ff fead 	bl	800bddc <xTaskGetSchedulerState>
 800c082:	4603      	mov	r3, r0
 800c084:	2b02      	cmp	r3, #2
 800c086:	d109      	bne.n	800c09c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c088:	4b10      	ldr	r3, [pc, #64]	@ (800c0cc <xTimerGenericCommand+0x98>)
 800c08a:	6818      	ldr	r0, [r3, #0]
 800c08c:	f107 0110 	add.w	r1, r7, #16
 800c090:	2300      	movs	r3, #0
 800c092:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c094:	f7fe fc5a 	bl	800a94c <xQueueGenericSend>
 800c098:	6278      	str	r0, [r7, #36]	@ 0x24
 800c09a:	e012      	b.n	800c0c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c09c:	4b0b      	ldr	r3, [pc, #44]	@ (800c0cc <xTimerGenericCommand+0x98>)
 800c09e:	6818      	ldr	r0, [r3, #0]
 800c0a0:	f107 0110 	add.w	r1, r7, #16
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	f7fe fc50 	bl	800a94c <xQueueGenericSend>
 800c0ac:	6278      	str	r0, [r7, #36]	@ 0x24
 800c0ae:	e008      	b.n	800c0c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c0b0:	4b06      	ldr	r3, [pc, #24]	@ (800c0cc <xTimerGenericCommand+0x98>)
 800c0b2:	6818      	ldr	r0, [r3, #0]
 800c0b4:	f107 0110 	add.w	r1, r7, #16
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	683a      	ldr	r2, [r7, #0]
 800c0bc:	f7fe fd48 	bl	800ab50 <xQueueGenericSendFromISR>
 800c0c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3728      	adds	r7, #40	@ 0x28
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	24000f78 	.word	0x24000f78

0800c0d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b088      	sub	sp, #32
 800c0d4:	af02      	add	r7, sp, #8
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0da:	4b23      	ldr	r3, [pc, #140]	@ (800c168 <prvProcessExpiredTimer+0x98>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	3304      	adds	r3, #4
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7fe fafb 	bl	800a6e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0f4:	f003 0304 	and.w	r3, r3, #4
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d023      	beq.n	800c144 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	699a      	ldr	r2, [r3, #24]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	18d1      	adds	r1, r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	683a      	ldr	r2, [r7, #0]
 800c108:	6978      	ldr	r0, [r7, #20]
 800c10a:	f000 f8d5 	bl	800c2b8 <prvInsertTimerInActiveList>
 800c10e:	4603      	mov	r3, r0
 800c110:	2b00      	cmp	r3, #0
 800c112:	d020      	beq.n	800c156 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c114:	2300      	movs	r3, #0
 800c116:	9300      	str	r3, [sp, #0]
 800c118:	2300      	movs	r3, #0
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	2100      	movs	r1, #0
 800c11e:	6978      	ldr	r0, [r7, #20]
 800c120:	f7ff ff88 	bl	800c034 <xTimerGenericCommand>
 800c124:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d114      	bne.n	800c156 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c130:	f383 8811 	msr	BASEPRI, r3
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	60fb      	str	r3, [r7, #12]
}
 800c13e:	bf00      	nop
 800c140:	bf00      	nop
 800c142:	e7fd      	b.n	800c140 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c14a:	f023 0301 	bic.w	r3, r3, #1
 800c14e:	b2da      	uxtb	r2, r3
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	6a1b      	ldr	r3, [r3, #32]
 800c15a:	6978      	ldr	r0, [r7, #20]
 800c15c:	4798      	blx	r3
}
 800c15e:	bf00      	nop
 800c160:	3718      	adds	r7, #24
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	24000f70 	.word	0x24000f70

0800c16c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c174:	f107 0308 	add.w	r3, r7, #8
 800c178:	4618      	mov	r0, r3
 800c17a:	f000 f859 	bl	800c230 <prvGetNextExpireTime>
 800c17e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	4619      	mov	r1, r3
 800c184:	68f8      	ldr	r0, [r7, #12]
 800c186:	f000 f805 	bl	800c194 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c18a:	f000 f8d7 	bl	800c33c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c18e:	bf00      	nop
 800c190:	e7f0      	b.n	800c174 <prvTimerTask+0x8>
	...

0800c194 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c19e:	f7ff fa29 	bl	800b5f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c1a2:	f107 0308 	add.w	r3, r7, #8
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f000 f866 	bl	800c278 <prvSampleTimeNow>
 800c1ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d130      	bne.n	800c216 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d10a      	bne.n	800c1d0 <prvProcessTimerOrBlockTask+0x3c>
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d806      	bhi.n	800c1d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c1c2:	f7ff fa25 	bl	800b610 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c1c6:	68f9      	ldr	r1, [r7, #12]
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f7ff ff81 	bl	800c0d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c1ce:	e024      	b.n	800c21a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d008      	beq.n	800c1e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c1d6:	4b13      	ldr	r3, [pc, #76]	@ (800c224 <prvProcessTimerOrBlockTask+0x90>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d101      	bne.n	800c1e4 <prvProcessTimerOrBlockTask+0x50>
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	e000      	b.n	800c1e6 <prvProcessTimerOrBlockTask+0x52>
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c1e8:	4b0f      	ldr	r3, [pc, #60]	@ (800c228 <prvProcessTimerOrBlockTask+0x94>)
 800c1ea:	6818      	ldr	r0, [r3, #0]
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	1ad3      	subs	r3, r2, r3
 800c1f2:	683a      	ldr	r2, [r7, #0]
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	f7fe ff65 	bl	800b0c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c1fa:	f7ff fa09 	bl	800b610 <xTaskResumeAll>
 800c1fe:	4603      	mov	r3, r0
 800c200:	2b00      	cmp	r3, #0
 800c202:	d10a      	bne.n	800c21a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c204:	4b09      	ldr	r3, [pc, #36]	@ (800c22c <prvProcessTimerOrBlockTask+0x98>)
 800c206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c20a:	601a      	str	r2, [r3, #0]
 800c20c:	f3bf 8f4f 	dsb	sy
 800c210:	f3bf 8f6f 	isb	sy
}
 800c214:	e001      	b.n	800c21a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c216:	f7ff f9fb 	bl	800b610 <xTaskResumeAll>
}
 800c21a:	bf00      	nop
 800c21c:	3710      	adds	r7, #16
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	24000f74 	.word	0x24000f74
 800c228:	24000f78 	.word	0x24000f78
 800c22c:	e000ed04 	.word	0xe000ed04

0800c230 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c230:	b480      	push	{r7}
 800c232:	b085      	sub	sp, #20
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c238:	4b0e      	ldr	r3, [pc, #56]	@ (800c274 <prvGetNextExpireTime+0x44>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d101      	bne.n	800c246 <prvGetNextExpireTime+0x16>
 800c242:	2201      	movs	r2, #1
 800c244:	e000      	b.n	800c248 <prvGetNextExpireTime+0x18>
 800c246:	2200      	movs	r2, #0
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d105      	bne.n	800c260 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c254:	4b07      	ldr	r3, [pc, #28]	@ (800c274 <prvGetNextExpireTime+0x44>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	60fb      	str	r3, [r7, #12]
 800c25e:	e001      	b.n	800c264 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c260:	2300      	movs	r3, #0
 800c262:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c264:	68fb      	ldr	r3, [r7, #12]
}
 800c266:	4618      	mov	r0, r3
 800c268:	3714      	adds	r7, #20
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	24000f70 	.word	0x24000f70

0800c278 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c280:	f7ff fa64 	bl	800b74c <xTaskGetTickCount>
 800c284:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c286:	4b0b      	ldr	r3, [pc, #44]	@ (800c2b4 <prvSampleTimeNow+0x3c>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	68fa      	ldr	r2, [r7, #12]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d205      	bcs.n	800c29c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c290:	f000 f93a 	bl	800c508 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2201      	movs	r2, #1
 800c298:	601a      	str	r2, [r3, #0]
 800c29a:	e002      	b.n	800c2a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c2a2:	4a04      	ldr	r2, [pc, #16]	@ (800c2b4 <prvSampleTimeNow+0x3c>)
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	24000f80 	.word	0x24000f80

0800c2b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b086      	sub	sp, #24
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
 800c2c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	68ba      	ldr	r2, [r7, #8]
 800c2ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	68fa      	ldr	r2, [r7, #12]
 800c2d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c2d6:	68ba      	ldr	r2, [r7, #8]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d812      	bhi.n	800c304 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	1ad2      	subs	r2, r2, r3
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	699b      	ldr	r3, [r3, #24]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d302      	bcc.n	800c2f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	617b      	str	r3, [r7, #20]
 800c2f0:	e01b      	b.n	800c32a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c2f2:	4b10      	ldr	r3, [pc, #64]	@ (800c334 <prvInsertTimerInActiveList+0x7c>)
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	3304      	adds	r3, #4
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	4610      	mov	r0, r2
 800c2fe:	f7fe f9b8 	bl	800a672 <vListInsert>
 800c302:	e012      	b.n	800c32a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	429a      	cmp	r2, r3
 800c30a:	d206      	bcs.n	800c31a <prvInsertTimerInActiveList+0x62>
 800c30c:	68ba      	ldr	r2, [r7, #8]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	429a      	cmp	r2, r3
 800c312:	d302      	bcc.n	800c31a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c314:	2301      	movs	r3, #1
 800c316:	617b      	str	r3, [r7, #20]
 800c318:	e007      	b.n	800c32a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c31a:	4b07      	ldr	r3, [pc, #28]	@ (800c338 <prvInsertTimerInActiveList+0x80>)
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	3304      	adds	r3, #4
 800c322:	4619      	mov	r1, r3
 800c324:	4610      	mov	r0, r2
 800c326:	f7fe f9a4 	bl	800a672 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c32a:	697b      	ldr	r3, [r7, #20]
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3718      	adds	r7, #24
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	24000f74 	.word	0x24000f74
 800c338:	24000f70 	.word	0x24000f70

0800c33c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b08e      	sub	sp, #56	@ 0x38
 800c340:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c342:	e0ce      	b.n	800c4e2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	da19      	bge.n	800c37e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c34a:	1d3b      	adds	r3, r7, #4
 800c34c:	3304      	adds	r3, #4
 800c34e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c352:	2b00      	cmp	r3, #0
 800c354:	d10b      	bne.n	800c36e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c35a:	f383 8811 	msr	BASEPRI, r3
 800c35e:	f3bf 8f6f 	isb	sy
 800c362:	f3bf 8f4f 	dsb	sy
 800c366:	61fb      	str	r3, [r7, #28]
}
 800c368:	bf00      	nop
 800c36a:	bf00      	nop
 800c36c:	e7fd      	b.n	800c36a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c374:	6850      	ldr	r0, [r2, #4]
 800c376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c378:	6892      	ldr	r2, [r2, #8]
 800c37a:	4611      	mov	r1, r2
 800c37c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b00      	cmp	r3, #0
 800c382:	f2c0 80ae 	blt.w	800c4e2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c38c:	695b      	ldr	r3, [r3, #20]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d004      	beq.n	800c39c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c394:	3304      	adds	r3, #4
 800c396:	4618      	mov	r0, r3
 800c398:	f7fe f9a4 	bl	800a6e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c39c:	463b      	mov	r3, r7
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7ff ff6a 	bl	800c278 <prvSampleTimeNow>
 800c3a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2b09      	cmp	r3, #9
 800c3aa:	f200 8097 	bhi.w	800c4dc <prvProcessReceivedCommands+0x1a0>
 800c3ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c3b4 <prvProcessReceivedCommands+0x78>)
 800c3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b4:	0800c3dd 	.word	0x0800c3dd
 800c3b8:	0800c3dd 	.word	0x0800c3dd
 800c3bc:	0800c3dd 	.word	0x0800c3dd
 800c3c0:	0800c453 	.word	0x0800c453
 800c3c4:	0800c467 	.word	0x0800c467
 800c3c8:	0800c4b3 	.word	0x0800c4b3
 800c3cc:	0800c3dd 	.word	0x0800c3dd
 800c3d0:	0800c3dd 	.word	0x0800c3dd
 800c3d4:	0800c453 	.word	0x0800c453
 800c3d8:	0800c467 	.word	0x0800c467
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3e2:	f043 0301 	orr.w	r3, r3, #1
 800c3e6:	b2da      	uxtb	r2, r3
 800c3e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c3ee:	68ba      	ldr	r2, [r7, #8]
 800c3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3f2:	699b      	ldr	r3, [r3, #24]
 800c3f4:	18d1      	adds	r1, r2, r3
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3fc:	f7ff ff5c 	bl	800c2b8 <prvInsertTimerInActiveList>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d06c      	beq.n	800c4e0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c408:	6a1b      	ldr	r3, [r3, #32]
 800c40a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c40c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c410:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c414:	f003 0304 	and.w	r3, r3, #4
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d061      	beq.n	800c4e0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c420:	699b      	ldr	r3, [r3, #24]
 800c422:	441a      	add	r2, r3
 800c424:	2300      	movs	r3, #0
 800c426:	9300      	str	r3, [sp, #0]
 800c428:	2300      	movs	r3, #0
 800c42a:	2100      	movs	r1, #0
 800c42c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c42e:	f7ff fe01 	bl	800c034 <xTimerGenericCommand>
 800c432:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c434:	6a3b      	ldr	r3, [r7, #32]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d152      	bne.n	800c4e0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c43e:	f383 8811 	msr	BASEPRI, r3
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	f3bf 8f4f 	dsb	sy
 800c44a:	61bb      	str	r3, [r7, #24]
}
 800c44c:	bf00      	nop
 800c44e:	bf00      	nop
 800c450:	e7fd      	b.n	800c44e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c454:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c458:	f023 0301 	bic.w	r3, r3, #1
 800c45c:	b2da      	uxtb	r2, r3
 800c45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c460:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c464:	e03d      	b.n	800c4e2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c468:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c46c:	f043 0301 	orr.w	r3, r3, #1
 800c470:	b2da      	uxtb	r2, r3
 800c472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c474:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c478:	68ba      	ldr	r2, [r7, #8]
 800c47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c47c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c480:	699b      	ldr	r3, [r3, #24]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d10b      	bne.n	800c49e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c48a:	f383 8811 	msr	BASEPRI, r3
 800c48e:	f3bf 8f6f 	isb	sy
 800c492:	f3bf 8f4f 	dsb	sy
 800c496:	617b      	str	r3, [r7, #20]
}
 800c498:	bf00      	nop
 800c49a:	bf00      	nop
 800c49c:	e7fd      	b.n	800c49a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a0:	699a      	ldr	r2, [r3, #24]
 800c4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a4:	18d1      	adds	r1, r2, r3
 800c4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4ac:	f7ff ff04 	bl	800c2b8 <prvInsertTimerInActiveList>
					break;
 800c4b0:	e017      	b.n	800c4e2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4b8:	f003 0302 	and.w	r3, r3, #2
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d103      	bne.n	800c4c8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c4c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4c2:	f000 fbe9 	bl	800cc98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c4c6:	e00c      	b.n	800c4e2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4ce:	f023 0301 	bic.w	r3, r3, #1
 800c4d2:	b2da      	uxtb	r2, r3
 800c4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c4da:	e002      	b.n	800c4e2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c4dc:	bf00      	nop
 800c4de:	e000      	b.n	800c4e2 <prvProcessReceivedCommands+0x1a6>
					break;
 800c4e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c4e2:	4b08      	ldr	r3, [pc, #32]	@ (800c504 <prvProcessReceivedCommands+0x1c8>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	1d39      	adds	r1, r7, #4
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fe fbce 	bl	800ac8c <xQueueReceive>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	f47f af26 	bne.w	800c344 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c4f8:	bf00      	nop
 800c4fa:	bf00      	nop
 800c4fc:	3730      	adds	r7, #48	@ 0x30
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	24000f78 	.word	0x24000f78

0800c508 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b088      	sub	sp, #32
 800c50c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c50e:	e049      	b.n	800c5a4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c510:	4b2e      	ldr	r3, [pc, #184]	@ (800c5cc <prvSwitchTimerLists+0xc4>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c51a:	4b2c      	ldr	r3, [pc, #176]	@ (800c5cc <prvSwitchTimerLists+0xc4>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	3304      	adds	r3, #4
 800c528:	4618      	mov	r0, r3
 800c52a:	f7fe f8db 	bl	800a6e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	6a1b      	ldr	r3, [r3, #32]
 800c532:	68f8      	ldr	r0, [r7, #12]
 800c534:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c53c:	f003 0304 	and.w	r3, r3, #4
 800c540:	2b00      	cmp	r3, #0
 800c542:	d02f      	beq.n	800c5a4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	699b      	ldr	r3, [r3, #24]
 800c548:	693a      	ldr	r2, [r7, #16]
 800c54a:	4413      	add	r3, r2
 800c54c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	429a      	cmp	r2, r3
 800c554:	d90e      	bls.n	800c574 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	68ba      	ldr	r2, [r7, #8]
 800c55a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	68fa      	ldr	r2, [r7, #12]
 800c560:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c562:	4b1a      	ldr	r3, [pc, #104]	@ (800c5cc <prvSwitchTimerLists+0xc4>)
 800c564:	681a      	ldr	r2, [r3, #0]
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	3304      	adds	r3, #4
 800c56a:	4619      	mov	r1, r3
 800c56c:	4610      	mov	r0, r2
 800c56e:	f7fe f880 	bl	800a672 <vListInsert>
 800c572:	e017      	b.n	800c5a4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c574:	2300      	movs	r3, #0
 800c576:	9300      	str	r3, [sp, #0]
 800c578:	2300      	movs	r3, #0
 800c57a:	693a      	ldr	r2, [r7, #16]
 800c57c:	2100      	movs	r1, #0
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f7ff fd58 	bl	800c034 <xTimerGenericCommand>
 800c584:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d10b      	bne.n	800c5a4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c590:	f383 8811 	msr	BASEPRI, r3
 800c594:	f3bf 8f6f 	isb	sy
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	603b      	str	r3, [r7, #0]
}
 800c59e:	bf00      	nop
 800c5a0:	bf00      	nop
 800c5a2:	e7fd      	b.n	800c5a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c5a4:	4b09      	ldr	r3, [pc, #36]	@ (800c5cc <prvSwitchTimerLists+0xc4>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1b0      	bne.n	800c510 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c5ae:	4b07      	ldr	r3, [pc, #28]	@ (800c5cc <prvSwitchTimerLists+0xc4>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c5b4:	4b06      	ldr	r3, [pc, #24]	@ (800c5d0 <prvSwitchTimerLists+0xc8>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a04      	ldr	r2, [pc, #16]	@ (800c5cc <prvSwitchTimerLists+0xc4>)
 800c5ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c5bc:	4a04      	ldr	r2, [pc, #16]	@ (800c5d0 <prvSwitchTimerLists+0xc8>)
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	6013      	str	r3, [r2, #0]
}
 800c5c2:	bf00      	nop
 800c5c4:	3718      	adds	r7, #24
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	24000f70 	.word	0x24000f70
 800c5d0:	24000f74 	.word	0x24000f74

0800c5d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c5da:	f000 f96d 	bl	800c8b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c5de:	4b15      	ldr	r3, [pc, #84]	@ (800c634 <prvCheckForValidListAndQueue+0x60>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d120      	bne.n	800c628 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c5e6:	4814      	ldr	r0, [pc, #80]	@ (800c638 <prvCheckForValidListAndQueue+0x64>)
 800c5e8:	f7fd fff2 	bl	800a5d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c5ec:	4813      	ldr	r0, [pc, #76]	@ (800c63c <prvCheckForValidListAndQueue+0x68>)
 800c5ee:	f7fd ffef 	bl	800a5d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c5f2:	4b13      	ldr	r3, [pc, #76]	@ (800c640 <prvCheckForValidListAndQueue+0x6c>)
 800c5f4:	4a10      	ldr	r2, [pc, #64]	@ (800c638 <prvCheckForValidListAndQueue+0x64>)
 800c5f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c5f8:	4b12      	ldr	r3, [pc, #72]	@ (800c644 <prvCheckForValidListAndQueue+0x70>)
 800c5fa:	4a10      	ldr	r2, [pc, #64]	@ (800c63c <prvCheckForValidListAndQueue+0x68>)
 800c5fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c5fe:	2300      	movs	r3, #0
 800c600:	9300      	str	r3, [sp, #0]
 800c602:	4b11      	ldr	r3, [pc, #68]	@ (800c648 <prvCheckForValidListAndQueue+0x74>)
 800c604:	4a11      	ldr	r2, [pc, #68]	@ (800c64c <prvCheckForValidListAndQueue+0x78>)
 800c606:	2110      	movs	r1, #16
 800c608:	200a      	movs	r0, #10
 800c60a:	f7fe f8ff 	bl	800a80c <xQueueGenericCreateStatic>
 800c60e:	4603      	mov	r3, r0
 800c610:	4a08      	ldr	r2, [pc, #32]	@ (800c634 <prvCheckForValidListAndQueue+0x60>)
 800c612:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c614:	4b07      	ldr	r3, [pc, #28]	@ (800c634 <prvCheckForValidListAndQueue+0x60>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d005      	beq.n	800c628 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c61c:	4b05      	ldr	r3, [pc, #20]	@ (800c634 <prvCheckForValidListAndQueue+0x60>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	490b      	ldr	r1, [pc, #44]	@ (800c650 <prvCheckForValidListAndQueue+0x7c>)
 800c622:	4618      	mov	r0, r3
 800c624:	f7fe fd24 	bl	800b070 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c628:	f000 f978 	bl	800c91c <vPortExitCritical>
}
 800c62c:	bf00      	nop
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	24000f78 	.word	0x24000f78
 800c638:	24000f48 	.word	0x24000f48
 800c63c:	24000f5c 	.word	0x24000f5c
 800c640:	24000f70 	.word	0x24000f70
 800c644:	24000f74 	.word	0x24000f74
 800c648:	24001024 	.word	0x24001024
 800c64c:	24000f84 	.word	0x24000f84
 800c650:	0800d280 	.word	0x0800d280

0800c654 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	3b04      	subs	r3, #4
 800c664:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c66c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	3b04      	subs	r3, #4
 800c672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	f023 0201 	bic.w	r2, r3, #1
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	3b04      	subs	r3, #4
 800c682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c684:	4a0c      	ldr	r2, [pc, #48]	@ (800c6b8 <pxPortInitialiseStack+0x64>)
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	3b14      	subs	r3, #20
 800c68e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	3b04      	subs	r3, #4
 800c69a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f06f 0202 	mvn.w	r2, #2
 800c6a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	3b20      	subs	r3, #32
 800c6a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3714      	adds	r7, #20
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr
 800c6b8:	0800c6bd 	.word	0x0800c6bd

0800c6bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b085      	sub	sp, #20
 800c6c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c6c6:	4b13      	ldr	r3, [pc, #76]	@ (800c714 <prvTaskExitError+0x58>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ce:	d00b      	beq.n	800c6e8 <prvTaskExitError+0x2c>
	__asm volatile
 800c6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d4:	f383 8811 	msr	BASEPRI, r3
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	60fb      	str	r3, [r7, #12]
}
 800c6e2:	bf00      	nop
 800c6e4:	bf00      	nop
 800c6e6:	e7fd      	b.n	800c6e4 <prvTaskExitError+0x28>
	__asm volatile
 800c6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ec:	f383 8811 	msr	BASEPRI, r3
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	60bb      	str	r3, [r7, #8]
}
 800c6fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c6fc:	bf00      	nop
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d0fc      	beq.n	800c6fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c704:	bf00      	nop
 800c706:	bf00      	nop
 800c708:	3714      	adds	r7, #20
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	24000010 	.word	0x24000010
	...

0800c720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c720:	4b07      	ldr	r3, [pc, #28]	@ (800c740 <pxCurrentTCBConst2>)
 800c722:	6819      	ldr	r1, [r3, #0]
 800c724:	6808      	ldr	r0, [r1, #0]
 800c726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c72a:	f380 8809 	msr	PSP, r0
 800c72e:	f3bf 8f6f 	isb	sy
 800c732:	f04f 0000 	mov.w	r0, #0
 800c736:	f380 8811 	msr	BASEPRI, r0
 800c73a:	4770      	bx	lr
 800c73c:	f3af 8000 	nop.w

0800c740 <pxCurrentTCBConst2>:
 800c740:	24000a48 	.word	0x24000a48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c744:	bf00      	nop
 800c746:	bf00      	nop

0800c748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c748:	4808      	ldr	r0, [pc, #32]	@ (800c76c <prvPortStartFirstTask+0x24>)
 800c74a:	6800      	ldr	r0, [r0, #0]
 800c74c:	6800      	ldr	r0, [r0, #0]
 800c74e:	f380 8808 	msr	MSP, r0
 800c752:	f04f 0000 	mov.w	r0, #0
 800c756:	f380 8814 	msr	CONTROL, r0
 800c75a:	b662      	cpsie	i
 800c75c:	b661      	cpsie	f
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	f3bf 8f6f 	isb	sy
 800c766:	df00      	svc	0
 800c768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c76a:	bf00      	nop
 800c76c:	e000ed08 	.word	0xe000ed08

0800c770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b086      	sub	sp, #24
 800c774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c776:	4b47      	ldr	r3, [pc, #284]	@ (800c894 <xPortStartScheduler+0x124>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a47      	ldr	r2, [pc, #284]	@ (800c898 <xPortStartScheduler+0x128>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d10b      	bne.n	800c798 <xPortStartScheduler+0x28>
	__asm volatile
 800c780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c784:	f383 8811 	msr	BASEPRI, r3
 800c788:	f3bf 8f6f 	isb	sy
 800c78c:	f3bf 8f4f 	dsb	sy
 800c790:	60fb      	str	r3, [r7, #12]
}
 800c792:	bf00      	nop
 800c794:	bf00      	nop
 800c796:	e7fd      	b.n	800c794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c798:	4b3e      	ldr	r3, [pc, #248]	@ (800c894 <xPortStartScheduler+0x124>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a3f      	ldr	r2, [pc, #252]	@ (800c89c <xPortStartScheduler+0x12c>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d10b      	bne.n	800c7ba <xPortStartScheduler+0x4a>
	__asm volatile
 800c7a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a6:	f383 8811 	msr	BASEPRI, r3
 800c7aa:	f3bf 8f6f 	isb	sy
 800c7ae:	f3bf 8f4f 	dsb	sy
 800c7b2:	613b      	str	r3, [r7, #16]
}
 800c7b4:	bf00      	nop
 800c7b6:	bf00      	nop
 800c7b8:	e7fd      	b.n	800c7b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c7ba:	4b39      	ldr	r3, [pc, #228]	@ (800c8a0 <xPortStartScheduler+0x130>)
 800c7bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	22ff      	movs	r2, #255	@ 0xff
 800c7ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c7d4:	78fb      	ldrb	r3, [r7, #3]
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c7dc:	b2da      	uxtb	r2, r3
 800c7de:	4b31      	ldr	r3, [pc, #196]	@ (800c8a4 <xPortStartScheduler+0x134>)
 800c7e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c7e2:	4b31      	ldr	r3, [pc, #196]	@ (800c8a8 <xPortStartScheduler+0x138>)
 800c7e4:	2207      	movs	r2, #7
 800c7e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7e8:	e009      	b.n	800c7fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c7ea:	4b2f      	ldr	r3, [pc, #188]	@ (800c8a8 <xPortStartScheduler+0x138>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	3b01      	subs	r3, #1
 800c7f0:	4a2d      	ldr	r2, [pc, #180]	@ (800c8a8 <xPortStartScheduler+0x138>)
 800c7f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c7f4:	78fb      	ldrb	r3, [r7, #3]
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	005b      	lsls	r3, r3, #1
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7fe:	78fb      	ldrb	r3, [r7, #3]
 800c800:	b2db      	uxtb	r3, r3
 800c802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c806:	2b80      	cmp	r3, #128	@ 0x80
 800c808:	d0ef      	beq.n	800c7ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c80a:	4b27      	ldr	r3, [pc, #156]	@ (800c8a8 <xPortStartScheduler+0x138>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f1c3 0307 	rsb	r3, r3, #7
 800c812:	2b04      	cmp	r3, #4
 800c814:	d00b      	beq.n	800c82e <xPortStartScheduler+0xbe>
	__asm volatile
 800c816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c81a:	f383 8811 	msr	BASEPRI, r3
 800c81e:	f3bf 8f6f 	isb	sy
 800c822:	f3bf 8f4f 	dsb	sy
 800c826:	60bb      	str	r3, [r7, #8]
}
 800c828:	bf00      	nop
 800c82a:	bf00      	nop
 800c82c:	e7fd      	b.n	800c82a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c82e:	4b1e      	ldr	r3, [pc, #120]	@ (800c8a8 <xPortStartScheduler+0x138>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	021b      	lsls	r3, r3, #8
 800c834:	4a1c      	ldr	r2, [pc, #112]	@ (800c8a8 <xPortStartScheduler+0x138>)
 800c836:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c838:	4b1b      	ldr	r3, [pc, #108]	@ (800c8a8 <xPortStartScheduler+0x138>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c840:	4a19      	ldr	r2, [pc, #100]	@ (800c8a8 <xPortStartScheduler+0x138>)
 800c842:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	b2da      	uxtb	r2, r3
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c84c:	4b17      	ldr	r3, [pc, #92]	@ (800c8ac <xPortStartScheduler+0x13c>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a16      	ldr	r2, [pc, #88]	@ (800c8ac <xPortStartScheduler+0x13c>)
 800c852:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c856:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c858:	4b14      	ldr	r3, [pc, #80]	@ (800c8ac <xPortStartScheduler+0x13c>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a13      	ldr	r2, [pc, #76]	@ (800c8ac <xPortStartScheduler+0x13c>)
 800c85e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c862:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c864:	f000 f8da 	bl	800ca1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c868:	4b11      	ldr	r3, [pc, #68]	@ (800c8b0 <xPortStartScheduler+0x140>)
 800c86a:	2200      	movs	r2, #0
 800c86c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c86e:	f000 f8f9 	bl	800ca64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c872:	4b10      	ldr	r3, [pc, #64]	@ (800c8b4 <xPortStartScheduler+0x144>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4a0f      	ldr	r2, [pc, #60]	@ (800c8b4 <xPortStartScheduler+0x144>)
 800c878:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c87c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c87e:	f7ff ff63 	bl	800c748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c882:	f7ff f82d 	bl	800b8e0 <vTaskSwitchContext>
	prvTaskExitError();
 800c886:	f7ff ff19 	bl	800c6bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c88a:	2300      	movs	r3, #0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3718      	adds	r7, #24
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	e000ed00 	.word	0xe000ed00
 800c898:	410fc271 	.word	0x410fc271
 800c89c:	410fc270 	.word	0x410fc270
 800c8a0:	e000e400 	.word	0xe000e400
 800c8a4:	24001074 	.word	0x24001074
 800c8a8:	24001078 	.word	0x24001078
 800c8ac:	e000ed20 	.word	0xe000ed20
 800c8b0:	24000010 	.word	0x24000010
 800c8b4:	e000ef34 	.word	0xe000ef34

0800c8b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c2:	f383 8811 	msr	BASEPRI, r3
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	f3bf 8f4f 	dsb	sy
 800c8ce:	607b      	str	r3, [r7, #4]
}
 800c8d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c8d2:	4b10      	ldr	r3, [pc, #64]	@ (800c914 <vPortEnterCritical+0x5c>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	4a0e      	ldr	r2, [pc, #56]	@ (800c914 <vPortEnterCritical+0x5c>)
 800c8da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c8dc:	4b0d      	ldr	r3, [pc, #52]	@ (800c914 <vPortEnterCritical+0x5c>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d110      	bne.n	800c906 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c8e4:	4b0c      	ldr	r3, [pc, #48]	@ (800c918 <vPortEnterCritical+0x60>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00b      	beq.n	800c906 <vPortEnterCritical+0x4e>
	__asm volatile
 800c8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f2:	f383 8811 	msr	BASEPRI, r3
 800c8f6:	f3bf 8f6f 	isb	sy
 800c8fa:	f3bf 8f4f 	dsb	sy
 800c8fe:	603b      	str	r3, [r7, #0]
}
 800c900:	bf00      	nop
 800c902:	bf00      	nop
 800c904:	e7fd      	b.n	800c902 <vPortEnterCritical+0x4a>
	}
}
 800c906:	bf00      	nop
 800c908:	370c      	adds	r7, #12
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	24000010 	.word	0x24000010
 800c918:	e000ed04 	.word	0xe000ed04

0800c91c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c922:	4b12      	ldr	r3, [pc, #72]	@ (800c96c <vPortExitCritical+0x50>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d10b      	bne.n	800c942 <vPortExitCritical+0x26>
	__asm volatile
 800c92a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c92e:	f383 8811 	msr	BASEPRI, r3
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	607b      	str	r3, [r7, #4]
}
 800c93c:	bf00      	nop
 800c93e:	bf00      	nop
 800c940:	e7fd      	b.n	800c93e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c942:	4b0a      	ldr	r3, [pc, #40]	@ (800c96c <vPortExitCritical+0x50>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	3b01      	subs	r3, #1
 800c948:	4a08      	ldr	r2, [pc, #32]	@ (800c96c <vPortExitCritical+0x50>)
 800c94a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c94c:	4b07      	ldr	r3, [pc, #28]	@ (800c96c <vPortExitCritical+0x50>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d105      	bne.n	800c960 <vPortExitCritical+0x44>
 800c954:	2300      	movs	r3, #0
 800c956:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	f383 8811 	msr	BASEPRI, r3
}
 800c95e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c960:	bf00      	nop
 800c962:	370c      	adds	r7, #12
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr
 800c96c:	24000010 	.word	0x24000010

0800c970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c970:	f3ef 8009 	mrs	r0, PSP
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	4b15      	ldr	r3, [pc, #84]	@ (800c9d0 <pxCurrentTCBConst>)
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	f01e 0f10 	tst.w	lr, #16
 800c980:	bf08      	it	eq
 800c982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c98a:	6010      	str	r0, [r2, #0]
 800c98c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c990:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c994:	f380 8811 	msr	BASEPRI, r0
 800c998:	f3bf 8f4f 	dsb	sy
 800c99c:	f3bf 8f6f 	isb	sy
 800c9a0:	f7fe ff9e 	bl	800b8e0 <vTaskSwitchContext>
 800c9a4:	f04f 0000 	mov.w	r0, #0
 800c9a8:	f380 8811 	msr	BASEPRI, r0
 800c9ac:	bc09      	pop	{r0, r3}
 800c9ae:	6819      	ldr	r1, [r3, #0]
 800c9b0:	6808      	ldr	r0, [r1, #0]
 800c9b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b6:	f01e 0f10 	tst.w	lr, #16
 800c9ba:	bf08      	it	eq
 800c9bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c9c0:	f380 8809 	msr	PSP, r0
 800c9c4:	f3bf 8f6f 	isb	sy
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	f3af 8000 	nop.w

0800c9d0 <pxCurrentTCBConst>:
 800c9d0:	24000a48 	.word	0x24000a48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c9d4:	bf00      	nop
 800c9d6:	bf00      	nop

0800c9d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9e2:	f383 8811 	msr	BASEPRI, r3
 800c9e6:	f3bf 8f6f 	isb	sy
 800c9ea:	f3bf 8f4f 	dsb	sy
 800c9ee:	607b      	str	r3, [r7, #4]
}
 800c9f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c9f2:	f7fe febb 	bl	800b76c <xTaskIncrementTick>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d003      	beq.n	800ca04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c9fc:	4b06      	ldr	r3, [pc, #24]	@ (800ca18 <xPortSysTickHandler+0x40>)
 800c9fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca02:	601a      	str	r2, [r3, #0]
 800ca04:	2300      	movs	r3, #0
 800ca06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	f383 8811 	msr	BASEPRI, r3
}
 800ca0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca10:	bf00      	nop
 800ca12:	3708      	adds	r7, #8
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	e000ed04 	.word	0xe000ed04

0800ca1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ca20:	4b0b      	ldr	r3, [pc, #44]	@ (800ca50 <vPortSetupTimerInterrupt+0x34>)
 800ca22:	2200      	movs	r2, #0
 800ca24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca26:	4b0b      	ldr	r3, [pc, #44]	@ (800ca54 <vPortSetupTimerInterrupt+0x38>)
 800ca28:	2200      	movs	r2, #0
 800ca2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ca58 <vPortSetupTimerInterrupt+0x3c>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a0a      	ldr	r2, [pc, #40]	@ (800ca5c <vPortSetupTimerInterrupt+0x40>)
 800ca32:	fba2 2303 	umull	r2, r3, r2, r3
 800ca36:	099b      	lsrs	r3, r3, #6
 800ca38:	4a09      	ldr	r2, [pc, #36]	@ (800ca60 <vPortSetupTimerInterrupt+0x44>)
 800ca3a:	3b01      	subs	r3, #1
 800ca3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ca3e:	4b04      	ldr	r3, [pc, #16]	@ (800ca50 <vPortSetupTimerInterrupt+0x34>)
 800ca40:	2207      	movs	r2, #7
 800ca42:	601a      	str	r2, [r3, #0]
}
 800ca44:	bf00      	nop
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	e000e010 	.word	0xe000e010
 800ca54:	e000e018 	.word	0xe000e018
 800ca58:	24000000 	.word	0x24000000
 800ca5c:	10624dd3 	.word	0x10624dd3
 800ca60:	e000e014 	.word	0xe000e014

0800ca64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ca74 <vPortEnableVFP+0x10>
 800ca68:	6801      	ldr	r1, [r0, #0]
 800ca6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ca6e:	6001      	str	r1, [r0, #0]
 800ca70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca72:	bf00      	nop
 800ca74:	e000ed88 	.word	0xe000ed88

0800ca78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca7e:	f3ef 8305 	mrs	r3, IPSR
 800ca82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2b0f      	cmp	r3, #15
 800ca88:	d915      	bls.n	800cab6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca8a:	4a18      	ldr	r2, [pc, #96]	@ (800caec <vPortValidateInterruptPriority+0x74>)
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	4413      	add	r3, r2
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca94:	4b16      	ldr	r3, [pc, #88]	@ (800caf0 <vPortValidateInterruptPriority+0x78>)
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	7afa      	ldrb	r2, [r7, #11]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d20b      	bcs.n	800cab6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ca9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caa2:	f383 8811 	msr	BASEPRI, r3
 800caa6:	f3bf 8f6f 	isb	sy
 800caaa:	f3bf 8f4f 	dsb	sy
 800caae:	607b      	str	r3, [r7, #4]
}
 800cab0:	bf00      	nop
 800cab2:	bf00      	nop
 800cab4:	e7fd      	b.n	800cab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cab6:	4b0f      	ldr	r3, [pc, #60]	@ (800caf4 <vPortValidateInterruptPriority+0x7c>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cabe:	4b0e      	ldr	r3, [pc, #56]	@ (800caf8 <vPortValidateInterruptPriority+0x80>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d90b      	bls.n	800cade <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caca:	f383 8811 	msr	BASEPRI, r3
 800cace:	f3bf 8f6f 	isb	sy
 800cad2:	f3bf 8f4f 	dsb	sy
 800cad6:	603b      	str	r3, [r7, #0]
}
 800cad8:	bf00      	nop
 800cada:	bf00      	nop
 800cadc:	e7fd      	b.n	800cada <vPortValidateInterruptPriority+0x62>
	}
 800cade:	bf00      	nop
 800cae0:	3714      	adds	r7, #20
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	e000e3f0 	.word	0xe000e3f0
 800caf0:	24001074 	.word	0x24001074
 800caf4:	e000ed0c 	.word	0xe000ed0c
 800caf8:	24001078 	.word	0x24001078

0800cafc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b08a      	sub	sp, #40	@ 0x28
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cb04:	2300      	movs	r3, #0
 800cb06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cb08:	f7fe fd74 	bl	800b5f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cb0c:	4b5c      	ldr	r3, [pc, #368]	@ (800cc80 <pvPortMalloc+0x184>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d101      	bne.n	800cb18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cb14:	f000 f924 	bl	800cd60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cb18:	4b5a      	ldr	r3, [pc, #360]	@ (800cc84 <pvPortMalloc+0x188>)
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4013      	ands	r3, r2
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f040 8095 	bne.w	800cc50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d01e      	beq.n	800cb6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cb2c:	2208      	movs	r2, #8
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	4413      	add	r3, r2
 800cb32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f003 0307 	and.w	r3, r3, #7
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d015      	beq.n	800cb6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f023 0307 	bic.w	r3, r3, #7
 800cb44:	3308      	adds	r3, #8
 800cb46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f003 0307 	and.w	r3, r3, #7
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d00b      	beq.n	800cb6a <pvPortMalloc+0x6e>
	__asm volatile
 800cb52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb56:	f383 8811 	msr	BASEPRI, r3
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	617b      	str	r3, [r7, #20]
}
 800cb64:	bf00      	nop
 800cb66:	bf00      	nop
 800cb68:	e7fd      	b.n	800cb66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d06f      	beq.n	800cc50 <pvPortMalloc+0x154>
 800cb70:	4b45      	ldr	r3, [pc, #276]	@ (800cc88 <pvPortMalloc+0x18c>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d86a      	bhi.n	800cc50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb7a:	4b44      	ldr	r3, [pc, #272]	@ (800cc8c <pvPortMalloc+0x190>)
 800cb7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb7e:	4b43      	ldr	r3, [pc, #268]	@ (800cc8c <pvPortMalloc+0x190>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb84:	e004      	b.n	800cb90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d903      	bls.n	800cba2 <pvPortMalloc+0xa6>
 800cb9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d1f1      	bne.n	800cb86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cba2:	4b37      	ldr	r3, [pc, #220]	@ (800cc80 <pvPortMalloc+0x184>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d051      	beq.n	800cc50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cbac:	6a3b      	ldr	r3, [r7, #32]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	2208      	movs	r2, #8
 800cbb2:	4413      	add	r3, r2
 800cbb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	6a3b      	ldr	r3, [r7, #32]
 800cbbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc0:	685a      	ldr	r2, [r3, #4]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	1ad2      	subs	r2, r2, r3
 800cbc6:	2308      	movs	r3, #8
 800cbc8:	005b      	lsls	r3, r3, #1
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d920      	bls.n	800cc10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cbce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	4413      	add	r3, r2
 800cbd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	f003 0307 	and.w	r3, r3, #7
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d00b      	beq.n	800cbf8 <pvPortMalloc+0xfc>
	__asm volatile
 800cbe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbe4:	f383 8811 	msr	BASEPRI, r3
 800cbe8:	f3bf 8f6f 	isb	sy
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	613b      	str	r3, [r7, #16]
}
 800cbf2:	bf00      	nop
 800cbf4:	bf00      	nop
 800cbf6:	e7fd      	b.n	800cbf4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cbf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbfa:	685a      	ldr	r2, [r3, #4]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	1ad2      	subs	r2, r2, r3
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cc0a:	69b8      	ldr	r0, [r7, #24]
 800cc0c:	f000 f90a 	bl	800ce24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc10:	4b1d      	ldr	r3, [pc, #116]	@ (800cc88 <pvPortMalloc+0x18c>)
 800cc12:	681a      	ldr	r2, [r3, #0]
 800cc14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc16:	685b      	ldr	r3, [r3, #4]
 800cc18:	1ad3      	subs	r3, r2, r3
 800cc1a:	4a1b      	ldr	r2, [pc, #108]	@ (800cc88 <pvPortMalloc+0x18c>)
 800cc1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc1e:	4b1a      	ldr	r3, [pc, #104]	@ (800cc88 <pvPortMalloc+0x18c>)
 800cc20:	681a      	ldr	r2, [r3, #0]
 800cc22:	4b1b      	ldr	r3, [pc, #108]	@ (800cc90 <pvPortMalloc+0x194>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d203      	bcs.n	800cc32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cc2a:	4b17      	ldr	r3, [pc, #92]	@ (800cc88 <pvPortMalloc+0x18c>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	4a18      	ldr	r2, [pc, #96]	@ (800cc90 <pvPortMalloc+0x194>)
 800cc30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc34:	685a      	ldr	r2, [r3, #4]
 800cc36:	4b13      	ldr	r3, [pc, #76]	@ (800cc84 <pvPortMalloc+0x188>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	431a      	orrs	r2, r3
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc42:	2200      	movs	r2, #0
 800cc44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cc46:	4b13      	ldr	r3, [pc, #76]	@ (800cc94 <pvPortMalloc+0x198>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	4a11      	ldr	r2, [pc, #68]	@ (800cc94 <pvPortMalloc+0x198>)
 800cc4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc50:	f7fe fcde 	bl	800b610 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc54:	69fb      	ldr	r3, [r7, #28]
 800cc56:	f003 0307 	and.w	r3, r3, #7
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00b      	beq.n	800cc76 <pvPortMalloc+0x17a>
	__asm volatile
 800cc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc62:	f383 8811 	msr	BASEPRI, r3
 800cc66:	f3bf 8f6f 	isb	sy
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	60fb      	str	r3, [r7, #12]
}
 800cc70:	bf00      	nop
 800cc72:	bf00      	nop
 800cc74:	e7fd      	b.n	800cc72 <pvPortMalloc+0x176>
	return pvReturn;
 800cc76:	69fb      	ldr	r3, [r7, #28]
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3728      	adds	r7, #40	@ 0x28
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	24004c84 	.word	0x24004c84
 800cc84:	24004c98 	.word	0x24004c98
 800cc88:	24004c88 	.word	0x24004c88
 800cc8c:	24004c7c 	.word	0x24004c7c
 800cc90:	24004c8c 	.word	0x24004c8c
 800cc94:	24004c90 	.word	0x24004c90

0800cc98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b086      	sub	sp, #24
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d04f      	beq.n	800cd4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ccaa:	2308      	movs	r3, #8
 800ccac:	425b      	negs	r3, r3
 800ccae:	697a      	ldr	r2, [r7, #20]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	685a      	ldr	r2, [r3, #4]
 800ccbc:	4b25      	ldr	r3, [pc, #148]	@ (800cd54 <vPortFree+0xbc>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4013      	ands	r3, r2
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d10b      	bne.n	800ccde <vPortFree+0x46>
	__asm volatile
 800ccc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccca:	f383 8811 	msr	BASEPRI, r3
 800ccce:	f3bf 8f6f 	isb	sy
 800ccd2:	f3bf 8f4f 	dsb	sy
 800ccd6:	60fb      	str	r3, [r7, #12]
}
 800ccd8:	bf00      	nop
 800ccda:	bf00      	nop
 800ccdc:	e7fd      	b.n	800ccda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d00b      	beq.n	800ccfe <vPortFree+0x66>
	__asm volatile
 800cce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccea:	f383 8811 	msr	BASEPRI, r3
 800ccee:	f3bf 8f6f 	isb	sy
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	60bb      	str	r3, [r7, #8]
}
 800ccf8:	bf00      	nop
 800ccfa:	bf00      	nop
 800ccfc:	e7fd      	b.n	800ccfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	685a      	ldr	r2, [r3, #4]
 800cd02:	4b14      	ldr	r3, [pc, #80]	@ (800cd54 <vPortFree+0xbc>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4013      	ands	r3, r2
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d01e      	beq.n	800cd4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d11a      	bne.n	800cd4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	685a      	ldr	r2, [r3, #4]
 800cd18:	4b0e      	ldr	r3, [pc, #56]	@ (800cd54 <vPortFree+0xbc>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	43db      	mvns	r3, r3
 800cd1e:	401a      	ands	r2, r3
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cd24:	f7fe fc66 	bl	800b5f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	685a      	ldr	r2, [r3, #4]
 800cd2c:	4b0a      	ldr	r3, [pc, #40]	@ (800cd58 <vPortFree+0xc0>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4413      	add	r3, r2
 800cd32:	4a09      	ldr	r2, [pc, #36]	@ (800cd58 <vPortFree+0xc0>)
 800cd34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cd36:	6938      	ldr	r0, [r7, #16]
 800cd38:	f000 f874 	bl	800ce24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cd3c:	4b07      	ldr	r3, [pc, #28]	@ (800cd5c <vPortFree+0xc4>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	3301      	adds	r3, #1
 800cd42:	4a06      	ldr	r2, [pc, #24]	@ (800cd5c <vPortFree+0xc4>)
 800cd44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cd46:	f7fe fc63 	bl	800b610 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cd4a:	bf00      	nop
 800cd4c:	3718      	adds	r7, #24
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	24004c98 	.word	0x24004c98
 800cd58:	24004c88 	.word	0x24004c88
 800cd5c:	24004c94 	.word	0x24004c94

0800cd60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd60:	b480      	push	{r7}
 800cd62:	b085      	sub	sp, #20
 800cd64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cd6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd6c:	4b27      	ldr	r3, [pc, #156]	@ (800ce0c <prvHeapInit+0xac>)
 800cd6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f003 0307 	and.w	r3, r3, #7
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00c      	beq.n	800cd94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	3307      	adds	r3, #7
 800cd7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f023 0307 	bic.w	r3, r3, #7
 800cd86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd88:	68ba      	ldr	r2, [r7, #8]
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	1ad3      	subs	r3, r2, r3
 800cd8e:	4a1f      	ldr	r2, [pc, #124]	@ (800ce0c <prvHeapInit+0xac>)
 800cd90:	4413      	add	r3, r2
 800cd92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd98:	4a1d      	ldr	r2, [pc, #116]	@ (800ce10 <prvHeapInit+0xb0>)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd9e:	4b1c      	ldr	r3, [pc, #112]	@ (800ce10 <prvHeapInit+0xb0>)
 800cda0:	2200      	movs	r2, #0
 800cda2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	68ba      	ldr	r2, [r7, #8]
 800cda8:	4413      	add	r3, r2
 800cdaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cdac:	2208      	movs	r2, #8
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	1a9b      	subs	r3, r3, r2
 800cdb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f023 0307 	bic.w	r3, r3, #7
 800cdba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	4a15      	ldr	r2, [pc, #84]	@ (800ce14 <prvHeapInit+0xb4>)
 800cdc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cdc2:	4b14      	ldr	r3, [pc, #80]	@ (800ce14 <prvHeapInit+0xb4>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cdca:	4b12      	ldr	r3, [pc, #72]	@ (800ce14 <prvHeapInit+0xb4>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	1ad2      	subs	r2, r2, r3
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cde0:	4b0c      	ldr	r3, [pc, #48]	@ (800ce14 <prvHeapInit+0xb4>)
 800cde2:	681a      	ldr	r2, [r3, #0]
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	4a0a      	ldr	r2, [pc, #40]	@ (800ce18 <prvHeapInit+0xb8>)
 800cdee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	4a09      	ldr	r2, [pc, #36]	@ (800ce1c <prvHeapInit+0xbc>)
 800cdf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cdf8:	4b09      	ldr	r3, [pc, #36]	@ (800ce20 <prvHeapInit+0xc0>)
 800cdfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cdfe:	601a      	str	r2, [r3, #0]
}
 800ce00:	bf00      	nop
 800ce02:	3714      	adds	r7, #20
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr
 800ce0c:	2400107c 	.word	0x2400107c
 800ce10:	24004c7c 	.word	0x24004c7c
 800ce14:	24004c84 	.word	0x24004c84
 800ce18:	24004c8c 	.word	0x24004c8c
 800ce1c:	24004c88 	.word	0x24004c88
 800ce20:	24004c98 	.word	0x24004c98

0800ce24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ce2c:	4b28      	ldr	r3, [pc, #160]	@ (800ced0 <prvInsertBlockIntoFreeList+0xac>)
 800ce2e:	60fb      	str	r3, [r7, #12]
 800ce30:	e002      	b.n	800ce38 <prvInsertBlockIntoFreeList+0x14>
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	60fb      	str	r3, [r7, #12]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d8f7      	bhi.n	800ce32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	68ba      	ldr	r2, [r7, #8]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d108      	bne.n	800ce66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	685a      	ldr	r2, [r3, #4]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	441a      	add	r2, r3
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	68ba      	ldr	r2, [r7, #8]
 800ce70:	441a      	add	r2, r3
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d118      	bne.n	800ceac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	4b15      	ldr	r3, [pc, #84]	@ (800ced4 <prvInsertBlockIntoFreeList+0xb0>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d00d      	beq.n	800cea2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	685a      	ldr	r2, [r3, #4]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	441a      	add	r2, r3
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	601a      	str	r2, [r3, #0]
 800cea0:	e008      	b.n	800ceb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cea2:	4b0c      	ldr	r3, [pc, #48]	@ (800ced4 <prvInsertBlockIntoFreeList+0xb0>)
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	601a      	str	r2, [r3, #0]
 800ceaa:	e003      	b.n	800ceb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ceb4:	68fa      	ldr	r2, [r7, #12]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d002      	beq.n	800cec2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cec2:	bf00      	nop
 800cec4:	3714      	adds	r7, #20
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr
 800cece:	bf00      	nop
 800ced0:	24004c7c 	.word	0x24004c7c
 800ced4:	24004c84 	.word	0x24004c84

0800ced8 <_ZN5LidarC1Ev>:
 *      Author: alica
 */
#include "Lidar.hpp"
#include "tim.h"

Lidar::Lidar(){
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	701a      	strb	r2, [r3, #0]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2200      	movs	r2, #0
 800ceea:	705a      	strb	r2, [r3, #1]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2200      	movs	r2, #0
 800cef0:	709a      	strb	r2, [r3, #2]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2200      	movs	r2, #0
 800cef6:	70da      	strb	r2, [r3, #3]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2200      	movs	r2, #0
 800cefc:	605a      	str	r2, [r3, #4]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2200      	movs	r2, #0
 800cf02:	609a      	str	r2, [r3, #8]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2200      	movs	r2, #0
 800cf08:	731a      	strb	r2, [r3, #12]

}
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <_ZN5Lidar12FrameHandlerEPhh>:

void Lidar::FrameHandler(uint8_t* frame, uint8_t size){
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b086      	sub	sp, #24
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	60f8      	str	r0, [r7, #12]
 800cf20:	60b9      	str	r1, [r7, #8]
 800cf22:	4613      	mov	r3, r2
 800cf24:	71fb      	strb	r3, [r7, #7]
    static uint8_t checksum = 0;
    if (size != LIDAR_FRAME_SIZE){
 800cf26:	79fb      	ldrb	r3, [r7, #7]
 800cf28:	2b09      	cmp	r3, #9
 800cf2a:	d003      	beq.n	800cf34 <_ZN5Lidar12FrameHandlerEPhh+0x1c>
        this->status = false;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	731a      	strb	r2, [r3, #12]
        return; // Invalid frame size
 800cf32:	e04f      	b.n	800cfd4 <_ZN5Lidar12FrameHandlerEPhh+0xbc>
    }
    if (frame[0] != LIDAR_FRAME_HEADER && frame[1] != LIDAR_FRAME_HEADER){
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	2b59      	cmp	r3, #89	@ 0x59
 800cf3a:	d008      	beq.n	800cf4e <_ZN5Lidar12FrameHandlerEPhh+0x36>
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	2b59      	cmp	r3, #89	@ 0x59
 800cf44:	d003      	beq.n	800cf4e <_ZN5Lidar12FrameHandlerEPhh+0x36>
        this->status = false;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	731a      	strb	r2, [r3, #12]
        return; // Invalid frame header
 800cf4c:	e042      	b.n	800cfd4 <_ZN5Lidar12FrameHandlerEPhh+0xbc>
    }
    for (uint8_t i = 0; i < (LIDAR_FRAME_SIZE - 1); i++){
 800cf4e:	2300      	movs	r3, #0
 800cf50:	75fb      	strb	r3, [r7, #23]
 800cf52:	e00c      	b.n	800cf6e <_ZN5Lidar12FrameHandlerEPhh+0x56>
        checksum += frame[i];
 800cf54:	7dfb      	ldrb	r3, [r7, #23]
 800cf56:	68ba      	ldr	r2, [r7, #8]
 800cf58:	4413      	add	r3, r2
 800cf5a:	781a      	ldrb	r2, [r3, #0]
 800cf5c:	4b1f      	ldr	r3, [pc, #124]	@ (800cfdc <_ZN5Lidar12FrameHandlerEPhh+0xc4>)
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	4413      	add	r3, r2
 800cf62:	b2da      	uxtb	r2, r3
 800cf64:	4b1d      	ldr	r3, [pc, #116]	@ (800cfdc <_ZN5Lidar12FrameHandlerEPhh+0xc4>)
 800cf66:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < (LIDAR_FRAME_SIZE - 1); i++){
 800cf68:	7dfb      	ldrb	r3, [r7, #23]
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	75fb      	strb	r3, [r7, #23]
 800cf6e:	7dfb      	ldrb	r3, [r7, #23]
 800cf70:	2b07      	cmp	r3, #7
 800cf72:	d9ef      	bls.n	800cf54 <_ZN5Lidar12FrameHandlerEPhh+0x3c>
    }
    if (checksum != frame[LIDAR_FRAME_SIZE - 1]){
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	3308      	adds	r3, #8
 800cf78:	781a      	ldrb	r2, [r3, #0]
 800cf7a:	4b18      	ldr	r3, [pc, #96]	@ (800cfdc <_ZN5Lidar12FrameHandlerEPhh+0xc4>)
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d003      	beq.n	800cf8a <_ZN5Lidar12FrameHandlerEPhh+0x72>
        this->status = false;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2200      	movs	r2, #0
 800cf86:	731a      	strb	r2, [r3, #12]
        return; // Checksum mismatch
 800cf88:	e024      	b.n	800cfd4 <_ZN5Lidar12FrameHandlerEPhh+0xbc>
    }
    checksum = 0;
 800cf8a:	4b14      	ldr	r3, [pc, #80]	@ (800cfdc <_ZN5Lidar12FrameHandlerEPhh+0xc4>)
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	701a      	strb	r2, [r3, #0]

    this->interval_us = micros() - this->flag_us;
 800cf90:	f7f3 ffa2 	bl	8000ed8 <micros>
 800cf94:	4602      	mov	r2, r0
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	689b      	ldr	r3, [r3, #8]
 800cf9a:	1ad2      	subs	r2, r2, r3
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	605a      	str	r2, [r3, #4]
    this->flag_us = micros();
 800cfa0:	f7f3 ff9a 	bl	8000ed8 <micros>
 800cfa4:	4602      	mov	r2, r0
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	609a      	str	r2, [r3, #8]

    this->distance = frame[2] | (frame[3] << 8);
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	3302      	adds	r3, #2
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	b25b      	sxtb	r3, r3
 800cfb2:	b2da      	uxtb	r2, r3
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	701a      	strb	r2, [r3, #0]
    this->strength = frame[4] | (frame[5] << 8);
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	3304      	adds	r3, #4
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	b25b      	sxtb	r3, r3
 800cfc0:	b2da      	uxtb	r2, r3
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	705a      	strb	r2, [r3, #1]
    this->temperature = frame[6] | (frame[7] << 8);
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	3306      	adds	r3, #6
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	b25b      	sxtb	r3, r3
 800cfce:	b2da      	uxtb	r2, r3
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	709a      	strb	r2, [r3, #2]
}
 800cfd4:	3718      	adds	r7, #24
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	24004c9c 	.word	0x24004c9c

0800cfe0 <app_start>:

#define USART2_RX_BUFFER_SIZE 64
uint8_t usart2_rx_buffer[USART2_RX_BUFFER_SIZE];
Lidar lidar;

void app_start(){
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim23);
 800cfe4:	4804      	ldr	r0, [pc, #16]	@ (800cff8 <app_start+0x18>)
 800cfe6:	f7fa fbeb 	bl	80077c0 <HAL_TIM_Base_Start>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, usart2_rx_buffer, USART2_RX_BUFFER_SIZE);
 800cfea:	2240      	movs	r2, #64	@ 0x40
 800cfec:	4903      	ldr	r1, [pc, #12]	@ (800cffc <app_start+0x1c>)
 800cfee:	4804      	ldr	r0, [pc, #16]	@ (800d000 <app_start+0x20>)
 800cff0:	f7fd f8db 	bl	800a1aa <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800cff4:	bf00      	nop
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	24000158 	.word	0x24000158
 800cffc:	24004ca0 	.word	0x24004ca0
 800d000:	240001a4 	.word	0x240001a4

0800d004 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	460b      	mov	r3, r1
 800d00e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a09      	ldr	r2, [pc, #36]	@ (800d03c <HAL_UARTEx_RxEventCallback+0x38>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d10b      	bne.n	800d032 <HAL_UARTEx_RxEventCallback+0x2e>
	  	lidar.FrameHandler(usart2_rx_buffer, Size);
 800d01a:	887b      	ldrh	r3, [r7, #2]
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	461a      	mov	r2, r3
 800d020:	4907      	ldr	r1, [pc, #28]	@ (800d040 <HAL_UARTEx_RxEventCallback+0x3c>)
 800d022:	4808      	ldr	r0, [pc, #32]	@ (800d044 <HAL_UARTEx_RxEventCallback+0x40>)
 800d024:	f7ff ff78 	bl	800cf18 <_ZN5Lidar12FrameHandlerEPhh>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, usart2_rx_buffer, USART2_RX_BUFFER_SIZE);
 800d028:	2240      	movs	r2, #64	@ 0x40
 800d02a:	4905      	ldr	r1, [pc, #20]	@ (800d040 <HAL_UARTEx_RxEventCallback+0x3c>)
 800d02c:	4806      	ldr	r0, [pc, #24]	@ (800d048 <HAL_UARTEx_RxEventCallback+0x44>)
 800d02e:	f7fd f8bc 	bl	800a1aa <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 800d032:	bf00      	nop
 800d034:	3708      	adds	r7, #8
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	40004400 	.word	0x40004400
 800d040:	24004ca0 	.word	0x24004ca0
 800d044:	24004ce0 	.word	0x24004ce0
 800d048:	240001a4 	.word	0x240001a4

0800d04c <_Z41__static_initialization_and_destruction_0v>:
 800d04c:	b580      	push	{r7, lr}
 800d04e:	af00      	add	r7, sp, #0
Lidar lidar;
 800d050:	4802      	ldr	r0, [pc, #8]	@ (800d05c <_Z41__static_initialization_and_destruction_0v+0x10>)
 800d052:	f7ff ff41 	bl	800ced8 <_ZN5LidarC1Ev>
}
 800d056:	bf00      	nop
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	24004ce0 	.word	0x24004ce0

0800d060 <_GLOBAL__sub_I_usart2_rx_buffer>:
 800d060:	b580      	push	{r7, lr}
 800d062:	af00      	add	r7, sp, #0
 800d064:	f7ff fff2 	bl	800d04c <_Z41__static_initialization_and_destruction_0v>
 800d068:	bd80      	pop	{r7, pc}

0800d06a <memset>:
 800d06a:	4402      	add	r2, r0
 800d06c:	4603      	mov	r3, r0
 800d06e:	4293      	cmp	r3, r2
 800d070:	d100      	bne.n	800d074 <memset+0xa>
 800d072:	4770      	bx	lr
 800d074:	f803 1b01 	strb.w	r1, [r3], #1
 800d078:	e7f9      	b.n	800d06e <memset+0x4>
	...

0800d07c <_reclaim_reent>:
 800d07c:	4b2d      	ldr	r3, [pc, #180]	@ (800d134 <_reclaim_reent+0xb8>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4283      	cmp	r3, r0
 800d082:	b570      	push	{r4, r5, r6, lr}
 800d084:	4604      	mov	r4, r0
 800d086:	d053      	beq.n	800d130 <_reclaim_reent+0xb4>
 800d088:	69c3      	ldr	r3, [r0, #28]
 800d08a:	b31b      	cbz	r3, 800d0d4 <_reclaim_reent+0x58>
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	b163      	cbz	r3, 800d0aa <_reclaim_reent+0x2e>
 800d090:	2500      	movs	r5, #0
 800d092:	69e3      	ldr	r3, [r4, #28]
 800d094:	68db      	ldr	r3, [r3, #12]
 800d096:	5959      	ldr	r1, [r3, r5]
 800d098:	b9b1      	cbnz	r1, 800d0c8 <_reclaim_reent+0x4c>
 800d09a:	3504      	adds	r5, #4
 800d09c:	2d80      	cmp	r5, #128	@ 0x80
 800d09e:	d1f8      	bne.n	800d092 <_reclaim_reent+0x16>
 800d0a0:	69e3      	ldr	r3, [r4, #28]
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	68d9      	ldr	r1, [r3, #12]
 800d0a6:	f000 f87b 	bl	800d1a0 <_free_r>
 800d0aa:	69e3      	ldr	r3, [r4, #28]
 800d0ac:	6819      	ldr	r1, [r3, #0]
 800d0ae:	b111      	cbz	r1, 800d0b6 <_reclaim_reent+0x3a>
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	f000 f875 	bl	800d1a0 <_free_r>
 800d0b6:	69e3      	ldr	r3, [r4, #28]
 800d0b8:	689d      	ldr	r5, [r3, #8]
 800d0ba:	b15d      	cbz	r5, 800d0d4 <_reclaim_reent+0x58>
 800d0bc:	4629      	mov	r1, r5
 800d0be:	4620      	mov	r0, r4
 800d0c0:	682d      	ldr	r5, [r5, #0]
 800d0c2:	f000 f86d 	bl	800d1a0 <_free_r>
 800d0c6:	e7f8      	b.n	800d0ba <_reclaim_reent+0x3e>
 800d0c8:	680e      	ldr	r6, [r1, #0]
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	f000 f868 	bl	800d1a0 <_free_r>
 800d0d0:	4631      	mov	r1, r6
 800d0d2:	e7e1      	b.n	800d098 <_reclaim_reent+0x1c>
 800d0d4:	6961      	ldr	r1, [r4, #20]
 800d0d6:	b111      	cbz	r1, 800d0de <_reclaim_reent+0x62>
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f000 f861 	bl	800d1a0 <_free_r>
 800d0de:	69e1      	ldr	r1, [r4, #28]
 800d0e0:	b111      	cbz	r1, 800d0e8 <_reclaim_reent+0x6c>
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	f000 f85c 	bl	800d1a0 <_free_r>
 800d0e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d0ea:	b111      	cbz	r1, 800d0f2 <_reclaim_reent+0x76>
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	f000 f857 	bl	800d1a0 <_free_r>
 800d0f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d0f4:	b111      	cbz	r1, 800d0fc <_reclaim_reent+0x80>
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f000 f852 	bl	800d1a0 <_free_r>
 800d0fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d0fe:	b111      	cbz	r1, 800d106 <_reclaim_reent+0x8a>
 800d100:	4620      	mov	r0, r4
 800d102:	f000 f84d 	bl	800d1a0 <_free_r>
 800d106:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d108:	b111      	cbz	r1, 800d110 <_reclaim_reent+0x94>
 800d10a:	4620      	mov	r0, r4
 800d10c:	f000 f848 	bl	800d1a0 <_free_r>
 800d110:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d112:	b111      	cbz	r1, 800d11a <_reclaim_reent+0x9e>
 800d114:	4620      	mov	r0, r4
 800d116:	f000 f843 	bl	800d1a0 <_free_r>
 800d11a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d11c:	b111      	cbz	r1, 800d124 <_reclaim_reent+0xa8>
 800d11e:	4620      	mov	r0, r4
 800d120:	f000 f83e 	bl	800d1a0 <_free_r>
 800d124:	6a23      	ldr	r3, [r4, #32]
 800d126:	b11b      	cbz	r3, 800d130 <_reclaim_reent+0xb4>
 800d128:	4620      	mov	r0, r4
 800d12a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d12e:	4718      	bx	r3
 800d130:	bd70      	pop	{r4, r5, r6, pc}
 800d132:	bf00      	nop
 800d134:	24000014 	.word	0x24000014

0800d138 <__libc_init_array>:
 800d138:	b570      	push	{r4, r5, r6, lr}
 800d13a:	4d0d      	ldr	r5, [pc, #52]	@ (800d170 <__libc_init_array+0x38>)
 800d13c:	4c0d      	ldr	r4, [pc, #52]	@ (800d174 <__libc_init_array+0x3c>)
 800d13e:	1b64      	subs	r4, r4, r5
 800d140:	10a4      	asrs	r4, r4, #2
 800d142:	2600      	movs	r6, #0
 800d144:	42a6      	cmp	r6, r4
 800d146:	d109      	bne.n	800d15c <__libc_init_array+0x24>
 800d148:	4d0b      	ldr	r5, [pc, #44]	@ (800d178 <__libc_init_array+0x40>)
 800d14a:	4c0c      	ldr	r4, [pc, #48]	@ (800d17c <__libc_init_array+0x44>)
 800d14c:	f000 f87e 	bl	800d24c <_init>
 800d150:	1b64      	subs	r4, r4, r5
 800d152:	10a4      	asrs	r4, r4, #2
 800d154:	2600      	movs	r6, #0
 800d156:	42a6      	cmp	r6, r4
 800d158:	d105      	bne.n	800d166 <__libc_init_array+0x2e>
 800d15a:	bd70      	pop	{r4, r5, r6, pc}
 800d15c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d160:	4798      	blx	r3
 800d162:	3601      	adds	r6, #1
 800d164:	e7ee      	b.n	800d144 <__libc_init_array+0xc>
 800d166:	f855 3b04 	ldr.w	r3, [r5], #4
 800d16a:	4798      	blx	r3
 800d16c:	3601      	adds	r6, #1
 800d16e:	e7f2      	b.n	800d156 <__libc_init_array+0x1e>
 800d170:	0800d2f4 	.word	0x0800d2f4
 800d174:	0800d2f4 	.word	0x0800d2f4
 800d178:	0800d2f4 	.word	0x0800d2f4
 800d17c:	0800d2fc 	.word	0x0800d2fc

0800d180 <__retarget_lock_acquire_recursive>:
 800d180:	4770      	bx	lr

0800d182 <__retarget_lock_release_recursive>:
 800d182:	4770      	bx	lr

0800d184 <memcpy>:
 800d184:	440a      	add	r2, r1
 800d186:	4291      	cmp	r1, r2
 800d188:	f100 33ff 	add.w	r3, r0, #4294967295
 800d18c:	d100      	bne.n	800d190 <memcpy+0xc>
 800d18e:	4770      	bx	lr
 800d190:	b510      	push	{r4, lr}
 800d192:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d196:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d19a:	4291      	cmp	r1, r2
 800d19c:	d1f9      	bne.n	800d192 <memcpy+0xe>
 800d19e:	bd10      	pop	{r4, pc}

0800d1a0 <_free_r>:
 800d1a0:	b538      	push	{r3, r4, r5, lr}
 800d1a2:	4605      	mov	r5, r0
 800d1a4:	2900      	cmp	r1, #0
 800d1a6:	d041      	beq.n	800d22c <_free_r+0x8c>
 800d1a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1ac:	1f0c      	subs	r4, r1, #4
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	bfb8      	it	lt
 800d1b2:	18e4      	addlt	r4, r4, r3
 800d1b4:	f000 f83e 	bl	800d234 <__malloc_lock>
 800d1b8:	4a1d      	ldr	r2, [pc, #116]	@ (800d230 <_free_r+0x90>)
 800d1ba:	6813      	ldr	r3, [r2, #0]
 800d1bc:	b933      	cbnz	r3, 800d1cc <_free_r+0x2c>
 800d1be:	6063      	str	r3, [r4, #4]
 800d1c0:	6014      	str	r4, [r2, #0]
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1c8:	f000 b83a 	b.w	800d240 <__malloc_unlock>
 800d1cc:	42a3      	cmp	r3, r4
 800d1ce:	d908      	bls.n	800d1e2 <_free_r+0x42>
 800d1d0:	6820      	ldr	r0, [r4, #0]
 800d1d2:	1821      	adds	r1, r4, r0
 800d1d4:	428b      	cmp	r3, r1
 800d1d6:	bf01      	itttt	eq
 800d1d8:	6819      	ldreq	r1, [r3, #0]
 800d1da:	685b      	ldreq	r3, [r3, #4]
 800d1dc:	1809      	addeq	r1, r1, r0
 800d1de:	6021      	streq	r1, [r4, #0]
 800d1e0:	e7ed      	b.n	800d1be <_free_r+0x1e>
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	b10b      	cbz	r3, 800d1ec <_free_r+0x4c>
 800d1e8:	42a3      	cmp	r3, r4
 800d1ea:	d9fa      	bls.n	800d1e2 <_free_r+0x42>
 800d1ec:	6811      	ldr	r1, [r2, #0]
 800d1ee:	1850      	adds	r0, r2, r1
 800d1f0:	42a0      	cmp	r0, r4
 800d1f2:	d10b      	bne.n	800d20c <_free_r+0x6c>
 800d1f4:	6820      	ldr	r0, [r4, #0]
 800d1f6:	4401      	add	r1, r0
 800d1f8:	1850      	adds	r0, r2, r1
 800d1fa:	4283      	cmp	r3, r0
 800d1fc:	6011      	str	r1, [r2, #0]
 800d1fe:	d1e0      	bne.n	800d1c2 <_free_r+0x22>
 800d200:	6818      	ldr	r0, [r3, #0]
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	6053      	str	r3, [r2, #4]
 800d206:	4408      	add	r0, r1
 800d208:	6010      	str	r0, [r2, #0]
 800d20a:	e7da      	b.n	800d1c2 <_free_r+0x22>
 800d20c:	d902      	bls.n	800d214 <_free_r+0x74>
 800d20e:	230c      	movs	r3, #12
 800d210:	602b      	str	r3, [r5, #0]
 800d212:	e7d6      	b.n	800d1c2 <_free_r+0x22>
 800d214:	6820      	ldr	r0, [r4, #0]
 800d216:	1821      	adds	r1, r4, r0
 800d218:	428b      	cmp	r3, r1
 800d21a:	bf04      	itt	eq
 800d21c:	6819      	ldreq	r1, [r3, #0]
 800d21e:	685b      	ldreq	r3, [r3, #4]
 800d220:	6063      	str	r3, [r4, #4]
 800d222:	bf04      	itt	eq
 800d224:	1809      	addeq	r1, r1, r0
 800d226:	6021      	streq	r1, [r4, #0]
 800d228:	6054      	str	r4, [r2, #4]
 800d22a:	e7ca      	b.n	800d1c2 <_free_r+0x22>
 800d22c:	bd38      	pop	{r3, r4, r5, pc}
 800d22e:	bf00      	nop
 800d230:	24004e2c 	.word	0x24004e2c

0800d234 <__malloc_lock>:
 800d234:	4801      	ldr	r0, [pc, #4]	@ (800d23c <__malloc_lock+0x8>)
 800d236:	f7ff bfa3 	b.w	800d180 <__retarget_lock_acquire_recursive>
 800d23a:	bf00      	nop
 800d23c:	24004e28 	.word	0x24004e28

0800d240 <__malloc_unlock>:
 800d240:	4801      	ldr	r0, [pc, #4]	@ (800d248 <__malloc_unlock+0x8>)
 800d242:	f7ff bf9e 	b.w	800d182 <__retarget_lock_release_recursive>
 800d246:	bf00      	nop
 800d248:	24004e28 	.word	0x24004e28

0800d24c <_init>:
 800d24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d24e:	bf00      	nop
 800d250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d252:	bc08      	pop	{r3}
 800d254:	469e      	mov	lr, r3
 800d256:	4770      	bx	lr

0800d258 <_fini>:
 800d258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d25a:	bf00      	nop
 800d25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d25e:	bc08      	pop	{r3}
 800d260:	469e      	mov	lr, r3
 800d262:	4770      	bx	lr
